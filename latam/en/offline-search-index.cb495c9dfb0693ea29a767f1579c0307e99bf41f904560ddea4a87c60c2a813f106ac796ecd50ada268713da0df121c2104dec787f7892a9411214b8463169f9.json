[{"body":"Considerations  The option to sign in using Google accounts is not available when using browsers in incognito mode. You must have a user entitled to at least an account and merchant registered using a Google e-mail address. Even though you use your Google account to sign in, you can still using the credentials you created when you created your account.  Signing in using a Google account  Go to www.payu.com. At the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.  Click the Sign in with Google button.  A pop up window appear to sign in using Google accounts. First, provide your e-mail or phone number used to authenticate in your Google account.  Provide the password of your Google account.  If your user can access to more than one merchant, click it to access it. Otherwise, you are redirected to the default merchant.  As soon as you log in, you can use all the available options to manage your PayU account.  ","excerpt":"Considerations  The option to sign in using Google accounts is not available when using browsers in …","ref":"/payu-module-documentation/getting-started/log-in/google-accounts.html","title":"Log in using Google Accounts"},{"body":"Follow the next steps to log in your PayU account.\n Go to www.payu.com. At the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.  Log in to your PayU account by using the credentials we sent to your registered e-mail.  If your user can access to more than one merchant, click it to access it. Otherwise, you are redirected your merchant.  As soon as you log in, you can use all the available options to manage your PayU account.  ","excerpt":"Follow the next steps to log in your PayU account.\n Go to www.payu.com. At the top right corner, you …","ref":"/payu-module-documentation/getting-started/log-in.html","title":"Log In"},{"body":" Note The Sales Report displayed in the merchant panel are limited to 20 thousand rows for both displaying and downloading. If you need display more rows or columns in the report, contact your sales representative.  Permission required To have access to this module, you need to have a profile with the Reports \u0026gt; Sales Report permission enabled.\nRefer to Profiles and Permissions for more information.\nConsult the report Log into your PayU account. In the left menu, expand the Transactions menu and select Sales Report.\nIn the report, you can see a filter box, and the list of your latest sales. By default, the report shows the sales information* of the last seven days, from the most recent to the oldest.\n*Limited to top 20 thousand records.\nThe report has the following columns:\n   Column Description     Order This column shows the identifier of the order along with the date of the sale.   Reference This column shows the sale reference and the name of the product or service offered.   Buyer This column shows the name and the e-mail address of the person who preform the buy.   Amount Amount of the sale.   Payment method Information of the payment method used by the buyer.   Status Current status of the order.    Note If you need to display more information, contact your sales representative.  Refer to Order details to know all the transaction detail of the sale.\nFilter the report You can use the search bar above the graph or the calendar to set filters. You can filter by Reference, Order, Buyer, Amount, status, or Payment method.\nTo set a filter, click the Filter my sales field at the top of the report table.\nConfigure the values for the filters and click Search. Once you click it, the filter table shows the sales that meet the selected criteria.\nAlong with these filters, you can also set a time frame when the buyer performed the sale using the dates filter at the top right corner. The date frame defined here.\nThe date range of this filter is one (1) month before the end date. If you exceed this range, The report displays the information of one (1) month after the start date.\nTo see the information of a given date, set it for both start and end date.\nTransaction details You can review the transaction detail online. To do this, click the order you want to consult in the report table. The transaction details appears in the right panel.\nThe Transaction details panel has the following sections:\n     Name Description     1 Order info This section shows the Order Id, its latest update date, its status along with the status description, and the sale reference.   2 Product or service Description of the product or service you provided in the sale.   3 Payment method Information of the Payment method used in the purchase. The information displayed in this section varies according to the payment method.\nFor pending cash payments, this section lets you see the payment receipt generated to the buyer.   4 Values This section shows the values involved in this transaction such as the Value to charge (or charged), Pending value, Refunded value (for refunds), Expired value (for cash payments).   5 Buyer info Information of the person who performed the purchase.   6 Delivery info Information of the delivery options.   7 This purchase had Transactions associated to this purchase. Click the ▾ symbol to find details of each transaction.\n   8 Actions Actions available over the actions.    Transaction history When you expand the This purchase had section, you can see the details of each transaction associated to an order.\nThe information available includes the values debited from your account, the payment method, the payer information and more.\nDownload the report To download the report, click the Download button located at the top or at the bottom of the report table.\nA pop up window appear where you can select the options to generate the report:\n Report: lets you generate a report with the status of the orders and the final status of the last transaction or attempted purchase related to that order. Balance from previous secure: lets you generate a report with all the transactions and shows the information of the buyer and payer (e-mail, name, document number)*.  Note * If the file format does not meet the your needs, contact your sales executive to know more about the option to send files through SFTP and the templates that we have for this report.  The report is automatically downloaded in an Excel (.csv) format. The name of the report uses the following formats:\n Report option: [DownloadDateInMillis]_orders_[AccountId].csv Balance from previous secure option: [AccountId]_[DownloadDate]_transactions.csv*  * Download date in format dd-mm-yy-hh-mm-ss\nDownload an example of the generated file using the Report option.  Download an example of the generated file using the Balance from previous secure option.   Note The generated report is stored during 90 days in the My downloaded reports section.  ","excerpt":"Note The Sales Report displayed in the merchant panel are limited to 20 thousand rows for both …","ref":"/payu-module-documentation/reports/sales-report.html","title":"Sales Report"},{"body":"Currently, e-commerce it\u0026rsquo;s no longer a taboo. Before, people used to think that selling online require a high technical knowledge and programming skills.\nNevertheless, beyond the knowledge, the key is to have the best allies and, mainly, use the best strategies that allows the growth of your product.\nPayU offers the best payment gateway to help your shop sell online even if your don\u0026rsquo;t have a web page.\nHow to sell using PayU? Through PayU Module, you have the tools to start selling online fast and easy, no matter if you don\u0026rsquo;t have a web page.\nTo sell with PayU, you just need an active account in the PayU Module and configure the tool to receive the payment.\nWhat tools are available? There are two options to create payments using the PayU Module:\nPayment request Generate Payment requests which can be shared via email, chats, social networks, or included as a button for your webpage (if you own one).\nLearn more about Payment request  Payment coupons Generate payment coupons and collection cards with the necessary information to let your clients make cash payments as many times as they need in the available payment points.\nLearn more about Payment coupons    Note Review Integrations if you already have a web page and you want to integrate with the PayU services.  ","excerpt":"Currently, e-commerce it\u0026rsquo;s no longer a taboo. Before, people used to think that selling online …","ref":"/payu-module-documentation/payu-operations/sell-with-payu.html","title":"Sell With PayU"},{"body":"Before moving on, let\u0026rsquo;s recap some key terms:\n A user is a person who has a profile to manage or consult the information of an account. A profile is a set of permissions to access an account. A user can have one or multiple profiles, this means that a user can access multiple accounts and multiple merchants.  For further information, read the concepts behind the PayU Module.\nPermission required To have access to this module, you need to have a profile with the following permission enabled:\n Review Users\nThis permission allows you to search a specified user. Create, edit and delete users  Refer to Profiles and Permissions for more information.\nUser management To manage users, open you PayU account and click Settings menu at the top the screen and then, select User management.\nThe User management module opens, here, you can find a list of the available users along with their status, the accounts they can access, and their profile.\nNote The users marked with a green star () are default users which cannot be deleted (deactivated).  Add users You can create a user using their e-mail address or providing a username. Follow the steps below to create a new user.\n In the User management module, click Add user.  The Add user window appears. Here, you can provide the information of the person who will be allowed to collect payments over the internet and check information about your payments, according to the permission you provide.  Provide the following user information:   E-mail: E-mail address of the new user. PayU sends the login information to this e-mail address, make sure it is valid and the user has access to it.\nAlternatively, you can create a user without using an e-mail address. This is useful specially when the user you want to create is attached to a role and not to a specific person. To do this, click Don\u0026rsquo;t have an e-mail? and provide the following information:  User: username used to log in. This user name cannot have numbers nor special characters. E-mail (Admin): provide the e-mail of the admin user to which, PayU send the options to generate or recover the password for this user.   Full name: name of the user you want to create. Status: set if the user you want to create is Active or Inactive.  Configure the user preferences. You can configure any of the following:   Date format: change the format in which you want to display the dates in your PayU Module,  You can use any of the following formats:\n   Format English Format Example\nAugust 24, 2021     dd/mm/aaaa dd/mm/yyyy 24/08/2021   mm/dd/aaaa mm/dd/yyyy 08/24/2021   aaaa/mm/dd yyyy/mm/dd 2021/08/24   aaaa/mmm/dd yyyy/mmm/dd 2021/Aug/24   dd-mm-aaaa dd-mm-yyyy 24-08-2021   mm-dd-aaaa mm-dd-yyyy 08-24-2021   aaaa-mm-dd yyyy-mm-dd 2021-08-24   aaaa-mmm-dd yyyy-mmm-dd 2021-Aug-24     Time Zone: change the time zone of the country in which you want to display the transaction’s information.   Currency format: change the display format of the currency values shown in your PayU module.   Language: change the language of your PayU module.  At the bottom of the screen, all the profiles created (both default and custom) loads along with the accounts of the current merchant. Configure the access for each account setting a profile, if you don\u0026rsquo;t want to enable access to an account, don\u0026rsquo;t select a profile.  Note If you want to assign a custom profile, you must create it first.  Once finish, click Add user.  At this point, you have added the new user! We sent an e-mail to user address so they can access the PayU module.\nThe new user has to activate the account using the Activate your account button in the e-mail.  Note If the user was created without using e-mail, the instructions to activate the account are sent to the Admin e-mail you defined.  The new user needs to set a new password to access the account.  Once the user sets the new password, they can access to the selected accounts using their credentials.  Search users When you need to find a specific user, you can use the filter options to find one or more users that meet given conditions.\nIn the User management module, click the Search users field to see the available filters.\nOnce you have selected the filters, click Search. All the users that meets the conditions selected are displayed in the table.\nIf you want to remove a filter, click the x icon next to it.\nEdit users Through the User management module, you can update some information of a user. To update a user, search and click it in the User management module.\nYou can update the following information:\n Full name of a user Request a password recovery. Update the user status (Active or Inactive) Change or remove the profile assigned to a given account.  Note The information of the user preferences cannot be updated using this option, this information is updated by each user by their own.  Once finish, click Save setting to apply the changes.\nEdit multiple users To edit multiple users, search them and use the checkbox at the left. Then, click Edit users (n).\nThe Edit users (n) window appears, where you can update the following information:\n Request a password recovery for all the users. Update their user status (Active or Inactive) Assign a profile to a given account.  Take into account that using this option, all the users will have the same configuration you define here.\nOnce finish, click Save setting to apply the changes.\n","excerpt":"Before moving on, let\u0026rsquo;s recap some key terms:\n A user is a person who has a profile to manage …","ref":"/payu-module-documentation/user-and-profile-management/user-management.html","title":"User Management"},{"body":" Note Once your account has been validated and activated, your contact, business, and sales information cannot be updated using the PayU module. If you need to update this information, contact sac@payu.com.  Change password Follow these steps to change your current password.\n At the top right corner, click the ▾ symbol next to your e-mail address to display the available user settings.\nClick My profile.  In the My profile screen, click Change password.  The Change password panel appears. You must enter here the current password and enter the new password twice.  Once finish, click Save changes at the footer of the section. Otherwise, click Discard changes to close the Change password panel and discard the change of your password.  Update your user preferences In this section, you can change the display settings of the information displayed in your module, such as the date format, time zone of your country, the currency format and the display language.\nTo do this, click the ▾ symbol next to your e-mail address to display the available user settings. Then, click My profile.\nIn the My profile screen, locate the Preferences panel.\nAt the top of the panel, you see an example of the current date and time of the time zone selected and displayed in the format your choose.\nDate format Change the format in which you want to display the dates in your PayU Module,\nYou can use any of the following formats:\n   Format English Format Example\nAugust 24, 2021     dd/mm/aaaa dd/mm/yyyy 24/08/2021   mm/dd/aaaa mm/dd/yyyy 08/24/2021   aaaa/mm/dd yyyy/mm/dd 2021/08/24   aaaa/mmm/dd yyyy/mmm/dd 2021/Aug/24   dd-mm-aaaa dd-mm-yyyy 24-08-2021   mm-dd-aaaa mm-dd-yyyy 08-24-2021   aaaa-mm-dd yyyy-mm-dd 2021-08-24   aaaa-mmm-dd yyyy-mmm-dd 2021-Aug-24    Time Zone Change the time zone of the country in which you want to display the transaction’s information.\nCurrency format Change the display format of the currency values shown in your PayU module.\nLanguage Change the language of your PayU module.\nNote After changing any of the user settings, do not forget to click Save changes button at the footer of the section to apply the changes.  Change your logo Using the PayU module, you can upload the logo of your merchant so it can be displayed in our Web checkout.\nTo upload or update your logo, follow these steps.\n In the account options, expand the current account using the the ▾ symbol. Then, select .  In the Your sales information window, find the Merchant logo field.\nIf you have not uploaded a logo yet, click the Select your logo link. Otherwise, use the Change logo link.   The upload panel appears, locate the image of your logo in your local machine.\n  The maximum size allowed for your logo is 350x90 pixels, if the selected image is bigger than this size, you can crop it using the upload panel. Furthermore, this panel provides options to zoom in or rotate the image.\nWhen finish, click Save.\n  Request the change of your bank account Once your account has been verified by our Risk team, you can request the update of your bank information. Due to security reasons, the update of bank information must be verified again as when you create the account.\nTo request the update of your Bank account, expand Transfers option at the left menu. Then, select Edit bank details.\nThe Bank information option opens, click the Edit link to enable the fields of the bank account.\nProvide the information related to your Bank Account such as: country, bank, account number, etc.\nConsiderations  The information available depends on the country of your account. If the Bank account is foreign, you must provide the information of the Intermediary bank such as its name, the ABA code, and the Swift code.   Along with the information you provide, you need to attach a certification issued by your bank to proof the veracity and authenticity of the information.\nWhen finish, click Save changes. When the information is submitted, you are prompted about the result of the operation.\nFurthermore, you receive an e-mail informing the request and providing a ticket number.\nThe procedure to validate your account take up two working days. In the meantime, the information you provide is loaded in the Bank account under analysis panel.\nAs soon as your bank account information has been validated by our Risk team, you can transfer to it the funds collected in your PayU account. While the new account is under validation, the transfers you make are sent to the former bank account.\n","excerpt":"Note Once your account has been validated and activated, your contact, business, and sales …","ref":"/payu-module-documentation/getting-started/understanding-the-payu-module/update-my-information.html","title":"Update my information"},{"body":"Prerequisites  You need an active account in PayU Latam. You need a valid plan in Shopify. Checkout is not available in Trial plans.  Order management in Shopify Take into account the following when managing orders in Shopify:\n All orders: are the orders with state Approved (fully or partially paid) and Pending (while the payer backs to the store after processing the payment in the gateway). Abandoned checkouts: are payment procedures which meet any of the following criteria:  Uncompleted checkouts. Checkouts abandoned during the payment process. Transactions with Rejected state. Transactions with Pending state as long as the payer does not return to the store after processing the payment in the gateway:\n4.1. Cash Payments (always return Pending state).\n4.2. Credit Card payments that are subject to fraud analysis.    Note  Shopify DOES NOT make any stock reservation or for any of these two cases. Shopify creates the order for these two cases when the final state of the transaction is Approved.   Enable PayU as Payment gateway  Enter to your Shopify admin site. Click Settings and then, select Payments.  Go to the Third-party providers section and click Choose third-party provider.  In the list, find and click the PayU Latam gateway.  Provide the following information of your PayU account:   Account Id (1): ID of the PayU account according to the country where you want to sell. Api Key (2): Unique key of your commerce, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; API Key).  Finally, click Activate PayU Latam button at the bottom of the page.  Open the PayU module and go to the Configuration options (Settings \u0026gt; Technical configuration). Then, disable the validation of unique reference for all states, to avoid issues at the moment of processing your payments.  At this point, your customers can make payments through the PayU Checkout. They are able to pay using payment options including cash, credit cards and bank transfers, depending on the country where you are selling.\nPayment flow in Shopify When you configure PayU as payment gateway in platform, your customer can pay as explained below.\n Your customer selects the product or service they want to buy and add it to their shopping cart.  In the shopping cart, you customer proceeds to the check out.  Once your customer provides their information, they can click Complete order to be redirected to PayU Latam to complete the payment.  When they are in our payment gateway, they can see the sale description and the available payment methods for your country.  ","excerpt":"Prerequisites  You need an active account in PayU Latam. You need a valid plan in Shopify. Checkout …","ref":"/docs/tools/shopping-cart-plugins/shopify.html","title":"Shopify"},{"body":"To integrate with Payments SDK Argentina, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit card This method lets you process the payments performed by your customers using credit cards. For Argentina, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Argentina. For payments with Promotions, set the parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. Promotions feature is only available for one-step flows. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE. When using credit cards, take into account the considerations due to Argentinian regulations for the check out page. Due to Tax regulations, it is mandatory to set the parameters PAYER_STATE and PAYER_DNI_TYPE.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s DNI type here parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 14 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); //Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); //Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, //Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, //Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s DNI type here parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Installments When processing transactions with credit cards, you need to show the following aspects to your customer when processing installments:\nWhere:\n   Number in the screen Option Description     1 Total purchase Total amount of the purchase without financing.   2 Total payment Total amount financed of the purchase.   3 Installments Number of installments and their amount.   4 TEA The annual effective interest rate (TEA) applied.   5 CFT The total financial cost (CFT).    The information of the total financial cost (CFT) must comply with the following directions:\n  Must be located next to the reported variables.\n  Must appear in a prominent color typeface using the same font and size of at least five times bigger than the one used to inform the annual effective interest rate (TEA), the number of installments, and their amount.\n  According to the current regulations, you cannot use the phrase without interest (in Spanish, \u0026ldquo;sin interés\u0026rdquo;) or any other similar phrase, when the financial cost of the product or service is transferred to the customer\u0026rsquo;s selling price.\nSubmit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  Send a valid cash Payment Method in the request, see the available Payment Methods for Argentina. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is 15 days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The response returns the following extra parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. Refer to the examples    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s DNI type here parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PAGOFACIL\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Payer IP. parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request. TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the cash payment method name here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PAGOFACIL\u0026#34;, // Enter the payment due date \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Argentina, target the requests to the following URLs:\n Java PHP   // …","ref":"/docs/integrations/sdk-integration/payments-sdk-argentina.html","title":"Payments SDK - Argentina"},{"body":"You can send your payment request via e-mail or generate a link to share it in chat rooms or social networks. Once your customer receives your payment request, they can make the payment through our secure payment system.\nWith the Payment Request, you have the following benefits:\n Sell online regardless if you don\u0026rsquo;t have a website using e-mail, social networks or, message exchange platforms. Offer several payment methods. Discriminate the payments you receive so you can know who pays what and when.  How does the Payment request work? The Payment request follows a simple flow to let your customers buy your products or services using the secure PayU platform:\n  Generate the Payment request through the PayU module. For a basic payment request, you only need to provide what you want to sell, its price, and decide whether your payment includes taxes or an expiration date. If you want to include additional information such as shipping, payment reference, comments, and more, you can create a Custom payment request.\n  Once the link has been generated, you can share it with your customers either by e-mail, posting the link on social networks, or including this link as a button in your website (if you have one).\n  When your customers use the link, they are redirected to the PayU\u0026rsquo;s checkout page, where they can pay using any of the available payment methods.\n  Every time a customer pays using the link, you receive a confirmation message and the amount of the purchase* is transferred to your PayU account, where you can transfer it to your bank account.\n  *The value transferred corresponds to the amount paid by your customer minus the PayU fee.\nCreating payment requests According to your business needs, you can create two types of Payment requests: Basic and Custom.\nA Basic Payment Request lets you create a link just by providing the product\u0026rsquo;s name and price; furthermore, you can decide whether you need to include taxes or whether the link may expire in the future. The Custom Payment Request is a payment link with extra information such as shipping information, payment reference, response pages, comments or narrow down the available payment methods.\nCreate a Basic Payment Request Follow the next procedure to create a Basic Payment Request and share it with your customers.\n  Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\n  Expand the Sell with PayU option and then, select Sell on the internet.\n  Provide the following information:   What are you going to sell?: description of the product or service you want to sell using this payment request. What is the price?: provide the amount of the product or service and select the currency.   Do you charge tax?: choose if the product price includes taxes. If so, select the percentage or fixed amount of the taxes.   Payment deadline: choose if the Payment request expires in a given time. If so, select the date and time when the Payment request expires.  Click Generate Link.  Create a Custom Payment Request Follow the next procedure to create a Basic Payment Request and share it with your customers.\n  Follow steps 1 to 3 of the Create a Basic Payment Request procedure.\n  Click I want to customize my link option. The advanced options appears where you can provide the following information.\n   Do you ship your products: this option lets you select whether the shipping information of the product is included in the link. When selecting YES, you can set a fixed shipping amount, and select if the customer must provide the shipping address.   Payment reference: this option lets you decide if you want to set a specific Payment reference for the link.   Transaction redirects: in this option you can set the URLs of the customized response pages you have when a transaction is approved, declined or pending. These fields are not mandatory and if you don\u0026rsquo;t set a URL, the transaction is redirected to the default PayU\u0026rsquo;s response pages.   Buyer comments: this option allows the buyer to add comments related to the purchase. The field where the buyer can add comments can be set in English, Spanish or Portuguese.\nFor example, you can configure this field to let the customer specify a particular description of the product.   Select the available payment methods: this option lets you include or exclude the available payment methods according to your country. For example, if you only want to receive payments through credit cards.\nBy default, all the available payment methods of your country are selected.  Click Generate Link.  Sharing the Payment request After you have configured and generated the Payment request, a confirmation page appears where you can perform the following actions:\n Share on social media with a link: using this option, you can copy the recently generated link, post it on Facebook, tweet it on Twitter or send it to several e-mail addresses.  Note When selecting Facebook or Twitter, you will be prompted to provide the credentials of the account where you want to publish the link.   Publish a button in my webpage: if you have a webpage and you want to include the generated link, PayU lets you create a button which you can added somewhere in your page. You can use any of the preloaded images provided by PayU or upload one using the Custom image option.\nThen, click Copy HTML to copy the button code in your clipboard.  Creating multiple Payment requests The PayU module allows you to create multiple payment request at one time so you can easily include several products in your shop. Links created using this feature can only be sent via e-mail.\nTo create multiple payment links, expand the Sell with PayU option and then, select Sell on the internet. Then, select the option Create multiple payment links.\nTo create multiple payment links at once, you just need to upload a .csv file with all the information of each product you want to sell. You can download an example of how PayU expects the information by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a link. The following table explains each column in it. Recall that the columns marked with asterisk are mandatory and if you leave empty a column, this property is not included in the link.\n   Name Column Description     Buyer\u0026rsquo;s e-mail A The e-mail address to which the Payment link will be sent.   What are you going to sell? B Name or description of the product you want to sell.   What does the product cost? C Price of the product you offer.   Currency D Currency of the product\u0026rsquo;s amount.\nPossible values: COP, USD, PEN, ARS, BRL, and MXN   Tax type E Let\u0026rsquo;s you define if you include taxes in your product.Set Fijo to add a fixed value.Set Porcentaje to add a percentage value.   Tax value F Value of the tax according to the tax type specified.   Due date G Set the due date of the link using the format dd/MM/yy HH:mm.   Redirect on success H Set the URL to which you customers will be redirected when the transaction is successful.   Redirect on failure I Set the URL to which you customers will be redirected when the transaction fails.   Redirect on pending J Set the URL to which you customers will be redirected when the transaction is pending.   Ask for shipping address K Set Si to request delivery address to the payer. Otherwise, set No or leave it empty.   Shipping value L Set a fixed value for shipping in the same currency of the product price.   Let payers add comments M Set Si to let the payers add comments. Otherwise, set No or leave it empty.   Label for payer\u0026rsquo;s comments (ES) N Set the label for the payer\u0026rsquo;s comments field in Spanish.   Label for payer\u0026rsquo;s comments (EN) O Set the label for the payer\u0026rsquo;s comments field in English.   Label for payer\u0026rsquo;s comments (PT) P Set the label for the payer\u0026rsquo;s comments field in Portuguese.   Extra 1 Q Set any additional string data to be included in the link. This column cannot exceed 120 characters.   Extra 2 R Set any additional string data to be included in the link. This column cannot exceed 120 characters.   Select payment methods. S If you leave this column empty, all the payment methods active for the account will be included.To include some payment methods, set the payment methods separated by commas.\nExample: LENDING,VISA,BANK_REFERENCED,AMEX.\nFurthermore, you can define what installments to submit for credit card, to do this, enter the payment methods and indicate the installments you want to be available separated by hyphens.\nExample: VISA-1-2-3,AMEX.    Note You can create up to 1000 links per file.  Once you have completed the Excel file, upload it to the PayU Module and click Send payment links.\n","excerpt":"You can send your payment request via e-mail or generate a link to share it in chat rooms or social …","ref":"/docs/tools/payment-request.html","title":"Payment Request"},{"body":"The first step to start using PayU services is create an account. This topic shows you the benefits of choosing PayU to receive payments online.\nPayU benefits  Competitive rate Multiple payment methods Sell with or without a website Security  How to create an Account? Regardless of the size of your business, the procedure to create an account is as follows:\n Contact us.\nIf you want to start using PayU services and tools to integrate your shop and start receiving online payments, contact us through our web page.\nOr you can call us:    (+54 11) 5984-2132 (+55 11) 4130-5311 (+56 2) 258-13949 (+57) 601 654-0721 (+52 55) 474-11439 (+50 7) 836-5577 (+51 1) 708-5381 Note If you are in Colombia and sell less than 100 million COP/month, you can create your account using this link  Review our terms and conditions here.   Validation of your account.\nOnce we received your account request, our agents will validate your risk and bank score. Review the Prohibited, Restricted or Forbidden Activities here.\n  Activate your account.\nAfter opening your PayU account, you receive an e-mail to confirm its address and enter the PayU Module for the first time. At this point, your account is already activated to receive payments on the Internet with all available payment methods. To activate your account, you should:\n   Have completed the documentation and registration in the administrative module. Have a successful transaction.  What\u0026rsquo;s next? After you have created an account, you and your customers receive a notification for each payment they made. The money is then credited to your PayU account.\nAccording to your business needs, select how to integrate your shop with the PayU services and tools. For more information, refer to Integrations.\nFinally, transfer the balance from your PayU account to your bank account whenever you want.\n","excerpt":"The first step to start using PayU services is create an account. This topic shows you the benefits …","ref":"/docs/getting-started/create-an-account.html","title":"Create a PayU Account"},{"body":"","excerpt":"","ref":"/docs/getting-started.html","title":"Getting Started"},{"body":"","excerpt":"","ref":"/payu-module-documentation/getting-started.html","title":"Getting Started"},{"body":"In this topic, you find how to send data from one transaction to the PayU payment gateway. To do so, You must generate an HTML form with the transaction data using the HTTP POST method and pointing it to our system.\nConsiderations  Make sure you have the right merchantId, accountId, and apiKey. Use a different payment reference per payment. Do not include spaces in parameter values Do not include values with more than two decimal places Do not include special characters in the referenceCodeparameter  Variables The following variables can be included in the Payment form.\n Variables in the payment form     Field Type Size Description Mandatory     amount Number 14 Total amount of the transaction. It can contain two decimal digits. Example 10000.00 or 10000. ✓   merchantId Number 12 ID number of your shop in PayU’s system, you will find this number in the account creation e-mail. ✓   referenceCode Alphanumeric 255 Reference of the sale or order. It must be unique for each transaction that is sent to the system. Usually, this is a way to identify the requests sent to the payment gateway. ✓   accountId Number 6 ID of the user account for each country associated with the shop. This variable is used to display the available payment methods for this country. ✓   description Alphanumeric 255 Sale’s description. ✓   tax Number 14,2 Value of the VAT of the transaction.\nIn Colombia, if no VAT is sent, the system applies 19% automatically. It can contain two decimal digits, for example 19000.00.\nIf the product or service is VAT exempt, assign 0 to this variable. ✓   taxReturnBase Number 14,2 Base value to calculate the VAT.\nIf the product or service is VAT exempt, assign 0to this variable. ✓   signature Alphanumeric 255 Digital signature created for each transaction. Refer to Signature for Payment form to learn how to generate it. ✓   currency Alpha numeric 3 The respective currency in which the payment is made. The reconciliation process is performed in pesos at the representative rate of the day.\nSee accepted currencies. ✓   buyerEmail Alphanumeric 255 Field that contains the buyer’s e-mail to notify the result of the transaction by e-mail. It is recommended to validate if this field has been provided in the form. ✓   telephone Alphanumeric 50 The buyer’s residence phone. ✓   buyerFullName Alphanumeric 150 The buyer’s full name. ✓   test Number 1 Indicates whether the transaction is in test or production mode. Set 1for test and 0for production. —   lng Alphanumeric 3 Language in which the payment gateway is wished to be displayed.\nSee supported languages. —   shippingCity Alphanumeric 50 The delivery City of the merchandise\n* Mandatory if your shop ships the product. ✓*   shippingCountry Alphanumeric 2 The delivery ISO country code for the merchandise.\n* Mandatory if your shop ships the product.\nSee processing countries ✓*   shippingAddress Alphanumeric 255 The delivery address of the merchandise.\n* Mandatory if your shop ships the product. ✓*   extra1 Alphanumeric 255 Additional field to send information about the purchase. —   extra2 Alphanumeric 255 Additional field to send information about the purchase. —   extra3 Alphanumeric 255 Additional field to send information about the purchase. For example, internal codes of the products. —   responseUrl Alphanumeric 255 The URL of the response page. —   confirmationUrl Alphanumeric 255 The URL of the confirmation page. —   payerFullName Alphanumeric 50 The payer’s name. This value will be taken to fill out the credit card form. —   payerDocument Alphanumeric 25 The buyer’s identification number. This value will be taken to fill out the credit card form. —   mobilePhone Alphanumeric 50 The buyer’s cell phone number. This value will be taken to fill out the credit card form and will be the contact telephone number. —   billingAddress Alphanumeric 255 The correspondence address. —   officeTelephone Alphanumeric 50 The buyer’s daytime phone. —   algorithmSignature Alphanumeric 255 Encryption algorithm of the digital signature (signature field). The three available algorithms are: MD5, SHA and SHA256. —   billingCity Alphanumeric 50 City associated with the billing address. —   zipCode Alphanumeric 20 Postal code. —   billingCountry Alphanumeric 2 The ISO country code associated with the billing address. —   payerEmail Alphanumeric 255 The payer’s e-mail. —   payerPhone Alphanumeric 20 The payer’s phone number. —   payerOfficePhone Alphanumeric 20 The payer’s workplace phone number. —   payerMobilePhone Alphanumeric 20 The payer’s mobile phone number. —     Considerations in variables  The tax is the VAT that may be used in some countries and the taxReturnBase is the base value to calculate the VAT. If your product is tax exempt, assign both variables to 0 (tax=0, taxReturnBase=0). If some elements have the tax and it does not apply to others, you must perform the following calculation to find out how to send the values to the payment platform.     Product taxReturnBase tax Amount     A 84.033 15.966 (19%) 100.000   B 181.818 18.181 (10%) 200.000   C 0 0 (0%) 150.000   Total 268.851 34.147 450.000    Important Tax + taxReturnBase cannot be greater than the Total Value of each product.   For businesses registered in Colombia that belong to the program Régimen común, if you don\u0026rsquo;t send the tax, PayU automatically calculates the tax using 19%. If your business belongs to the program Régimen simplificado, if you don\u0026rsquo;t send the tax, PayU automatically assigns the value as zero (0).  Form example The following is an example of a basic Payment form using only the mandatory fields and pointing the request to the sandbox environment (test mode).\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;merchantId\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;508029\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;accountId\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;512321\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;description\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;Test PAYU\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;referenceCode\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;TestPayU\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;amount\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;20000\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;tax\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;3193\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;taxReturnBase\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;16806\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;currency\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;COP\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;signature\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;7ee7cf808ce6a39b17481c54f2c57acc\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;test\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;0\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;buyerEmail\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;test@test.com\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;responseUrl\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;http://www.test.com/response\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;confirmationUrl\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;http://www.test.com/confirmation\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;Submit\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Enviar\u0026#34; \u0026gt; \u0026lt;/form\u0026gt; \nIf your shop ships the products, you need to include the following values:\n\u0026lt;input name=\u0026#34;shippingAddress\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;calle 93 n 47 - 65\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;shippingCity\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;Bogotá\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;shippingCountry\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;CO\u0026#34; \u0026gt; \nThe URL configured in action depends on the environment:\nTest: https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/ Production: https://checkout.payulatam.com/ppp-web-gateway-payu/ Signature for Payment form The signature is a method to validate payments made through the platform and ensuring its authenticity. It consists of a string encrypted using MD5, SHA1, or SHA256. The string is created as follows:\n\u0026#34;ApiKey~merchantId~referenceCode~amount~currency\u0026#34;. \nFor example, with the following dat:\nmerchantId: 508029 ApiKey: 4Vj8eK4rloUd272L48hsrarnUA referenceCode: TestPayU amount: 20000 currency: COP accountId: 512326 buyerEmail: test@test.com \nThe signature is:\n\u0026#34;4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU~20000~COP\u0026#34; \nEncrypted using MD5:\n\u0026#34;7ee7cf808ce6a39b17481c54f2c57acc\u0026#34; \nEncrypted using SHA1:\n\u0026#34;fa890d3f94e12b5cdb62e8771453b99b78e7ccdc\u0026#34; \nEncrypted using SHA256:\n\u0026#34;af3899a22336b79db46006491d15813158826f944599bf3bf601e2327f898022\u0026#34; Compare your signature           var errApiKeyReq = \"Please enter the ApiKey\" var errApiKeyMin = \"Please enter more than 5 digits\" var errApiKeyMax = \"Please enter less than 32 digits\" var errMerchantReq = \"Please enter the Merchant Id\" var errMerchantMin = \"Please enter more than 5 digits\" var errMerchantMax = \"Please enter less than 7 digits\" var errMerchantPosi = \"Please enter a positive number\" var errMerchantNum = \"Please enter just numbers\" var errReferenceReq = \"Please enter the Reference Code\" var errReferenceMin = \"Please enter the Reference Code\" var errReferenceMax = \"Please enter less than 255 digits\" var errAmountReq = \"Please enter the Amount\" var errAmountMin = \"Please enter the Amount\" var errAmountMax = \"Please enter less than 14 digits\" var errAmountPosi = \"Please enter a positive number\" var errAmountNum = \"Please enter just numbers\" var errCurrReq = \"Please enter a valid Currency in format ISO 4217\" var errCurrMin = \"Please enter more than 3 digits\" var errCurrMax = \"Please enter less than 3 digits\" var errTsReq = \"Please enter the transaction code\" var errTsMin = \"Please enter the transaction code\" var errTsMax = \"Please enter the transaction code less than 3 digits\" var errSpReq = \"Please enter the transaction code\" var errSpMin = \"Please enter the transaction code\" var errSpMax = \"Please enter the transaction code less than 1 digit\"   Algorithm: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ) Result:\u0026nbsp;      This calculator lets you generate the signature using any of the available encryption methods.\n","excerpt":"In this topic, you find how to send data from one transaction to the PayU payment gateway. To do so, …","ref":"/docs/integrations/webcheckout-integration/payment-form.html","title":"Payment Form"},{"body":"You can include your company logo in our payment gateway, sending it via HTTP POST method.\nNote The person in charge of integrating your shop with our Payment gateway (WebCheckout) must have strong knowledge in integration with dynamic programming languages such as PHP or Java.  How does the WebCheckout integration work? The procedure to let your shoppers pay using PayU services is simple.\n Your customer navigates your site and selects the products or services they want to purchase. Your systems updates the purchase amount and sends to our system the payment form with the purchase information.\nYour system must send this information via HTTP POST.  For the payment process, your customer is redirected to our Checkout where they can select the payment method.\nPayU supports many payment methods that fits to your customers needs according to the country where you process the purchase, see the available Payment Methods.  PayU processes the transaction and shows the result in our response page.  When you customer back to your page after the payment process, PayU redirects them to you Response page and sends the transaction results via HTTP GET. You need to process the response and show its information to your customer.  In parallel, PayU notifies the status of the transaction to the confirmation page via HTTP POST. Furthermore, PayU notifies to you and your customer the result of the transaction via e-mail.  Considerations  The coding of your page must be UTF-8. The WebCheckout page should not be included in an iframe Do not mask the URL during the checkout process Do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA on your confirmation page.  Integration components Refer to the following sections to learn how to integrate using WebCheckout integration.\n","excerpt":"You can include your company logo in our payment gateway, sending it via HTTP POST method.\nNote The …","ref":"/docs/integrations/webcheckout-integration.html","title":"WebCheckout integration"},{"body":"Regardless of the integration type you choose, PayU provides operations to process your transactions. The following section explains these methods.\nPayment flows PayU can process the payments using two types of Payment flows: two-step and one-step.\n  In the one-step flow, combines the Authorization and Capture steps into a single transaction. Funds are transferred from your customer\u0026rsquo;s account to your PayU account when the payment has been authorized. The unique step in this flow is:\n Charge (Authorization and capture): this operation sends the amount of the transaction to validate (Authorization) and if it is approved, the amount is debited from the card immediately (capture). This is the most common method to process transactions.    In the two-step flow, first you need to authorize and place a hold on the customer\u0026rsquo;s funds. Then, complete the transaction to transfer the authorized funds to your PayU account. The steps in this flow are:\n Authorization: this operation is used to verify if the card used to pay is active, has funds, etc. The charge is not completed until a transaction capture is sent.  For Example, when you use a transportation app, after you request the service, the app sends an Authorization to reserve the amount of the trip and verify that your card is valid (active and with enough founds). Nevertheless, the charge is not performed in your card yet. Capture: this operation terminates a previously authorized transaction, namely, at this point, the account makes a debit to the card. Back in the transportation app example, once your service has finished, the apps charges the total amount of your trip and terminates the transaction.    Note Two-step flow is not supported for Colombia and Panama. For Chile, this flow is available under request only, contact your sales representative.  Payment methods The available payment methods used to process transactions are:\n Credit cards. Cash or bank payments. Bank transfers.  Note Refer to this article to know the Payment methods available to shoppers per country.  What\u0026rsquo;s next? The integration with this feature depends on the country of your transactions, the operation selected and the payment method.\n API SDK    API SDK    API SDK    API SDK    API SDK    API      API SDK       ","excerpt":"Regardless of the integration type you choose, PayU provides operations to process your …","ref":"/docs/services/payments.html","title":"Payments"},{"body":"Permission required To have access to this module, you need to have a profile with the Transfers \u0026gt; Review permission enabled.\nRefer to Profiles and Permissions for more information.\nConsult the report Log into your PayU account. In the left menu, expand the Transfers menu and select Transfers.\nScroll down to the Created transfers report section where the report table is located. By default, the report displays the transfers created in the last 30 days from the most recent to the oldest.\nThe report has the following columns:\n   Column Description     ID Id of the transfer requested.   Request date Date and time when the transfer was created.   Last update Date and time of the last action executed in the transfer.   Transferred value Amount of the transfer along with its associated costs.\nTo know these costs, click the icon.\n   Destination account Bank account of the request   Status Latest status of the request. The possible states are: ApprovedIn progressRejected    Note If you need to display more information, contact your sales representative.  You can filter transfers by the date of their creation using the dates filter at the top right corner.\nThe date range of this filter is three (3) months before the end date. If you exceed this range, The report displays the information of three (3) months after the start date.\nTo see the information of a given date, set it for both start and end date.\nDownload the report To download the report, click the Download button located at the top or at the bottom of the report table.\nA progress bar appears at the top of the screen. Once the process is completed, the report is automatically downloaded in an Excel (.csv) format. The name of the report uses the format [DownloadDateInMillis]_payment_orders_[AccountId].csv.\nNote The generated report is stored during 90 days in the My downloaded reports section.  ","excerpt":"Permission required To have access to this module, you need to have a profile with the Transfers …","ref":"/payu-module-documentation/reports/transfer-report.html","title":"Transfer Report"},{"body":"In the Transfers module, you can fin the options to transfer the funds collected in your virtual PayU account to your main bank account registered.\nConsiderations Keep in mind the following considerations before transferring funds to your bank account.\n You must have your bank information updated and validated. Take into account that if you have requested the update of your bank account, the transfers you make are sent to the former bank account until our Risk team have validated it.S The first three local transfers performed during the first month are free. Since the 4th transfer request, PayU charges the following values:  Colombia: 6.500,00 COP + VAT (Colombia) Peru: 10,00 PEN + IGV (Peru), Argentina: $ 10,00 ARS+ IVA (Argentina), Chile: 0,00 CLP Mexico: 0,00 MXN   The first transfer takes five (5) days to deposit in the bank account. The Risk area of PayU requests a livelihood of sales in the first transfer as an administrative process. The second, and the following transfers take maximum three (3) business days. The transfers can be programed by Amount and by Date  Note The times and amounts explained here apply only for local transfer (into the same operation country) for international transfers, contact your sales representative.  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n Transfers \u0026gt; Review Transfers \u0026gt; Manage\nThis permission allows you to perform transfers.  Refer to Profiles and Permissions for more information.\nTransfer funds You can transfer up to the total amount in your PayU account to the registered bank. Follow these steps to perform a transfer.\n Log into your PayU account. In the left menu, expand the Transfers menu and select Transfers.  Complete the value to transfer or select the Transfer all available balance option. In the right panel, the value entered is updated; furthermore, this panel shows how many free transfers you have until the end of the month.\nIf you don\u0026rsquo;t have free transactions, this panel also displayed the value or the transaction along with the taxes.  Click Request transfer. A confirmation window appears to confirm the amount to be transferred, the value to be debit from your account, and the target account.\nClick OK to confirm it or Reject to discard it.  The result of the operation appears. Take into account the number of days to reflect the money in the target account.  As soon as the request has been successfully sent the transfer is in In progess status and you can see it in the Created transfers report section at the end of the module; also, the amount requested is debited from your balance.\nIf the transfers could not be processed, this amount backs to your account and no fee is charged for this operation.\nSchedule transfers You can automate the transfers and request the a withdrawal given a fixed amount or each certain time.\nNote When scheduling transfers, you must have the enough funds by the time when the transfer is executed.  To schedule a transfer, follow these steps.\n Log into your PayU account. In the left menu, expand the Transfers menu and select Schedule transfer.  The Schedule Transfers module opens, here you can see all the scheduled transfers you have configured. Click Schedule Transfer to set up a new schedule.  Options The options column provides the following actions:\n Edit (): allows you to change the configuration of the schedule. Delete (): allows you to deactivate the schedule. Once the schedule is removed, no automatic transfers can be created.   Select how you want to schedule the transfer.    Schedule transfers by periodicity\nThis option lets you transfer a given amount every certain time (days, weeks, or months). To schedule this type of transfers, select the option Periodicity.\n  Schedule transfers by balance available\nThis option lets you transfer a given amount every time the balance reaches a specific value. To schedule this type of transfers, select the option Balance available.\n  Provide the following options.\n   Option Description     Make a withdrawal each Select the periodicity of the transfers you want to schedule. This option is available for transfers scheduled by periodicity.\n   Select the amount to withdraw Select the amount you want to transfer, you can select the total available balance or a fixed value.\n   Amount to withdraw Select the amount you want to transfer. This field appears when you select the option Configure value.   Start my transfers on Select the starting date for the schedule. In this date, the first transfer is scheduled.\n   Description Provide a meaningful description for your transfer.    When finish, click Schedule Transfer.  ","excerpt":"In the Transfers module, you can fin the options to transfer the funds collected in your virtual …","ref":"/payu-module-documentation/payu-operations/transfers.html","title":"Transfers"},{"body":" Note If you perform a refund through this panel, this is only updated in the PayU Module. If you need to control and record the refunds in your refund system, you should use the Refunds API.  What is a refund? A refund is the action to voluntary return the money paid by a customer when any of the following situations happen:\n The product or service delivered does not met the spectates of the customer and they returned it. The product is out of stock, anf the merchant is not able to deliver the product to the client.  Refund procedure Refunds are subject to review and approval of our team. The procedure to request refunds is explained below:\n  When a refund is requested by your customer, you need to request it using the PayU module. You just need to identify the order and provide a reason for refund.\n  Once you send the request, PayU reviews it and this is approved or rejected in one to three business days.\n  Refund states A refund can be in one of the following three states:\n In return: the request has been sent to PayU for approval and it is under approval. Approved: the request has been approved by a PayU’s customer service agent. Declined: the request does not meet the policies defined by PayU and was rejected by an agent.  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n Refunds and Chargebacks \u0026gt; List Refunds Refunds and Chargebacks \u0026gt; Manage Refunds\nThis permission allows you to perform refunds.  Refer to Profiles and Permissions for more information.\nConsiderations  Refunds are only available for transactions paid with card. You can retry the refund request if this was previously declined. Once you make the request, the transaction amount becomes part of the Frozen Balance of your PayU account until it is processed. In Chile:  Refunds for transactions processed by WebPay Plus are not supported. For transactions prepaid cards not processed by WebPay Plus, Refunds requested during the first hour after their charge can be approved or rejected by the financial network. After the first hour, all the refund for transactions with prepaid cards are rejected. If the refund is rejected, PayU shows the error code generated by the network. Partial refunds for transactions using installments are received online but PayU processes them manually due to acquirer restrictions.   In Colombia, partial refunds are not available for international credit cards. In Peru, partial refunds are supported for transactions without installments. Recall that transactions with one installment are considered as without installments. Partial refunds with visanet must be sent after one day. If your refund request is approved, the amount is refunded to the card holder. If your refund request is declined, the amount is released from the Frozen Balance and returns to the available Balance of your PayU account. Once the refund is approved, this will be reflected in the payer’s credit card when the bank make it effective. To check the status of your refund request, you can consult it by clicking the sale in the Merchant Panel.  Refunds per country Take into account the following considerations per country before requesting refunds.\n   Time to send the refund Min amount. How long will take to the customer to get the money back? Accepts partial refunds?   Min. Max. Min. Max.      10 minutes 365 days180 days (Partial refunds) - 1 working day 30 working days ✓    10 minutes1 day (Partial refunds) 90 or 120 days* - 1 working day 15 working days ✓    10 minutes 90 days 10 CLP 8 working days 20 working days ✓    10 minutes 2 years 300 COP 1 working day 30 working days ✓    10 minutes 45 or 180 days* - 1 working day 30 working days ✓    10 minutes 180 days - 1 working day 8 working days X    10 minutes 180 days 1 USD1 PEN 15 working days 25 working days ✓    *Depends on the network.\nHow to request a refund? To request a refund, the transaction must be approved and without any pending dispute process. Follow the next steps to request it.\n Log into your PayU account. In the left menu, expand the Transactions menu and select Sales Report.  The Sales Report opens. Locate the transaction you want to refund and click it.  The transaction details appear at the right of the screen, Click the Refund button at the end of the panel.  If you need to request a partial refund, check the option Partial refund and provide the requested value.  Provide the reason to request the refund (partial or total) and click Refund.  The summary of the request appears. While PayU process the refund, the amount of the refund is frozen in your account. If the request is approved, the amount refunded is returned to the customer through the payment method used.  Once the request has been approved, the status appears in the sale.  ","excerpt":"Note If you perform a refund through this panel, this is only updated in the PayU Module. If you …","ref":"/payu-module-documentation/payu-operations/refunds-mp.html","title":"Refunds"},{"body":"A Profile is a set of permissions that allows a user to access to a feature of an account. A user using a profile can access to as many account there are in each merchant.\nFor further information about merchants, accounts, and more, read the concepts behind the PayU Module.\nPermission required To have access to this module, you need to have a profile with the following permission enabled:\n Review permissions and profiles Create, edit and delete profiles and permissions  Refer to Profiles and Permissions for more information.\nDefault profiles By default, PayU provides three profiles that allow your users to access the accounts. These profiles are:\n Administrator: this profile has enabled all the permission of the account. A user entitled to this profile can create, review, update, and delete (or disable) the information related to the account. Furthermore, this user can see and download all the reports, view the technical information, resolve disputes, manage users, perform transfers, and manage profiles. Read and write: this profile is the equivalent of a manager profile. A user entitled to this profile can create, review, update, and delete (or disable) the information related to the account. Furthermore, this user can see and download all the reports, view the technical information, resolve disputes, and review the users and profiles created. Only read: this profile can access the account in read-only mode. A user entitled to this profile can create, review the information related to the account, download some of the reports, view the transfers of the account. Furthermore, this user cannot see the technical details or has access to the users and profiles.  These profiles cannot be deleted and their set of permissions are fixed, if any of these permissions does not meet your needs, you should create one.\nProfile and Permission management To manage users, open you PayU account and click Settings menu at the top the screen and then, select Permissions and profiles.\nThe Profiles and permissions management module opens, here, you can find a table with all the permissions to access PayU module and the profiles with access to them.\nCreate profiles When none of the default profiles meets you requirements, you can create one and assign a customized set of permissions. To create a profile follow these steps.\n In the Profiles and permissions management module, click Create custom profile.  A new column is added to the table. Provide a meaningful name for your custom profile..  Once you set the name, you can assign as many permission as you need by clicking the checkbox of each row.  When finish, click Save settings. If you click Delete changes, the profile is not saved and the column is deleted form the table.  Edit profiles When editing a profile, you can either rename it, or assign or remove permissions.\n  To rename a given profile, click the ▾ symbol next to its name. Then, click Change name.\nThis enables the name field of the profile to update it.\n  To assign or remove a permission, just click the checkbox of the permission.\n  When finish, click Save settings. If you click Delete changes, all the changes for both renaming and permission change are discarded.\nDelete profiles To delete a given profile by click the ▾ symbol next to its name. Then, click Delete.\nIf there are users entitled to the profile you are about to delete, you are prompted to set a new profile for them. Select the new profile from the dropdown menu and click Delete and reassign.\nAs soon as you delete the profile, its column is removed from the table and no user will be able to have this profile.\n","excerpt":"A Profile is a set of permissions that allows a user to access to a feature of an account. A user …","ref":"/payu-module-documentation/user-and-profile-management/profile-and-permissions-management.html","title":"Profile and Permissions Management"},{"body":"","excerpt":"","ref":"/payu-module-documentation/user-and-profile-management.html","title":"User \u0026 Profile management"},{"body":"Getting Technical information Regardless of the integration you use, you require the following variables in the request of the methods or in their.\nMerchant and account IDs These values allows you to authenticate both your merchant and your account when using any of the integrations to use the services we provide.\nWhen you log in your PayU module, both values are accessible in the left panel.\nAPI key and API Login  In the PayU module, click Settings and then select Technical configuration.  In this window, you find both the API key and API Login which allows you to authenticate you commerce during the integration procedure.  Warning Both keys are unique per commerce in PayU, therefore, you must keep this information secured and their usage or disclosure is under your responsibility.  Configuring technical information In this section, you can configure the technical properties of each active account, such as:\n URL settings for confirmation and response pages. Enable the send e-mails to the buyer and to your store when a sale takes place. Enable notifications for Disputes process. Select if your payments are processed in test mode or live.  To configure this information, click Settings and then select Technical configuration.\nIn the Technical configuration window, you can find two tab according to your needs: Payments or Disputes.\nPayments In this tab, you can configure the following information.\n    Parameter Description     Your payments are processed Select whether your transactions are processed In Production or In Test mode. When processing In Test mode, the transactions done through your website or through payment requests, are marked as a test and the payment is not real.   Response URL The page to which the buyer is direct once the transaction in PayU ends. This page displays the status of the transaction.   Confirmation URL The page to which PayU sends the payment confirmation to your system. This is useful when you want to update stocks and database once the transaction reaches its final state.\nThis parameter is not mandatory.   Control duplicate payments When enabling this option, We validate that each payment reference sent to our system is unique. Otherwise, you can send the same reference for all your sales.   Notifications of processed payments This option lets you enable the send of an e-mail to the payer or to you when the payment was approved or rejected.    Disputes In this tab, you can configure the following information of the dispute process.\n    Parameter Description     Notification e-mails Set the e-mail addresses to be notified when a dispute process has been started.   Automatic notification URL If you enable this option, you can set the URL to which PayU sends the notification of a dispute process.    Note To apply the changes you made, do not forget to click the Save changes button.  ","excerpt":"Getting Technical information Regardless of the integration you use, you require the following …","ref":"/payu-module-documentation/getting-started/understanding-the-payu-module/technical-configuration.html","title":"Technical Configuration"},{"body":"To recover your password, click the respective link under the Login button.\nProvide the e-mail of your account and perform the validation of the reCAPTCHA.\nClick Recover password. If your e-mail address is registered, you receive an e-mail with the password recovery URL. Check your spam box if you haven\u0026rsquo;t receive the e-mail yet.\nClick Reset password. A new browser window opens, provide your new password twice and click Set password.\n","excerpt":"To recover your password, click the respective link under the Login button.\nProvide the e-mail of …","ref":"/payu-module-documentation/getting-started/password-recovery.html","title":"Password Recovery"},{"body":"Prerequisites  You need an active account in PayU Latam. Having installed Magento version 1.7.x to 1.9.x. Having the PayU\u0026rsquo;s osCommerce plugin downloaded and stored in an accessible location. Click here to download it. You need access to the folders where Magento is installed. You need access to the Magento Admin Panel.  Considerations  Approved payments appear with Processing status in the orders report. Once the payment is received correctly, Magento creates an invoice with the associated order.  Installation Follow the next procedure to install the plugin on your website.\n Log in to your Magento admin panel. Then, expand the System menu at the top and click Cache Management.\nIn the new window, click Flush Magento Cache.  Unzip the plugin. The plugin folder is called app and it has the following structure:  Navigate to [PluginFolder]\\app\\code\\local and copy the Gfgrisales folder into the \\app\\code\\local folder in the root of the Magento installation folder.\nIf this structure does not exist in your installation, create it with read and write permissions.  Navigate to [PluginFolder]\\app\\design\\frontend\\base\\default\\template and copy the payu folder into the \\app\\design\\frontend\\base\\default\\template folder in the root of the Magento installation folder.  Navigate to [PluginFolder]\\app\\etc\\modules and copy the Gfgrisales_Payu.xml file into the \\app\\etc\\modules folder in the root of the Magento installation folder.  Configuration  Back in your Magento admin panel, expand the System menu and click Configuration. Then, expand Advanced section in the menu displayed on the left panel and click Advanced option.\nClick Disable Modules Output and check that the PayU extension called Gfgrisales_Payu is enabled.  In the Configuration menu on the left panel, expand Sales section in the menu displayed on the left panel and click Payment methods option.\nFind and expand the PayU method and provide the information of your PayU Account.   Merchant ID: ID of your commerce in PayU Latam. APIKey: Unique key of your commerce, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; API Key). Account ID: ID of the PayU account according to the country where you want to sell. Gateway URL: Gateway URL.  For test, use https://sandbox.gateway.payulatam.com/ppp-web-gateway For production, use https://gateway.payulatam.com/ppp-web-gateway/    Note For testing purposes, you can use the Merchant ID, APIKey, and Account ID available in Test Your Solution.\nOnce you are in the credit card payment form, and ensuring that you have the message at the top of the gateway Transaction in test mode, you must:\n Enter the text APPROVED in the Full Name field if you want the transaction to be approved, REJECTED if you want it to be rejected or PENDING if you want it to be pending. You must enter a valid card number in the Card Number field according to the selected franchise. For this, you can use an online credit card generator. All other fields can be random.   Once finish, click Save Config to apply changes.\nAt this point, your customers can pay with PayU Latam when they do the checkout in the Magento\u0026rsquo;s shopping cart.\n","excerpt":"Prerequisites  You need an active account in PayU Latam. Having installed Magento version 1.7.x to …","ref":"/docs/tools/shopping-cart-plugins/magento.html","title":"Magento"},{"body":"To integrate with Payments API Argentina, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit card Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit card This method lets you process the payments performed by your customers using credit or debit cards. For Argentina, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. Due to Tax regulations, it is mandatory to send the parameters payer.billingAddress.state and payer.dnitype. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter creditCard.name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Format ISO 3166-2 ARG official. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2.    transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Argentina. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set AR for Argentina. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with Promotions, send the parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. Promotions feature is only available for one-step flows. For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. When using credit cards, take into account the considerations due to Argentinian regulations for the check out page. Due to Tax regulations, it is mandatory to send the parameters payer.billingAddress.state using format ISO 3166-2 ARG official and payer.dnitype.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T20:25:15.868Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1ffceb14a71948fdeaba5aef81b8e511\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421560, \u0026#34;transactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623338717949, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-10T20:48:38.620Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;52b975674c6b1435c81dde6b8e039730\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421621\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;dd76e186-e4f1-487c-826b-df4e9b125bfa\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;dd76e186-e4f1-487c-826b-df4e9b125bfa\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T10:48:40\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 14 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. You can perform partial captures over an authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400421560\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421560, \u0026#34;transactionId\u0026#34;: \u0026#34;84ace270-d52d-4e85-b4cf-bbe8710db0d5\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;84ace270-d52d-4e85-b4cf-bbe8710db0d5\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623339599368, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400421560\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421560\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;4522f4ac-4ff2-4e91-aa6c-7f2c2bf18d9d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;DECLINED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseErrorMessage\u0026gt;El saldo disponible no es suficiente para procesar la transacción.\u0026lt;/paymentNetworkResponseErrorMessage\u0026gt; \u0026lt;responseCode\u0026gt;INVALID_TRANSACTION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T10:55:46\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T22:29:35.451Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;70f33e263fbcdf18103101dfc86671ab\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4850110000000000\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421870, \u0026#34;transactionId\u0026#34;: \u0026#34;fc7e5dce-0b69-4865-b7c3-acb0170c1729\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;fc7e5dce-0b69-4865-b7c3-acb0170c1729\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623346177300, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-10T20:48:38.620Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;52b975674c6b1435c81dde6b8e039730\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4850110000000000\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421894\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;fc588a85-3122-4e4e-b958-a03d48b7438f\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;fc588a85-3122-4e4e-b958-a03d48b7438f\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T12:41:15\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Installments When processing transactions with credit cards, you need to show the following aspects to your customer when processing installments:\nWhere:\n   Number in the screen Option Description     1 Total purchase Total amount of the purchase without financing.   2 Total payment Total amount financed of the purchase.   3 Installments Number of installments and their amount.   4 TEA The annual effective interest rate (TEA) applied.   5 CFT The total financial cost (CFT).    The information of the total financial cost (CFT) must comply with the following directions:\n  Must be located next to the reported variables.\n  Must appear in a prominent color typeface using the same font and size of at least five times bigger than the one used to inform the annual effective interest rate (TEA), the number of installments, and their amount.\n  According to the current regulations, you cannot use the phrase without interest (in Spanish, \u0026ldquo;sin interés\u0026rdquo;) or any other similar phrase, when the financial cost of the product or service is transferred to the customer\u0026rsquo;s selling price.\nSubmit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Argentina. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set AR for Argentina. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is 15 days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T20:25:15.868Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1ffceb14a71948fdeaba5aef81b8e511\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PAGOFACIL\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-12T16:07:11\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857787128, \u0026#34;transactionId\u0026#34;: \u0026#34;702ee8a1-d99c-43cc-a097-167db0d7ff1a\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 74794, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857787128Y702ee8a1d99c43cY5769b4d7b64fa1e\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1623514031586, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;99580010000074794000000000000000000001206211107000010000083\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857787128Y702ee8a1d99c43cY5769b4d7b64fa1e\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T14:40:25.549Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1ffceb14a71948fdeaba5aef81b8e511\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PAGOFACIL\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-16T16:07:11\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857792249\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;96a2e817-e26a-456b-85d4-28df8c3a584e\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;75017\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857792249Y96a2e817e26a456Y47e0b9cb12503f6\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T11:07:11\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;99580010000075017000000000000000000001606211107000010000082\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857792249Y96a2e817e26a456Y47e0b9cb12503f6\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description Mandatory     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS. Yes   error Alphanumeric Max:2048 The error message associated when the response code is ERROR. Yes   paymentMethods   List of the payment methods. Yes   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country. Yes     API call The following are the bodies of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;201\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ARGENCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;212\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;201\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;ARGENCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;212\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Argentina, target your request to the following URLs according to …","ref":"/docs/integrations/api-integration/payments-api-argentina.html","title":"Payments API - Argentina"},{"body":"To integrate with Payments API Brazil, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash Submit transaction with bank transfer Available payment methods query Ping  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Brazil, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nAdding Payment Facilitators Merchants can be considered as Payment Processor by franchises and the Central Bank. A payment processor is a legal entity that has money from sub-merchants. In the case of merchant bankruptcy and tax management, the Brazilian Central Bank wants to know the business\u0026rsquo;s beneficiary.\nTo include the information of the sub-merchant, you need to include it in the request of the Authorization, and Charge flows using the submerchant object.\nWhat is a Payment Facilitator? A payment facilitator is a company that offers an alternative to contracting with a traditional payment organization by assuming responsibility for the flow of funds in a buyer-seller relationship.\nMany merchants are choosing to work with payment facilitators because the payment facilitator possesses and manages the master account, thus assuming a risk. Merchants also choose a payment facilitator due the simplicity of setting up an account, typically occurring through a short application and underwriting evaluation.\nWhat information is required? You need to send the following information:\n Sub-merchant\u0026rsquo;s internal identification (optional) Sub-merchant\u0026rsquo;s Name (optional) Sub-merchant\u0026rsquo;s ID Number (mandatory) *Individuals or Legal Entities Sub-merchant\u0026rsquo;s Address (optional) Sub-merchant\u0026rsquo;s State (mandatory) Sub-merchant\u0026rsquo;s Postal Code (mandatory) Sub-merchant\u0026rsquo;s Country (mandatory)  Find the description of these fields in the next section.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. For Brazil, only send two characters, For example, set SP for São Paulo. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; submerchant   Information of the sub-merchant. if you don\u0026rsquo;t send this parameter, PayU configures your merchant as sub-merchant. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; id Alphanumeric Max:15 Internal ID of the sub-merchant if you use one to identify it. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; fullName Alphanumeric Max:150 Full name of the sub-merchant. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address   Sub-merchant address. The fields state, country, and postalCodeare mandatory when sending this object. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street3 Alphanumeric Max:100 Address Line 3. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; state Alphanumeric Max:40 Address State. For Brazil, only send two characters, For example, set SP for São Paulo. Yes   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; country Alphanumeric 2 Address country. Yes   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; identification Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; identificationType Alphanumeric Max:4 Identification type of the sub-merchant. The possible values are cnpj or cpf. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card; moreover, it is mandatory to also send the parameter transaction.creditCard.expirationDate.\nFor more information, refer to Tokenization API. No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. This parameter is mandatory when the payment is performed using a tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; payer   Payer information. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. For Brazil, use the format XXXXX-XXX or ´. Example: 09210-710 or 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods for Brazil. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set BR for Brazil. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No   transaction \u0026gt; termsAndConditionsAcepted Boolean  PayU terms and conditions that the payers must accept. *This parameter is only mandatory if your Brazilian PayU account is associated to a foreign bank account. No*   transaction \u0026gt; threeDomainSecure   This object contains the information of 3DS 2.0. No   transaction \u0026gt; threeDomainSecure \u0026gt; embedded Boolean  Set true if you want to use and embedded MPI for the Authorization process. By default, this value is set as false. No   transaction \u0026gt; threeDomainSecure \u0026gt; eci Number Max:2 Eletronic Commerce Indicator.\nValue returned by the directory servers showing the authentication attempt.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.xid has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; cavv Alphanumeric Max:28 Cardholder Authentication Verification Value.\nCode of the cryptogram used in the transaction authentication in Base64.\nDepending on the specific ECI codes established by the process network, this value may be optional. No   transaction \u0026gt; threeDomainSecure \u0026gt; xid Alphanumeric Max:28 Transaction ID sent by the MPI in Base64.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.eci has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; directoryServerTransactionId Alphanumeric Max:36 Transaction ID generated by the Directory Server during the Authentication. No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. For Brazil, only send two characters, For example, set SP for São Paulo.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  If your commerce does not have a local entity, it is mandatory to send either the CPF (parameter transaction.[payer|buyer].dniNumber) or the CNPJ (parameter transaction.[payer|buyer].cnpj) when using Authorization or Charge. If you don\u0026rsquo;t send any information for the sub-merchants, PayU configures your merchant as sub-merchant. For payments with credit card tokens, include the parameters transaction.creditCardTokenId, transaction.creditCard.expirationDate, and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. The extra parameter CIELO_TID identifies the transaction, this parameter is needed when you want to process voids. The variable transaction.threeDomainSecure does not replace the card information nor any of the mandatory fields of the transaction. This object is additional and not mandatory. The variable transaction.threeDomainSecure corresponds to a Pass Through scenario where the commerce performs the authentication by their own.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;submerchant\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;ROBSON BATISTA DE OLIVEIRA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Rua Alsácia\u0026#34;, \u0026#34;street2\u0026#34;: null, \u0026#34;street3\u0026#34;: null, \u0026#34;city\u0026#34;: \u0026#34;São Paulo\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;04630010\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;identification\u0026#34;: \u0026#34;17126661851\u0026#34;, \u0026#34;identificationType\u0026#34;: \u0026#34;CNPJ\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5253203387684619\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;threeDomainSecure\u0026#34;: { \u0026#34;embedded\u0026#34;: false, \u0026#34;eci\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;cavv\u0026#34;: \u0026#34;AOvG5rV058/iAAWhssPUAAADFA==\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026#34;, \u0026#34;directoryServerTransactionId\u0026#34;: \u0026#34;00000-70000b-5cc9-0000-000000000cb\u0026#34; } }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400434770, \u0026#34;transactionId\u0026#34;: \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-CIELO-1623957118463\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623939118784, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;submerchant\u0026gt; \u0026lt;address\u0026gt; \u0026lt;city\u0026gt;São Paulo\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;04630010\u0026lt;/postalCode\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;street1\u0026gt;Rua Alsácia\u0026lt;/street1\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;fullName\u0026gt;ROBSON BATISTA DE OLIVEIRA\u0026lt;/fullName\u0026gt; \u0026lt;identification\u0026gt;17126661851\u0026lt;/identification\u0026gt; \u0026lt;identificationType\u0026gt;cnpj\u0026lt;/identificationType\u0026gt; \u0026lt;/submerchant\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;5253203387684619\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;threeDomainSecure\u0026gt; \u0026lt;embedded\u0026gt;false\u0026lt;/embedded\u0026gt; \u0026lt;eci\u0026gt;01\u0026lt;/eci\u0026gt; \u0026lt;cavv\u0026gt;AOvG5rV058/iAAWhssPUAAADFA==\u0026lt;/cavv\u0026gt; \u0026lt;xid\u0026gt;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026lt;/xid\u0026gt; \u0026lt;directoryServerTransactionId\u0026gt;00000-70000b-5cc9-0000-000000000cb\u0026lt;/directoryServerTransactionId\u0026gt; \u0026lt;/threeDomainSecure\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400434942\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;1af49d5d-464a-4efb-98db-f7875e3c580b\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-CIELO-1623962788239\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-17T10:46:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is seven (7) days. After this time, the transaction is cancelled. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400434770\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400434770, \u0026#34;transactionId\u0026#34;: \u0026#34;2e753a5e-0eba-4a4c-9778-6880b5f16605\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;BR-456\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624029247864, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400436982\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;2cb57976-31d1-4563-b014-8047bd1b2b2a\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400436982\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;78d4c328-7157-4b50-9fa9-12e019e7df58\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;6\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;BR-456\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-18T10:19:01\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;submerchant\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;ROBSON BATISTA DE OLIVEIRA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Rua Alsácia\u0026#34;, \u0026#34;street2\u0026#34;: null, \u0026#34;street3\u0026#34;: null, \u0026#34;city\u0026#34;: \u0026#34;São Paulo\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;04630010\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;identification\u0026#34;: \u0026#34;17126661851\u0026#34;, \u0026#34;identificationType\u0026#34;: \u0026#34;CNPJ\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5178151142107990\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;threeDomainSecure\u0026#34;: { \u0026#34;embedded\u0026#34;: false, \u0026#34;eci\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;cavv\u0026#34;: \u0026#34;AOvG5rV058/iAAWhssPUAAADFA==\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026#34;, \u0026#34;directoryServerTransactionId\u0026#34;: \u0026#34;00000-70000b-5cc9-0000-000000000cb\u0026#34; } }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400437001, \u0026#34;transactionId\u0026#34;: \u0026#34;f0f8c441-43e8-490a-b4f2-c14d2c403175\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-CIELO-1624047897817\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624029898077, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;submerchant\u0026gt; \u0026lt;address\u0026gt; \u0026lt;city\u0026gt;São Paulo\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;04630010\u0026lt;/postalCode\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;street1\u0026gt;Rua Alsácia\u0026lt;/street1\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;fullName\u0026gt;ROBSON BATISTA DE OLIVEIRA\u0026lt;/fullName\u0026gt; \u0026lt;identification\u0026gt;17126661851\u0026lt;/identification\u0026gt; \u0026lt;identificationType\u0026gt;cnpj\u0026lt;/identificationType\u0026gt; \u0026lt;/submerchant\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;5178151142107990\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;threeDomainSecure\u0026gt; \u0026lt;embedded\u0026gt;false\u0026lt;/embedded\u0026gt; \u0026lt;eci\u0026gt;01\u0026lt;/eci\u0026gt; \u0026lt;cavv\u0026gt;AOvG5rV058/iAAWhssPUAAADFA==\u0026lt;/cavv\u0026gt; \u0026lt;xid\u0026gt;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026lt;/xid\u0026gt; \u0026lt;directoryServerTransactionId\u0026gt;00000-70000b-5cc9-0000-000000000cb\u0026lt;/directoryServerTransactionId\u0026gt; \u0026lt;/threeDomainSecure\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400437005\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;5d3cea31-c5e5-4105-9359-984edcaede37\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;6\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-CIELO-1624047952405\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-18T10:25:52\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. Yes   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. Yes   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. For Brazil, only send two characters, For example, set SP for São Paulo. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. This information is optional. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. For Brazil, use the format XXXXX-XXX or ´. Example: 09210-710 or 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Brazil. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set BR for Brazil. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  If your commerce does not have a local entity, it is mandatory to send either the CPF (parameter transaction.[payer|buyer].dniNumber) or the CNPJ (parameter transaction.[payer|buyer].cnpj). The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The payment is reflected in the next business day. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_BOLETO_BANCARIO: payment receipt in printable format. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;BOLETO_BANCARIO\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-19T21:57:12.559\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 43626780, \u0026#34;transactionId\u0026#34;: \u0026#34;63091676-673d-46bf-a283-54e686ba0238\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=63091676-673d-46bf-a283-54e686ba0238\u0026amp;orderId=43626780\u0026amp;signature=647b061ddef2a25fd19cb362860e1d21ef59e16a\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1399507200000, \u0026#34;URL_BOLETO_BANCARIO\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=63091676-673d-46bf-a283-54e686ba0238\u0026amp;orderId=43626780\u0026amp;signature=647b061ddef2a25fd19cb362860e1d21ef59e16a\u0026#34;, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;34191.75389 38894.912930 81898.480009 9 60560000010000\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;BOLETO_BANCARIO\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-19T21:57:12.559\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;43625300\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;89ff03a7-9f86-4193-a25d-94b758c135bb\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=89ff03a7-9f86-4193-a25d-94b758c135bb\u0026amp;orderId=43625300\u0026amp;signature=e9e89a2cd8d9d2d79d637eac84debae9012584de\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2014-05-08T00:00:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_BOLETO_BANCARIO\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=89ff03a7-9f86-4193-a25d-94b758c135bb\u0026amp;orderId=43625300\u0026amp;signature=e9e89a2cd8d9d2d79d637eac84debae9012584de\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;34191.75389 38894.752930 81898.480009 3 60570000010000\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. When using this payment method, the payer performs a bank transfer from their bank account issued in ITAU.\nTo integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in Bank transfer. See the available Payment Methods for Brazil. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set BR for Brazil. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181964158Ya5b4bd5e7c6e4ebY4085cd2deb967f2\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181964158Ya5b4bd5e7c6e4ebY4085cd2deb967f2\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  If your commerce does not have a local entity, it is mandatory to send either the CPF (parameter transaction.[payer|buyer].dniNumber) or the CNPJ (parameter transaction.[payer|buyer].cnpj). The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is four (4) day after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payer selects this payment method, PayU creates an order in in progress state and a transaction in PENDINGstate. In the response body, you can find the receipt generated by PayU and the expiration date.  API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;ITAU\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:30:21.231\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1181965590, \u0026#34;transactionId\u0026#34;: \u0026#34;bd273cec-d2f2-4f00-a125-c705c82b5605\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181965590Ybd273cecd2f24f0Y88337fa73366de5\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1626207065416 }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;ITAU_SHOPLINE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;ITAU\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:30:21.231\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1181965893\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;8397992b-3717-49c5-92ee-345a65ff13cf\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181965893Y8397992b371749cY7ad19f758dd04bc\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-07-13T15:14:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;ITAU_SHOPLINE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the bodies of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;177\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;172\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;177\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;172\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Brazil, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/payments-api-brazil.html","title":"Payments API - Brazil"},{"body":"To integrate with Payments API Chile, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit cards Submit transaction with cash Submit transaction with debit and prepaid cards using WebPay Plus  Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit cards This method lets you process the payments performed by your customers using credit or debit cards. For Chile, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Transactions with credit card using two-step flows are available under demand. Contact your Sales representative for more information.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction. This amount cannot include decimals. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Chile. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CL for Chile. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For mor information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. International debit cards are not supported. Transactions in CHILEAN PESOS with decimal amounts are not allowed. Two-step flows are not supported for debit, prepaid and international credit cards. Transactions with credit card using two-step flows are available for single installment payments. If you send a two-step transaction with more two installments or more, this transaction is automatically rejected by the acquirer.\nTwo-step flow is available under request, contact your Sales representative for more information. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-25T16:33:48.512Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;77d72fb91eb43f9b15fb300d5f173da3\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400455722, \u0026#34;transactionId\u0026#34;: \u0026#34;49cb24d9-eda6-43de-aad9-a17ffa9e5fb8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;195569\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;49cb24d9-eda6-43de-aad9-a17ffa9e5fb8\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;195569\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624616739664, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab3984007f3010d2adb6c02d104f85b8268ccf4b95da4b56f3abdb339e1c52\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-25T16:33:48.512ZZ\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;77d72fb91eb43f9b15fb300d5f173da3\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400455931\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;56f77e02-447a-4c98-a04b-9a8f3f92f3e7\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;363838\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;56f77e02-447a-4c98-a04b-9a8f3f92f3e7\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;363838\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-25T06:33:55\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01ab79a6030063a6b4039a64a8cf7de471d7ad02390c118fbd7d66cfd1af9864\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 7 days. After this time, the transaction is auto-voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. You can perform only one partial capture over an authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type.\nThe minimum amount is 50 CLP. It is not allowed to capture a higher amount than the amount previously authorized. Captures are only allowed for transactions in one installment.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400421560\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400455931, \u0026#34;transactionId\u0026#34;: \u0026#34;da91c0ec-632b-44e3-883d-b85821390519\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;da91c0ec-632b-44e3-883d-b85821390519\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;169018\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624629865424, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab5a10f3c1bdd401ac86d7c21e4347a7b848171fad7830157abcaac0373c7e\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400456250\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;ead41073-a03a-45aa-9e83-23d4b03197f0\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400456250\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;9c4d12c4-277d-4936-9d15-735e21dd5a19\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;9c4d12c4-277d-4936-9d15-735e21dd5a19\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;698999\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-25T09:08:16\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01ab6ddef1f9350f7b970d33b9766db9b0d52c6b9cb353618ddc8cd58d076b59\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400431556, \u0026#34;transactionId\u0026#34;: \u0026#34;14aed0cc-95cb-4b04-b4dd-0c7f8c3296e8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;456505\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;14aed0cc-95cb-4b04-b4dd-0c7f8c3296e8\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;456505\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623834912248, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab306b62cd0ce17d462501b121ed6cac3794375054b80a51c01bad4ec51550\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400431549\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;937ed9fe-72d3-44e2-b1b8-e38e9f8e08a4\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;185495\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;937ed9fe-72d3-44e2-b1b8-e38e9f8e08a4\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;185495\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T04:13:51\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abc29e7b32bbf011cdd2a1e9961c5d6bd068220f4b506b06c66e15de1acfd2\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer selects cash and generates the payment code.\nNote Klap is formerly known as MULTICAJA. You can still see elements or configurations related to MULTICAJA.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter creditCard.name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Chile. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CL for Chile. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. For cash payments, you need to include the response URL to redirect your customers back when they complete their payment.\nIn JSON, the extraParameters parameter is set as: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;NETWORK_CALLBACK_URL\u0026quot;: \u0026quot;http://www.test.com/response\u0026quot;\n}\nIn XML, the extraParameters parameter is set as: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;NETWORK_CALLBACK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   For cash payments, extraParameters has a single element with the URL to which you must redirect your customer.\nIn JSON, the extraParameters parameter is: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://www.multicaja.cl/bdp/order.xhtml?id=123456789012345\u0026quot;\n}\nIn XML, the extraParameters parameter is: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://www.multicaja.cl/bdp/order.xhtml?id=123456789012345\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven days after the current date at 12:00 pm.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. You must set a response URL in the parameter NETWORK_CALLBACK_URL inside transaction.extraParameters; this URL redirects the user back to your page after they finish the online payment procedure. You must redirect the payer to the Klap webpage (fka as Multicaja) to let them perform the cash payment. This URL is found in the BANK_URL parameter in the response.  API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;NETWORK_CALLBACK_URL\u0026#34;: \u0026#34;http://domain.com/backup_cart/response.php\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MULTICAJA\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-18T20:00:03.105\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857794995, \u0026#34;transactionId\u0026#34;: \u0026#34;f468aa69-82e0-410e-9cc2-3cabba0f970d\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;462623325642199\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://apidev.mcdesaqa.cl/bdp/order.xhtml?id=462623325642199\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;NETWORK_CALLBACK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://domain.com/backup_cart/response.php\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MULTICAJA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-18T20:00:03.105\u0026lt;/expirationDate\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400432986\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;71a72319-f143-4359-8cb9-bc44a21d2b25\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;a0d9d7d6-000a-4777-af78-e33917a30fd8\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T12:22:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T17:42:53\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abbca6da54f4e4ef9eb37fb9cacf72fdcc52797f6a9ca20377bc59eb0d2706\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with debit and prepaid cards using WebPay Plus This method lets you process the bank debit and prepaid card payments of your customers. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method for Debit and prepaid cards. See the available Payment Methods for Chile. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CL for Chile. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For mor information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. For Bank transfer payments, this is the response page of your commerce.\nIn JSON, the extraParameters parameter is set as: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;RESPONSE_URL\u0026quot;: \u0026quot;http://www.test.com/response\u0026quot;\n}\nIn XML, the extraParameters parameter is set as: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;URL_PAYMENT_REDIRECT\u0026quot;: \u0026quot;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  If you don\u0026rsquo;t send the RESPONSE_URL parameter in transaction.extraParameters, the API took the value from the Response URL variable in your PayU Module (Settings \u0026gt; Technical configuration). When you process bank transfer payment, you must redirect the customer to the URL found in the URL_PAYMENT_REDIRECT extra parameter concatenated with the TRANSBANK_DIRECT_TOKEN extra parameter as follows: URL_PAYMENT_REDIRECT?token_ws=TRANSBANK_DIRECT_TOKEN. If the payment request is successful, the transaction has state PENDING and responseCode PENDING_PAYMENT_IN_ENTITY; this is because the payer is redirected to the selected bank to complete the payment. The response page must have the following variables:     Variable Description     transactionState State of the transaction.   reference_pol Reference code to identify a transaction in PayU.   TX_VALUE Transaction amount.   authorizationCode Authorization code of the transaction.   processingDate Transaction date.   cc_number Visible number of the card used in the transaction.    The variables above are sent via GET.\nAPI call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;RESPONSE_URL\u0026#34;: \u0026#34;http://www.test.com/response\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;TRANSBANK_DEBIT\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400432466, \u0026#34;transactionId\u0026#34;: \u0026#34;e2609a58-97d6-4a65-8638-1b03da03cc7a\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;5f0cac61-c023-4fa3-bf27-ff888fa36c3c\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623856942412, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;EXPIRATION_DATE\u0026#34;: 1623875847781, \u0026#34;URL_PAYMENT_REDIRECT\u0026#34;: \u0026#34;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab155164939156988ee462d09ed5613b7efd297fe97b099c684ec8599c5cc5\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;TRANSBANK_DEBIT\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400432986\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;71a72319-f143-4359-8cb9-bc44a21d2b25\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;a0d9d7d6-000a-4777-af78-e33917a30fd8\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T12:22:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T17:42:53\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abbca6da54f4e4ef9eb37fb9cacf72fdcc52797f6a9ca20377bc59eb0d2706\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the examples of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;716\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;712\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;716\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;712\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DINERS\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description Mandatory     code Alphanumeric  The response code of the transaction. Yes   error Alphanumeric Max:2048 The error message associated if an error ocurred. Yes   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred. Yes     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Chile, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/payments-api-chile.html","title":"Payments API - Chile"},{"body":"To integrate with Payments API Colombia, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash or Bank reference Submit transaction with bank transfer (PSE) Bank List - PSE Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Colombia, you can perform one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order and its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction. This amount cannot include decimals. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (IVA - Impuesto al Valor Agregado). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the IVA.\nIf this parameter is not set, PayU applies the current tax value (19%).\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the IVA.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card; moreover, it is mandatory to also send the parameter transaction.creditCard.expirationDate.\nFor more information, refer to Tokenization API. No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. This parameter is mandatory when the payment is performed using a tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction. For Colombia, set AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods for Colombia. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CO for Colombia. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For mor information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No   transaction \u0026gt; threeDomainSecure   This object contains the information of 3DS 2.0. No   transaction \u0026gt; threeDomainSecure \u0026gt; embedded Boolean  Set true if you want to use and embedded MPI for the Authorization process. By default, this value is set as false. No   transaction \u0026gt; threeDomainSecure \u0026gt; eci Number Max:2 Eletronic Commerce Indicator.\nValue returned by the directory servers showing the authentication attempt.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.xid has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; cavv Alphanumeric Max:28 Cardholder Authentication Verification Value.\nCode of the cryptogram used in the transaction authentication in Base64.\nDepending on the specific ECI codes established by the process network, this value may be optional. No   transaction \u0026gt; threeDomainSecure \u0026gt; xid Alphanumeric Max:28 Transaction ID sent by the MPI in Base64.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.eci has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; directoryServerTransactionId Alphanumeric Max:36 Transaction ID generated by the Directory Server during the Authentication. No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId, transaction.creditCard.expirationDate, and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. The variable transaction.threeDomainSecure does not replace the card information nor any of the mandatory fields of the transaction. This object is additional and not mandatory. The variable transaction.threeDomainSecure corresponds to a Pass Through scenario where the commerce performs the authentication by their own. For Crédito Fácil Codensa card, the number of installments supported are 1 to 12, 18, 24, 36 and 48. For Crédito Fácil Codensa card, the payer can choose any of the following document types for the variable transaction.payer.dniType:     ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Customer´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    API call The following are the examples of the request and response of this payment method.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449660, \u0026#34;transactionId\u0026#34;: \u0026#34;aa2f50b2-62a8-42de-b3be-c6fe08ec712f\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;81\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;CRED - 666039677\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;123238\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved by the merchant\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624461913704, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;CREDIBANCO\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449666\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;c29d0543-810d-48c4-bd3e-163e935c2173\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;79\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;CRED - 666116683\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;787517\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved administrative transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T10:26:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;CREDIBANCO\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash or Bank reference This method lets you process the payments of your customers in cash or using a Bank reference. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like the followings.\nPayments in cash Payments with Bank reference Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (IVA - Impuesto al Valor Agregado). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the IVA.\nIf this parameter is not set, PayU applies the current tax value (19%).\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the IVA.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash or Bank Reference. See the available Payment Methods for Colombia. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CO for Colombia. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. For BALOTO and EFECTY, the confirmation of the payment takes 15 minutes. For BANK_REFERENCED and OTHERS_CASH (Su Red), the confirmation is online. The minimum and maximum values for BALOTO, EFECTY, and OTHERS_CASH (Su Red) are:  BALOTO \u0026gt; Min: $3.000 COP - Max: $1.000.000 COP EFECTY \u0026gt; Min: $20.000 COP - Max: $6.000.000 COP OTHERS_CASH (Su Red) \u0026gt; Min: $1.000 COP - Max: $4.000.000 COP   The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  EXPIRATION_DATE: maximum term for the payer to perform the payment. REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;EFECTY\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-24T20:58:35.804\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449740, \u0026#34;transactionId\u0026#34;: \u0026#34;f3531b6a-3e30-4a8b-8a69-d4a5bd2a3377\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;f3531b6a-3e30-4a8b-8a69-d4a5bd2a3377\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624463917065, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;EXPIRATION_DATE\u0026#34;: 1624568315804, \u0026#34;REFERENCE\u0026#34;: 1400449740, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400449740Yf3531b6a3e304a8Y30f3f7b4598eb19\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/v2?vid=1400449740Yf3531b6a3e304a8Y30f3f7b4598eb19\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;EFECTY\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;EFECTY\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-24T20:58:35.804\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449797\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;0b41f4d0-4486-4acf-ab5e-d757e35d994d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;0b41f4d0-4486-4acf-ab5e-d757e35d994d\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T11:20:03\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-30T23:59:59\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;1400449797\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400449797Y0b41f4d044864acY3e5f14fc8ef00e8\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/v2?vid=1400449797Y0b41f4d044864acY3e5f14fc8ef00e8\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;EFECTY\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank transfer (PSE) This method lets you process the bank transfer payments of your customers. In Colombia, bank transfers are made through PSE, to perform an integration with this payment method, you need to create a Payment form following these steps:\n Include a PSE button making clear that your customer will use Proveedor de Servicios Electrónicos PSE.   You can use the following names in Spanish:  Débito desde cuenta corrient/ahorros Debito bancario PSE PSE   Do no use any of the following names  Transferencia bancaria Débito de cuenta Tarjeta débito     Query the available bank list to show them to the payer. To query the bank list, refer to this method.\nYou must update the the bank list in your system once a day.\n  Show the list of banks as displayed below:\n  When the payer selects a bank, you must send the parameter pseCode of the selection in the extra parameter FINANCIAL_INSTITUTION_CODE in the request.\nShow a list to let the payer choose whether they are a Natural (N) or Legal (J) person. Depending on what the payer choose, you must send the value in the extra parameter USER_TYPE in the request. The list must be displayed as follows:  Show a list to let the payer choose their identification type. You must send the ISO code of the value selected in the extra parameter PSE_REFERENCE2 in the request. The list must be displayed as follows:  The list of available documents is:\n   ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Customer´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    You must send the payer identification number in the extra parameter PSE_REFERENCE3 in the request.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in Bank transfer. See the available Payment Methods for Colombia. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CO for Colombia. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. For Bank transfer payments, this is the response page of your commerce.\nIn JSON, the extraParameters parameter is set as: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;PSE_REFERENCE3\u0026quot;: \u0026quot;123456789\u0026quot;\n}\nIn XML, the extraParameters parameter is set as: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;PSE_REFERENCE3\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;123456789\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://pse.todo1.com/PseBancolombia/control/ElectronicPayment.bancolombia?PAYMENT_ID=21339692224921982576571322905\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://pse.todo1.com/PseBancolombia/control/ElectronicPayment.bancolombia?PAYMENT_ID=21339692224921982576571322905\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  To test PSE bank transfers in the PayU Sandbox environment, see the PSE Test Guide (PDF). All the payment process values must be formatted in thousands (i.e., 1,200.00 or 1,200) without exception. If the payment request is successful, the transaction has state PENDING and responseCode PENDING_TRANSACTION_CONFIRMATION; this is because the payer is redirected to the selected bank to complete the payment; you must redirect the payer to the URL returned in the extra parameter BANK_URL. The URL returned in the extra parameter BANK_URL is configured in the PayU Module and must show the following information:\nParameters starting with $ symbol are sent via GET. Once the client click the Pay button, this must be disabled to avoid sending a new request over the same payment. It is recommended to display a wait message while your customer is redirected. Do not show the bank site in containers (frames, panel, iframes, etc). The payment process must be fluid. Furthermore, avoid opening the bank site in a new tab nor a new browser window. If you need to use a new tab or window, block the origin page to avoid sending a new request over the same payment. You must add in the response page the options to retry the payment, finish the transaction and print the receipt. The status displayed in the response page can be any of the following:     polTransactionState polResponseCode State     4 1 Approved transaction   6 5 Failed transaction   6 4 Rejected transaction   12 or 14 9994 or 25 Pending transaction, please check if the debit was made in the bank.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;RESPONSE_URL\u0026#34;: \u0026#34;http://www.payu.com/response\u0026#34;, \u0026#34;PSE_REFERENCE1\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;FINANCIAL_INSTITUTION_CODE\u0026#34;: \u0026#34;1022\u0026#34;, \u0026#34;USER_TYPE\u0026#34;: \u0026#34;N\u0026#34;, \u0026#34;PSE_REFERENCE2\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;PSE_REFERENCE3\u0026#34;: \u0026#34;123456789\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449959, \u0026#34;transactionId\u0026#34;: \u0026#34;4d49e544-e23f-474e-92b1-59357e0e85e8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;2204682\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624471332753, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;TRANSACTION_CYCLE\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://sandbox.api.payulatam.com/payments-api/pse-caller?enc=aHR0cHM6Ly9yZWdpc3Ryby5kZXNhcnJvbGxvLnBzZS5jb20uY28vUFNFVXNlclJlZ2lzdGVyL1N0YXJ0VHJhbnNhY3Rpb24uYXNweD9lbmM9dG5QY0pITUtsU25tUnBITThmQWJ1NHVWTmt6YW92Q0tWR2g0b0IxbEpkOXNEeGlSU2E5cXl1Uk5TUW5mbkxSdiMjcGF5ZXJfdGVzdEB0ZXN0LmNvbSMjMTIzNDU2Nzg5IyNDQw==\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://www.payu.com/response\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE1\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;127.0.0.1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;FINANCIAL_INSTITUTION_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1022\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;USER_TYPE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;N\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE2\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CC\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE3\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;123456789\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PSE\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449974\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;6c99b11b-fe6f-4270-8c9a-dfc35b7c7e34\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;2204695\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T13:12:14\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSACTION_CYCLE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.api.payulatam.com/payments-api/pse-caller?enc=aHR0cHM6Ly9yZWdpc3Ryby5kZXNhcnJvbGxvLnBzZS5jb20uY28vUFNFVXNlclJlZ2lzdGVyL1N0YXJ0VHJhbnNhY3Rpb24uYXNweD9lbmM9dG5QY0pITUtsU25tUnBITThmQWJ1NHVWTmt6YW92Q0tWR2g0b0IxbEpkJTJmSGhQT0oyU2t4UnRmOEdLTk5tcGNYIyNwYXllcl90ZXN0QHRlc3QuY29tIyMxMjM0NTY3ODkjI0ND\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;PSE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Bank List - PSE This method returns a list of the banks available for payments using PSE.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_BANKS_LIST. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   bankListInformation   This object has the information of the query. Yes   bankListInformation \u0026gt; paymentMethod Alphanumeric  Set PSE. Yes   bankListInformation \u0026gt; paymentCountry Alphanumeric  Set CO. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   banks   List of the banks available in PSE.   banks \u0026gt; id Numeric  Internal bank identifier.   banks \u0026gt; description Alphanumeric  Bank name to be displayed in the list.   banks \u0026gt; pseCode Alphanumeric  Code to send in the extra parameter FINANCIAL_INSTITUTION_CODE of the payment request.     API call The following are the examples of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_BANKS_LIST\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;test\u0026#34;: false, \u0026#34;bankListInformation\u0026#34;: { \u0026#34;paymentMethod\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;banks\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;34e6e912-a395-4d31-9599-9baa176c1a61\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A continuación seleccione su banco\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;0\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;033aec11-e068-4252-8043-237144be9233\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BAN.CO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1552\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a720cb4c-6549-4932-83be-6d72b3eb0016\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCAMIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1059\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d9280852-47a5-4e99-94ac-3d7648ba79a3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1040\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;ff216e8a-28ba-4bf6-9935-b94dfdfd96a0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1081\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5073154e-efd4-4870-9315-abb926e87519\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO QA DEFECTOS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1080\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;6e61a91d-58bf-46ec-aa09-1f44974dda7e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CAJA SOCIAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10322\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;e062711e-6bbd-4a13-819a-d60084f9c6fa\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CAJA SOCIAL DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1032\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a9b5cc17-b0ae-4708-9835-586a0bef95df\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COMERCIAL AVVILLAS S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1052\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c5c97dfe-6101-453f-bcd4-691f4b329a3c\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COOMEVA S.A. - BANCOOMEVA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1061\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7a2e8d04-e8c8-404b-8e49-d5d37c107a12\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COOPERATIVO COOPCENTRAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1066\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;197fe0af-f658-4fe0-ad1b-952e174de549\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CREDIFINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1058\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;b1de44f1-cede-4aca-9d3f-3313d5cc0c63\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DAVIVIENDA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1051\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7a10219e-04a7-4c31-b747-54ded27c7f07\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DAVIVIENDA Desarrollo\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10512\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;ed06f40e-a1b9-4e48-8851-bffb4cda0480\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE BOGOTA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1039\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4592a13b-6334-4fba-8402-9d006b599fa8\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE BOGOTA DESARROLLO 2013\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1001\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;55f59084-cd3b-47d2-a420-6442cdb9e4b1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE OCCIDENTE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1023\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8e134fca-4fde-44e6-b012-55e8f2d338ca\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO FALABELLA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1062\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8eb03abf-5608-419b-8d2c-9d90b8ab6b88\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO GNB COLOMBIA (ANTES HSBC)\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1010\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;283e0068-749f-43f1-a2e5-340910f41af3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO GNB SUDAMERIS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1012\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8b0bf5e7-394d-4f7e-a467-e4d21d04c9fb\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO PICHINCHA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1060\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;beeb494a-4ce5-41b4-b497-0756f0b6a6d9\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO POPULAR\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1002\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a5a4b740-1644-4627-ae2a-41b13ffc7c5e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO PRODUCTOS POR SEPARADO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1203\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;47e747ef-c817-4be6-9eff-b6b16f50d001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco PSE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1101\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;589939d7-06d1-4933-a101-8bb29b801d76\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO SANTANDER COLOMBIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1065\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;fcdaa98e-99ce-4e76-a504-1e053a05e773\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO SERFINANZA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1069\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;201608c6-81de-436f-967a-2ec7c212c100\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO TEQUENDAMA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1035\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a8f33ba3-0053-464a-afbe-9add7c63fbc3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco union Colombia Credito\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1004\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5dfa1b2c-64bd-4e8c-9fad-585337cfd4ff\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO UNION COLOMBIANO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1022\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;56e306ef-6011-4f41-9640-b98449d6a6be\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO UNION COLOMBIANO FD2\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1005\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;bc883c0d-3610-4a88-96ca-2e2baa1dd2e5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco Web Service ACH\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1055\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4e97e580-fc92-47ea-af4f-7b3b3ddffff8\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco Web Service ACH WSE 3.0\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1055\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;931f6bfb-283e-4721-bb86-4a7484bfd28e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA DATAPOWER\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10072\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1285de9c-8d47-49f7-b00a-e87882e2a3f9\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10071\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;451f0e5f-5db4-4f55-a1fc-b38e06526e04\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA QA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1007\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;448e00ec-c479-497d-9a35-0dfbbf462f72\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANKA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1077\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5f3a7adb-b283-4ca3-bee9-741f1306a03d\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BBVA COLOMBIA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1013\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;cd4286fa-850a-4b34-96d1-f71d6a79f44a\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BBVA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1513\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;10e9b7b6-7a5f-4d5b-8d7f-4b2020f43f93\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CITIBANK COLOMBIA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1009\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;77f0988f-cf45-4931-bbcd-984e07e0fc51\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COLTEFINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1370\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;48c81f6a-e0f1-4c1d-ab9b-9915726e3596\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CONFIAR COOPERATIVA FINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1292\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8694df26-5ccd-45c0-b5b7-2b995c47f81a\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COOPERATIVA FINANCIERA COTRAFA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1289\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1c222feb-2b58-408c-a495-ade06b6825c0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COOPERATIVA FINANCIERA DE ANTIOQUIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1283\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;70a18a09-38f2-4f62-aba6-9ad28c30c966\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CREDIFIANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1558\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;3f8b3126-8aa3-4438-8a6c-1d544184f2d7\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DALE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1097\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a953078b-5e22-42ea-9301-954558e8f463\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DAVIPLATA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1551\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;2ad780ba-a1e8-4cb9-9150-670429aae092\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;GIROS Y FINANZAS COMPAÑIA DE FINANCIAMIENTO S.A\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1303\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c0bfb716-a098-40f6-84b5-1972a4846506\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;IRIS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1637\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7e1efd88-4f88-4e21-a972-28b526b27da5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ITAU\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1006\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;26c9a2df-6b4f-4309-9137-3692d9bb9f82\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MOVII S.A\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1801\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d9b48a70-6068-4116-a345-154381e5d953\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;NEQUI CERTIFICACION\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1508\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;60199dc5-7d38-49c6-92a5-b839dc0087d2\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;prueba restriccion\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;9988\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;be467299-d90a-407e-86d3-01e30ade1e06\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Prueba Steve\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;121212\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;201acc05-4c4f-49dc-9be6-3261a6ce4a3c\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;RAPPIPAY\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1151\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7602e001-6199-48bc-9ee3-466f8eb2e422\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SCOTIABANK COLPATRIA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1019\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;9bb638a0-4c3f-41d2-8811-f8cdd29b0db2\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SCOTIABANK COLPATRIA UAT\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1078\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;086547b5-313b-42c7-acef-93d0f76b1dd5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SEIVY – GM FINANCIAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1305\u0026#34; } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_BANKS_LIST\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;bankListInformation\u0026gt; \u0026lt;paymentMethod\u0026gt;PSE\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;/bankListInformation\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;bankListResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;banks\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;34e6e912-a395-4d31-9599-9baa176c1a61\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;A continuación seleccione su banco\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;0\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;033aec11-e068-4252-8043-237144be9233\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BAN.CO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1552\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a720cb4c-6549-4932-83be-6d72b3eb0016\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCAMIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1059\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;d9280852-47a5-4e99-94ac-3d7648ba79a3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1040\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;ff216e8a-28ba-4bf6-9935-b94dfdfd96a0\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1081\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5073154e-efd4-4870-9315-abb926e87519\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO QA DEFECTOS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1080\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;6e61a91d-58bf-46ec-aa09-1f44974dda7e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CAJA SOCIAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10322\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;e062711e-6bbd-4a13-819a-d60084f9c6fa\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CAJA SOCIAL DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1032\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a9b5cc17-b0ae-4708-9835-586a0bef95df\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COMERCIAL AVVILLAS S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1052\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;c5c97dfe-6101-453f-bcd4-691f4b329a3c\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COOMEVA S.A. - BANCOOMEVA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1061\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7a2e8d04-e8c8-404b-8e49-d5d37c107a12\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COOPERATIVO COOPCENTRAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1066\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;197fe0af-f658-4fe0-ad1b-952e174de549\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CREDIFINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1058\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;b1de44f1-cede-4aca-9d3f-3313d5cc0c63\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DAVIVIENDA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1051\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7a10219e-04a7-4c31-b747-54ded27c7f07\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DAVIVIENDA Desarrollo\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10512\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;ed06f40e-a1b9-4e48-8851-bffb4cda0480\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE BOGOTA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1039\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;4592a13b-6334-4fba-8402-9d006b599fa8\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE BOGOTA DESARROLLO 2013\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1001\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;55f59084-cd3b-47d2-a420-6442cdb9e4b1\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE OCCIDENTE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1023\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8e134fca-4fde-44e6-b012-55e8f2d338ca\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO FALABELLA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1062\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8eb03abf-5608-419b-8d2c-9d90b8ab6b88\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO GNB COLOMBIA (ANTES HSBC)\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1010\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;283e0068-749f-43f1-a2e5-340910f41af3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO GNB SUDAMERIS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1012\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8b0bf5e7-394d-4f7e-a467-e4d21d04c9fb\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO PICHINCHA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1060\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;beeb494a-4ce5-41b4-b497-0756f0b6a6d9\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO POPULAR\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1002\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a5a4b740-1644-4627-ae2a-41b13ffc7c5e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO PRODUCTOS POR SEPARADO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1203\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;47e747ef-c817-4be6-9eff-b6b16f50d001\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco PSE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1101\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;589939d7-06d1-4933-a101-8bb29b801d76\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO SANTANDER COLOMBIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1065\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;fcdaa98e-99ce-4e76-a504-1e053a05e773\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO SERFINANZA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1069\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;201608c6-81de-436f-967a-2ec7c212c100\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO TEQUENDAMA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1035\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a8f33ba3-0053-464a-afbe-9add7c63fbc3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco union Colombia Credito\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1004\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5dfa1b2c-64bd-4e8c-9fad-585337cfd4ff\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO UNION COLOMBIANO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1022\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;56e306ef-6011-4f41-9640-b98449d6a6be\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO UNION COLOMBIANO FD2\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1005\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;bc883c0d-3610-4a88-96ca-2e2baa1dd2e5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco Web Service ACH\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1055\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;4e97e580-fc92-47ea-af4f-7b3b3ddffff8\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco Web Service ACH WSE 3.0\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1055\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;931f6bfb-283e-4721-bb86-4a7484bfd28e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA DATAPOWER\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10072\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;1285de9c-8d47-49f7-b00a-e87882e2a3f9\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10071\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;451f0e5f-5db4-4f55-a1fc-b38e06526e04\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA QA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1007\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;448e00ec-c479-497d-9a35-0dfbbf462f72\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANKA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1077\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5f3a7adb-b283-4ca3-bee9-741f1306a03d\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BBVA COLOMBIA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1013\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;cd4286fa-850a-4b34-96d1-f71d6a79f44a\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BBVA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1513\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;10e9b7b6-7a5f-4d5b-8d7f-4b2020f43f93\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CITIBANK COLOMBIA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1009\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;77f0988f-cf45-4931-bbcd-984e07e0fc51\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COLTEFINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1370\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;48c81f6a-e0f1-4c1d-ab9b-9915726e3596\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CONFIAR COOPERATIVA FINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1292\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8694df26-5ccd-45c0-b5b7-2b995c47f81a\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COOPERATIVA FINANCIERA COTRAFA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1289\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;1c222feb-2b58-408c-a495-ade06b6825c0\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COOPERATIVA FINANCIERA DE ANTIOQUIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1283\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;70a18a09-38f2-4f62-aba6-9ad28c30c966\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CREDIFIANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1558\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;3f8b3126-8aa3-4438-8a6c-1d544184f2d7\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DALE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1097\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a953078b-5e22-42ea-9301-954558e8f463\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DAVIPLATA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1551\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;2ad780ba-a1e8-4cb9-9150-670429aae092\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;GIROS Y FINANZAS COMPAÑIA DE FINANCIAMIENTO S.A\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1303\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;c0bfb716-a098-40f6-84b5-1972a4846506\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;IRIS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1637\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7e1efd88-4f88-4e21-a972-28b526b27da5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;ITAU\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1006\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;26c9a2df-6b4f-4309-9137-3692d9bb9f82\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MOVII S.A\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1801\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;d9b48a70-6068-4116-a345-154381e5d953\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;NEQUI CERTIFICACION\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1508\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;60199dc5-7d38-49c6-92a5-b839dc0087d2\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;prueba restriccion\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;9988\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;be467299-d90a-407e-86d3-01e30ade1e06\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Prueba Steve\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;121212\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;201acc05-4c4f-49dc-9be6-3261a6ce4a3c\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;RAPPIPAY\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1151\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7602e001-6199-48bc-9ee3-466f8eb2e422\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SCOTIABANK COLPATRIA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1019\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;9bb638a0-4c3f-41d2-8811-f8cdd29b0db2\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SCOTIABANK COLPATRIA UAT\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1078\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;086547b5-313b-42c7-acef-93d0f76b1dd5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SEIVY – GM FINANCIAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1305\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;/banks\u0026gt; \u0026lt;/bankListResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the examples of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;35\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BALOTO\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;co\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;35\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BALOTO\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;10\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Colombia, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/payments-api-colombia.html","title":"Payments API - Colombia"},{"body":"To integrate with Payments API Mexico, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit cards Submit transaction with cash Submit transaction with bank transfer Submit transaction with bank reference Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit card This method lets you process the payments performed by your customers using credit or debit cards. For Mexico, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Two-step flows are only supported for Mastercard and Visa.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. Due to Tax regulations, it is mandatory to send the parameters payer.billingAddress.state and payer.dnitype. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter creditCard.name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2.    transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No    monthsWithoutInterest | | | Information when paying the purchase using Months Without Interests.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No | | transaction  monthsWithoutInterest  months | Number | Max:2 | Number of Months Without Interests for the purchase. The available values are 3, 6, 9, or 12.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No | | transaction  monthsWithoutInterest  bank | Alphanumeric | Max:255 | Issuing bank of the credit card used to pay the purchase using Months Without Interests.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No |--   Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  Two-step flows are only available for Mastercard and Visa. For payments with Promotions, send the extra parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. For payments with Months Without Interests (Meses Sin Intereses - MSI), send the extra parameter INSTALLMENTS_NUMBER with the number of months. Refer to MSI for more information. The available banks for MSI are: BANAMEX, BANCO REGIONAL DE MONTERREY S.A, BANCOPPEL, BANCO AZTECA, SCOTIABANK, HSBC, INBURSA, BANCA MIFEL SA, BANCO MULTIVA, BAJIO, CI BANCO, Afirme, Banregio, Banjercito, Banorte, Famsa, Invex, Premium Card Liverpool, Santander, and Bancomer. When using MSI, promotions or apply installments, always display the phrase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; during the payment process. When installments applied (fees assumed by the payer), display the original amount of the transaction, the total amount after the fees, the number of installments, and the amount per installment including the extra fee. Promotions feature is only available for one-step flows. For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.  Authorization Use this method to perform the Authorization step of a two-step flow using Mastercard or Visa. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446409, \u0026#34;transactionId\u0026#34;: \u0026#34;596ccd26-41a3-40b0-a241-262b3331aedc\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624383236617\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624365236861, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624987980000, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446580\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;f03be7ef-e82a-41e3-9a3c-5451c4d8ab99\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624389497244\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:18:17\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-29T14:18:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow for Mastercard and Visa. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 30 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. You can perform partial captures over an authorized amount as long as the partial capture amount does not exceed the authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400446409\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;596ccd26-41a3-40b0-a241-262b3331aedc\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446409, \u0026#34;transactionId\u0026#34;: \u0026#34;434312fd-90c6-48e0-9c73-dd3c2bb40d27\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624389983478\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624371983901, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400446409\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;596ccd26-41a3-40b0-a241-262b3331aedc\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446580\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;febf383f-add7-4986-82a2-941f0f4e9b45\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624390154273\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:29:14\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446667, \u0026#34;transactionId\u0026#34;: \u0026#34;868e169b-1857-4c52-a80d-e4b6d228a74f\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624391396880\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624373397257, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4850110000000000\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446670\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;a32da7ad-fb55-41ff-863d-ee49361334cb\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624391456868\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:50:57\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payment method is OXXO, the confirmation of the payment will be one day after the payment. For other cash payment methods, the confirmation is online. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  BANK_REFERENCED_CODE: payment type. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. PAYMENT_WAY_ID: network payment of the payment type.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;SEVEN_ELEVEN\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T21:02:14.593\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857806658, \u0026#34;transactionId\u0026#34;: \u0026#34;c7b15feb-e8e6-4330-a04b-2a4c0cc2b776\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CASH\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624482134593, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;00012345678900008578066580000000100000202106238\u0026#34;, \u0026#34;REFERENCE\u0026#34;: 857806658, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857806658Yc7b15febe8e6433Y2568534adcdf6da\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857806658Yc7b15febe8e6433Y2568534adcdf6da\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;SEVEN_ELEVEN\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;SEVEN_ELEVEN\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T21:02:14.593\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857806714\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;194e0320-2711-49d6-9d58-493dd0a59694\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CASH\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-23T16:23:05\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;00012345678900008578067140000000100000202106230\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857806714\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857806714Y194e0320271149dY36e0ad0392e7f5f\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857806714Y194e0320271149dY36e0ad0392e7f5f\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;SEVEN_ELEVEN\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. When using this payment method, the payer performs a bank transfer from their bank account to a PayU\u0026rsquo;s CLABE account.\nTo integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in Bank transfer. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;SPEI_CLABE_ACCOUNT_NUMBER\u0026quot;: \u0026quot;646180132800000009\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payer selects this payment method, PayU creates an order in in progress state and a transaction in PENDINGstate. To perform the payment, the payer must log in the virtual branch of their bank (The bank must appear in the list of SPEI available banks). First, the payer must register the PayU CLABE account in their bank branch. Once the PayU CLABE account is enable to perform transfers, the payer must provide the reference returned by PayU in the parameter trazabilityCode and the amount as returned by PayU in their virtual branch. In the response body, you can find the needed variables to generate the payment receipt (voucher) and the URL of the receipt generated by PayU in HTML and PDF format. If you want to generate the voucher, use the following variables:  trazabilityCode: unique identifier of maximum 7 digits long; corresponds to the payment reference that the payer must provide in the virtual branch. It is mandatory to enter the same value in the reference field of the bank branch so the payment can be successful. value: the payer must enter as transfer amount the same value informed in the request, so the payment can be successful. SPEI_CLABE_ACCOUNT_NUMBER: is the PayU\u0026rsquo;s interbank CLABE, namely, the account where the amount will be transferred. The payer must register this CLABE as beneficiary in their bank branch before performing the transfer. SPEI_BANK_NAME: name associated with the PayU CLABE account. The beneficiary account is associated with the STP bank and it\u0026rsquo;s always the same bank for PayU.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;SPEI\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:30:21.231\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400447116, \u0026#34;transactionId\u0026#34;: \u0026#34;16d49526-8d29-4bec-8c56-478491ddb327\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;25914\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624383022721, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;ELECTRONIC_PAYMENT\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: \u0026#34;2021-06-23 23:59:59\u0026#34;, \u0026#34;SPEI_BANK_NAME\u0026#34;: \u0026#34;STP\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400447116Y16d495268d294beY2063d953fc5dab2\u0026#34;, \u0026#34;SPEI_CLABE_ACCOUNT_NUMBER\u0026#34;: \u0026#34;646180132800000009\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/V2?vid=1400447116Y16d495268d294beY2063d953fc5dab2\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;STP\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;SPEI\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:30:21.231\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400447132\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;62a8e1e4-3787-494b-93ca-a8ddb658a754\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;25915\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T12:39:50\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;ELECTRONIC_PAYMENT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;2021-06-23 23:59:59\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;SPEI_BANK_NAME\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;STP\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400447132Y62a8e1e43787494Yef7e6cd39d91243\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/V2?vid=1400447132Y62a8e1e43787494Yef7e6cd39d91243\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;3\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;STP\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank reference This method lets you process payments of your customers using bank references. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Bank reference Payment Method. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;SPEI_CLABE_ACCOUNT_NUMBER\u0026quot;: \u0026quot;646180132800000009\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects bank reference payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;BANK_REFERENCED\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:46:20.551\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857807112, \u0026#34;transactionId\u0026#34;: \u0026#34;6f8b46f4-9c4c-4523-9d80-ab51c684a44d\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 857807112, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857807112Y6f8b46f49c4c452Y6a8c3d9204ae7c3\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624488380551, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;85780711227811246\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857807112Y6f8b46f49c4c452Y6a8c3d9204ae7c3\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANCOMER\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;BANK_REFERENCED\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:46:20.551\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857807162\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;2b7547fd-a6e8-4bcc-8f82-883775d85380\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857807162\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857807162Y2b7547fda6e84bcYa83c5dd72117110\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-23T17:54:58\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;85780716227811234\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857807162Y2b7547fda6e84bcYa83c5dd72117110\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANCOMER\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description Mandatory     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS. Yes   error Alphanumeric Max:2048 The error message associated when the response code is ERROR. Yes   paymentMethods   List of the payment methods. Yes   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country. Yes     API call The following are the bodies of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;299\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;OTHERS_CASH_MX\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;139\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;299\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;OTHERS_CASH_MX\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;139\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;AMEX\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Mexico, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/payments-api-mexico.html","title":"Payments API - Mexico"},{"body":"To integrate with Payments API Panama, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit card Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Panama, you can perform one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction. This amount cannot include decimals. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API Yes   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction. For Panama, set AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods for Panama. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set PA for Panama. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.  API call The following are the examples of the request and response of this payment method.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512326\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T21:28:14.962Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;782997f7981288b6ea411709188ff926\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857804178, \u0026#34;transactionId\u0026#34;: \u0026#34;299f50c4-d7d9-4f24-a4fc-1454ff26d5c4\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624311390098, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512326\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T21:28:14.962Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;782997f7981288b6ea411709188ff926\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;USD\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PA\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857804176\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;69de6de1-9e18-45ae-8429-866bb3b47822\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T16:35:06\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the examples of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;450\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;451\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;450\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;451\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Panama, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/payments-api-panama.html","title":"Payments API - Panama"},{"body":"To integrate with Payments API Peru, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit cards Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit cards This method lets you process the payments performed by your customers using credit or debit cards. For Peru, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages.   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION.   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false.   merchant   This object has the authentication data.   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key   transaction   This object has the transaction data.   transaction \u0026gt; order   This object has the order data.   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account.   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system.   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order.   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller.   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order.   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU.   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature.   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address.   transaction \u0026gt; order \u0026gt; buyer   Buyer information.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000).   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT).   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API   transaction \u0026gt; creditCard   Credit card information. If you process using debit card, do not send this parameter   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number.   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID).   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM.   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card.   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature.   transaction \u0026gt; debitCard   Debit card information. If you process using credit card, do not send this parameter   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number.   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID).   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM.   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card.   transaction \u0026gt; payer   Payer information.   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address.   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system.   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments.   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number.   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth.   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number.   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer.   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types.   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows.   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Peru.   transaction \u0026gt; paymentCountry Alphanumeric 2 Set PE for Peru.   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic.   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction.   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction.   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction.   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. In Peru, you can select 0 or 2 to 36 installments when paying with credit card. If you select one (1) installment, PayU sends zero (0) as default value.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443216, \u0026#34;transactionId\u0026#34;: \u0026#34;eebf01c3-7531-4952-a8e8-647a9eebac95\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624275552379, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443244\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;62cb2c6a-a9d5-4438-a767-7be501f0973d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T06:47:21\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n You can perform partial captures over an authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type. For partial captures, the minimum value to capture can be 10% lower than the amount authorized. For partial captures, the payment networks release the no captured value at 2-10 days for local cards and 28 days for foreign cards.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400443216\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;eebf01c3-7531-4952-a8e8-647a9eebac95\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443382, \u0026#34;transactionId\u0026#34;: \u0026#34;e82d47b3-72cf-42f0-ae30-3eeb42575cc7\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;10140044338210c\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624279912864, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400443382\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;10ccdb41-3fa8-4961-b6c0-88d74f737d4e\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443382\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;e82d47b3-72cf-42f0-ae30-3eeb42575cc7\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;10140044338210c\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;APPROVED\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APPROVED\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T07:51:52\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443595, \u0026#34;transactionId\u0026#34;: \u0026#34;acd8a1c6-fb44-497f-8fa5-de6136be4562\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624286793995, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443759\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;d7af220a-d427-486f-b35d-c363e12430e2\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T10:49:30\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages.   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION.   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false.   merchant   This object has the authentication data.   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key   transaction   This object has the transaction data.   transaction \u0026gt; order   This object has the order data.   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account.   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system.   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order.   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller.   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order.   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU.   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature.   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code.   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address.   transaction \u0026gt; order \u0026gt; buyer   Buyer information.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code.   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000).   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT).   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT).   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction.   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies.   transaction \u0026gt; payer   Payer information.   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address.   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system.   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter \u0026gt; creditCard \u0026gt; name for credit card payments.   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code.   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number.   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth.   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number.   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer.   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types.   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Peru.   transaction \u0026gt; paymentCountry Alphanumeric 2 Set PE for Peru.   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586.   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction.      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PAGOEFECTIVO\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-22T19:51:20.302\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857804123, \u0026#34;transactionId\u0026#34;: \u0026#34;fd685f0a-f5b2-40cf-9527-dcc85febe184\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;Se ha Generado el CIP: 00000002592100 .\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;2592100\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 857804123, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857804123Yfd685f0af5b240cYd231ed8660a7c9a\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624391480302, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;2592100\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857804123Yfd685f0af5b240cYd231ed8660a7c9a\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PAGOEFECTIVO\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-16T16:07:11\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857804131\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;185f578b-2247-4a28-85b9-128c7b90c989\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;Se ha Generado el CIP: 00000002592102 .\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;2592102\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;1\u0026lt;/authorizationCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857804131\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857804131Y185f578b22474a2Y11601e067841b94\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-28T23:59:59\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;2592102\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857804131Y185f578b22474a2Y11601e067841b94\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages.   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS.   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false.   merchant   This object has the authentication data.   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the bodies of the request and response of this method. For the sake of the example, the request and response here show two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;258\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;1067\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;258\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DINERS\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;1067\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages.   command Alphanumeric Max:32 Set PING.   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false.   merchant   This object has the authentication data.   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Peru, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/payments-api-peru.html","title":"Payments API - Peru"},{"body":"To integrate with Payments SDK Brazil, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments API includes the following methods:\n Submit transaction with credit cards Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Brazil, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Brazil. For payments with credit card tokens, include the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE. The extra parameter CIELO_TID identifies the transaction, this parameter is needed when you want to process voids.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples shows how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); //Enter the buyer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Payer -- //Enter the payer Id here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the Payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the Payer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the Payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the Payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); //Enter the Payer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); //Enter the Payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;5253203387684619\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;MASTERCARD\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.BR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, //Enter the buyer\u0026#39;s CNPJ. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Payer --  //Enter the payer Id here.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the Payer\u0026#39;s name here.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the Payer\u0026#39;s e-mail here  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the Payer\u0026#39;s contact phone here.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the Payer\u0026#39;s contact document here.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, //Enter the Payer\u0026#39;s CNPJ.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, //Enter the Payer\u0026#39;s address here.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;5253203387684619\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;MASTERCARD\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is seven (7) days. After this time, the transaction is cancelled. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400434770\u0026#34;); //Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); //Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, //Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400434770\u0026#34;, //Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); //Enter the buyer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Payer -- //Enter the payer Id here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the Payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the Payer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the Payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the Payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); //Enter the Payer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); //Enter the Payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;5178151142107990\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;MASTERCARD\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.BR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, //Enter the buyer\u0026#39;s CNPJ. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Payer --  //Enter the payer Id here.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the Payer\u0026#39;s name here.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the Payer\u0026#39;s e-mail here  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the Payer\u0026#39;s contact phone here.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the Payer\u0026#39;s contact document here.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, //Enter the Payer\u0026#39;s CNPJ.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, //Enter the Payer\u0026#39;s address here.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;5178151142107990\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;MASTERCARD\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  Send a valid cash Payment Method in the request, see the available Payment Methods for Brazil. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The payment is reflected in the next business day. The response returns the following extra parameters related to the transaction  URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_BOLETO_BANCARIO: payment receipt in printable format. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); //Enter the buyer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Payer -- //Enter the payer Id here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the Payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the Payer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the Payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the Payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); //Enter the Payer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); //Enter the Payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); //Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;BOLETO_BANCARIO\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tString url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String boletoBancario = (String)extraParameters.get(\u0026#34;URL_BOLETO_BANCARIO\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, //Enter the buyer\u0026#39;s CNPJ. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Payer --  //Enter the payer Id here.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the Payer\u0026#39;s name here.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the Payer\u0026#39;s e-mail here  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the Payer\u0026#39;s contact phone here.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the Payer\u0026#39;s contact document here.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, //Enter the Payer\u0026#39;s CNPJ.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, //Enter the Payer\u0026#39;s address here.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, //Enter the cash payment method name here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;BOLETO_BANCARIO\u0026#34;, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_BOLETO_BANCARIO; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Brazil, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/docs/integrations/sdk-integration/payments-sdk-brazil.html","title":"Payments SDK - Brazil"},{"body":"According to your business needs you can use the integration services or the PayU tools.\nIntegrations Implement PayU with the aggregator model or gateway, using PayU’s financial agreements or your own\nCheckout integration PayU Checkout is an integration that allows you to collect through a PayU web form from any device in a simple, fast and secure way.  PayU manages the payment system Easier integration, equally secure Since PayU manages the payment platform, it is easier to get PCI DSS certification  Learn more about WebCheckout integration  API or SDK integration Through API or SDK integrations, you can receive payments securely from anywhere you like, on your website or mobile app.  Design your checkout and manage the payment system of your website. Access to additional services such as Tokenization.  Learn more about API integration Learn more about SDK integration     PayU Tools Any of the following tools give you more options to sell and receive payments online.\nPayment request Receive payments even if you don't have a web page.\n Shopping cart plugins Integrate your shopping cart solution with any of our available plugins.\n PayU module Manage your PayU account, generate sales reports, query your account balance or transfer money to your bank account.\n Disputes Manage the dispute processes generated in your PayU account.\n Payment coupons Send payment coupons to your customers, they can pay in the cash branches available.\n Anti-fraud Guarantee PayU offers the Anti-fraud Guarantee that protects merchants against the lost due to fraud transactions.\n   ","excerpt":"According to your business needs you can use the integration services or the PayU tools. …","ref":"/docs/getting-started/select-your-integration.html","title":"Select Your Integration"},{"body":"","excerpt":"","ref":"/docs/services.html","title":"Services"},{"body":"In this topic, you find how to send data from one transaction to PayU. You must generate an HTML form with the transaction data using the HTTP POST method and pointing it to our system.\nConsiderations  Some hosting providers have settings that do not allow sending URLs as parameter values. example: \u0026amp;merchant_url=http%3A%2F%2Fwww.myshop.com For Brazil accounts, there is no redirection to the response page. Do not depend on the response page to update your database or execute processes, users may not return to it. Use the confirmation page. If you want to display information related to the transaction we suggest to show at least the following: status, reference value, currency and date. It is recommended to send the responseUrl parameter in the payment form or set PayU Module; it has priority the one sent in the parameter. If PayU does not find any, the payment process ends at the Webcheckout.  Important If you want that PayU always shows the transaction information, do not send any value in the responseUrl parameter of the payment form, and leave it blank in PayU Module. In this case, the buyer cannot return to your website.  Variables Send the following variables to the response page.\n Variables to be sent to the response page     Field Type Size Description Applies to     merchantId Numeric 12 Merchant’s ID number in PayU’s system, you find this number in the account creation mail. —   transactionState Numeric 2 Indicates the transaction’s status in the system.\nSee the transaction states in the given column. —   risk Decimal (#.00) — Risk associated with the transaction. Values between 0 and 1.\nThe higher value, the greater the risk.Format ###.00. —   polResponseCode Alphanumeric 64 Response code.\nSee the response codes in the given column. —   referenceCode Alphanumeric 255 Reference of the sale or order. It must be unique for each transaction sent to the system. —   reference_pol Alphanumeric 255 Reference or transaction number generated by PayU. —   signature Alphanumeric 255 Digital signature created for each one of the transactions —   polPaymentMethod Alphanumeric 255 Internal identifier of the used payment methods —   polPaymentMethodType Numeric 2 The type of payment method used for payment.\nSee the codes of the payment methods. —   installmentsNumber Numeric 2 Number of installments in which the credit card payment was deferred. —   TX_VALUE Numeric 14,2 Total amount of the transaction. It can contain two decimal digits. For example 10000.00 or 10000 —   TX_TAX Numeric 14,2 Value of the VAT of the transaction, if no VAT is sent, the system applies 19% automatically.\nIt can contain two decimal digits, for example 19000.00.\nIn case you have no VAT you should fill out 0. —   buyerEmail Alphanumeric 255 Field that contains the buyer’s e-mail to notify the result of the transaction. It is recommended to validate it when the data is taken on a form —   processingDate Date (YYYY-MM-DD HH:mm:ss) — The date the transaction was made. —   currency Alphanumeric 3 The respective currency in which the payment is made. The reconciliation process is performed in pesos at the representative rate of the day. —   cus Alphanumeric 255 The CUS, unique tracking code, is the payment’s reference within the Bank, it applies only to payments with PSE. PSE Colombia.   pseBank Alphanumeric 255 The name of the bank, applies only to payments with PSE. PSE Colombia.   lng Alphanumeric 2 Language in which to display the payment gateway. —   description Alphanumeric 255 Description of sale. —   lapResponseCode Alfa numéric 64 Response code that PayU delivers.\nSee the responses codes in the given column. —   lapPaymentMethod Alphanumeric 255 Payment method used in the payment, for example VISA. —   lapPaymentMethodType Alphanumeric 255 Payment method type used in the payment, for example CREDIT_CARD. —   lapTransactionState Alphanumeric 32 Transaction status.\nSee the transaction status in the given column. —   message Alphanumeric 255 Description of the transaction status. —   extra1 Alphanumeric 255 Additional field to send information about the purchase. —   extra2 Alphanumeric 255 Additional field to send information about the purchase. —   extra3 Alphanumeric 255 Additional field to send information about the purchase. —   authorizationCode Alphanumeric 12 Authorization Code of the sale. —   merchant_address Alphanumeric 255 Merchant’s address. —   merchant_name Alphanumeric 255 Merchant’s_name —   merchant_url Alphanumeric 255 Merchant’s website URL. —   orderLanguage Alphanumeric 2 Language of the order (ISO-639-1). —   pseCycle Numeric — Identifier generated by PSE. PSE Colombia   pseReference1 Alphanumeric 255 Reference no. 1 for PSE payments. PSE Colombia   pseReference2 Alphanumeric 255 Reference no. 2 for PSE payments. PSE Colombia   pseReference3 Alphanumeric 255 Reference no. 3 for PSE payments. PSE Colombia   telephone Alphanumeric 20 Merchant’s phone number. —   transactionId Alphanumeric 36 Transaction identifier. —   trazabilityCode Alphanumeric 64 Traceability Code of the sale on the merchant\u0026rsquo;s site. —   TX_ADMINISTRATIVE_FEE Decimal (#.00) — Value of the administrative fee. —   TX_TAX_ADMINISTRATIVE _FEE Decimal (#.00) — Value of the tax of the administrative fee. —   TX_TAX_ADMINISTRATIVE _FEE_RETURN_BASE Decimal (#.00) — Base value of the administrative fee for the tax refund. —   action_code_description Alphanumeric 255 VISANET response code description. VISANET Peru   cc_holder Alphanumeric 150 Name of cardholder. VISANET Peru   cc_number Alphanumeric — Credit card number. PAN VISANET Peru   processing_date_time Date (YYYY-MM-DD) — Date of the sale’s processing. VISANET Peru   request_number Alphanumeric 9 Order Number + transaction identifier VISANET Peru     Integrate the response page The following is an example in PHP of how you can integrate the response page:\n\u0026lt;?php $ApiKey = \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;; $merchant_id = $_REQUEST[\u0026#39;merchantId\u0026#39;]; $referenceCode = $_REQUEST[\u0026#39;referenceCode\u0026#39;]; $TX_VALUE = $_REQUEST[\u0026#39;TX_VALUE\u0026#39;]; $New_value = number_format($TX_VALUE, 1, \u0026#39;.\u0026#39;, \u0026#39;\u0026#39;); $currency = $_REQUEST[\u0026#39;currency\u0026#39;]; $transactionState = $_REQUEST[\u0026#39;transactionState\u0026#39;]; $firma_cadena = \u0026#34;$ApiKey~$merchant_id~$referenceCode~$New_value~$currency~$transactionState\u0026#34;; $firmacreada = md5($firma_cadena); $firma = $_REQUEST[\u0026#39;signature\u0026#39;]; $reference_pol = $_REQUEST[\u0026#39;reference_pol\u0026#39;]; $cus = $_REQUEST[\u0026#39;cus\u0026#39;]; $extra1 = $_REQUEST[\u0026#39;description\u0026#39;]; $pseBank = $_REQUEST[\u0026#39;pseBank\u0026#39;]; $lapPaymentMethod = $_REQUEST[\u0026#39;lapPaymentMethod\u0026#39;]; $transactionId = $_REQUEST[\u0026#39;transactionId\u0026#39;]; if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 4 ) { $estadoTx = \u0026#34;Transaction approved\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 6 ) { $estadoTx = \u0026#34;Transaction rejected\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 104 ) { $estadoTx = \u0026#34;Error\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 7 ) { $estadoTx = \u0026#34;Pending payment\u0026#34;; } else { $estadoTx=$_REQUEST[\u0026#39;mensaje\u0026#39;]; } if (strtoupper($firma) == strtoupper($firmacreada)) { ?\u0026gt;\u0026lt;h2\u0026gt;Transaction Summary\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Transaction status\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $estadoTx; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Transaction ID\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $transactionId; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Reference sale\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $reference_pol; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Reference transaction\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $referenceCode; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;?php if($pseBank != null) { ?\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;cus \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $cus; ?\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Bank \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $pseBank; ?\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;total amount\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;$\u0026lt;?php echo number_format($TX_VALUE); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Currency\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $currency; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo ($extra1); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Entity:\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo ($lapPaymentMethod); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;?php } else { ?\u0026gt; \u0026lt;h1\u0026gt;Error validating digital signature.\u0026lt;/h1\u0026gt; \u0026lt;?php } ?\u0026gt; \nGET example sent to the response page.\nhttp://mytestsite.com/response.php?\u0026amp;merchantId=508029\u0026amp;merchant_name=Test+PayU+Test\u0026amp;merchant_address=Av+123+Calle+12\u0026amp;telephone=7512354\u0026amp;merchant_url=http%3A%2F%2Fpruebaslapv.xtrweb.com\u0026amp;transactionState=6\u0026amp;lapTransactionState=DECLINED\u0026amp;message=Declinada\u0026amp;referenceCode=2015-05-27+13%3A04%3A37\u0026amp;reference_pol=7069375\u0026amp;transactionId=f5e668f1-7ecc-4b83-a4d1-0aaa68260862\u0026amp;description=test_payu_01\u0026amp;trazabilityCode=\u0026amp;cus=\u0026amp;orderLanguage=es\u0026amp;extra1=\u0026amp;extra2=\u0026amp;extra3=\u0026amp;polTransactionState=6\u0026amp;signature=e1b0939bbdc99ea84387bee9b90e4f5c\u0026amp;polResponseCode=5\u0026amp;lapResponseCode=ENTITY_DECLINED\u0026amp;risk=1.00\u0026amp;polPaymentMethod=10\u0026amp;lapPaymentMethod=VISA\u0026amp;polPaymentMethodType=2\u0026amp;lapPaymentMethodType=CREDIT_CARD\u0026amp;installmentsNumber=1\u0026amp;TX_VALUE=100.00\u0026amp;TX_TAX=.00\u0026amp;currency=USD\u0026amp;lng=es\u0026amp;pseCycle=\u0026amp;buyerEmail=test%40payulatam.com\u0026amp;pseBank=\u0026amp;pseReference1=\u0026amp;pseReference2=\u0026amp;pseReference3=\u0026amp;authorizationCode=\u0026amp;TX_ADMINISTRATIVE_FEE=.00\u0026amp;TX_TAX_ADMINISTRATIVE_FEE=.00\u0026amp;TX_TAX_ADMINISTRATIVE_FEE_RETURN_BASE=.00 Signature validation The signature validation allows you to check the data integrity, you must generate the signature with the information you find in the response page and compare it with the information from the signature parameter.\nTo validate the signature in the response page, you should consider:\n To get the new value new_value, approximate the TX_VALUE to a decimal, using the rounding method Round half to even:  If the first decimal is even and the second is 5, round it to the lowest value. If the first decimal is odd and the second is 5, round it to the higher value. Otherwise you must round it to the nearest decimal.   Get the parameters to generate the signature (merchantId, referenceCode, TX_VALUE, currency, and transactionState) from the response page, do not get them from your database. You must store your ApiKey safely. Create the signature as follows:  \u0026#34;ApiKey~merchantId~referenceCode~new_value~currency~transactionState\u0026#34; \nExamples:\nFirst decimal is an even number and the second is 5\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters get from the response page: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.25 - currency = USD - transactionState = 6 The signature is generated as follows: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.2~USD~6) = 00286dc735bd9eaa8ae3a3a4cbb40688 signature = 00286dc735bd9eaa8ae3a3a4cbb40688 First decimal is an odd number and the second is 5\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters get from the response page: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.35 - currency = USD - transactionState = 6 The signature is generated as follows: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.4~USD~6) = 9df2bb60e2838170009040982967923f signature = 9df2bb60e2838170009040982967923f Other cases\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters get from the response page: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.34 - currency = USD - transactionState = 6 The signature is generated as follows: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.3~USD~6) = 779f163be9347a691bcdb25064644795 signature = 779f163be9347a691bcdb25064644795 Compare your signature           var errApiKeyReq = \"Please enter the ApiKey\" var errApiKeyMin = \"Please enter more than 5 digits\" var errApiKeyMax = \"Please enter less than 32 digits\" var errMerchantReq = \"Please enter the Merchant Id\" var errMerchantMin = \"Please enter more than 5 digits\" var errMerchantMax = \"Please enter less than 7 digits\" var errMerchantPosi = \"Please enter a positive number\" var errMerchantNum = \"Please enter just numbers\" var errReferenceReq = \"Please enter the Reference Code\" var errReferenceMin = \"Please enter the Reference Code\" var errReferenceMax = \"Please enter less than 255 digits\" var errAmountReq = \"Please enter the Amount\" var errAmountMin = \"Please enter the Amount\" var errAmountMax = \"Please enter less than 14 digits\" var errAmountPosi = \"Please enter a positive number\" var errAmountNum = \"Please enter just numbers\" var errCurrReq = \"Please enter a valid Currency in format ISO 4217\" var errCurrMin = \"Please enter more than 3 digits\" var errCurrMax = \"Please enter less than 3 digits\" var errTsReq = \"Please enter the transaction code\" var errTsMin = \"Please enter the transaction code\" var errTsMax = \"Please enter the transaction code less than 3 digits\" var errSpReq = \"Please enter the transaction code\" var errSpMin = \"Please enter the transaction code\" var errSpMax = \"Please enter the transaction code less than 1 digit\"    Algorithm: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ~ 4 (Approved) 6 (Declined) 104 (Error) 5 (Expired) 7 (Pending)  ) Result:\u0026nbsp;      This calculator lets you generate the signature using any of the available encryption methods.\n","excerpt":"In this topic, you find how to send data from one transaction to PayU. You must generate an HTML …","ref":"/docs/integrations/webcheckout-integration/response-page.html","title":"Response Page"},{"body":"Considerations Before using the Queries feature, take into account the following considerations:\n It is recommended to use Queries for transactions in PENDING state. According to the payment method, the time to perform the query may vary. Nevertheless, it is recommended to perform the first query seven minutes after the transaction is created. Do not retry a query of a transaction when PayU indicates that the transaction does not exist. Bank transfer transactions are only available every ten minutes.  Query criteria To query transactions, PayU allows you to search by any of the following criteria:\n Order Id: it is generated by PayU. Identifies the order in PayU system and is the main element where any movement is recorded (charges, retries, refunds, etc) Transaction Id: PayU generates this identifier per each movement associated with an order (Order ID). Reference Number: it is generated by the shop. Identifies the order or purchase in your system, PayU saves this value as you send it.  What\u0026rsquo;s next? The integration with this feature can be performed using one of our integration types:\n For API integrations, refer to this topic For SDK integrations, refer to this topic  ","excerpt":"Considerations Before using the Queries feature, take into account the following considerations:\n It …","ref":"/docs/services/queries.html","title":"Queries for transactions"},{"body":"You can connect your online store to the PayU platform and the checkout process will be handled on your website. To integrate this option you must have a PayU Business account and advanced programming skills.\nAccess multiple payment methods (varies per country), including credit cards, bank transfers, and cash payments.\nInitial settings PayU allows you to integrate with the transactional gateway, available payment tools and Queries by developing a HTTPS client to send the transaction information through SSL. It is critical that sensitive transaction data such as credit card number, expiration date, are not stored. It is recommended to follow PCI DSS’ best practices (Payment Card Industry Data Security Standard).\nThe transmission of transactions is secured through a TLS (Transport Layer Security) 256-bit connection from the shop\u0026rsquo;s server our payment Gateway. The exchange of messages is done via JSON or XML strings and operations are distinguished by a command that is included in the request. Check out the following JSON and XML examples:\n JSON XML   POST /payments-api/4.0/service.cgi HTTP/1.1\nHost: sandbox.api.payulatam.com\nContent-Type: application/json; charset=utf-8\nAccept: application/json\nContent-Length: length { \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;xxxxxxxxxxxxx\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;xxxxxxxxxxxxx\u0026#34; } }   POST /payments-api/4.0/service.cgi HTTP/1.1\nHost: sandbox.api.payulatam.com\nContent-Type: application/json; charset=utf-8\nAccept: application/xml\nContent-Length: length\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;xxxxxxxxxxxxx\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;xxxxxxxxxxxxx\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    You can set the language you want to use in the request through the Content-type and Accept HTTP headers. You can use all possible combinations:\n   CONTENT-TYPE ACCEPT     application/xml application/xml   application/json application/json   application/xml application/json   application/json application/xml    Considerations  You must have an active PayU account. You must install a valid SSL certificate in your server and your site must be able to make SSL connections. Due to this, the virtual machine must have appropriate security extensions. Temporarily, do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA in your payment requests. You must have CGI or server languages such as Java, C#, VB, PHP, etc. You must be able to store your authentication credentials (API Key and API Login) safely. The encoding for messages must be UTF-8. The dates must have format yyyy-MM-ddTHH:mm:ss, the time format is 24 hours. Example: 2015-08-22T21:35:12. Normally the connection guarantees response times of three seconds on average. If there is an unusual situation, the maximum response time is one minute. It is highly recommended that you set timeouts when you connect with PayU. It is important to validate the length and numbers of credit cards by franchise, together with the security codes.  Available features ","excerpt":"You can connect your online store to the PayU platform and the checkout process will be handled on …","ref":"/docs/integrations/api-integration.html","title":"API Integration"},{"body":" Note The Sales Report displayed in the merchant panel are limited to 20 thousand rows for both displaying and downloading. If you need display more rows or columns in the report, contact your sales representative.  What is the Financial Statement? The Financial Statement helps you identify the movements (Commission discounts, transfer fees, reversions) of your PayU account. This report shows the summary of the account, with debits and credits made during the month, and information of the available balance.\nFurthermore, the Financial Statement helps the accounting area to reconcile all trade e-commerce operations.\nPermission required To have access to this module, you need to have a profile with the following permissions enabled\n Movements \u0026gt; Statement Movements \u0026gt; Download CSV report\nThis permission must be enabled to let you download the report.  Refer to Profiles and Permissions for more information.\nConsult the report Log into your PayU account. In the left menu, expand the Transactions menu and select Financial Statement. By default, the report shows the operation information* of the last 30 days, from the most recent to the oldest.\n*Limited to top 20 thousand records.\nThe Statements Balance section is divided in three parts as follows:\nGeneral Balance The first part is the general balance where you can see the funds in your PayU account and a button to let you request a transfer to your bank account.\nThe general balance, which is comprised of:\n Available balance: the total funds received from your sales, after deducting the commission of PayU. Frozen balance: the funds that are part of a dispute in process or an unapproved refund requested by your customers. Total balance: the money you can transfer to your bank account. It consists of the Available balance minus the Frozen balance.  Sales made chart In the second part, you can understand the distribution of costs (including taxes and transaction related costs), and analyze a sales chart and a pie chart that summarizes all this information.\nThe charts shows the information available in the date frame selected.\nThe pie chart provides the following information:\n Sales Made: total value of your sales before taxes and PayU fee, your income during the consulted period. Taxes: additional charges generated according to your tax regime. If your tax regime is different, contact sac@payu.com. PayU Fee: PayU processing cost, including the sales percentage plus the flat rate applied to your account.  Report table In the last part below the charts, you find a table with the credit and debit information of the latest operations. You can see the operation type and the value (credit or debit) of each row.\nThe report has the following columns:\n   Column Description     Operation ID and date of the operation.   Type of Operation Information of the operation. Depending on its type, the information displayed varies.\nClick to expand the detailed values of the operation in the Debit and Credit columns.\n   Credit Amount credited to your Account.   Amount Amount debited from your Account.    Note Click next to Value label to merge debit and credit; the resultant value debit minus the positive value of credit.\nFor example, if the debit column value is $3.296,63 and the credit column value is $950,00, the resulting column value after merging is $2.346,63.\n Filter the report You can use the search bar above the graph or the calendar to set filters. You can filter by Type of Operation, Sale or Transfer ID, Reference*, or Payment method type*.\n* These filters are displayed when the selected Type of Operation is Sale, Reversion, or Chargeback.\nTo set a filter, click the Filter your search field at the top of the sales made chart.\nConfigure the values for the filters and click Search. Once you click it, the filter table shows the operations that meet the selected criteria.\nAlong with these filters, you can also set a time frame when the buyer performed the sale using the dates filter at the top right corner. The date frame defined here\nThe date range of this filter is three (3) months before the end date. If you exceed this range, The report displays the information of three (3) months after the start date.\nTo see the information of a given date, set it for both start and end date.\nDownload the report To download the report, click the Download button located at the top or at the bottom of the report table.\nA pop up window appear where you can select the options to generate the report*.\nNote * If the file format does not meet the your needs, contact your sales executive to know more about the option to send files through SFTP and the templates that we have for this report.  The report is automatically downloaded in an Excel (.csv) format. The name of the report uses the following formats:\n CSV with what you are seeing on the screen option: [DownloadDateInMillis]_statement_report_[AccountId].csv Balance from previous secure option: [AccountId]_[DownloadDate]_transactions.csv*  * Download date in format dd-mm-yy-hh-mm-ss\nDownload an example of the generated file using the CSV with what you are seeing on the screen option.  Download an example of the generated file using the Balance from previous secure option.   In the downloaded report, you can validate all the credits and debits of your account and also, you can reconcile the commissions of PayU that appear in the invoice received monthly.\nPayU commissions and taxes appear in the invoice\nTo reconcile the information with the sales report, you can use the ReferenceCode variable which appears in brackets in the transaction.\nIn the generated report you find the following concepts.\n   Concept Description     SALES Approved amount of the transaction.   POL_COMMISSION PayU commission: Fixed percentage established for trade + established fixed value.   IVA_POL_COMMISSION Tax commission.   IVA_RETENTION IVA retention.*   RENTA_RETENTION Retefuente retention.*   ICA_RETENTION ICA retention.*   RETENTION SALES Transaction refund.   RETENTION POL_COMMISSION Refund of the PayU Commission.   RETENTION IVA_POL_COMMISSION Refund of the PayU Commission tax.   RETENTION IVA_RETENTION Refund of the IVA retention.   RETENTION RENTA_RETENTION Refund of the Retefuente retention.   RETENTION ICA_RETENTION Refund of the ICA retention.   PAYMENT_ORDER Transfer of the available Balance to the registered bank account.   PAYMENT_ORDER_POL_COMMISSION Transfer cost.   IVA_PAYMENT_ORDER_POL_COMMISSION Transfer tax.   FREEZE_FUND Frozen balance (refunds or disputes).   UNFREEZE_FUND Release of the frozen amounts.   CHARGEBACK Chargeback or lost dispute.   DISCRETIONARY Discretionary movement or additional credit to the account.   * Applies only to transactions with credit card.     Note The generated report is stored during 90 days in the My downloaded reports section.  ","excerpt":"Note The Sales Report displayed in the merchant panel are limited to 20 thousand rows for both …","ref":"/payu-module-documentation/reports/financial-statement.html","title":"Financial Statement"},{"body":"Prerequisites Before moving on with the explanation of how the PayU module is organized, you need the following:\n Have a user in PayU module. Learn how to create one here. Have read and understand the concepts behind the PayU Module.  PayU Module web application PayU module is divided in four main groups:\n Account options. Settings and user options. Main panel. Footer.  Note The options displayed in this article depends on the profile you have to access each account.  1. Account options This panel has the options required to manage the accounts associated to the current merchant. In this panel you find the following options:\n    Option Sub option Available in Description     Merchant ID   ID number of your shop in PayU’s system. This ID is required when you want to use Integrations.   Account Account information  Displays the name and ID of the selected account.\nThis option also lets you to change the account and perform operations related to it. Click the ▾ symbol to find these options or switch the account.\n    My business information  Shows the location, main contact information of your business. Also, this option shows the people associated with your business.    Your sales information  Shows the information of how you make your sales, what you sell, the logo of your shop, delivery information, how you offer your products or services and how your clients can contact you.    Bank information  Shows the bank account and the Intermediary bank where you want to transfers the funds collected for this account.    Accounts created  Shows the list of account available in your merchant.   Balance available   Displays the balance available in the selected account.   Home   Displays the welcome page of the PayU module. For more information, refer to Home page.   Transactions Sales report  Review the details of payments received, including the most used payment methods and frequent clients. For more information, refer to Sales report.    Disputes  Manage the dispute processes generated in your PayU account. For more information, refer to Disputes.    Financial Statement  Allows you to understand the money flow in your account, the applied charges and the related fees and taxes. For more information, refer to Financial Statement.    Withholding certificate  Download your Withholding Certificate according to the requested period of time. For more information, refer to Withholding Certificate.   Transfers Transfers  Allows you to send the funds collected in your PayU account to your Bank account. For more information, refer to Transfers.    Schedule Transfers  Allows you create transfer on a daily, weekly, monthly basis. Furthermore, you can configure custom transfers as you need. For more information, refer to Schedule transfers.    Edit bank information  Allows you to request the change of the bank account and the Intermediary bank where you want to transfers the funds collected for this account. For more information, refer to Update my information   Sell with PayU Sell on the internet  Allows you to create payment requests so you can charge to your customers without having a website. For more information, refer to Payment request    Cash charges  Allows you to generate payment coupons or collection cards* with the necessary information to let your clients make cash payments as many times as they need in the available payment points. For more information, refer to Payment coupons.\n*Collection cards are only available in Argentina.    My tools  Allows you find and manage the information of Payment links (Payment request) and Payment Coupons* you have created in your account.\n*Payment coupons are only available in Argentina and Colombia.    2. Settings and user options. This panel has the options required to manage your merchant and your user.\nMerchant settings This option allows you to manage users, permissions, profiles and the technical configuration of your merchant. By clicking the Settings button, you can find the following options:\n    Option Available in Description     User management  Allows you to grant access to your team members so they can collect payments online or check information about your payments. For more information, refer to User management.   Permissions and profiles  Allows you to create custom profiles with specific permissions.\nIn this section, you can also query the default permission included in the PayU Module. For more information, refer to Profile and permission management.   Technical configuration  In this option, you can find the variables required to integrate PayU with your Web page. Furthermore, you can configure the notifications of processed payments and Disputes. For more information, refer to Technical configuration.    User settings This option allows you to manage your profile. In the main view of this option, you find your e-mail, your current profile in the PayU module (for the current account), and the account Id; click the ▾ symbol to display the available user settings.\n    Option Description     Change merchant This option is available when your user is enrolled to more than one merchant.   My profile In this option, you can configure your preferences and update your password as desired.   Sign off This option closes the session of the active user.    3. Main panel This panel loads the selected option either in the left panel or in the option at the top. The Home page is selected by default, so it loads as soon as you log in the PayU module.\nTo set an option as displayed by default, click the three dot menu at the top left of the panel and select Set as main page.\nHome page The home page is starting point of the Merchant panel. It shows the shortcuts to perform sales on-line, control your finances, transfers funds, learn about e-commerce and leave us comments.\nIn this page, you can also take a tour using the Virtual tour button. This button takes your through the main options to manage your account.\nNote Some options are attached to the permissions configured to your user.  4. Footer The footer provides the phone number to contact us and the link to the terms and conditions according to the processing country.\nThe following are the phone numbers and contact time:\n (+5411) 598 42132 \u0026gt; Mon - Fri 09:00 - 22:00 (UTC -3:00) (+5511) 4130 5311 \u0026gt; Mon - Fri 09h to 18h / Sat 09h to 15h - Brasilia Time Zone (UTC -3:00) (+562) 258-13949 \u0026gt; Mon - Fri 8:00 - 21:00 Chilean time (+57) 601 654 0721 \u0026gt; Mon - Fri 7:00 - 20:00 Colombian time (UTC -5:00) (+5255) 474 11439 \u0026gt; Mon - Fri 7:00 - 20:00 CDMX time (+507) 836 5577 \u0026gt; Mon - Fri 7:00 - 20:00 Colombian time (UTC -5:00) (+511) 708 5381 \u0026gt; Mon - Fri 7:00 - 20:00 Peruvian time (UTC -5:00)  ","excerpt":"Prerequisites Before moving on with the explanation of how the PayU module is organized, you need …","ref":"/payu-module-documentation/getting-started/understanding-the-payu-module.html","title":"Getting to know the PayU module"},{"body":"Prerequisites  You need an active account in PayU Latam. Having installed Drupal Commerce Kickstart 7.xx. Having the PayU\u0026rsquo;s Drupal plugin downloaded and stored in an accessible location. Click here to download it. Having access to the Drupal installation folder. Having access to the Drupal backend.  Installation The process to install the plugin in the Drupal server only requires to unzip the plugin in path \\sites\\all\\modules. The unzipped folder has the following structure:\nConfiguration  Log in to the Drupal\u0026rsquo;s administration panel. Open the Site settings menu and click Modules option inside the Advanced settings section.  Locate and activate the module Payment Payulatam. YOu can use the search filter to find it easier.\nOnce finish, click Save configuration.  Back in the Drupal\u0026rsquo;s administration panel. Open the Store settings menu and click Payment methods.\nFind Payment gateway PayuLatam in the Disabled payment method rules list and click enable.  If the activation was successful, Drupal shows the following message\nNow, click edit link in the recently enabled method.\nThen, locate the Actions section and click edit next to the action Enable payment method: PayuLatam. Here, configure the plugin using your PayU account.   API KEY: Unique key of your commerce, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; API Key). Merchant Id: ID of your commerce in PayU Latam. Account Id: ID of the PayU account according to the country where you want to sell. Test Enabled: Set No if you want to process in the Production environment. Otherwise, set Yes.  Leave the other fields with their pre-configured values.\nNote For testing purposes, you can use the Merchant ID, APIKey, and Account ID available in Test Your Solution.\nOnce you are in the credit card payment form, and ensuring that you have the message at the top of the gateway Transaction in test mode, you must:\n Enter the text APPROVED in the Full Name field if you want the transaction to be approved, REJECTED if you want it to be rejected or PENDING if you want it to be pending. You must enter a valid card number in the Card Number field according to the selected franchise. For this, you can use an online credit card generator. All other fields can be random.   At this point, your customers can pay with PayU Latam when they do the checkout in the Drupal\u0026rsquo;s shopping cart.\n","excerpt":"Prerequisites  You need an active account in PayU Latam. Having installed Drupal Commerce Kickstart …","ref":"/docs/tools/shopping-cart-plugins/drupal.html","title":"Drupal"},{"body":"To integrate with Payments SDK Chile, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments API includes the following methods:\n Submit transaction with credit cards Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Chile, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Transactions with credit card using two-step flows are available under demand. Contact your Sales representative for more information.  Considerations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Chile. For payments with credit card tokens, include the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization SDK. Transactions in CHILEAN PESOS with decimal amounts are not allowed. Two-step flows are not supported for international credit cards. Transactions with credit card using two-step flows are available under demand and for single installment payments. Contact your Sales representative for more information. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable PROCESS_WITHOUT_CVV2 as true and remove the variable CREDIT_CARD_SECURITY_CODE.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512325\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CL, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 7 days. After this time, the transaction is auto-voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. Captures are only allowed for transactions in one installment.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400468293\u0026#34;); //Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;ad6940f1-cf8b-474a-a69d-00382084d16c\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); //Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, //Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400468293\u0026#34;, //Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;ad6940f1-cf8b-474a-a69d-00382084d16c\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512325\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4037997623271984\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2030/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4037997623271984\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2030/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CL, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    ### Considerations * The parameter `EXPIRATION_DATE` is not mandatory. If you don't send this parameter, its default value for is seven days after the current date at 12:00 pm.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. * You must set a response URL in the parameter `NETWORK_CALLBACK_URL` in the request; this URL redirects the user back to your page after they finish the online payment procedure. * You must redirect the payer to the Klap webpage (fka as Multicaja) to let them perform the cash payment. This URL is found in the `BANK_URL` parameter in the response. ### Method call The following are the bodies of the request and response of this payment method. Mapparameters = new HashMap(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \"512325\"); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \"\"+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \"payment test\"); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \"Language.es\"); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \"\"+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \"\"+Currency.CLP.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \"1\"); //Enter the buyer's name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \"First name and second buyer name\"); //Enter the buyer's e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \"buyer_test@test.com\"); //Enter the buyer's contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \"7563126\"); //Enter the buyer's contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \"123456789\"); //Enter the buyer's address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \"Autopista Del Sol, 0 - Km.43 Costado Sur\"); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \"5555487\"); parameters.put(PayU.PARAMETERS.BUYER_CITY, \"RM\"); parameters.put(PayU.PARAMETERS.BUYER_STATE, \"Talagante\"); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \"CL\"); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \"000000\"); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \"7563126\"); // -- Payer -- //Enter the payer's ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \"1\"); //Enter the payer's name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \"First name and second payer name\"); //Enter the payer's e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \"payer_test@test.com\"); //Enter the payer's contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \"7563126\"); //Enter the payer's contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \"5415668464654\"); //Enter the payer's address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \"Autopista Del Sol, 0 - Km.43 Costado Sur\"); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \"5555487\"); parameters.put(PayU.PARAMETERS.PAYER_CITY, \"RM\"); parameters.put(PayU.PARAMETERS.PAYER_STATE, \"Talagante\"); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \"CL\"); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \"000000\"); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \"7563126\"); // Enter the network callback URL here. parameters.put(PayU.PARAMETERS.NETWORK_CALLBACK_URL, \"1\"); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \"MULTICAJA\"); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \"2021-07-01T20:00:00\"); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \"127.0.0.1\"); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); ## Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method. ### Considerations * If you don't send the `RESPONSE_URL` parameter in the extra parameters, the API took the value from the _**Response URL**_ variable in your PayU Module (_**Settings**_  _**Technical configuration**_). * When you process bank transfer payment, you must redirect the customer to the URL found in the `URL_PAYMENT_REDIRECT` extra parameter concatenated with the `TRANSBANK_DIRECT_TOKEN` extra parameter as follows: `URL_PAYMENT_REDIRECT?token_ws=TRANSBANK_DIRECT_TOKEN`. * If the payment request is successful, the transaction has state `PENDING` and responseCode `PENDING_PAYMENT_IN_ENTITY`; this is because the payer is redirected to the selected bank to complete the payment. * The response page must have the following variables: | Variable | Description | |-------------------|---------------------------------------------------------------| | transactionState | State of the transaction. | | reference_pol | Reference code to identify a transaction in PayU. | | TX_VALUE | Transaction amount. | | authorizationCode | Authorization code of the transaction. | | processingDate | Transaction date. | | cc_number | Visible number of the card used in the transaction. | The variables above are sent via GET. ### Method call The following are the bodies of the request and response of this payment method. -- Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Chile, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/docs/integrations/sdk-integration/payments-sdk-chile.html","title":"Payments SDK - Chile"},{"body":"To integrate with Queries API, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Production: https://api.payulatam.com/reports-api/4.0/service.cgi   Available methods Queries API includes the following methods:\n Query by Order Id Query by Transaction Id Query by Reference Id Ping  Query by Order Id Order Id is a value generated by PayU to identify all the transactions generated for a payment request performed by your customer. You can use the ORDER_DETAIL command to consult the status of an Order by its identifier.\nThe following are the request and response examples for this operation.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;ORDER_DETAIL\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;orderId\u0026#34;: 857695047 } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: { \u0026#34;id\u0026#34;: 857695047, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;status\u0026#34;: \u0026#34;CAPTURED\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-05-03T18:01:10.946Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description Documentation\u0026#34;, \u0026#34;airlineCode\u0026#34;: null, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payulatam.com/confirmation\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 100\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Medellin\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Antioquia\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;buyerAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 100\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Medellin\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Antioquia\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;cnpj\u0026#34;: null }, \u0026#34;antifraudMerchantId\u0026#34;: null, \u0026#34;isTest\u0026#34;: true, \u0026#34;transactions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026#34;, \u0026#34;order\u0026#34;: null, \u0026#34;creditCard\u0026#34;: { \u0026#34;maskedNumber\u0026#34;: \u0026#34;547130******0003\u0026#34;, \u0026#34;issuerBank\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;cardType\u0026#34;: null }, \u0026#34;bankAccount\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;source\u0026#34;: null, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1620064792953, \u0026#34;extraParameters\u0026#34;: null }, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 93\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogota\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogota DC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;dniType\u0026#34;: null }, \u0026#34;termsAndConditionId\u0026#34;: 202, \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_TOTAL_AMOUNT\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;CURRENT_TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;MIN_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PRICING_PROFILE_GROUP_ID\u0026#34;: \u0026#34;MG-PRICING_2_341559\u0026#34;, \u0026#34;MAX_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PERCENT_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MAX_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MERCHANT_PROFILE_ID\u0026#34;: \u0026#34;MG-PRICING_1_51803\u0026#34;, \u0026#34;MIN_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; } } ], \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;creationDate\u0026#34;: 1620064873257, \u0026#34;isCreatedUsingStandardIntegrationParams\u0026#34;: null, \u0026#34;merchantId\u0026#34;: 508029, \u0026#34;processedTransactionId\u0026#34;: \u0026#34;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026#34;, \u0026#34;orderSignature\u0026#34;: \u0026#34;49f80210a72e9b7cafe9001338450bbb\u0026#34; } } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;ORDER_DETAIL\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;orderId\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.Integer\u0026#34;\u0026gt;2637540\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;order\u0026#34;\u0026gt; \u0026lt;id\u0026gt;857695047\u0026lt;/id\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;status\u0026gt;CAPTURED\u0026lt;/status\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-05-03T18:01:10.946Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description Documentation\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payulatam.com/confirmation\u0026lt;/notifyUrl\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;calle 100\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Medellin\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Antioquia\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;buyerAddress\u0026gt; \u0026lt;street1\u0026gt;calle 100\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Medellin\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Antioquia\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/buyerAddress\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;id\u0026gt;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026lt;/id\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;maskedNumber\u0026gt;547130******0003\u0026lt;/maskedNumber\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-05-03T12:59:52\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;calle 93\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;125544\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogota\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogota DC\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;termsAndConditionId\u0026gt;202\u0026lt;/termsAndConditionId\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_TOTAL_AMOUNT\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CURRENT_TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PRICING_PROFILE_GROUP_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_2_341559\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PERCENT_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MERCHANT_PROFILE_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_1_51803\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;/transactions\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;creationDate\u0026gt;2021-05-03T13:01:13\u0026lt;/creationDate\u0026gt; \u0026lt;merchantId\u0026gt;508029\u0026lt;/merchantId\u0026gt; \u0026lt;processedTransactionId\u0026gt;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026lt;/processedTransactionId\u0026gt; \u0026lt;orderSignature\u0026gt;49f80210a72e9b7cafe9001338450bbb\u0026lt;/orderSignature\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Query by Transaction Id Transaction Id is a value generated by PayU to identify one transaction generated for an order. You can use the TRANSACTION_RESPONSE_DETAIL command to consult the information of a given transaction.\nThe following are the request and response examples for this operation.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;TRANSACTION_RESPONSE_DETAIL\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;transactionId\u0026#34;: \u0026#34;546e0fe9-8076-46b5-9f73-622c5a12f5cb\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1620069958670, \u0026#34;extraParameters\u0026#34;: null } } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;TRANSACTION_RESPONSE_DETAIL\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;transactionId\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.String\u0026#34;\u0026gt;546e0fe9-8076-46b5-9f73-622c5a12f5cb\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;transactionResponse\u0026#34;\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-05-03T14:25:58\u0026lt;/operationDate\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Query by Reference Id Reference Id is a value generated by your commerce to identify an order. You can use the ORDER_DETAIL_BY_REFERENCE_CODE to consult the status of an Order by your own order identifier (reference). The following are the request and response examples for this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;ORDER_DETAIL_BY_REFERENCE_CODE\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;referenceCode\u0026#34;: \u0026#34;HP14015317573744\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: [ { \u0026#34;id\u0026#34;: 844427581, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;status\u0026#34;: \u0026#34;CAPTURED\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;HP14015317573744\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;9518567a-0da7-44f9-b4d5-f8b8ac8d96d4\u0026#34;, \u0026#34;airlineCode\u0026#34;: null, \u0026#34;language\u0026#34;: \u0026#34;pt\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://api-pay-aff.vulcano.rocks/hotpay-notification-server/api/v1/payu/notification\u0026#34;, \u0026#34;shippingAddress\u0026#34;: null, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;0c970b19-3fbf-362c-b64b-c2c6ece8d01a\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: null, \u0026#34;buyerAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;ae QOprITzE\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;448\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;BH\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MG\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;27519777\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;dniNumber\u0026#34;: \u0026#34;1111\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;61609024311\u0026#34; }, \u0026#34;antifraudMerchantId\u0026#34;: null, \u0026#34;isTest\u0026#34;: true, \u0026#34;transactions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026#34;, \u0026#34;order\u0026#34;: null, \u0026#34;creditCard\u0026#34;: { \u0026#34;maskedNumber\u0026#34;: \u0026#34;411111******1111\u0026#34;, \u0026#34;issuerBank\u0026#34;: \u0026#34;THE CHASE MANHATTAN BANK\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;cardType\u0026#34;: null }, \u0026#34;bankAccount\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;source\u0026#34;: null, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1531757342757, \u0026#34;extraParameters\u0026#34;: null }, \u0026#34;deviceSessionId\u0026#34;: null, \u0026#34;ipAddress\u0026#34;: \u0026#34;10.100.1.30\u0026#34;, \u0026#34;cookie\u0026#34;: null, \u0026#34;userAgent\u0026#34;: \u0026#34;Apache-HttpClient/4.3.1 (java 1.5)\u0026#34;, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;c48c9d72c2344173a8a66ad157f1415e@payutest.com\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;ae QOprITzE\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;448\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;BH\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MG\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;27519777\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;emailAddress\u0026#34;: \u0026#34;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: null, \u0026#34;dniNumber\u0026#34;: \u0026#34;1111\u0026#34;, \u0026#34;dniType\u0026#34;: null }, \u0026#34;termsAndConditionId\u0026#34;: 202, \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 119.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_TOTAL_AMOUNT\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;CURRENT_TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.65, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_TOTAL_INCOME_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 52921.05, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.35, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 45883.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;MIN_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PRICING_PROFILE_GROUP_ID\u0026#34;: \u0026#34;MG-PRICING_2_341559\u0026#34;, \u0026#34;MAX_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PERCENT_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MAX_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MERCHANT_PROFILE_ID\u0026#34;: \u0026#34;MG-PRICING_1_51803\u0026#34;, \u0026#34;MIN_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: \u0026#34;1\u0026#34; } } ], \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 119.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.65, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.35, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 45883.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;creationDate\u0026#34;: 1531757337149, \u0026#34;isCreatedUsingStandardIntegrationParams\u0026#34;: null, \u0026#34;merchantId\u0026#34;: 508029, \u0026#34;processedTransactionId\u0026#34;: \u0026#34;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026#34;, \u0026#34;orderSignature\u0026#34;: \u0026#34;bbd718c869298251a91329b673c5abfa\u0026#34; } ] } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;ORDER_DETAIL_BY_REFERENCE_CODE\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;referenceCode\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.String\u0026#34;\u0026gt;HP14015317573744\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;844427581\u0026lt;/id\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;status\u0026gt;CAPTURED\u0026lt;/status\u0026gt; \u0026lt;referenceCode\u0026gt;HP14015317573744\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;9518567a-0da7-44f9-b4d5-f8b8ac8d96d4\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;pt\u0026lt;/language\u0026gt; \u0026lt;notifyUrl\u0026gt;http://api-pay-aff.vulcano.rocks/hotpay-notification-server/api/v1/payu/notification\u0026lt;/notifyUrl\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;0c970b19-3fbf-362c-b64b-c2c6ece8d01a\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;APPROVED\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026lt;/emailAddress\u0026gt; \u0026lt;buyerAddress\u0026gt; \u0026lt;street1\u0026gt;ae QOprITzE\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;448\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;BH\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;MG\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;27519777\u0026lt;/postalCode\u0026gt; \u0026lt;/buyerAddress\u0026gt; \u0026lt;dniNumber\u0026gt;1111\u0026lt;/dniNumber\u0026gt; \u0026lt;CNPJ\u0026gt;61609024311\u0026lt;/CNPJ\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;id\u0026gt;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026lt;/id\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;maskedNumber\u0026gt;411111******1111\u0026lt;/maskedNumber\u0026gt; \u0026lt;issuerBank\u0026gt;THE CHASE MANHATTAN BANK\u0026lt;/issuerBank\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2018-07-16T11:09:02\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;ipAddress\u0026gt;10.100.1.30\u0026lt;/ipAddress\u0026gt; \u0026lt;userAgent\u0026gt;Apache-HttpClient/4.3.1 (java 1.5)\u0026lt;/userAgent\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;c48c9d72c2344173a8a66ad157f1415e@payutest.com\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;APPROVED\u0026lt;/fullName\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;ae QOprITzE\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;448\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;BH\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;MG\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;27519777\u0026lt;/postalCode\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;emailAddress\u0026gt;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026lt;/emailAddress\u0026gt; \u0026lt;dniNumber\u0026gt;1111\u0026lt;/dniNumber\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;termsAndConditionId\u0026gt;202\u0026lt;/termsAndConditionId\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;119.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_TOTAL_AMOUNT\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CURRENT_TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.65\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_TOTAL_INCOME_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;52921.05\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.35\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45883.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PRICING_PROFILE_GROUP_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_2_341559\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PERCENT_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MERCHANT_PROFILE_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_1_51803\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;/transactions\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;119.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.65\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.35\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45883.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;creationDate\u0026gt;2018-07-16T11:08:57\u0026lt;/creationDate\u0026gt; \u0026lt;merchantId\u0026gt;508029\u0026lt;/merchantId\u0026gt; \u0026lt;processedTransactionId\u0026gt;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026lt;/processedTransactionId\u0026gt; \u0026lt;orderSignature\u0026gt;bbd718c869298251a91329b673c5abfa\u0026lt;/orderSignature\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform. The following are the request and response examples for this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: \u0026#34;ping\u0026#34; } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;string\u0026#34;\u0026gt;ping\u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    ","excerpt":"To integrate with Queries API, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/queries-api.html","title":"Queries API"},{"body":"The following section shows the payment methods supported per country and provides some considerations. Refer to the paymentMethod parameter column to know the value to be sent as Payment Method while using API or SDK integrations.\nArgentina      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Argencard ARGENCARD Credit Cards     Cabal CABAL Credit Cards     Cencosud CENCOSUD Credit Cards     Cobro Express COBRO_EXPRESS Cash     Diners DINERS Credit Cards     Mastercard MASTERCARD Credit Cards Supported cards: CRM Falabella, Nativa, Cordial, Cordobesa, and Nexo.    Naranja NARANJA Credit Cards     PAGOFACIL PAGOFACIL Cash     RAPIPAGO RAPIPAGO Cash     Shopping SHOPPING Credit Cards     VISA VISA Credit Cards Supported cards: Shopping, Nativa, Credimas, and Nevada.    VISA VISA_DEBIT Debit Cards     Brazil      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Boleto Bancario BOLETO_BANCARIO Cash Does not conciliate at weekends or holidays    Diners DINERS Credit Cards     Elo ELO Credit Cards     Hipercard HIPERCARD Credit Cards     TEF Itaú ITAU Bank Transfer Only available for Itaú accounts.    Mastercard MASTERCARD Credit Cards     VISA VISA Credit Cards     Chile      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Diners DINERS Credit Cards     Mastercard MASTERCARD Credit Cards     Mastercard MASTERCARD_DEBIT Debit Cards     Klap (FKA Multicaja) MULTICAJA Cash     Redcompra TRANSBANK_DEBIT Debit and Prepaid Cards     VISA VISA Credit Cards     VISA VISA_DEBIT Debit Cards     Colombia PayU in Colombia allows you to integrate with most of the cash payments methods in Colombia. Furthermore, we support Codensa and Falabella.\n     Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Baloto BALOTO Cash     Banco de Bogotá BANK_REFERENCED Bank Reference     Bancolombia BANK_REFERENCED Bank Reference     Codensa CODENSA Credit Cards     Davivienda BANK_REFERENCED Bank Reference     Diners DINERS Credit Cards     Efecty EFECTY Cash     Mastercard MASTERCARD Credit Cards     PSE PSE Bank Transfer PSE lets your customers pay using Nequi and Daviplata.    Su Red OTHERS_CASH Cash Payment offices: PagaTodo, Gana Gana, Gana, Acertemos, Apuestas Cúcuta 75, Su Chance, La Perla, Apuestas Unidas, JER.    VISA VISA Credit Cards     Mexico For Mexico, we support both MSI, and Installments and Promotions, refer to this article for more information.\n     Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     BBVA Bancomer BANK_REFERENCED Bank Reference     Farmacias Benavides OTHERS_CASH_MX Cash     Farmacias del Ahorro OTHERS_CASH_MX Cash     Mastercard MASTERCARD Credit Cards     Mastercard MASTERCARD_DEBIT Debit Cards     Oxxo OXXO Cash     Seven Eleven SEVEN_ELEVEN Cash     SPEI SPEI Bank Transfer     VISA VISA Credit Cards     VISA VISA_DEBIT Debit Cards     Panama      Payment Method paymentMethod parameter Type Comments      Mastercard MASTERCARD Credit Cards     VISA VISA Credit Cards     Peru      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Diners DINERS Credit Cards     Mastercard MASTERCARD Credit Cards     Mastercard MASTERCARD_DEBIT Debit Cards     PAGOEFECTIVO PAGOEFECTIVO Cash     VISA VISA Credit Cards     VISA VISA_DEBIT Debit Cards     ","excerpt":"The following section shows the payment methods supported per country and provides some …","ref":"/docs/getting-started/select-your-payment-method.html","title":"Select Your Payment Method"},{"body":"Pre-integrated solutions Some online stores are already integrated with PayU. You just need to activate the PayU option as your payment platform.\nAvailable solutions:\n        Note Some of the links above may appear in Spanish.  Plugins for modules If you use an open source shopping cart, download and use the plugins we developed to ease your integration process with its payment system.\nAvailable plugins:\n        Plugin files Find the latest version of the plugin in the following table\n   Shopping cart Plugin Considerations      Download Available for versions from 1.7.x to 1.9.x.    Download You need Drupal Commerce Kickstart 7.xx    VirtueMart v2+\nDownloadVirtueMart v3.0.6\nDownload You need Joomla 2.5 with MySQL 5.1 or higher.You need Joomla versions 3.3.6, 2.5.28, or 2.5.27.    Download You need:\nWordPress 3.8 or higher.WooCommerce version 2.0 or higher installed on the WordPress site.    Download Available for version 2.3.    Version 1.5.5.1 or 1.5.6.4\nDownloadVersion 2.0.x.x to 2.1.x.x\nDownload     ","excerpt":"Pre-integrated solutions Some online stores are already integrated with PayU. You just need to …","ref":"/docs/tools/shopping-cart-plugins.html","title":"Shopping Cart Plugins"},{"body":"","excerpt":"","ref":"/docs/tools.html","title":"Tools"},{"body":"The confirmation page lets you update the databases in your system; hence, this page should not include HTML code as it\u0026rsquo;s not visible to the buyer. This page is optional; when a transaction is complete (i.e., when approved, rejected, or when canceled) our platform sends the variables via the HTTP POST method.\nIn the confirmation page, you must capture the data you want to store in the database. This capture depends on the programming language you use.\nConsiderations  If your site is restricted with basic access authentication or similar, disable it for the confirmation url. The IP associated with the confirmation URL should be public; do not use URL accessible from intranet or localhost. If you\u0026rsquo;re using HTTPS, you must have a valid certificate. Do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA on your confirmation page. PayU assumes that the confirmation page is reported correctly when receives the HTTP 200 code; otherwise, PayU makes a maximum of nine (9) attempts to send the confirmation page to your system. If after these attempts, HTTP 200 code is not received, PayU sends an e-mail alert. PayU reports the confirmation page once the transaction has a final status for example, when approved, rejected or expired. If a transaction is in progress (waiting for payment or analysis), PayU does not report until the transaction has a final status.  Variables sent with the confirmation page  Variables in the confirmation page     Field Type Size Description     merchant_id Numeric 12 Merchant’s ID number in PayU’s system, you find this number in the account creation mail.   state_pol Alphanumeric 32 Indicates the status of the transaction in the system.\nSee the transaction status in the given column.   risk Decimal (#.00) — Risk associated with the transaction. Values between 0 and 1.\nThe higher value, the greater the risk.Format ###.00.   response_code_pol Alphanumeric 255 PayU’s response code.\nSee the response codes in the given column.   reference_sale Alphanumeric 255 Reference of the sale or order. It must be unique for each transaction that is sent to the system.   reference_pol Alphanumeric 255 The reference or transaction number generated by PayU.   sign Alphanumeric 255 Digital signature created for each of one the transactions.   extra1 Alphanumeric 255 Additional field to send information about the purchase. For example, description of the purchase if you would like to display it on the confirmation page   extra2 Alphanumeric 255 Additional field to send information about the purchase. For example, internal codes of the products   payment_method Numeric — The internal identifier of the payment method used.\nSee the codes of the payment methods.   payment_method_type Numeric — The payment method type used for the payment.   installments_number Numeric — Number of installments in which the credit card payment was deferred.   value Numeric 14,2 Total amount of the transaction. It can contain two decimal digits. For example, 10000.00 or 10000   tax Numeric 14,2 VAT value of the transaction, if VAT zero is sent the system will automatically apply the 19%. It can contain two decimal digits. For example: 19000.00. In case you have no VAT you should fill out 0.   additional_value Numeric 14,2 Non commissionaire Additional Value.   transaction_date Date(YYYY-MM-DD HH:mm:ss) — The date the transaction was made.   currency Alphanumeric 3 The currency in which the payment is made.\nSee the accepted currencies.   email_buyer Alphanumeric 255 Field that contains the buyer’s e-mail address to notify the transaction’s result. It\u0026rsquo;s recommended to validate it when the data is taken from a form.   cus Alphanumeric 64 The cus (unique tracking code) is the payment’s reference within the Bank, it applies only to payments with PSE   pse_bank Alphanumeric 255 The name of the bank, applies only to payments with PSE.   test Boolean (true, false) — Variable to identify whether the operation was a test.   description Alphanumeric 255 Description of the sale.   billing_address Alphanumeric 255 The billing address   shipping_address Alphanumeric 50 The delivery address for the merchandise.   phone Alphanumeric 20 The buyer’s residence phone.   office_phone Alphanumeric 20 The buyer’s daytime phone.   account_number_ach Alphanumeric 36 The transaction’s identifier.   account_type_ach Alphanumeric 36 The transaction’s identifier.   administrative_fee Decimal (#.00) — Value of the administrative fee   administrative_fee_base Decimal (#.00) — Base value of the administrative fee   administrative_fee_tax Decimal (#.00) — Tax value of the administrative fee   airline_code Alphanumeric 4 Airline code   attempts Numeric — Number of attempts of sending the confirmation.   authorization_code Alphanumeric 12 Sale’s authorization code   bank_id Alphanumeric 255 Bank identifier   billing_city Alphanumeric 255 The billing city.   billing_country Alphanumeric 2 The ISO code of the country associated with the billing address.   commision_pol Decimal (#.00) — Value of the commission.   commision_pol_currency Alphanumeric 3 Currency of the commission   customer_number Numeric — Customer number.   date Date (YYYY-MM-DD HH:mm:ss) — Date of the operation.   error_code_bank Alphanumeric 255 Error code of the bank.   error_message_bank Alphanumeric 255 Error message of the bank   exchange_rate Decimal (#.00) — Value of the exchange rate.   ip Alphanumeric 39 The IP address from which the transaction was made.   nickname_buyer Alphanumeric 150 Short name of the buyer.   nickname_seller Alphanumeric 150 Short name of the seller.   payment_method_id Numeric — Identifier of payment methods.\nSee the codes of the payment methods.   payment_request_state Alphanumeric 32 Status of the payment request.   pseReference1 Alphanumeric 255 Reference no. 1 for PSE payments.   pseReference2 Alphanumeric 255 Reference no. 2 for PSE payments.   pseReference3 Alphanumeric 255 Reference no. 3 for PSE payments.   response_message_pol Alphanumeric 255 PayU’s response message.\nSee the response messages in the given column.   shipping_city Alphanumeric 50 The city where the merchandise is delivered.   shipping_country Alphanumeric 2 The ISO code associated with the country where the merchandise is delivered.   transaction_bank_id Alphanumeric 255 ID of the transaction in the bank\u0026rsquo;s system.   transaction_id Alphanumeric 36 Transaction identifier.   payment_method_name Alfa Numeric 255 Payment method used in the payment, for example VISA.     POST example send to the confirmation page The following is a basic example of the variables sent to the response page via POST:\nresponse_code_pol=5 phone= additional_value=0.00 test=1 transaction_date=2015-05-27 13:07:35 cc_number=************0004 cc_holder=test_buyer error_code_bank= billing_country=CO bank_referenced_name= description=test_payu_01 administrative_fee_tax=0.00 value=100.00 administrative_fee=0.00 payment_method_type=2 office_phone= email_buyer=test@payulatam.com response_message_pol=ENTITY_DECLINED error_message_bank= shipping_city= transaction_id=f5e668f1-7ecc-4b83-a4d1-0aaa68260862 sign=e1b0939bbdc99ea84387bee9b90e4f5c tax=0.00 payment_method=10 billing_address=cll 93 payment_method_name=VISA pse_bank= state_pol=6 date=2015.05.27 01:07:35 nickname_buyer= reference_pol=7069375 currency=USD risk=1.0 shipping_address= bank_id=10 payment_request_state=R customer_number= administrative_fee_base=0.00 attempts=1 merchant_id=508029 exchange_rate=2541.15 shipping_country= installments_number=1 franchise=VISA payment_method_id=2 extra1= extra2= antifraudMerchantId= extra3= nickname_seller= ip=190.242.116.98 airline_code= billing_city=Bogota pse_reference1= reference_sale=2015-05-27 13:04:37 pse_reference3= pse_reference2= Signature validation The signature validation allows you to check the data integrity, you must generate the signature with the information you find in the confirmation page and compare it with the information from the signature parameter.\nTo validate the signature in the confirmation page, you should consider:\n If the second decimal is zero, the new_value to generate the signature must have one decimal. Example (150.00 -\u0026gt; 150.0). If the second decimal is not zero, the new_value to generate the signature must keep the same two decimals. Example (150.26 -\u0026gt; 150.26). Get the parameters to generate the signature (merchant_id, reference_sale, value, currency, and state_pol) from the confirmation page, do not get them from your database. You must store your ApiKey safely. Create the signature as follows:  \u0026#34;ApiKey~merchant_id~reference_sale~new_value~currency~state_pol\u0026#34; \nExample\nWith one decimal\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters obtained from the confirmation page - merchant_id = 508029 - reference_sale = TestPayU04 - value = 150.00 - currency = USD - state_pol = 6 The signature is generated in the following way: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.0~USD~6) = b607a2c2fa100e0947b206d41864fb86 sign = b607a2c2fa100e0947b206d41864fb86 With two decimals\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters obtained from the confirmation page: - merchant_id = 508029 - reference_sale = TestPayU05 - value = 150.26 - currency = USD - state_pol = 4 The signature is generated in the following way: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU05~150.26~USD~4) = 1d95778a651e11a0ab93c2169a519cd6 sign = 1d95778a651e11a0ab93c2169a519cd6 Compare your signature           var errApiKeyReq = \"Please enter the ApiKey\" var errApiKeyMin = \"Please enter more than 5 digits\" var errApiKeyMax = \"Please enter less than 32 digits\" var errMerchantReq = \"Please enter the Merchant Id\" var errMerchantMin = \"Please enter more than 5 digits\" var errMerchantMax = \"Please enter less than 7 digits\" var errMerchantPosi = \"Please enter a positive number\" var errMerchantNum = \"Please enter just numbers\" var errReferenceReq = \"Please enter the Reference Code\" var errReferenceMin = \"Please enter the Reference Code\" var errReferenceMax = \"Please enter less than 255 digits\" var errAmountReq = \"Please enter the Amount\" var errAmountMin = \"Please enter the Amount\" var errAmountMax = \"Please enter less than 14 digits\" var errAmountPosi = \"Please enter a positive number\" var errAmountNum = \"Please enter just numbers\" var errCurrReq = \"Please enter a valid Currency in format ISO 4217\" var errCurrMin = \"Please enter more than 3 digits\" var errCurrMax = \"Please enter less than 3 digits\" var errTsReq = \"Please enter the transaction code\" var errTsMin = \"Please enter the transaction code\" var errTsMax = \"Please enter the transaction code less than 3 digits\" var errSpReq = \"Please enter the transaction code\" var errSpMin = \"Please enter the transaction code\" var errSpMax = \"Please enter the transaction code less than 1 digit\"    Algorithm: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ~ 4 (Approved) 6 (Declined) 5 (Expired)  ) Result:\u0026nbsp;      This calculator lets you generate the signature using any of the available encryption methods.\nPayment retries When a transaction is rejected, the payer has the option to retry the payment using the same payment method or another. Keep in mind that for each attempt, PayU makes the call to the confirmation page with the corresponding transaction status.\nEach of these calls are made with the same payment reference (reference_sale), the same order identifier (reference_pol) but with different transaction identifier (transaction_id). Therefore, you can receive several calls to the confirmation page for the same sale.\nBelow, you find an example of a rejected attempt and its approved retry:\nreference_sale=2015-05-27 13:04:37 reference_pol=7069375 transaction_id=f5e668f1-7ecc-4b83-a4d1-0aaa68260862 state_pol=6 reference_sale=2015-05-27 13:04:37 reference_pol=7069375 transaction_id=01cfdce8-68d5-4a4c-aabf-d89370a0b92f state_pol=4 Note that if one of those calls to the confirmation page indicates that a payment reference (reference_sale) was approved, you can be certain that you will not receive any report to the same reference.\n","excerpt":"The confirmation page lets you update the databases in your system; hence, this page should not …","ref":"/docs/integrations/webcheckout-integration/confirmation-page.html","title":"Confirmation Page"},{"body":"To use the tokenization feature, you need to enable it in your PayU account. To do so, contact your sales representative:\n comercios.ar@payu.com comercios.br@payu.com comercios.cl@payu.com comercios.co@payu.com    comercios.mx@payu.com comercios.pa@payu.com comercios.pe@payu.com    How does Tokenization work? Tokenization includes two separated processes:\nGenerate token The first process lets you save the information of a credit card. This information is transformed into a token to let you use it later.\nMake charges After you have the information of a credit card stored in a token, you can use it to perform charges periodically according to your need and your customer does not have to provide the information of their credit cards whenever you require a payment.\nFurthermore, the tokenization feature lets you store, remove or charge several credit carts by sending an file coded in Base64.\nWhat\u0026rsquo;s next? The integration with this feature can be performed using one of our integration types:\n For API integrations, refer to this topic For SDK integrations, refer to this topic  ","excerpt":"To use the tokenization feature, you need to enable it in your PayU account. To do so, contact your …","ref":"/docs/services/tokenization.html","title":"Tokenization"},{"body":"Similar to any API integration, you can customize your checkout according to your shop\u0026rsquo;s needs and the customer stays on your site during the purchase and payment process. To integrate this option you must have a PayU Business account and advanced programming skills.\nAccess multiple payment methods (varies per country), including credit cards, bank transfers, and cash payments.\nInitial settings PayU allows you to integrate with the transactional gateway, available payment tools and Queries by developing a web site in Java or PHP. It is critical that sensitive transaction data such as credit card number, expiration date, are not stored. It is recommended to follow PCI DSS’ best practices (Payment Card Industry Data Security Standard).\nJava To integrate with the API, the SDK relies on the Apache\u0026rsquo;s library HttpClient which also relies on the libraries HttpCore, CommonsLoggin and CommonsCodec.\nIn general, you need the following libraries in your classpath:\n HttpClient-4.4.1.jar HttpCore-4.4.4.jar Commons-loggin-1.1.1.jar Commons-codec-1.6.jar Commons-lang3-3.5.jar  Download SDK Java 1.3.9\nBefore performing any operation with the SDK, you need to assign some values to the PayU class, which apply to all the SDK operations and must be configured with your commerce data. the following table shows the values you need to configure.\n   Parameter name Size Type Mandatory Description     language 2 Language Yes The language used for error messages in the system and in emails that are sent to the buyer and seller. It is currently supported in en (English), es (Spanish) and pt (Portuguese).   isTest  boolean Yes Assign true if it\u0026rsquo;s a test request. Otherwise, assign false. Depending on the type of transaction or operation, the behavior may vary depending on the value of this field.   apiLogin Min:12 Max:32 String Yes Your API Login. How do I get my API Login   apiKey Min:6 Max:32 String Yes Your API Key. How do I get my API Key   merchantId  String No The merchant identifier, it\u0026rsquo;s used to generate the signatures to verify payment transactions. This parameter is mandatory when you want to check the transaction, unless you send the signature.   paymentsUrl Min:1 String No The URL of the page to where you will send the requests related to payments. By default, this parameter takes the production URL.   reportsUrl Min:1 String No The URL of the page to where you will send the requests related to the reports. By default, this parameter takes the production URL.    Example\nPayU.apiKey = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API key here PayU.apiLogin = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API Login here PayU.language = Language.en; // Enter the language here PayU.isTest = false; // assign true if you are in test mode LoggerUtil.setLogLevel(Level.ALL); // Include it only if you want to see the full log trace. Otherwise, you can remove it. PayU.paymentsUrl = \u0026#34;https://api.payulatam.com/payments-api/\u0026#34;; // Include it if you want to test in a specific payment server and assign its URL. PayU.reportsUrl = \u0026#34;https://api.payulatam.com/reports-api/\u0026#34;; // Include it if you want to test in a specific report server and assign its URL. \nTo execute the operations provided by the PayU\u0026rsquo;s SDK, you must send to the method a parameter map as an argument, this map has all the required information to process a transaction. Example:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap \u0026lt;String, String\u0026gt;(); parameters.put(PayU.PARAMETERS.TRANSACTION_ID, transactionId); parameters.put(PayU.PARAMETERS.ORDER_ID, orderId.toString()); \nTo ease the usage, you find a set of constants in the interface PayU.PARAMETERS, which contains the names of the parameters used in the SDK methods.\nNote From version 1.2.X, it is needed to add the certificate of the Payu\u0026rsquo;s Payments API(https://api.payulatam.com/payments-api/) in the Java key folder. This folder is located in path [Java-Installation-Folder]/jdk/jre/lib/security/cacerts.  PHP To integrate with the API, the SDK can be executed in machines with PHP version greater than or equals to 5.2.1. Furthermore, the following PHP extensions are required in your server:\n curl xml mbstring json  Download SDK PHP 4.5.6\nTo have access to the SDK features, you need to include the PayU class located in [PayU-php-sdk-Path]/lib/PayU.php.\n\u0026lt;?php require_once \u0026#39;[PayU-php-sdk-Path]/lib/PayU.php\u0026#39;; ... ?\u0026gt;\nBefore performing any operation with the SDK, you need to assign some values to the PayU class, which apply to all the SDK operations and must be configured with your commerce data. the following table shows the values you need to configure.\n   Parameter name Size Type Mandatory Description     PayU::$language 2 Language Yes The language used for error messages in the system and in emails that are sent to the buyer and seller. It is currently supported in en (English), es (Spanish) and pt (Portuguese).   PayU::$isTest  boolean Yes Assign true if it\u0026rsquo;s a test request. Otherwise, assign false. Depending on the type of transaction or operation, the behavior may vary depending on the value of this field.   PayU::$apiLogin Min:12 Max:32 String Yes Your API Login. How do I get my API Login   PayU::$apiKey Min:6 Max:32 String Yes Your API Key. How do I get my API Key   PayU::$merchantId  String No The merchant identifier, it\u0026rsquo;s used to generate the signatures to verify payment transactions. This parameter is mandatory when you want to check the transaction, unless you send the signature.    Example\n\u0026lt;?php PayU::$apiKey = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API key here PayU::$apiLogin = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API Login here PayU::$merchantId = \u0026#34;1\u0026#34;; // Enter your Merchant Id here PayU::$language = SupportedLanguages::ES; // Enter the language here PayU::$isTest = false; // assign true if you are in test mode ... ?\u0026gt;\nFurthermore, you need to configure the API to redirect the requests using the Environment class:\n\u0026lt;?php // Payments URL Environment::setPaymentsCustomUrl(\u0026#34;https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi\u0026#34;); // Reports URL Environment::setReportsCustomUrl(\u0026#34;https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi\u0026#34;); ... ?\u0026gt;Considerations  You must have an active PayU account. You must install a valid SSL certificate in your server and your site must be able to make SSL connections. Due to this, the virtual machine must have appropriate security extensions. Temporarily, do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA in your payment requests. You must have CGI or server languages such as Java, C#, VB, PHP, etc. You must be able to store your authentication credentials (API Key and API Login) safely. The encoding for messages must be UTF-8. The dates must have format yyyy-MM-ddTHH:mm:ss, the time format is 24 hours. Example: 2015-08-22T21:35:12. Normally the connection guarantees response times of three seconds on average. If there is an unusual situation, the maximum response time is one minute. It is highly recommended that you set timeouts when you connect with PayU. It is important to validate the length and numbers of credit cards by franchise, together with the security codes.  Available features ","excerpt":"Similar to any API integration, you can customize your checkout according to your shop\u0026rsquo;s needs …","ref":"/docs/integrations/sdk-integration.html","title":"SDK Integration"},{"body":"For transactions in Colombia paid with credit cards, the intermediary financial entities make retentions of Rent Withholding, ICA Withholding, and IVA Withholding. According to this, PayU delivers for merchants, a certificate with the total of the withholdings applied during a monthly period.\nNote To have access to this module, you need to have a profile with the permission Colombian certificates \u0026gt; View withhodlings permission enabled.\nRefer to Profiles and Permissions for more information.\n Generate Withholding Certificate  Log into your PayU account. In the left menu, expand the Transactions menu and select Withholding certificate.  The Withholding Certificate opens, select the withholding you want to include in the certificate and the taxable period.  Click Download. The report is automatically downloaded to your computer in PDF format.\nThe following is an example of this certificate.  ","excerpt":"For transactions in Colombia paid with credit cards, the intermediary financial entities make …","ref":"/payu-module-documentation/reports/withholding-certificate.html","title":"Withholding Certificate"},{"body":" Note For introductory terms about a dispute refer to this article.  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n Reports \u0026gt; Refunds and disputes Reports \u0026gt; Resolve disputes with buyers (manage chargebacks)  Refer to Profiles and Permissions for more information.\nWhy is it important to reply to a Dispute?  The Merchant can generate mistrust with the client. If you don\u0026rsquo;t address the disputes, PayU takes the amount from your account. The reservation fund could be higher by the risk area. It damages the score of the PayU code facing the payment networks. The disputed amount will be frozen until the dispute is solved.  It is important to reply to a dispute by providing evidence before the deadline stipulated by the bank. After the deadline, it is not possible to upload the corresponding evidence for a dispute.\nFor more information about the deadlines defined, refer to maximum days to provide evidence.\nHow to resolve disputes? A dispute begins when a buyer does not know a charge made to their credit card. Once the bank is notified, the formal process begins to determine the validity of the purchase.\n When we are notified by the bank that a dispute process has been launched, you and your customer automatically receive an e-mail informing about that process.  Note To configure the e-mail or the URL to receive dispute notifications, refer to Technical configurations.  Log into your PayU account. In the left menu, expand the Transactions menu and select Disputes.  The Disputes module opens, scroll down the page and locate the dispute you have opened. You can use the available filters to find your dispute if it is required.  The order details appear at the right of the screen. Click Resolve dispute at the end of the panel.  In the pop up window, you can find the details about why your customer request the dispute process and the dead line to provide evidence to resolve the dispute. Click the Attach file link to upload all the evidence you have.  Note If you accept that the dispute is not a mistake, you can start a Refund process by clicking Or refund this value.  Upload the evidence files to resolve the dispute and click Save evidence. It is mandatory to save the evidence first before send it to review.  When finish, click Send for review.\nA confirmation window appears informing that the evidence has been send.  At this point, we send the documents to the issuing bank or the network that processed the transaction, from whom the resolution of the case depends.\nThe dispute case may result in won (no chargeback), Lost (chargeback) or refunded. In the case of refunds, the trade is who makes the return to the buyer and the bank does not generate the chargeback. Refer to dispute states to know all the states of a dispute.  Note If you have activated Anti-fraud Guarantee, when the chargeback is subject to be covered by the guarantee, PayU assumes the values debited from your account. In this case, the status of this dispute is Chargeback (Lost) With antifraud guarantee.  When the financial entity communicates the result of the dispute, the case is automatically updated in the PayU Module.\n","excerpt":"Note For introductory terms about a dispute refer to this article.  Permission required To have …","ref":"/payu-module-documentation/payu-operations/disputes-mp.html","title":"Disputes"},{"body":"","excerpt":"","ref":"/payu-module-documentation/payu-operations.html","title":"PayU Operations"},{"body":"Tokenization feature is available under customized commercial agreements. For more information, contact your sales representative.\nTo integrate with Tokenization API, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Tokenization API includes methods to register and remove tokens, and methods to query tokens.\nFor registration a removal of tokens:\n Individual credit card registration Massive credit card registration Individual token removal Massive token removal Query tokens  Note To query tokens, you need to target your request to the following URLs according to your environment.\n Test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Production: https://api.payulatam.com/reports-api/4.0/service.cgi   Individual credit card registration Using this feature, you can register the information of a customer\u0026rsquo;s credit card and get a token.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set CREATE_TOKEN. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   creditCardToken   Information of the credit card to be tokenized. Yes   creditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder. Yes   creditCardToken \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. Yes   creditCardToken \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder. Yes   creditCardToken \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods. Yes   creditCardToken \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. Yes   creditCardToken \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   creditCardToken   Information of the Tokenized credit card.   creditCardToken \u0026gt; creditCardTokenId Alphanumeric  Token generated through the information of the credit card.   creditCardToken \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card as sent in the request.   creditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder as sent in the request.   creditCardToken \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder as sent in the request.   creditCardToken \u0026gt; paymentMethod Alphanumeric 32 Franchise of the tokenized credit card as sent in the request.   creditCardToken \u0026gt; maskedNumber Alphanumeric Min:13 Max:20 Masked credit card number. The masked used displays the first six digits and the last four digits of the credit card.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;CREATE_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2025/01\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;05440005-9111-4d34-aa86-deeb91983d54\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: null, \u0026#34;maskedNumber\u0026#34;: \u0026#34;403799******1984\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;CREATE_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;number\u0026gt;4916332769997505\u0026lt;/number\u0026gt; \u0026lt;expirationDate\u0026gt;2024/01\u0026lt;/expirationDate\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;maskedNumber\u0026gt;491633******7505\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenResponse\u0026gt;    Massive credit card registration Using this feature, you can register the information of several credit cards stored in a .csv file and get a token per each card.\nConsiderations  Each record of the file must have the following structure and order separated by commas:  Payer ID Full name Credit card number Expiration date Franchise Identification number   The file must not have header. The file must be codifies using UTF-8. You need to implement a functionality to codify the content and send the codified string in the contentFile parameter. The file cannot have more than 10.000 records.\n  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set CREATE_BATCH_TOKENS. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   contentFile Alphanumeric  Codified string in Base64 with the information of the credit cards as explained before. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   id   Identification of the procedure.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;CREATE_BATCH_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;MDAxLE1hcnkgS2VsbGVyLDQwMjQwMDcxMzU0MTI2ODAsMjAyNC8wMSxWSVNBLDEyMzQ1NgowMDIsTWFyayBCcm93biw1MTA0ODQyNTA1ODE2MTcwLDIwMjMvMDUsTUFTVEVSQ0FSRCw3ODkwMTI=\u0026#34; } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026#34; }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;CREATE_BATCH_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;MDAxLE1hcnkgS2VsbGVyLDQwMjQwMDcxMzU0MTI2ODAsMjAyNC8wMSxWSVNBLDEyMzQ1NgowMDIsTWFyayBCcm93biw1MTA0ODQyNTA1ODE2MTcwLDIwMjMvMDUsTUFTVEVSQ0FSRCw3ODkwMTI=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    Individual token removal Using this feature, you can remove the token previously registered.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set REMOVE_TOKEN. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   removeCreditCardToken   Information of token to be removed. Yes   removeCreditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder. Yes   removeCreditCardToken \u0026gt; creditCardTokenId Alphanumeric  Token of the credit card to be removed. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   creditCardToken   Information of the Token removed.   creditCardToken \u0026gt; creditCardTokenId Alphanumeric  Token of the credit card as sent in the request.   creditCardToken \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card.   creditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder.   creditCardToken \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder.   creditCardToken \u0026gt; paymentMethod Alphanumeric 32 Franchise of the tokenized credit card.   creditCardToken \u0026gt; maskedNumber Alphanumeric Min:13 Max:20 Masked credit card number. The masked used displays the first six digits and the last four digits of the credit card.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;REMOVE_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;removeCreditCardToken\u0026#34;: { \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: null, \u0026#34;maskedNumber\u0026#34;: \u0026#34;491633******7505\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;REMOVE_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;removeCreditCardToken\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt;4 \u0026lt;/removeCreditCardToken\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;maskedNumber\u0026gt;491633******7505\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenResponse\u0026gt;    Massive token removal Using this feature, you can remove the tokens stored in a .csv file.\nConsiderations  Each record of the file must have the following structure and order separated by commas:  Payer ID Token.   The file must not have header. The file must be codifies using UTF-8. You need to implement a functionality to codify the content and send the codified string in the contentFile parameter. The file cannot have more than 10.000 records.\n  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set REMOVE_BATCH_TOKENS. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   contentFile Alphanumeric  Codified string in Base64 with the information of the tokens to be removed. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   id   Identification of the procedure.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;REMOVE_BATCH_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;UGF5ZXJJZDEsYWQ4NGQ2NzEtYjZiOC00YjEyLWFkNTktZmYxZDJhNjQ0M2NhDQpQYXllcklkMiw0ZGYxNjMwYy03MDkyLTRhNjgtODE3MC0yYzI2YzZjOTUyMDg=\u0026#34; } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;2562625d-9e4c-450a-b979-031feb033952\u0026#34; }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;REMOVE_BATCH_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;UGF5ZXJJZDEsYWQ4NGQ2NzEtYjZiOC00YjEyLWFkNTktZmYxZDJhNjQ0M2NhDQpQYXllcklkMiw0ZGYxNjMwYy03MDkyLTRhNjgtODE3MC0yYzI2YzZjOTUyMDg=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;2562625d-9e4c-450a-b979-031feb033952\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    Query tokens Using this feature, you can get the information of tokenized credit cards, you can perform the query by the token number or by a date range.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_TOKENS. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   creditCardTokenInformation   Parameters of the query. Yes   creditCardTokenInformation \u0026gt; creditCardTokenId Alphanumeric  Token of the card to consult. This parameter is mandatory when you want to query by Token Id. No   creditCardTokenInformation \u0026gt; startDate Alphanumeric 23 Start date of the query when you want to query by date range. This parameter is mandatory when you want to query by date rage.\nFormat YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11. No   creditCardTokenInformation \u0026gt; endDate Alphanumeric 23 End date of the query when you want to query by date range. This parameter is mandatory when you want to query by date rage.\nFormat YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11. No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   creditCardTokenList   Information of the Tokenized credit cards.   creditCardTokenList \u0026gt; creditCardTokenId Alphanumeric  Token generated through the information of the credit card.   creditCardTokenList \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card as sent in the request.   creditCardTokenList \u0026gt; payerId Alphanumeric  Internal id of the credit card holder as sent in the request.   creditCardTokenList \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder as sent in the request.   creditCardTokenList \u0026gt; paymentMethod Alphanumeric 32 Franchise of the tokenized credit card as sent in the request.   creditCardTokenList \u0026gt; creationDate Alphanumeric 19 date when the credit card was tokenized.   creditCardTokenList \u0026gt; maskedNumber Alphanumeric Min:13 Max:20 Masked credit card number. The masked used displays the first six digits and the last four digits of the credit card.     Api call The following are the bodies of the request and response of this method. The following example queries the tokenized cards by date range, if you want to query by using the token Id, just send the parameter creditCardTokenInformation.creditCardTokenId.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;creditCardTokenInformation\u0026#34;: { \u0026#34;startDate\u0026#34;: \u0026#34;2021-06-23T12:00:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2021-06-25T12:00:00\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardTokenList\u0026#34;: [ { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;1adc6940-ee7e-48c2-bb96-7d784de74964\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;20263841\u0026#34;, \u0026#34;identificationNumber\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-23T13:36:36\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;377813*****0001\u0026#34;, \u0026#34;errorDescription\u0026#34;: null }, { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;3e5f0d77-0f93-421f-9432-99b6430e845e\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;158301\u0026#34;, \u0026#34;identificationNumber\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-23T19:03:41\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;errorDescription\u0026#34;: null }, { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;ead0a090-18dc-41ad-9431-ab342af854a2\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;LadyM\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;0sS01\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;1234567890\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-24T11:48:21\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;377813*****0001\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;creditCardTokenInformation\u0026gt; \u0026lt;startDate\u0026gt;2021-06-23T12:00:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2021-06-25T12:00:00\u0026lt;/endDate\u0026gt; \u0026lt;/creditCardTokenInformation\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenListResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardTokenList\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;1adc6940-ee7e-48c2-bb96-7d784de74964\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;20263841\u0026lt;/payerId\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-23T13:36:36\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;377813*****0001\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;3e5f0d77-0f93-421f-9432-99b6430e845e\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;Juan Perez\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;158301\u0026lt;/payerId\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-23T19:03:41\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;424242******4242\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;ead0a090-18dc-41ad-9431-ab342af854a2\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;LadyM\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;0sS01\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;1234567890\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-24T11:48:21\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;377813*****0001\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenList\u0026gt; \u0026lt;/creditCardTokenListResponse\u0026gt;    Payments using Tokenization For payments with credit card tokens, include the parameter transaction.creditCardTokenId replacing the information of the credit card. The following example shows the body of the request in a high level for a one-step flow, the details of the request are not provided.\nNote To process without CVV is necessary to send the parameter creditCard.processWithoutCvv2 as true in the payment request and remove the parameter creditCard.securityCode.\nBy default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative.   JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Information of the order\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Information of the payer\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;creditCard\u0026#34;: { \u0026#34;securityCode\u0026#34;: \u0026#34;123\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parameters of the request\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Card franchise\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;Processing country\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Information of the order --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- Information of the payer --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parameters of the request --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Card franchise}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{Processing country}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    For specific details about how to perform payments, refer to the respective article according to the processing country.\nArgentina\nBrazil\nChile\nColombia    Mexico\nPanama\nPeru    Multiple payments with tokenization Using this feature, you can perform payments using several tokens stored in a .csv file and get a token per each card.\nConsiderations  Each record of the file must have the following structure and order separated by commas:  Account Id, identifier of your PayU account. Credit card token Credit card security code Number of installments Sale reference Sale description Buyer\u0026rsquo;s e-mail ISO code of the currency. See accepted currencies Total amount including taxes Base value of reimbursement Additional value Language used in emails sent to the buyer and the seller. See supported languages   The file must not have header. The file must be codifies using UTF-8. You need to implement a functionality to codify the content and send the codified string in the contentFile parameter. The file cannot have more than 10.000 records.\n  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PROCESS_BATCH_TRANSACTIONS_TOKEN. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   contentFile Alphanumeric  Codified string in Base64 with the information of the credit cards as explained before. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   id   Identification of the procedure.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PROCESS_BATCH_TRANSACTIONS_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;NTAwNTM4LGVhMDIwZTU5LWQ5NWEtNDk1ZC04OTAzLTM0ZTg0M2ZkN2ZlYywxMzIsMSxTYWxlLTA0LFN1YnNjcmlwdGlvbiBmZWUsdXNlcjFAbWFpbC5jb20sQ09QLDEwMDAwLDAsMCwwLGVzCjUwMDUzOCxlYWQwYTA5MC0xOGRjLTQxYWQtOTQzMS1hYjM0MmFmODU0YTIsMTM1LDEsU2FsZS0wNSxTdWJzY3JpcHRpb24gZmVlLHVzZXIyQG1haWwuY29tLENPUCwxMTAwMCwwLDAsMCxlcw==\u0026#34; } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;51c72d88-f707-45ca-ad59-4508140833a7\u0026#34; }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PROCESS_BATCH_TRANSACTIONS_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;51c72d88-f707-45ca-ad59-4508140833a7\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;NTAwNTM4LGVhMDIwZTU5LWQ5NWEtNDk1ZC04OTAzLTM0ZTg0M2ZkN2ZlYywxMzIsMSxTYWxlLTA0LFN1YnNjcmlwdGlvbiBmZWUsdXNlcjFAbWFpbC5jb20sQ09QLDEwMDAwLDAsMCwwLGVzCjUwMDUzOCxlYWQwYTA5MC0xOGRjLTQxYWQtOTQzMS1hYjM0MmFmODU0YTIsMTM1LDEsU2FsZS0wNSxTdWJzY3JpcHRpb24gZmVlLHVzZXIyQG1haWwuY29tLENPUCwxMTAwMCwwLDAsMCxlcw=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    ","excerpt":"Tokenization feature is available under customized commercial agreements. For more information, …","ref":"/docs/integrations/api-integration/tokenization-api.html","title":"Tokenization API"},{"body":"Prerequisites  You need an active account in PayU Latam. For VirtueMart version 2 or higher:  Having the PayU\u0026rsquo;s VirtueMart plugin downloaded and stored in an accessible location. Click here to download it. Having VirtueMart version 2 or higher installed. Your VirtueMart website must be installed on Joomla!® 2.5 or higher with MySQL 5.1 or higher.   For VirtueMart version 3.0.6:  Having the PayU\u0026rsquo;s VirtueMart plugin downloaded and stored in an accessible location. Click here to download it. Having VirtueMart version 3.0.6 installed. Your VirtueMart website must be installed on Joomla!® versions 3.3.6, 2.5.28 or 2.5.27.    Plugin for VirtueMart 2 or higher Follow the next procedure to install and configure the plugin on your website.\nInstallation  Open the Joomla!® Administrator Console and select the Extension Manager option located in the Extension menu.  In the Upload Package File section, click Browse and locate the .zip file of the PayU plugin downloaded.  Once the installation procedure completes, a message appears to inform that the installation was successful.  Configuration  Expand the option Shop in the VirtueMart menu and select Payment methods. Then, click New at the top right of the screen.  In the Payment Method Information tab, set Payulatam as Payment Name and select PayuLatam in the Payment Method field.  Go to the Configuration tab and provide the information of your account and your merchant key.  Furthermore, provide the connection URL to the gateway and the configuration variables explained in the Configuration variables section.\nThe URLs for test and production environments are:\n Test: https://sandbox.gateway.payulatam.com/ppp-web-gateway Production: https://gateway.payulatam.com/ppp-web-gateway/  Finally, click Save or Save \u0026amp; Close button. At this point, your customers can pay with PayU Latam using the VirtueMart shopping cart.  Plugin for VirtueMart 3.0.6 Follow the next procedure to install and configure the plugin on your website.\nInstallation  Open the Joomla!® Administrator Console and select the option Extension Manager inside the Extensions menu.  In the Extension package file field, choose the previously downloaded .zip file.  Once the .zip file is loaded, click Upload \u0026amp; Install.  Once the installation procedure completes, a message appears to inform that the installation was successful.  Configuration  In the left menu, click Manage. Find and enable the PayuLatam plugin.  A message appears informing that you have enabled the plugin. Furthermore, the icon changes to a check mark.\nOpen the Components menu and expand the Virtuemart option. Then, select Payment Methods.  In the opened window, click New to create a payment method using the PayuLatam plugin.  In the Payment Method Information tab, set Payulatam as Payment Name and select PayuLatam in the Payment Method field.  Go to the Configuration tab and provide the information of your account and your merchant key.  Furthermore, provide the connection URL to the gateway and the configuration variables explained in the Configuration variables section.\nThe URLs for test and production environments are:\n Test: https://sandbox.gateway.payulatam.com/ppp-web-gateway Production: https://gateway.payulatam.com/ppp-web-gateway/  Finally, click Save or Save \u0026amp; Close button. At this point, your customers can pay with PayU Latam using the VirtueMart shopping cart.  Configuration variables Regardless of the VirtueMart version you use, set ands configure the following variables in your plugin:\n   Field Value     Logo Logo displayed for the PayuLatam payment method.   Test URL Gateway URL for test: https://sandbox.gateway.payulatam.com/ppp-web-gateway.   Production URL Gateway URL for production: https://gateway.payulatam.com/ppp-web-gateway.   Test Mode Select Yes if you want to make transactions in the test environment. When you enable this option, VirtueMart uses the URL configured in the Test URL variable   Merchant ID ID of your commerce in PayU Latam.   Account ID ID of the PayU account according to the country where you want to sell.   API Key Unique key of your commerce, you can find this key in the PayU module.   Section ORDER STATUS PARAMS\nApproved TransactionsPending TransactionsDeclined Transactions Defines the order state in VirtueMart according to the transaction state returned by PayU. We suggest to keep the default states; nevertheless, you can configure them according to your business needs.   Currency Set USD. Also, you can configure the currency of the Account ID country.   Minimum Value / Maximum value The total value of an order must be within this range in order to activate the PayuLatam payment method.   Tax To use this option, configure the corresponding Virtuemart rule to the associated tax. For example, IVA for Colombia.    ","excerpt":"Prerequisites  You need an active account in PayU Latam. For VirtueMart version 2 or higher:  Having …","ref":"/docs/tools/shopping-cart-plugins/virtuemart.html","title":"VirtueMart"},{"body":"To integrate with Payments SDK Colombia, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash or Bank reference Submit transaction with bank transfer Bank List - PSE Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Colombia, you can perform one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Colombia. For payments with credit card tokens, include the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable PROCESS_WITHOUT_CVV2 as true and remove the variable CREDIT_CARD_SECURITY_CODE. For Crédito Fácil Codensa card, the number of installments supported are 1 to 12, 18, 24, 36 and 48. For Crédito Fácil Codensa card, the payer can choose any of the following document types for the variable PAYER_DNI_TYPE:     ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Client´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction, // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits. // Example 19000.00. In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Enter the value of the base value on which VAT (only valid for Colombia) is calculated. // In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction,  // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits.  // Example 19000.00. In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Enter the value of the base value on which VAT (only valid for Colombia) is calculated.  // In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4037997623271984\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2030/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash or Bank reference This method lets you process the payments of your customers in cash or using a Bank reference. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like the followings.\nPayments in cash Payments with Bank reference Considerations  Send a valid cash Payment Method in the request, see the available Payment Methods for Colombia. OTHERS_CASH method is not supported. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. For BALOTO and EFECTY, the confirmation of the payment takes 15 minutes. For BANK_REFERENCED, the confirmation is online. The minimum and maximum values for BALOTO and EFECTY are:  BALOTO \u0026gt; Min: $3.000 COP - Max: $1.000.000 COP EFECTY \u0026gt; Min: $20.000 COP - Max: $6.000.000 COP   The extra parameters have the following data related to the transaction:  EXPIRATION_DATE: maximum term for the payer to perform the payment REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. BANCO_BOGOTA_SERVICE_CODE: payment code for Banco de Bogotá. Available when using BANK_REFERENCED. BANK_REFERENCED_NAME: Reference name for Bancolombia. Available when using BANK_REFERENCED. BANCOLOMBIA_SERVICE_CODE: payment code for Bancolombia. Available when using BANK_REFERENCED.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction, // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits. // Example 19000.00. In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Enter the value of the base value on which VAT (only valid for Colombia) is calculated. // In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;EFECTY\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction,  // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits.  // Example 19000.00. In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Enter the value of the base value on which VAT (only valid for Colombia) is calculated.  // In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the cash payment method name here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;EFECTY\u0026#34;, // Enter the payment due date \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. In Colombia, bank transfers are made through PSE, to perform an integration with this payment method, you need to follow these steps:\n  Query the available bank list to show them to the payer. To query the bank list, refer to this method.\n  Show the list of banks as displayed below:\n  When the payer selects a bank, you must send the parameter pseCode of the selection in the parameter PSE_FINANCIAL_INSTITUTION_CODE in the request.\nShow a list to let the payer choose whether they are a Natural or Legal person. Depending on what the payer choose, you must send the value in the parameter PAYER_PERSON_TYPE in the request. The list must be displayed as follows:  The selected value must be sent as follows:\n Java: PersonType.NATURAL.toString() (N) or PersonType.LEGAL.toString() (J). PHP: N or J.  Show a list to let the payer choose their identification type. You must send the ISO code of the value selected in the parameter PAYER_DOCUMENT_TYPE in the request. The list must be displayed as follows:  The list of available documents is:\n   ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Client´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    You must send the payer identification number in the extra parameter PAYER_DNI in the request.  Considerations  If the payment request is successful, the transaction has state PENDING and responseCode PENDING_TRANSACTION_CONFIRMATION; this is because the payer is redirected to the selected bank to complete the payment; you must redirect the payer to the URL returned in the extra parameter BANK_URL. The URL returned in the extra parameter BANK_URL is configured in the PayU Module and must show the following information:\nParameters starting with $ symbol are sent via GET. You must add in the response page the options to retry the payment, finish the transaction and print the receipt. The status displayed in the response page can be any of the following:     polTransactionState polResponseCode State     4 1 Approved transaction   6 5 Failed transaction   6 4 Rejected transaction   12 or 14 9994 or 25 Pending transaction, please check if the debit was made in the bank.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction, // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits. // Example 19000.00. In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Enter the value of the base value on which VAT (only valid for Colombia) is calculated. // In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //-- Mandatory information for PSE – // Enter the bank PSE code here. parameters.put(PayU.PARAMETERS.PSE_FINANCIAL_INSTITUTION_CODE, \u0026#34;1007\u0026#34;); // Enter the person type here (Natural or legal). parameters.put(PayU.PARAMETERS.PAYER_PERSON_TYPE, PersonType.NATURAL.toString()); // or parameters.put(PayU.PARAMETERS.PAYER_PERSON_TYPE, PersonType.LEGAL.toString()); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the payer’s document type here. parameters.put(PayU.PARAMETERS.PAYER_DOCUMENT_TYPE, DocumentType.CC.toString()); // Enter the payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PSE\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); //Response page to which the payer will be redirected. parameters.put(PayU.PARAMETERS.RESPONSE_URL, \u0026#34;http://www.test.com/response\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the bank URL \tString url = (String)extraParameters.get(\u0026#34;BANK_URL\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction,  // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits.  // Example 19000.00. In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Enter the value of the base value on which VAT (only valid for Colombia) is calculated.  // In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //-- Mandatory information for PSE –  // Enter the bank PSE code here. \tPayUParameters::PSE_FINANCIAL_INSTITUTION_CODE =\u0026gt; \u0026#34;1007\u0026#34;, // Enter the person type here (Natural or legal). \tPayUParameters::PAYER_PERSON_TYPE =\u0026gt; \u0026#34;N\u0026#34;, // or PayUParameters::PAYER_PERSON_TYPE =\u0026gt; \u0026#34;J\u0026#34;  // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;123456789\u0026#34;, // Enter the payer’s document type here. \tPayUParameters::PAYER_DOCUMENT_TYPE =\u0026gt; \u0026#34;CC\u0026#34;, // Enter the payment method name here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PSE\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE =\u0026gt; \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT =\u0026gt; \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, //Response page to which the payer will be redirected. \tPayUParameters::PARAMETERS.RESPONSE_URL =\u0026gt; \u0026#34;http://www.test.com/response\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_URL; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Bank List - PSE This method returns a list of the banks available for payments using PSE.\nMethod call The following are the examples of the request and response of this method.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the payment method name here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PSE\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); //Obtain the payment receipt URL List banks = PayUPayments.getPSEBanks(parameters); Iterator banks_iterator=banks.iterator(); while(banks_iterator.hasNext()){ Bank bank = (Bank) banks_iterator.next(); bank.getPseCode(); bank.getDescription(); }   //Enter the payment method name here $parameters = array( // Insert the payment method here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PSE\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, ); $array=PayUPayments::getPSEBanks($parameters); $banks=$array-\u0026gt;banks; foreach ($banks as $bank) { $bank-\u0026gt;description; $bank-\u0026gt;pseCode; } }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Colombia, target the requests to the following URLs:\n Java PHP   // …","ref":"/docs/integrations/sdk-integration/payments-sdk-colombia.html","title":"Payments SDK - Colombia"},{"body":"Implement PayU with the aggregator model or gateway, using PayU’s financial agreements or your own. Select the integration that fits best with your needs:\nCheckout integration PayU Checkout is an integration that allows you to collect through a PayU web form from any device in a simple, fast and secure way.  PayU manages the payment system Easier integration, equally secure Since PayU manages the payment platform, it is easier to get PCI DSS certification  Learn more about WebCheckout integration  API or SDK integration Through API or SDK integrations, you can receive payments securely from anywhere you like, on your website or mobile app.  Design your checkout and manage the payment system of your website. Access to additional services such as Tokenization.  Learn more about API integration Learn more about SDK integration     How to get variables for integration. Regardless of the integration selected, you may require any of the following variables in the request of the methods.\nAPI key and API Login   Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\n  Click Settings and then select Technical configuration.\n  In this window, you find both the API key and API Login which allows you to authenticate you commerce during the integration procedure.  Warning Both keys are unique per commerce in PayU, therefore, you must keep this information secured and their usage or disclosure is under your responsibility.  Authentication signature The variable signature is used to validate the payments performed through the platform, ensuring their authenticity. This variable is a string value encrypted using MD5 or SHA algorithms and follows this structure.\nApiKey~merchantId~referenceCode~tx_value~currency Let\u0026rsquo;s build a signature using the following test values:\n ApiKey: 4Vj8eK4rloUd272L48hsrarnUA merchantId: 508029 referenceCode: TestPayU tx_value: 3 currency: USD  The string is these values concatenated with the tilde character (~):\n4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU~3~USD After you apply the MD5 algorithm, the signature value is:\nba9ffa71559580175585e45ce70b6c37 deviceSessionId variable The deviceSessionId is a code with the information of the device where the transaction was generated and provides a unique identifier for the device. This variable lets us identify attackers.\n To perform either API or SDK integration, you need to include the following script in your payment form:  \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=${deviceSessionId}80200\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;iframe style=\u0026#34;width: 100px; height: 100px; border: 0; position: absolute; top: -5000px;\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=${deviceSessionId}80200\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; \nIt is important to generate the deviceSessionId per each transaction. To generate the deviceSessionId get the session_id of the cookie and concatenate it with the current timestamp along with the milliseconds. Then, encrypt the result using MD5.  Example in PHP\n$deviceSessionId = md5(session_id().microtime()) \nFor example, if the $deviceSessionId is d66f949f19b33e88c202b579cfc549b3, the script is as follows:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=d66f949f19b33e88c202b579cfc549b380200\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;iframe style=\u0026#34;width: 100px; height: 100px; border: 0; position: absolute; top: -5000px;\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=d66f949f19b33e88c202b579cfc549b380200\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; ","excerpt":"Implement PayU with the aggregator model or gateway, using PayU’s financial agreements or your own. …","ref":"/docs/integrations.html","title":"Integrations"},{"body":"PayU module is ideal for business that need to:\n Keep control of their stocks and sales performed through PayU. Be updated with the information of their financial movements of their account. Make requests to the support team about issues in their account.  Benefits of the PayU Module PayU module provides the following benefits:\n Keep track of your sales\nFind relevant information about your sales, the most used payment methods, and the hours with higher transaction rates. Know your transactions.\nYou can consult the movements in your accounts, generate statements and reports. You don\u0026rsquo;t need a Web page\nYou can use the tools to receive payments even if you don\u0026rsquo;t have a web page.  How to access the PayU module?  Log in our web page\nLog into www.payu.com, at the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.  Enter the PayU module.\nProvide your credentials and enter your account. Here, you can use all the available options to manage your account.  For more information about how to use the PayU Module, refer to this section.\n","excerpt":"PayU module is ideal for business that need to:\n Keep control of their stocks and sales performed …","ref":"/docs/tools/payu-module.html","title":"PayU Module"},{"body":"If you want to perform tests through PayU, you need to use the following credentials in the request, depending on the country of your account:\n   Merchant ID API Login API Key accountId Country     508029 pRRXKOl8ikMmt9u 4Vj8eK4rloUd272L48hsrarnUA 512322 Argentina   512327 Brazil   512325 Chile   512321 Colombia   512324 Mexico   512326 Panama   512323 Peru    The test environment does not replicate data from your production account.\nTest cards You can use the following cards for testing:\n Argentina    Card Number     AMEX Credit Card 376414000000009   ARGENCARD Credit Card 5011050000000001   CABAL Credit Card 5896570000000008   CENCOSUD Credit Card 6034930000000005 - 5197670000000002   DINERS Credit Card 36481400000006   MASTERCARD Credit Card 5399090000000009   NARANJA Credit Card 5895620000000002   SHOPPING Credit Card 6034880000000051   VISA Credit Card 4850110000000000 - 4036820000000001   VISA Debit Card 4517730000000000      Brazil    Card Number     AMEX Credit Card 376611000000000   DINERS Credit Card 36213800000009   ELO Credit Card 5067310000000002   HIPERCARD Credit Card 6062825624254001   MASTERCARD Credit Card 5123740000000002   VISA Credit Card 4422120000000008 - 4984460000000008      Chile    Card Number     AMEX Credit Card 377825000000005   DINERS Credit Card 36525200000002   MASTERCARD Credit Card 5435630000000008   VISA Credit Card 4051885600446623 - 4938590000000017      Colombia    Card Number     AMEX Credit Card 377813000000001 - 377847626810864 - 376402004977124 - 376414000000009   CODENSA Credit Card 5907120000000009   CRM Credit Card 5282096712463427   DAVIVIENDA Credit Card 5247081012761500   DINERS Credit Card 36032400000007 - 36032404150519 - 36032440201896   MASTERCARD Credit Card 5471300000000003 - 5120697176068275   NEQUI Credit Card 4093551018099251   VISA Credit Card 4097440000000004 - 4037997623271984 - 4111111111111111   VISA Debit Card 4509420000000008      Mexico    Card Number     AMEX Credit Card 376675000000005   MASTERCARD Credit Card 5579070000000003   MASTERCARD Debit Card 5256780000000007   VISA Credit Card 4268070000000002   VISA Debit Card 4415490000000004      Panama    Card Number     MASTERCARD Credit Card 5455040000000005   VISA Credit Card 4723030000000005      Peru    Card Number     AMEX Credit Card 377753000000009   DINERS Credit Card 36239200000000   MASTERCARD Credit Card 5491610000000001   MASTERCARD Debit Card 5236930000000003   VISA Credit Card 4907840000000005 - 4634010000000005   VISA Debit Card 4557880000000004     Testing status When testing Payments, you must send in the request:\n The test parameter as true. Set 777 in the CVV of the card (for AMEX, use 7777). Send the name of the transaction status in the name of the cardholder.  For approved transactions, send APPROVED value. For rejected transactions, send REJECTED value. For pending transactions, send PENDING value.   For the card number you must enter a valid number, corresponding to the franchise sent in the request. You can use an online card generator for testing purposes or use one of the cards available for your country mentioned before. To test PSE bank transfers (Available in Colombia) in the PayU Sandbox environment, see the PSE Test Guide (PDF).  Importing the Collection Click the button below to import our collection in Postman (you may need to refresh the page if the button does not work for you). Note that we create a new environment each time you import the collection.\n (function (p,o,s,t,m,a,n) { !p[s] \u0026\u0026 (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); }); !o.getElementById(s+t) \u0026\u0026 o.getElementsByTagName(\"head\")[0].appendChild(( (n = o.createElement(\"script\")), (n.id = s+t), (n.async = 1), (n.src = m), n )); }(window, document, \"_pm\", \"PostmanRunObject\", \"https://run.pstmn.io/button.js\"));  After you run the collection, you need to set the environment variables and the globals.\nSetting your Environment Variables Our collection has one environment named PayU API Sandbox. We recommend you invoke the collection’s API requests in a Sandbox environment only.\nIf you want to change the PayU\u0026rsquo;s testing accounts, configure the api_key, api_login, merchant_id and account-[country] variables. You can leave all the other variables unchanged.\nImporting globals Globals are the variables required to process transactions in our Payment gateway such as currency, transaction amount, confirmation and response pages and more.\nImport the globals for the collection to configure the values sent to the requests.\n  Download the globals file here.\n  In the Postman collection, click Import next to your workspace name and locate the json file recently downloaded.\n  When finish, click Import.\n  To change the amount of a transaction, update the value for the tx_value_[Country] according to the country you want to test.\nRunning the Requests in the Correct Order Beware that the order in which you run the requests is important, since some of the data returned by one request may be used in the next invocation.\n","excerpt":"If you want to perform tests through PayU, you need to use the following credentials in the request, …","ref":"/docs/getting-started/test-your-solution.html","title":"Test Your Solution"},{"body":"PayU provided a set of reports which can be accessible from the Merchant Panel to let you have control of the operations you perform with PayU.\nNote Reports in the merchant panel are limited to 20 thousand rows for both displaying and downloading. If you need to have custom reports or display more information, contact your sales representative.  My downloaded reports When you download a report, the generated fils is saved in this section to let you download it later as you require. PayU keeps the reports stored here for 90 days.\nNote This section does not store the Colombian Withholding certificates.  To open this section, go to any of the available reports and click My downloads button located at the top and the bottom of the report table.\nThe My downloaded reports section appears listing the latest reports generated in the last 90 days. Take into account that newest download records may not be ready yet, if you requested a report recently and is not in the table, try again later.\nTo download a report, use the download icon .\nReports available PayU provides the following reports to monitor your account.\n","excerpt":"PayU provided a set of reports which can be accessible from the Merchant Panel to let you have …","ref":"/payu-module-documentation/reports.html","title":"Reports"},{"body":"This sections explains how to integrate using Promotions or using MSI (Only Available for Mexico).\nPromotions This feature lets you consult via API, the promotions in force, their characteristics and further information you want to present to the customers.\nA Promotion has the payment method, the payment method, the days of the week when it applies, the list of banks, and the start and end date when the promotion applies.\nAuthentication for Promotions For Promotions, you need to authenticate and authorize the petitions received by your server using a HMAC based mechanism. To authenticate, you need to know your MerchantPublicKey, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; Public Key).\nConfiguring the authentication You must include the headers Authorization and Date. The Authorization header follows this structure:\n\u0026#34;Hmac\u0026#34; + \u0026#34; \u0026#34; + MerchantPublicKey + \u0026#34;:\u0026#34; + Signature \nWhere Signature is created as follows:\nSignature = Base64(HMAC-SHA256(MerchantApiKey,ContentToSign)) \nAnd ContentToSign corresponds to:\nHTTP-Verb + \u0026#34;\\n\u0026#34; + \u0026#34;\\n\u0026#34; + \u0026#34;\\n\u0026#34; + Date + \u0026#34;\\n\u0026#34; + URI  Note It is mandatory to include the three line breaks (\\n) after the HTTP-Verb  The following examples shows how to create the Authentication header using the following test values:\nContentToSign:\nGET Fri, 28 Apr 2017 18:32:01 GMT /payments-api/rest/v4.9/pricing \nMerchantApiKey:\n4Vj8eK4rloUd272L48hsrarnUA \nMerchantPublicKey:\nPKaC6H4cEDJD919n705L544kSU \nCrypt the ContentToSign using MerchantApiKey as passphrase. Then, concatenate the result with the MerchantPublicKeyas explained before, the result is as follows:\nAuthorization\nHmac PKaC6H4cEDJD919n705L544kSU:sIxh54sANfKaxO0ugX6QwhPmZRS+TGy8gmdCwr3kjP0= \nTo avoid replay attacks, send the header Date following this format:\nDate\nMon, 11 May 2015 21:14:41 GMT \nDue to some restrictions in REST clients, you can also send the the x-hmac-date header to meet security requirements, this header follows the same format used in Date:\nx-hmac-date\nMon, 11 May 2015 21:14:41 GMT Consult available promotions To consult the promotions available with Promotions API, target your request to the following URLs according to your environment.\nURL  Test: GET https://sandbox.api.payulatam.com/payments-api/rest/v4.9/pricing Production: GET https://api.payulatam.com/payments-api/rest/v4.9/pricing   As this is a RESTful service, we strongly recommend you do not validate the scheme. If the schema is not validated, the integration is not affected, and you only need to perform small changes to implement new features when an update is added to the Web Service.\nVariables for request and response  Request parameters     Parameter Description Mandatory     accountId Identifier of your account. Yes   currency Currency of your account No   amount Amount of the purchase Yes   paymentMethod Send this method if you want to filter the Promotions by Payment method. No      Response     Field name Format Size Description     promotion \u0026gt; id Integer  Identifier of promotion in PayU platform.   promotion \u0026gt; title String 50 Promotion title.   promotion \u0026gt; termsAndConditions String 250 Terms and conditions applicable to the promotion.   promotion \u0026gt; paymentMethod String  Name of the payment method available for the promotion.   promotion \u0026gt; subFranchise String  Name of sub-brand/sub-franchise of a given payment method.   promotion \u0026gt; banks List  List of banks where the promotion applies.   promotion \u0026gt; iins List  List of the bank IIN/BINES where the promotion applies.   promotion \u0026gt; days List  List of days where the promotion applies.   promotion \u0026gt; startDate Datetime  Date when promotion starts.   promotion \u0026gt; endDate Datetime  Date when promotion ends.   paymentMethodFee List  Description of the cost assumed by the merchant according to a payment method.   paymentMethodFee \u0026gt; paymentMethodFeeDetail.paymentMethod String  Name of the payment method.   paymentMethodFeeDetail \u0026gt; pricingFees   Object that has all the pricing for a payment method and installment, or all the installment (for countries that have a installment-based system).   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee.installments String  Installment (1) or set of installments (1-36 for countries with installment-based ranges).   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing   It has the Pricing values by default for the transaction.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail   It has the values of interests and fees that will be applied to the payer.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; commission Decimal  Total fees to be applied to the payer, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; interests Decimal  Total interests to be applied to the payer, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; total Decimal  The total value to be paid by the payer for fees and interests.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; commission Merchant Detail  Total fees to be applied to the business, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; interests Decimal  Total interests to be applied to the business, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; total Decimal  The total value to be paid by the business because of fees and interests.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; totalValue Decimal  Payment total, is the value submitted by the business plus the fees and interests that may correspond to the payer.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; totalIncomeTransaction Decimal  Total income of the transaction.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo   Information of the annual effective interest rate (TEA) applied and the total financial cost (CFT).\nThis information is available for Argentina.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo \u0026gt; cft Decimal  Total Financial Cost applied.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo \u0026gt; tea Decimal  Annual Effective Interest rate applied.     API Call To consult the available promotions, send the request as follows:\nGET https://{env-api}.payulatam.com/payments-api/rest/v4.9/pricing?accountId={accountId}\u0026amp;currency={currency}\u0026amp;amount={amount}\u0026amp;paymentMethod={paymentMethod} \nThe value for the variable {env-api} displayed above is sandbox.api for testing and api for production mode. Furthermore, the paymentMethod parameter is optional if you want to filter by a given payment method. Example:\nGET https://sandbox.api.payulatam.com/payments-api/rest/v4.9/pricing?accountId=512322\u0026amp;currency=ARS\u0026amp;amount=1000 \nResponse example:\n JSON XML   { \u0026#34;amount\u0026#34;: { \u0026#34;value\u0026#34;: 1000.00, \u0026#34;tax\u0026#34;: 0, \u0026#34;purchaseValue\u0026#34;: 1000.00, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; }, \u0026#34;convertedAmount\u0026#34;: { \u0026#34;value\u0026#34;: 1000.00, \u0026#34;tax\u0026#34;: 0.00, \u0026#34;purchaseValue\u0026#34;: 1000.00, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; }, \u0026#34;promotions\u0026#34;: [ { \u0026#34;id\u0026#34;: 49, \u0026#34;title\u0026#34;: \u0026#34;Promotion_ID AMEX\u0026#34;, \u0026#34;termsAndConditions\u0026#34;: \u0026#34;SI\u0026#34;, \u0026#34;paymentMethodMain\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2018-08-16 18:48:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2090-08-16 18:48:00\u0026#34;, \u0026#34;days\u0026#34;: [ \u0026#34;MONDAY\u0026#34;, \u0026#34;TUESDAY\u0026#34;, \u0026#34;WEDNESDAY\u0026#34;, \u0026#34;THURSDAY\u0026#34;, \u0026#34;FRIDAY\u0026#34;, \u0026#34;SATURDAY\u0026#34;, \u0026#34;SUNDAY\u0026#34; ], \u0026#34;priority\u0026#34;: 10, \u0026#34;type\u0026#34;: \u0026#34;MSI\u0026#34; }, { \u0026#34;id\u0026#34;: 45, \u0026#34;title\u0026#34;: \u0026#34;Promotion Test - Master\u0026#34;, \u0026#34;termsAndConditions\u0026#34;: \u0026#34;Terminos y condiciones\u0026#34;, \u0026#34;paymentMethodMain\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2018-06-26 17:06:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2030-06-26 17:06:00\u0026#34;, \u0026#34;days\u0026#34;: [ \u0026#34;MONDAY\u0026#34;, \u0026#34;TUESDAY\u0026#34;, \u0026#34;WEDNESDAY\u0026#34;, \u0026#34;THURSDAY\u0026#34;, \u0026#34;FRIDAY\u0026#34;, \u0026#34;SATURDAY\u0026#34;, \u0026#34;SUNDAY\u0026#34; ], \u0026#34;priority\u0026#34;: 10, \u0026#34;type\u0026#34;: \u0026#34;MSI\u0026#34; } ], \u0026#34;paymentMethodFee\u0026#34;: [ { \u0026#34;paymentMethod\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;pricingFees\u0026#34;: [ { \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 171.29, \u0026#34;total\u0026#34;: 171.29 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1171.29, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;162%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;123.28%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 230.01, \u0026#34;total\u0026#34;: 230.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1230.01, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;107%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;83.97%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 340.05, \u0026#34;total\u0026#34;: 340.05 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1340.04, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;108%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;85.03%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 490.01, \u0026#34;total\u0026#34;: 490.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1490.02, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;119%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;93.68%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;18\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 641.38, \u0026#34;total\u0026#34;: 641.38 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1641.39, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;97%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;77.91%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;24\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 822.72, \u0026#34;total\u0026#34;: 822.72 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1822.72, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;90%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;72.47%\u0026#34; } } } ] }, { \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;pricingFees\u0026#34;: [ { \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } }, \u0026#34;promos\u0026#34;: [ { \u0026#34;id\u0026#34;: 49, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 1044.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 1044.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: -44.65, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } }, \u0026#34;priority\u0026#34;: 10 } ] }, { \u0026#34;installments\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 171.29, \u0026#34;total\u0026#34;: 171.29 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1171.29, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;162%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;123.28%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 230.01, \u0026#34;total\u0026#34;: 230.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1230.01, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;107%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;83.97%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 340.05, \u0026#34;total\u0026#34;: 340.05 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1340.04, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;108%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;85.03%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 490.01, \u0026#34;total\u0026#34;: 490.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1490.02, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;119%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;93.68%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;18\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 641.38, \u0026#34;total\u0026#34;: 641.38 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1641.39, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;97%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;77.91%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;24\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 822.72, \u0026#34;total\u0026#34;: 822.72 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1822.72, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;90%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;72.47%\u0026#34; } } } ] } ], \u0026#34;paymentTaxesDetails\u0026#34;: [], \u0026#34;taxesServiceFailed\u0026#34;: true }   \u0026lt;consultPriceListResponse xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34; xmlns:ns3=\u0026#34;http://wadl.dev.java.net/2009/02\u0026#34;\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;value\u0026gt;1000.00\u0026lt;/value\u0026gt; \u0026lt;tax\u0026gt;0\u0026lt;/tax\u0026gt; \u0026lt;purchaseValue\u0026gt;1000.00\u0026lt;/purchaseValue\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/amount\u0026gt; \u0026lt;convertedAmount\u0026gt; \u0026lt;value\u0026gt;1000.00\u0026lt;/value\u0026gt; \u0026lt;tax\u0026gt;0.00\u0026lt;/tax\u0026gt; \u0026lt;purchaseValue\u0026gt;1000.00\u0026lt;/purchaseValue\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/convertedAmount\u0026gt; \u0026lt;promotions\u0026gt; \u0026lt;promotion id=\u0026#34;49\u0026#34; title=\u0026#34;Promotion_ID AMEX\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;type\u0026gt;MSI\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;termsAndConditions\u0026gt;SI\u0026lt;/termsAndConditions\u0026gt; \u0026lt;startDate\u0026gt;2018-08-16 18:48:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2090-08-16 18:48:00\u0026lt;/endDate\u0026gt; \u0026lt;days\u0026gt; \u0026lt;day\u0026gt;MONDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;TUESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;WEDNESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;THURSDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;FRIDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SATURDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SUNDAY\u0026lt;/day\u0026gt; \u0026lt;/days\u0026gt; \u0026lt;/promotion\u0026gt; \u0026lt;promotion id=\u0026#34;45\u0026#34; title=\u0026#34;Promotion Test - Master\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;type\u0026gt;MSI\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;termsAndConditions\u0026gt;Terminos y condiciones\u0026lt;/termsAndConditions\u0026gt; \u0026lt;startDate\u0026gt;2018-06-26 17:06:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2030-06-26 17:06:00\u0026lt;/endDate\u0026gt; \u0026lt;days\u0026gt; \u0026lt;day\u0026gt;MONDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;TUESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;WEDNESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;THURSDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;FRIDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SATURDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SUNDAY\u0026lt;/day\u0026gt; \u0026lt;/days\u0026gt; \u0026lt;/promotion\u0026gt; \u0026lt;/promotions\u0026gt; \u0026lt;paymentMethodFee\u0026gt; \u0026lt;paymentMethodFeeDetail paymentMethod=\u0026#34;DINERS\u0026#34;\u0026gt; \u0026lt;pricingFees\u0026gt; \u0026lt;fee installments=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;171.29\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;171.29\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1171.29\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;162%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;123.28%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;230.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;230.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1230.01\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;107%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;83.97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;9\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;340.05\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;340.05\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1340.04\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;108%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;85.03%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;490.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;490.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1490.02\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;119%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;93.68%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;18\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;641.38\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;641.38\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1641.39\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;77.91%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;822.72\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;822.72\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1822.72\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;90%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;72.47%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;/pricingFees\u0026gt; \u0026lt;/paymentMethodFeeDetail\u0026gt; \u0026lt;paymentMethodFeeDetail paymentMethod=\u0026#34;AMEX\u0026#34;\u0026gt; \u0026lt;pricingFees\u0026gt; \u0026lt;fee installments=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;promos\u0026gt; \u0026lt;promo id=\u0026#34;49\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;1044.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;1044.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;-44.65\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/promo\u0026gt; \u0026lt;/promos\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;171.29\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;171.29\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1171.29\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;162%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;123.28%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;230.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;230.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1230.01\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;107%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;83.97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;9\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;340.05\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;340.05\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1340.04\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;108%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;85.03%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;490.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;490.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1490.02\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;119%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;93.68%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;18\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;641.38\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;641.38\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1641.39\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;77.91%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;822.72\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;822.72\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1822.72\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;90%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;72.47%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;/pricingFees\u0026gt; \u0026lt;/paymentMethodFeeDetail\u0026gt; \u0026lt;/paymentMethodFee\u0026gt; \u0026lt;paymentTaxesDetails/\u0026gt; \u0026lt;taxesServiceFailed\u0026gt;true\u0026lt;/taxesServiceFailed\u0026gt; \u0026lt;/consultPriceListResponse\u0026gt;    Execute a transaction with Promotions Once you have selected the transaction, you need to include the promotion ID an the number of installments as an extra parameter:\n JSON XML   \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: (Number of installments), \u0026#34;PROMOTION_ID\u0026#34;: (Promotion Id selected) }   \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Number of installments\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PROMOTION_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Promotion Id selected\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt;    To learn how to include these extra parameters, refer to the Payments API for Argentina and Mexico.\nMonths Without Interests (MSI - Meses Sin Intereses) If your account is in Mexico, you can offer to your customers the option to pay in a determined number of interest-free installments. If you want to enable this feature, contact your sale representative.\nConsiderations  The numbers of installments supported are 3, 6, 9, 12, or 18. The minimum values for MSI depends on the number of installments selected:  3 \u0026gt; $300 MXN 6 \u0026gt; $600 MXN 9 \u0026gt; $900 MXN 12 \u0026gt; $1200 MXN 18 \u0026gt; $1800 MXN   The available banks for MSI are: BANAMEX, BANCO REGIONAL DE MONTERREY S.A, BANCOPPEL, BANCO AZTECA, SCOTIABANK, HSBC, INBURSA, BANCA MIFEL SA, BANCO MULTIVA, BAJIO, CI BANCO, Afirme, Banregio, Banjercito, Banorte, Famsa, Invex, Premium Card Liverpool, Santander, and Bancomer. When using MSI, always display the phrase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; during the payment process.  Variables for MSI To use MSI, you need to include the number of months as an extra parameter:\n JSON XML   \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: (Number of months) }   \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Number of months\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt;    To learn how to include these parameters, refer to the Payments API for Mexico.\n","excerpt":"This sections explains how to integrate using Promotions or using MSI (Only Available for Mexico). …","ref":"/docs/integrations/api-integration/promotions-api.html","title":"Promotions API for Argentina and Mexico"},{"body":"To integrate with Voids and Refunds API, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   If you need to understand the concepts and read further considerations of Voids and Refunds, refer to this article.\nConsiderations per country Before using Voids and Refunds API, take into account the following considerations.\nArgentina  The maximum time to send a void is 14 days. If no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 365 days and 180 days for partial refunds. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in maximum 30 working days.  Brazil  The maximum time to send a void is seven (7) days. If no void or capture is sent after this time, the transaction is cancelled. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days for transactions processed in Redecard and 120 for transactions processed in Cielo. When a refund is approved, the payer gets the money back in maximum 15 working days.  Chile  The minimum time to send a void is three (3) hours after the authorization and the maximum is seven (7) days. If no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days. Refunds for transactions processed by WebPay Plus are not supported. For transactions prepaid cards not processed by WebPay Plus, Refunds requested during the first hour after their charge can be approved or rejected by the financial network. After the first hour, all the refund for transactions with prepaid cards are rejected. If the refund is rejected, PayU shows the error code generated by the network. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in 8 to 20 working days. Partial refunds for transactions using installments are received online but PayU processes them manually due to acquirer restrictions. The minimum amount to send a refund is 10 CLP.  Colombia  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is two years. Minimum amount to send the Refund 100 COP. If refund is not sent the same day in which the transaction was captured (before 9 pm UTC-5) the refund goes immediately to a manual process without sending the online attempt. When a refund is approved, the payer gets the money back in maximum 30 working days. Partial refunds are not available for international credit cards.  Mexico  The minimum time to send a void is 10 minutes after the authorization and the maximum is 30 days. If the transaction was made with American Express, the maximum time is seven (7) days.\nIf no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. If the transaction was made processed by Bancomer, the maximum time is 45 days. When a refund is approved, the payer gets the money back in 30 working days. Refunds with decimals are not supported.  Panama  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. When a refund is approved, the payer gets the money back in maximum 8 working days.  Peru  The maximum days to void an authorization are:  Visa: 21 days. If no void or capture is sent after this time, the transaction is auto-captured. Mastercard: 28 days. If no void or capture is sent after this time, the transaction is auto-captured. American Express: 30 days. If no void or capture is sent after this time, the transaction is auto-voided. Diners: 11 days. If no void or capture is sent after this time, the transaction is auto-voided.   The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. Partial refunds are supported for transactions without installments. Recall that transactions with one installment are considered as without installments. Partial refunds with visanet must be sent after one day. When a refund is approved, the payer gets the money back in 15 to 25 working days. Minimum amount to send the Refund is 1 USD or 1 PEN.  Void The VOID method cancels a previously authorized transaction. Void is automatic procedure, as soon as you send the VOID request, it does not follow any approval flow, and the transaction is not charged to the card holder.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; id Number  Identifier of the order to be voided. Yes   transaction \u0026gt; type Alphanumeric 32 Set VOID to perform a void of an authorized transaction. Yes   transaction \u0026gt; reason Alphanumeric  Provide the reason to void an authorized transaction. No   transaction \u0026gt; parentTransactionId Alphanumeric 36 Identifier of the transaction to be voided. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.     API Call The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400462414\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;VOID\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;Reason for requesting the void of the transaction\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;c8ec8737-7645-4756-a991-6e60a99eb4d9\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400462414, \u0026#34;transactionId\u0026#34;: \u0026#34;57546e0a-8275-48e3-af11-7d3dc7420bfe\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;49263990\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624880273010, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462466\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;VOID\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;50876ad6-46f2-4c8d-bb91-2f028b56ccb8\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400462466\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;5fbb1ab0-3d2e-448f-a0be-b0bcfb5501ae\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;49263990\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-28T06:57:44\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Refunds A refund is requested when a shop decides to voluntarily return the money spent by the shopper due to dissatisfaction reasons or when the shop does not have enough stock of the product purchased. The REFUND method request the reversal of a previously captured transaction.\nRefunds can be requested by the total or the partial amount (PARTIAL REFUND).\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; additionalValues \u0026gt;  64 Amount of the partial refund. This parameter and its values are mandatory when you want to perform a partial refund No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Mandatory for partial refunds No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19 Specifies the amount of the transaction. Mandatory for partial refunds No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Mandatory for partial refunds No   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; id Number  Identifier of the order to be refunded. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nREFUNDPARTIAL_REFUND for partial refunds (if supported). Yes   transaction \u0026gt; reason Alphanumeric  Provide the reason to refund an authorized transaction. No   transaction \u0026gt; parentTransactionId Alphanumeric 36 Identifier of the transaction to be refunded. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.     API Call The following are the request and response bodies for this transaction type.\n JSON XML   Refund Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400462687\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;REFUND\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;Reason for requesting the refund of the transaction\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;60e2080d-08b1-4db2-a54f-8bcbe8271662\u0026#34; }, \u0026#34;test\u0026#34;: false } \nPartial refund Request body:\n{ \u0026#34;command\u0026#34;:\u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;language\u0026#34;:\u0026#34;es\u0026#34;, \u0026#34;merchant\u0026#34;:{ \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;:{ \u0026#34;additionalValues\u0026#34;:{ \u0026#34;TX_VALUE\u0026#34;:{ \u0026#34;value\u0026#34;:\u0026#34;950\u0026#34;, \u0026#34;currency\u0026#34;:\u0026#34;ARS\u0026#34; } }, \u0026#34;order\u0026#34;:{ \u0026#34;id\u0026#34;:\u0026#34;1400462690\u0026#34; }, \u0026#34;parentTransactionId\u0026#34;:\u0026#34;0486359b-a048-4b6b-9b72-af584e710e64\u0026#34;, \u0026#34;reason\u0026#34;:\u0026#34;Reason for requesting the refund or cancellation of the transaction\u0026#34;, \u0026#34;type\u0026#34;:\u0026#34;PARTIAL_REFUND\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400462690, \u0026#34;transactionId\u0026#34;: null, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;PENDING_REVIEW\u0026#34;, \u0026#34;responseCode\u0026#34;: null, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;1400462690\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Refund Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462689\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;REFUND\u0026lt;/type\u0026gt; \u0026lt;reason\u0026gt;Reason for requesting the refund of the transaction.\u0026lt;/reason\u0026gt; \u0026lt;parentTransactionId\u0026gt;1d31ea44-0d8f-4e65-93ac-6be4347e5b40\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nPartial refund Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462691\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;REFUND\u0026lt;/type\u0026gt; \u0026lt;reason\u0026gt;Reason for requesting the refund of the transaction.\u0026lt;/reason\u0026gt; \u0026lt;parentTransactionId\u0026gt;976d0411-8d0f-46e7-b5fe-515dad9a41ee\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400462691\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;6cef020a-8006-4744-b7f9-d9a343807297\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;PENDING_REVIEW\u0026lt;/pendingReason\u0026gt; \u0026lt;responseMessage\u0026gt;1400462690\u0026lt;/responseMessage\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Query the refund status As mentioned before, refund request follows an approval in flow in which, PayU take 1 to 3 days to process the request and approves or rejects the request. If you want to know the status of the refund, you have two options:\nCheck status through the PayU Module  Log into you PayU module account. In the left panel, expand the Transactions menu and select Sales Report option.  Use the Filter my sales field to find the order using the order and the transaction id.  The Status column show whether the refund has been approved or rejected; if the refund has not been approved, this column shows that the refund has been requested.  Check status using queries You can consult the state of the refund by using the Queries API. In the response of the query, you need to send the order id.\nWhen query an order, the system returns the last transaction associated with the Order.\nThere are three possible status in the response of your request:\n Unresolved request: if the request has not been resolved, the order found in the query appears in CAPTURED status (parameter result.payload.status in the response), the first transaction type is AUTHORIZATION_AND_CAPTURE (parameter result.transactions.type in the response) and the first transaction status is APPROVED (First parameter result.transactions.transactionResponse.state in the response). Approved: if the refund request is approved by a PayU’s customer service agent, the order found in the query appears in REFUNDED status (parameter result.payload.status in the response), the first transaction type is REFUND (parameter result.transactions.type in the response) and the first transaction status is APPROVED (First parameter result.transactions.transactionResponse.state in the response). Declined: if the refund request is approved by a PayU’s customer service agent, the order found in the query appears in CAPTURED status (parameter result.payload.status in the response), the first transaction type is REFUND (parameter result.transactions.type in the response) and the first transaction status is DECLINED (First parameter result.transactions.transactionResponse.state in the response).  ","excerpt":"To integrate with Voids and Refunds API, target your request to the following URLs according to your …","ref":"/docs/integrations/api-integration/refunds-api.html","title":"Voids and Refunds API"},{"body":"WooCommerce is a Wordpress plugin that ease the creation of an integrated online store. To let your clients pay with PayU from your website, you need to install the plugin for WooCommerce, which integrates PayU Latam as a valid payment gateway. For more information about WooCommerce, refer to their official website.\nPrerequisites  You need an active account in PayU Latam. Having installed WordPress 3.8 or higher. Having installed WooCommerce 2.0 or higher in the Wordpress website. Having the PayU\u0026rsquo;s WooCommerce plugin downloaded and stored in an accessible location. Click here to download it.  Installation Follow the next procedure to install the plugin on your website.\n  Log in to your WordPress site as an administrator.\n  In the Dashboard, expand the Plugins menu in the left panel and click Add New.\n  Go to the Upload option and choose the .zip file of the WooCommerce plugin downloaded.\nThen, click Install Now.  Provide the data of the connection via FTP and click Proceed.  Note This step depends on the initial configuration of WordPress. The installation of the plugin is not affected if you don\u0026rsquo;t see this screen.  Finally, activate the plugin you have installed by clicking the Activate Plugin link.  Configuration  Back in the Dashboard, expand the WooCommerce menu in the left panel and click Settings.  Go to the Checkout tab.  Scroll down to Payment Gateways table. Then, find PayU Latam and drag and drop to the top of the table.\nClick the radio of the Default column.  Save the changes.\nClick the PayU Latam link at the top of the tab and configure the data of your PayU account.  The following table explains the values:\n   Field Value     Enable / Disable Mark this checkbox to enable the WooCommerce payment gateway.   Title Title displayed for the Payment Method. The default value is PayU Latam.   Merchant ID ID of your commerce in PayU Latam   Account ID ID of the PayU account according to the country where you want to sell.   API key Unique key of your commerce, you can find this key in the PayU module.   Gateway URL Gateway URL.\nFor test, you can use https://sandbox.gateway.payulatam.com/ppp-web-gateway and for production https://gateway.payulatam.com/ppp-web-gateway/   Transaction in test mode Mark this checkbox to make transactions the test mode.   Response page URL of the response page.\nBy default, the URL is https://your.domain.com/wp-content/plugins/woocommerce-payu-latam/response.php, you must replace https://your.domain.com with your site\u0026rsquo;s domain.   Confirmation page URL of the confirmation page.\nBy default, the URL is https://your.domain.com/wp-content/plugins/woocommerce-payu-latam/confirmation.php, you must replace https://your.domain.com with your site\u0026rsquo;s domain.    Finally, click Save changes button. At this point, your customers can pay with PayU Latam when they do the checkout in the WooCommerce\u0026rsquo;s shopping cart.  ","excerpt":"WooCommerce is a Wordpress plugin that ease the creation of an integrated online store. To let your …","ref":"/docs/tools/shopping-cart-plugins/woocommerce.html","title":"WooCommerce"},{"body":"To integrate with Payments SDK Mexico, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments API includes the following methods:\n Submit transaction with credit cards Submit transaction with cash Submit transaction with bank transfer Submit transaction with bank reference Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit card This method lets you process the payments performed by your customers using credit cards. For Mexico, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Two-step flows are only supported for Mastercard and Visa.  Considerations  Send a valid credit card Payment Method in the request, see the available Payment Methods for Mexico. Two-step flows are only available for Mastercard and Visa. For payments with Promotions, send the parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. When using promotions or apply installments, always display the phrase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; during the payment process. When installments applied (fees assumed by the payer), display the original amount of the transaction, the total amount after the fees, the number of installments, and the amount per installment including the extra fee. Promotions feature is only available for one-step flows. For payments with credit card tokens, include the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable PROCESS_WITHOUT_CVV2 as true and remove the variable CREDIT_CARD_SECURITY_CODE.  Authorization Use this method to perform the Authorization step of a two-step flow using Mastercard or Visa. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nTThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow for Mastercard and Visa. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 30 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400469033\u0026#34;); //Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;f432b9ba-a692-4350-b8c6-2348e1e21a6c\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); //Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, //Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400469033\u0026#34;, //Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;f432b9ba-a692-4350-b8c6-2348e1e21a6c\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  Send a valid cash Payment Method in the request, see the available Payment Methods for Mexico. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payment method is OXXO, the confirmation of the payment will be one day after the payment. For other cash payment methods, the confirmation is online. The extra parameters has the following data related to the transaction:  BANK_REFERENCED_CODE: payment type. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. PAYMENT_WAY_ID: network payment of the payment type.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;OXXO\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tString bankRef = (String)extraParameters.get(\u0026#34;BANK_REFERENCED_CODE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); int reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String paymentWay = (String)extraParameters.get(\u0026#34;PAYMENT_WAY_ID\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;OXXO\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_REFERENCED_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;PAYMENT_WAY_ID; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. When using this payment method, the payer performs a bank transfer from their bank account to a PayU\u0026rsquo;s CLABE account.\nTo integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nConsiderations  The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payer selects this payment method, PayU creates an order in in progress state and a transaction in PENDINGstate. To perform the payment, the payer must log in the virtual branch of their bank (The bank must appear in the list of SPEI available banks). First, the payer must register the PayU CLABE account in their bank branch. Once the PayU CLABE account is enable to perform transfers, the payer must provide the reference returned by PayU in the parameter trazabilityCode and the amount as returned by PayU in their virtual branch. In the response body, you can find the needed variables to generate the payment receipt (voucher) and the URL of the receipt generated by PayU in HTML and PDF format. If you want to generate the voucher, use the following variables:  trazabilityCode: unique identifier of maximum 7 digits long; corresponds to the payment reference that the payer must provide in the virtual branch. It is mandatory to enter the same value in the reference field of the bank branch so the payment can be successful. value: the payer must enter as transfer amount the same value informed in the request, so the payment can be successful. SPEI_CLABE_ACCOUNT_NUMBER: is the PayU\u0026rsquo;s interbank CLABE, namely, the account where the amount will be transferred. The payer must register this CLABE as beneficiary in their bank branch before performing the transfer. SPEI_BANK_NAME: name associated with the PayU CLABE account. The beneficiary account is associated with the STP bank and it\u0026rsquo;s always the same bank for PayU.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;SPEI\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tString bankRef = (String)extraParameters.get(\u0026#34;BANK_REFERENCED_CODE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String speiBankName = (String)extraParameters.get(\u0026#34;SPEI_BANK_NAME\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String speiCLABE = (String)extraParameters.get(\u0026#34;SPEI_CLABE_ACCOUNT_NUMBER\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String paymentWay = (String)extraParameters.get(\u0026#34;PAYMENT_WAY_ID\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;SPEI\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_REFERENCED_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;SPEI_BANK_NAME; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;PAYMENT_WAY_ID; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with bank reference This method lets you process payments of your customers using bank references. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nConsiderations  The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The extra parameters has the following data related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects bank reference payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    Method call The following are the bodies of the request and response of this payment method.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;BANK_REFERENCED\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;BANK_REFERENCED\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Mexico, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/docs/integrations/sdk-integration/payments-sdk-mexico.html","title":"Payments SDK - Mexico"},{"body":"To step over to production according to the integration you use, you need to create the payment forms with the some parameters of your account and pointing to the production URL.\nStep over to production using WebCheckout integration Include the following parameters in your payment forms:\n   Parameter Description     merchantId ID of your commerce in PayU Latam.   ApiKey Password provided by PayU. How do I get my API Key   referenceCode Unique sale reference for each transaction. This value is generated by you.   accountId ID of the PayU account according to the country where you want to sell.   description Description of the sell you are performing.   amount Total amount of the sell you are performing.   tax Tax amount of the sell you are performing.   taxReturnBase Tax return base of the sell you are performing.   currency ISO code of the currency. See accepted currencies.   signature The signature is a unique way to validate payments made through the platform, ensuring its authenticity. For more information refer Authentication signature.   test Set 0 for transactions processed in the Production environment.   buyerEmail E-mail address of the buyer.    Target your request to the following URL:\nhttps://checkout.payulatam.com/ppp-web-gateway-payu Step over to production using API integration Include the following parameters in your payment forms:\n   Parameter Description     merchantId ID of your commerce in PayU Latam.   ApiKey Password provided by PayU. How do I get my API Key   ApiLogin User or login provided by PayU. How do I get my API Login   accountId ID of the PayU account according to the country where you want to sell.   signature The signature is a unique way to validate payments made through the platform, ensuring its authenticity.\nFor more information refer Authentication signature.   test Set false for transactions processed in the Production environment.    Target your request to the following URL:\nQueries: https://api.payulatam.com/reports-api/4.0/service.cgi Payments: https://api.payulatam.com/payments-api/4.0/service.cgi Step over to production using SDK integration Include the following parameters in your payment forms:\n   Parameter Description     merchantId ID of your commerce in PayU Latam.   ApiKey Password provided by PayU. How do I get my API Key   ApiLogin User or login provided by PayU. How do I get my API Login   accountId ID of the PayU account according to the country where you want to sell.   test Set false for transactions processed in the Production environment.    Target your request to the following URL:\n Java PHP   PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    ","excerpt":"To step over to production according to the integration you use, you need to create the payment …","ref":"/docs/getting-started/deploy-to-production.html","title":"Deploy to Production"},{"body":"Response codes for transactions    Response code Description     ERROR General error.   APPROVED The transaction was approved.   ANTIFRAUD_REJECTED The transaction was rejected by the anti-fraud system.   BANK_FRAUD_REJECTED The transaction was rejected due to suspected fraud at the financial institution.   PAYMENT_NETWORK_REJECTED The financial network rejected the transaction.   ENTITY_DECLINED The transaction was declined by the bank or financial network because of an error.   INTERNAL_PAYMENT_PROVIDER_ERROR An error has occurred in the system trying to process the payment.   INACTIVE_PAYMENT_PROVIDER The payment provider was not active.   DIGITAL_CERTIFICATE_NOT_FOUND The financial network reported an authentication error.   INVALID_EXPIRATION_DATE_OR_SECURITY_CODE The security code or expiration date was invalid.   INVALID_RESPONSE_PARTIAL_APPROVAL Invalid response type. The entity response is a partial approval and should be automatically canceled by the system.   INSUFFICIENT_FUNDS The account had insufficient funds.   CREDIT_CARD_NOT_AUTHORIZED _FOR_INTERNET_TRANSACTIONS The credit card was not authorized for internet transactions.   INVALID_TRANSACTION The financial network reported that the transaction was invalid.   INVALID_CARD The card is invalid.   EXPIRED_CARD The card has expired.   RESTRICTED_CARD The card has a restriction.   CONTACT_THE_ENTITY You should contact the bank.   REPEAT_TRANSACTION You must repeat the transaction.   ENTITY_MESSAGING_ERROR The financial network reported a communication error with the bank.   BANK_UNREACHABLE The bank was not available.   EXCEEDED_AMOUNT The transaction exceeds the amount set by the bank.   NOT_ACCEPTED_TRANSACTION The transaction was not accepted by the bank for some reason.   ERROR_CONVERTING_TRANSACTION_AMOUNTS An error occurred converting the amounts to the payment currency.   EXPIRED_TRANSACTION The transaction expired.   PENDING_TRANSACTION_REVIEW The transaction was stopped and must be revised, this can occur because of security filters.   PENDING_TRANSACTION_CONFIRMATION The transaction is subject to confirmation.   PENDING_TRANSACTION_TRANSMISSION The transaction is subject to be transmitted to the financial network. This usually applies to transactions with cash payment means.   PAYMENT_NETWORK_BAD_RESPONSE The message returned by the financial network is inconsistent.   PAYMENT_NETWORK_NO_CONNECTION Could not connect to the financial network.   PAYMENT_NETWORK_NO_RESPONSE Financial Network did not respond.   FIX_NOT_REQUIRED Transactions clinic: internal handling code.   AUTOMATICALLY_FIXED_AND_SUCCESS_REVERSAL Transactions clinic: internal handling code. Query API.   AUTOMATICALLY_FIXED_AND_UNSUCCESS_REVERSAL Transactions clinic: internal handling code. Query API.   AUTOMATIC_FIXED_NOT_SUPPORTED Transactions clinic: internal handling code. Query API.   NOT_FIXED_FOR_ERROR_STATE Transactions clinic: internal handling code. Query API.   ERROR_FIXING_AND_REVERSING Transactions clinic: internal handling code. Query API.   ERROR_FIXING_INCOMPLETE_DATA Transactions clinic: internal handling code. Query API.    Response codes sent to the response page     lap Transaction State transaction State pol Transaction State lapResponseCode pol Response Code Description     APPROVED 4 (Approved) 4 (Approved) APPROVED 1 Transaction approved   DECLINED 6 (Declined) 6 (Rejected) PAYMENT_NETWORK_REJECTED 4 Transaction rejected by payment network      ENTITY_DECLINED 5 Transaction has been declined by the bank      INSUFFICIENT_FUNDS 6 Insufficient funds      INVALID_CARD 7 Invalid Card      CONTACT_THE_ENTITY 8 Please contact your financial entity      BANK_ACCOUNT_ACTIVATION _ERROR 8 Automatic debit not allowed      BANK_ACCOUNT_NOT_AUTHORIZED _FOR_AUTOMATIC_DEBIT 8 Automatic debit not allowed      INVALID_AGENCY_BANK_ACCOUNT 8 Automatic debit not allowed      INVALID_BANK_ACCOUNT 8 Automatic debit not allowed      INVALID_BANK 8 Automatic debit not allowed      EXPIRED_CARD 9 Expired card      RESTRICTED_CARD 10 Restricted card      INVALID_EXPIRATION_DATE_OR _SECURITY_CODE 12 Date of expiration or security code is invalid      REPEAT_TRANSACTION 13 Retry the transaction      INVALID_TRANSACTION 14 Transaction invalid      EXCEEDED_AMOUNT 17 Value exceeds maximum allowed by this entity      ABANDONED_TRANSACTION 19 Transaction abandoned by the payer      CREDIT_CARD_NOT_AUTHORIZED_FOR _INTERNET_TRANSACTIONS 22 Card is not authorized for internet purchases      ANTIFRAUD_REJECTED 23 Transaction has been rejected by the anti-fraud module      BANK_FRAUD_REJECTED 23 The transaction was rejected due to suspected fraud at the financial institution      DIGITAL_CERTIFICATE_ NOT_FOUND 9995 Digital certificate not found      BANK_UNREACHABLE 9996 Error trying to communicate with the bank      ENTITY_MESSAGING _ERROR 9997 Error communicating with the financial institution      NOT_ACCEPTED_ TRANSACTION 9998 Transaction not permitted to cardholder      INTERNAL_PAYMENT _PROVIDER_ERROR 9999 Internal error      INACTIVE_PAYMENT_ PROVIDER 9999 Internal error   ERROR 104 (Error) 6 (Rejected) ERROR 9999 Internal error      ERROR_CONVERTING_TRANSACTION _AMOUNTS 9999 Internal error      BANK_ACCOUNT_ACTIVATION_ERROR 9999 Internal error      FIX_NOT_REQUIRED 9999 Internal error      AUTOMATICALLY_FIXED_AND_SUCCESS _REVERSAL 9999 Internal error      AUTOMATICALLY_FIXED _AND_UNSUCCESS _REVERSAL 9999 Internal error      AUTOMATIC_FIXED_ NOT_SUPPORTED 9999 Internal error      NOT_FIXED_FOR_ ERROR_STATE 9999 Internal error      ERROR_FIXING_AND _REVERSING 9999 Internal error      ERROR_FIXING_ INCOMPLETE_DATA 9999 Internal error      PAYMENT_NETWORK_ BAD_RESPONSE 9999 Internal error      PAYMENT_NETWORK_ NO_CONNECTION 9996 Unable to communicate with the financial institution      PAYMENT_NETWORK_ NO_RESPONSE 9996 No response from the financial institution   EXPIRED 5 (Expired) 5 (Expired) EXPIRED_TRANSACTION 20 Transaction expired   PENDING 7 (Pending) 7 (Pending) PENDING_TRANSACTION_ REVIEW 15 Transaction is pending approval     14 (Pending) PENDING_TRANSACTION_ CONFIRMATION 25 Receipt of payment generated. Pending payment     7 (Pending) PENDING_TRANSACTION_ TRANSMISSION 9998 Not permitted transaction     14 (Pending) PENDING_PAYMENT_IN_ENTITY 25 Receipt of payment generated. Pending payment     15 (Pending) PENDING_PAYMENT_IN_BANK 26 Receipt of payment generated. Pending payment     10 (Pending) PENDING_SENT_TO_FINANCIAL _ENTITY 29      12 (Pending) PENDING_AWAITING_PSE _CONFIRMATION 9994 Pending confirmation from PSE     18 (Pending) PENDING_NOTIFYING_ENTITY 25 Receipt of payment generated. Pending payment    Response codes sent to the confirmation page     state_pol response_message_pol response_code_pol Description     4 (Approved) APPROVED 1 Transaction approved   6 (Declined) PAYMENT_NETWORK_REJECTED 4 Transaction rejected by financial institution    ENTITY_DECLINED 5 Transaction rejected by the bank    INSUFFICIENT_FUNDS 6 Insufficient funds    INVALID_CARD 7 Invalid card    CONTACT_THE_ENTITY 8 Contact the financial institution    BANK_ACCOUNT_ACTIVATION_ERROR 8 Automatic debit is not allowed    BANK_ACCOUNT_NOT_AUTHORIZED _FOR_AUTOMATIC_DEBIT 8 Automatic debit is not allowed    INVALID_AGENCY_BANK_ACCOUNT 8 Automatic debit is not allowed    INVALID_BANK_ACCOUNT 8 Automatic debit is not allowed    INVALID_BANK 8 Automatic debit is not allowed    EXPIRED_CARD 9 Expired card    RESTRICTED_CARD 10 Restricted card    INVALID_EXPIRATION_DATE_OR _SECURITY_CODE 12 Invalid expiration date or security code    REPEAT_TRANSACTION 13 Retry payment    INVALID_TRANSACTION 14 Invalid transaction    EXCEEDED_AMOUNT 17 The value exceeds the maximum allowed by the entity    ABANDONED_TRANSACTION 19 Transaction abandoned by the payer    CREDIT_CARD_NOT_AUTHORIZED_FOR _INTERNET_TRANSACTIONS 22 Card not authorized to buy online    ANTIFRAUD_REJECTED 23 Transaction refused because of suspected fraud    BANK_FRAUD_REJECTED 23 The transaction was rejected due to suspected fraud at the financial institution    DIGITAL_CERTIFICATE_NOT_FOUND 9995 Digital certificate not found    BANK_UNREACHABLE 9996 Error trying to communicate with the bank    PAYMENT_NETWORK_NO_CONNECTION 9996 Unable to communicate with the financial institution    PAYMENT_NETWORK_NO_RESPONSE 9996 No response was received from the financial institution    ENTITY_MESSAGING_ERROR 9997 Error communicating with the financial institution    NOT_ACCEPTED_TRANSACTION 9998 Transaction not permitted    INTERNAL_PAYMENT_PROVIDER_ERROR 9999 Error    INACTIVE_PAYMENT_PROVIDER 9999 Error    ERROR 9999 Error    ERROR_CONVERTING_TRANSACTION _AMOUNTS 9999 Error    BANK_ACCOUNT_ACTIVATION_ERROR 9999 Error    FIX_NOT_REQUIRED 9999 Error    AUTOMATICALLY_FIXED_AND_SUCCESS _REVERSAL 9999 Error    AUTOMATICALLY_FIXED_AND_UNSUCCESS _REVERSAL 9999 Error    AUTOMATIC_FIXED_NOT_SUPPORTED 9999 Error    NOT_FIXED_FOR_ERROR_STATE 9999 Error    ERROR_FIXING_AND_REVERSING 9999 Error    ERROR_FIXING_INCOMPLETE_DATA 9999 Error    PAYMENT_NETWORK_BAD_RESPONSE 9999 Error   5 (Expired) EXPIRED_TRANSACTION 20 Expired transaction    Codes of the payment methods The following codes applies for payment_method_type (Confirmation Page), payment_method_id (Confirmation Page), and polPaymentMethodType (Response Page).\n   Code lapPaymentMethodType\n(Response Page) Description     2 CREDIT_CARD Credit Cards   4 PSE PSE Bank transfers   5 ACH ACH debits   6 DEBIT_CARD Debit cards   7 CASH Cash   8 REFERENCED Referenced payment   10 BANK_REFERENCED Payment in banks   14 SPEI SPEI Bank transfers    Commands accepted by the Payments API    Command Description     PING Used to ping the service.   SUBMIT_TRANSACTION Used to send transactions of any kind.   GET_PAYMENT_METHODS Used to query the shop’s available payment methods.   GET_BANKS_LIST It is used to obtain the bank list for PSE transactions.    Commands accepted by the Query API    Command Description     PING Used to ping the service.   ORDER_DETAIL Used to query an order using its identifier.   ORDER_DETAIL_BY_REFERENCE_CODE Used to query an order using its reference code.   TRANSACTION_RESPONSE_DETAIL Used to check the response of a transaction.    Accepted currencies    Currency Description     ARS Argentine Peso   BRL Brazilian Real   CLP Chilean Peso   COP Colombian Peso   MXN Mexican Peso   PEN Peruvian Nuevo Sol   USD US Dollar    Order status    Status Description     NEW The order was created in the system   IN_PROGRESS The order is being processed.   AUTHORIZED The last transaction of the order is an approved authorization.   CAPTURED The last transaction of the order is an approved capture.   CANCELLED The last transaction of the order is an approved cancellation.   DECLINED The last transaction of the order is declined.   REFUNDED The last transaction of the order is an approved refund.    Transaction states    State Description     APPROVED Approved transaction   DECLINED Rejected transaction   ERROR Error processing the transaction   EXPIRED Expired transaction   PENDING Pending transaction or in validation   SUBMITTED Transaction sent to the financial institution but the processing did not finish.\nquery API.    Transaction types    Type Description     AUTHORIZATION Authorization transaction.   AUTHORIZATION_AND_CAPTURE Charge transaction, Authorization and capture in one step.   CAPTURE Capture Transaction.   VOID Cancellation transaction of an authorization.   REFUND Refund transaction or cancellation of a capture.    Processing countries    Country Description     AR Argentina   BR Brazil   CL Chile   CO Colombia   MX Mexico   PA Panama   PE Peru    Supported Languages    ISO code 639 Language     en English   es Spanish   pt Portuguese    Document types    ISO Description Country     CC Citizenship card. Colombia   CE Foreign citizenship card. Colombia, Peru   CEL When identified by the mobile line. Colombia   CEP Electronic Payment Receipt Mexico   CI Identity Card. Argentina, Chile   CNPJ National Register of Legal Entities Brazil   CPF Registration of Individuals Brazil   CUIL Unique Labor Identification Code Argentina   CUIT Single Tax identification Argentina   CURP Unique Population Registry Code Mexico   DE Foreing Identifiaction Number Peru   DL Driver License    DNI National Identity Document Argentina, Peru, Chile   DNIE National Identity Document - Electronical Argentina, Peru, Chile   EIN Employer Identification Number Peru   ID Identification    IDC Client´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.    IFE Federal Electoral Institute Mexico   LC Civic Notebook Argentina   LE Book enlistment Argentina   NIF Tax identification number    NIT Tax identification number Colombia   PP Passport.    RC Birth certificate. Colombia   RDE RDE document type    RE RE document type    RFC Federal taxpayer registry Mexico   RIF Tax Information Registry    RM Commercial Register    RMC Consular Registration    RNC National Taxpayers Registry    RUC Unique Taxpayer Registration Peru   RUN Unique National Role Chile   RUT Unique Tributary Role Chile   SC Safe Passage    SIEM Mexican Business Information System Mexico   SSN Social Security Number    TI Identity Card. Colombia    ","excerpt":"Response codes for transactions    Response code Description     ERROR General error.   APPROVED The …","ref":"/docs/getting-started/response-codes-and-variables.html","title":"Response Codes and Variables"},{"body":"window.onload = function () { document.getElementsByClassName(\"section-index\")[0].style.display = \"none\"; }; -- ","excerpt":"window.onload = function () { document.getElementsByClassName(\"section-index\")[0].style.display = …","ref":"/docs/server-status.html","title":"Server Status"},{"body":"What are Installments and Promotions With Installments and Promotions, you can offer to your customer the possibility to buy your products paying in a determined number of installments with a reduced interest rate. Regardless of the number of installments selected by your customer, you will receive the full amount of the purchase minus the commission free agreed with PayU.\nTo perform the configuration of Installments and Promotions based on the agreements you have with bank entities, contact your sales representative.\nNote For Mexico, you can use Months Without Interests (MSI - Meses sin intereses)  How does Installments and Promotions works in PayU To use promotions, you need to first consult the available promotions for your shop; then, select the promotion that fits to your needs and finally, send the payment request along with the promotion Id selected and the number of installments.\nThe following sequence of events explains better the promotions flow.\nMonths Without Interests (MSI - Meses sin intereses) Months Without Interests (known in Mexico as Meses sin intereses) lets you offer to your customers the possibility to pay in a defined number of interest-free installments (3, 6, 9, 12, or 18). Unlike the promotions model, when using MSI you don\u0026rsquo;t need to query the promotion id.\nTo request the usage of MSI, contact your sales representative.\nNote The minimum values for MSI depends on the number of installments selected:\n 3 \u0026gt; $300 MXN 6 \u0026gt; $600 MXN 9 \u0026gt; $900 MXN 12 \u0026gt; $1200 MXN 18 \u0026gt; $1800 MXN   What\u0026rsquo;s next? The integration with this feature can be performed using the Promotions API. To learn how to integrate with MSI, refer to this section.\nNote As this is a RESTful service, we strongly recommend you do not validate the scheme. If the schema is not validated, the integration is not affected, and you only need to perform small changes have to implement the new features when an update is added to the Web Service.  To integrate with Promotions API, target the requests to the following URLs: API  Tests: GET https://sandbox.api.payulatam.com/payments-api/rest/v4.3/pricing Production: GET https://api.payulatam.com/payments-api/rest/v4.3/pricing   -- ","excerpt":"What are Installments and Promotions With Installments and Promotions, you can offer to your …","ref":"/docs/services/promotions.html","title":"Installments and Promotions - Argentina and Mexico"},{"body":"osCommerce is a platform developed in PHP that ease the creation of an online store. To let your clients pay with PayU from your website, you need to install the plugin for osCommerce, which integrates PayU Latam as a valid payment gateway. For more information about osCommerce, refer to their official website.\nPrerequisites  You need an active account in PayU Latam. Having installed osCommerce version 2.3. Having the PayU\u0026rsquo;s osCommerce plugin downloaded and stored in an accessible location. Click here to download it.  Installation Follow the next procedure to install the plugin on your website.\n Unzip the plugin file in a location of your choice. From now on, we will refer this location to [PLUGIN_PATH]. In this path, you find the folder oscommerce-plugin-1.0.  Either using FTP or logging in as an Administrator to the server where osCommerce is installed, include the plugin files in the server as follows:   In the server path /[server]/apache/[publication_path]/oscommerce/catalog, copy the plugin files confirmation_payu.php and response_payu.php. These files are located in the path [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog.    In the server path /[server]/apache/[publication_path]/oscommerce/catalog/includes/languages/english/modules/, copy the plugin file ‘payu_latam.php located in the path [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\english\\modules\\payment.\nRepeat this step for Spanish and English if you have them installed in your osCommerce website. These files are located in the paths:\n ES: [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\espanol\\modules\\payment PT: [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\portugues\\modules\\payment Note PayU Latam plugin for osCommerce is only available for English, Spanish and Portuguese.      In the server path /[server]/apache/[publication_path]/oscommerce/catalog/includes/modules/payment/, copy the plugin file ‘payu_latam.php located in the path [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\modules\\payment. This file is not the same file thn the one mentioned before.\n  In the osCommerce admin panel, expand the Modules menu in the left panel and select Payment option.  In the Payment section, click Install Module button located at the top right corner.  Find the Payu Latam plugin and click it. Then, click Install Module button in the right panel.  After installing the plugin, the list of installed modules of the Payu Latam plugin appears in the right panel.  Configuration  In the Payment section, select the Payu Latam payment method and click the Edit button in the right panel.  The following configuration form appears:  Configure it using the information of your PayU account as follows:\n   Field Value     Enable / Disable Select True to enable the osCommerce payment gateway.   Merchant ID ID of your commerce in PayU Latam   Account ID ID of the PayU account according to the country where you want to sell.   API key Unique key of your commerce, you can find this key in the PayU module.   Gateway URL Gateway URL.\nFor test, you can use https://sandbox.gateway.payulatam.com/ppp-web-gateway and for production https://gateway.payulatam.com/ppp-web-gateway/   Transaction Mode Select Test if you want to process in the Test environment. Otherwise, select Live.   Response page URL of the response page.\nBy default, the URL is http://your.domain.com/yourOscommerceFolder/catalog/response_payu.php, you must replace http://your.domain.com with your site\u0026rsquo;s domain.   Confirmation page URL of the confirmation page.\nBy default, the URL is http://your.domain.com/yourOscommerceFolder/catalog/confirmation_payu.php, you must replace http://your.domain.com with your site\u0026rsquo;s domain.     Save the changes using the button at the bottom of the panel.\n  Finally, go expand the Localization menu and click Order Status. Verify that the order status were created according to the installed languages (English, Spanish, and Portuguese) in your osCommerce website.\n  The valid states are:\n For English: Approved, Rejected, Failed, and Pending. For Spanish: Aprobada, Rechazada, Fallida, and Pendiente. For Portuguese: Aprovado, Recusada, Falha, and Pendente.  Note If you don\u0026rsquo;t have any of the languages mentioned before, the states does not appear in the list. If you want to install a language later, you can create these states manually using the same names displayed above.  At this point, your customers can pay with PayU Latam when they do the checkout in the osCommerce\u0026rsquo;s shopping cart.\n","excerpt":"osCommerce is a platform developed in PHP that ease the creation of an online store. To let your …","ref":"/docs/tools/shopping-cart-plugins/oscommerce.html","title":"osCommerce"},{"body":"What is a Dispute? Your buyers can present a claim to its card issuing bank. The bank sends us a dispute notification, and we create the dispute in our system. This dispute froze the total amount of the sale in your PayU account.\nWhy a dispute happens? A buyer can claim to its card issuer bank reporting that they have not received a product, the product is deficient, or it does not meet the expected characteristics. The buyer also can disclaim the purchase of their credit card invoice.\nThe reasons for starting a dispute process may vary, some of them are:\n Fraud: disputes are classified as fraud when an unauthorized person makes purchases with a credit card. These type of dispute can happen if the card was lost or stolen. Not acknowledging payment: the brand or shop name which appears in the credit card statement is not recognized by the cardholder. Product not delivered: the cardholder states that they don\u0026rsquo;t received the product or service covered by the charges made to the credit card. Product not acceptable: the cardholder claims not to have received the product or service under the expected conditions. Duplicate: the cardholder indicates that the charge made for the purchase of a product or service was applied more than once to his credit card. Amount does not match: the charge to the credit card does not match with the value of the purchase. Not reported by the entity: the bank or processing network initiates a dispute process without a specific reason.  Attention  Recall that PayU acts as an intermediary to let your commerce provide evidence in the dispute process between you and the bank entity. PayU has no interference on the result of the dispute, this decision depends on the issuing bank. Once a transaction is part of a dispute, the associated amount becomes part of the frozen balance; therefore, you cannot transfer funds from this balance to your bank account until the dispute is resolved.   How does the disputes process works in PayU? The disputes process follows a simple flow:\n1. Dispute notification When a bank notifies PayU about a dispute, both you and your customer receives an e-mail notifying the start of the dispute process.\nWe also send a POST with all the information of the dispute to the URL you set in your PayU module. This way, you can automate your dispute management processes to minimize the risk of a possible chargeback.\nYou can configure the URL where we make the notification in the PayU module. Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\nClick Settings and then select Technical configuration.\nIn this window, go to Disputes tab and define the dispute notification url and enable the notification box in the Automatic notification URL field.\nOnce you configured this, you automatically receive a POST with all the information of the started dispute process. Furthermore, You also receive a notification POST each time the dispute process has an update, so you can be aware of the progress and completion of this process.\n2. Queries through the Administrative module You can view and manage your dispute processes from your PayU module, in the Dispute option inside the Transactions menu.\n3. Provide evidence It\u0026rsquo;s important to always respond a dispute by providing evidence before the deadline stipulated by the bank. After the deadline date, you cannot upload the corresponding evidence for a dispute.\nTo learn how to upload evidence to resolve the dispute, refer to the PayU module.\nWhat information can be useful?  Full information of your customer (full name, identification number, e-mail, shipping address, visible credit card number, etc.) Proof of delivery of the product or service signed by the cardholder. Bill of sale of the product or service. Acceptance letter of the payment signed by the cardholder attaching their identification document. Cancellation and refund policy. Acceptance of terms and conditions. Transactional history of your customer (if any). Other supports that validate the purchase.  Maximum days to provide evidence Recall that the maximum days to provide evidence for each country are:\n   Country Days to provide evidences     Argentina 5 working days   Brazil 12 working days   Chile 5 working days   Colombia 2 working days   Mexico 12 calendar days   Panama 8 working days   Peru 6 working days    4. Final decision on dispute status. Once the evidence is provided, we send the documents to the issuing bank or the network that processed the transaction, which oversees the resolution of the case. The result of dispute can be: won (without chargeback), lost (chargeback) or refunded. In the case of refunds, the shop makes the return to the buyer and the bank does not create the chargeback.\nWhen the bank announces the dispute’s outcome, the case is automatically updated in the administrative module and PayU sends a POST to the configured URL with information of the final result.\nDispute states When a dispute is reported, a dispute entity for the associated transaction is created. The dispute status changes according to the step where the dispute is within the course of the process.\n   State Description     Notified When the dispute process begins, you must upload the evidence for the dispute.   On Payment Network Review When the shop provides evidence for a dispute through the PayU module and the dispute is reviewed by the bank or network.   Lost The transaction is reversed from the virtual shopping account and may incur in a chargeback management cost.   Won The dispute process is resolved in favor of the shop, there are no deductions of any kind.   Refunded This process occurs when the shop authorizes to reverse the operation in self-determination, this prevents the shop from having to pay a chargeback transaction and it is replaced by a refund.   Expired After past 120 days without a response from the bank, the amount is set to available for the merchant.    Note If you have activated Anti-fraud Guarantee, when the chargeback is subject to be covered by the guarantee, PayU assumes the values debited from your account. In this case, the status of this dispute is Chargeback (Lost) With antifraud guarantee.  ","excerpt":"What is a Dispute? Your buyers can present a claim to its card issuing bank. The bank sends us a …","ref":"/docs/tools/disputes.html","title":"Disputes"},{"body":"Understanding concepts Before moving on, let\u0026rsquo;s explain the following concepts:\n  Void: this operation reverses a previously authorized transaction.\n  Refund: this operation requests the reversal of a previously captured transaction. Refunds can be requested by the total or the partial amount. A buyer may request a refund when they are not satisfied with the purchase, the purchase has multiple charges, or the buyer did not receive the product or service.\n  Void The VOID method cancels a previously authorized transaction. Void is automatic procedure, as soon as you send the VOID request, it does not follow any approval flow, and the transaction is not charged to the card holder.\nNote VOID method is not available in Colombia and Panama.  Refund A refund is requested when a shop decides to voluntarily return the money spent by the shopper due to dissatisfaction reasons or when the shop does not have enough stock of the product purchased. The REFUND method request the reversal of a previously captured transaction.\nUnlike the VOID method, this method requires an approval. The refund procedure is explained below:\n  When a refund is requested by your customer, you need to request it using the PayU module or our integrations. The request requires the Order Id, and a refund reason.\n  Once you send the request, PayU reviews the request and approves or rejects it in one to three business days.\n  The REFUND has three states:\n UNRESOLVED: the request has been sent to PayU for approval. At this point, no transaction has been added to the order and when you consult it using the Queries service, the response only shows the transaction of the payment approval. APPROVED: the request has been approved by a PayU\u0026rsquo;s customer service agent. At this point the order has changed its state to REFUNDED state and PayU adds an approved REFUND transaction to the order. DECLINED: the request does not meet the policies defined by PayU and was rejected. When the refund is declined, PayU adds a declined REFUND transaction to the order.  For more information about authorized and captured transactions, refer to Payments.\nConsiderations Before using either VOID or REFUND feature, take into account the following considerations:\n Refund or Void method are only available for transactions made with a credit card. If the request refers to a different payment means such as cash payment means, bank transfer; the request is declined by PayU. PayU only creates one application for each refund request, if a request is repeatedly posted for the same transaction, PayU indicates that the request is already registered. PayU only accepts refund requests of captured transactions. You can retry the refund request if this was previously declined. Once you make the request, the transaction amount becomes part of the Frozen Balance of your PayU account until it is processed.  If your refund request is APPROVED, the amount is refunded to the card holder. If your refund request is DECLINED, the amount is released from the Frozen Balance and returns to the available Balance of your PayU account.   Once the refund is approved, this will be reflected in the payer\u0026rsquo;s credit card when the bank make it effective. To check the status of your refund request using the Queries service available for that purpose.  What\u0026rsquo;s next? According to the processing country, some special conditions may apply to be able to execute voids or refunds. These conditions are explained in the selected integration type.\nThe integration with this feature can be performed using one of our integration types:\n For API integrations, refer to this topic For SDK integrations, refer to this topic  ","excerpt":"Understanding concepts Before moving on, let\u0026rsquo;s explain the following concepts:\n  Void: this …","ref":"/docs/services/refunds.html","title":"Voids and Refunds"},{"body":"To integrate with Payments SDK Peru, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit card This method lets you process the payments performed by your customers using credit cards. For Peru, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Peru. For payments with credit card tokens, include the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE replacing the information of the credit card (if you process with security code). For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable PROCESS_WITHOUT_CVV2 as true and remove the variable CREDIT_CARD_SECURITY_CODE. In Peru, you can select 0 or 2 to 36 installments when paying with credit card. If you select one (1) installment, PayU sends zero (0) as default value.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400469408\u0026#34;); //Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;143b2fcf-4dff-4fa0-a0c9-9409be949dd4\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); //Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); //Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, //Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400469408\u0026#34;, //Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;143b2fcf-4dff-4fa0-a0c9-9409be949dd4\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value for is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The extra parameters have the following data related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Buyer -- //Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); //Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); //Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); //Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); //Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); //Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); //Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PAGOEFECTIVO\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Buyer -- \t//Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, //Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, //Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, //Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, //Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, ///Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, //Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, //Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, //Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PAGOEFECTIVO\u0026#34;, // Enter the payment due date \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Peru, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/docs/integrations/sdk-integration/payments-sdk-peru.html","title":"Payments SDK - Peru"},{"body":"OpenCart is a free platform developed in PHP to create online stores. OpenCart provides a professional and reliable base to build an online store. This base uses a wide variety of users such as web developers looking for a user-friendly interface or store owners who want to launch their online business for the first time. OpenCart has many features that give you great control over your store\u0026rsquo;s customization.For more information about WooCommerce, refer to their official website.\nPrerequisites The OpenCart plugin is available for version 1.5 and 2.0 and you need to meet the following prerequisites:\n You need an active account in PayU Latam. For OpenCart version 1.5:  Having the PayU\u0026rsquo;s OpenCart v1.5 plugin downloaded and stored in an accessible location. Click here to download it. Having VirtueMart version 1.5.5.1 - 1.5.6.X installed.   For OpenCart version 2.0:  Having the PayU\u0026rsquo;s OpenCart v2.0 plugin downloaded and stored in an accessible location. Click here to download it. Having VirtueMart version 2.0.1.0 or 2.0.1.1 installed.    Installation and configuration The procedure to install OpenCart plugin is the same for version 1.5 or 2.0. The only difference is the look and feel of the versions and this is highlighted during this article.\nFollow the next procedure to install the plugin on your website.\n Unzip the plugin file in a location of your choice. Then, using an FTP client, go to the location where you unzipped the plugin.\nThen, upload the folders admin and catalog to the root folder of the OpenCart installation in your server.  This action add the plugin files to your OpenCart server in the right locations. To validate whether the procedure was correct, search the following files in their corresponding locations.\nIn the administration console of your OpenCart shop, open the Extensions menu and click Payments.  OpenCart v1.5\nOpenCart v2.0\nIn the Payment table, find the PayuLatam payment method. Then, click Install.  OpenCart v1.5\nOpenCart v2.0\nWhen the plugin has been installed, click Edit.  OpenCart v1.5\nOpenCart v2.0\nConfigure the payment method using the data of your PayU account as follows.     Field Value     Production Url PayU Latam\u0026rsquo;s URL in production https://gateway.payulatam.com/ppp-web-gateway/   Test Url PayU Latam\u0026rsquo;s URL in test https://sandbox.gateway.payulatam.com/ppp-web-gateway   Test Mode? Set Yes to make transactions in the test environment and No for the production environment.   Merchant ID ID of your commerce in PayU Latam   Account ID ID of the PayU account according to the country where you want to sell.   API key Unique key of your commerce, you can find this key in the PayU module.   Approved Transaction Order status in the OpenCart shop when PayU Latam approves the transaction.   Pending Transaction Order status in the OpenCart shop when the transaction is pending in PayU Latam.   Declined Transaction Order status in the OpenCart shop when PayU Latam declines the transaction.   Status Select Enable to activate this payment method in OpenCart.    Finally, save the changes. At this point, your customers can pay with PayU Latam when they do the checkout in the OpenCart\u0026rsquo;s shopping cart.  ","excerpt":"OpenCart is a free platform developed in PHP to create online stores. OpenCart provides a …","ref":"/docs/tools/shopping-cart-plugins/opencart.html","title":"OpenCart"},{"body":"This solution is useful for businesses who need to receive payments on a regular basis such as paying memberships, courses, memberships or catalog and telesales, and more.\nYou can receive payments without any technical knowledge. You just need to send an e-mail where your client can download the coupon and makes the respective payment.\nNote Payment coupons are available for Argentina and Colombia.  How does the Payment coupons work? The Payment coupon follows a simple flow to let your clients regular cash payments as many times as they need:\n  Configure the Payment coupon through the PayU module.\nYou only need to provide how many payments per client you want to receive, decide if the payment amount is fixed or your client decides the amount, decide the payment deadline, and the payment reference.\n  Decide the delivery of the coupon\nDecide if you want to deliver the coupons by e-mail, by generating PDF, by payment references or collection cards (Available only for Argentina).\n  Use the Payment coupons\nWhen your clients receive the coupon, they can make the payment using any of the available cash payment offices in their countries.\nEvery time a client pays using the coupon, you receive a confirmation message and the amount of the purchase* is transferred to your PayU account, where you can transfer it to your bank account.\n  *The value transferred corresponds to the amount paid by your client minus the PayU fee.\nCreating payment coupons According to your business needs, you can configure the options to receive payments using coupons. Follow the next procedure to create Payment coupons and delivery them to your clients.\n  Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\n  Expand the Sell with PayU option and then, select Cash Payment.\n  Configure the following information:    How many payments do you expect to receive for each client?: select how many times a client can use the coupon. Select Unique if you want to let your client pay once. Otherwise, select Multiple for several payments while the coupon is available. The default value is Multiple.\n  Will you charge a specific amount?: select the payment amount of the coupon. If you select No, your client decides the value to pay at the payment office. The default value is No.\n  Payment deadline: decide whether the payment coupon expires in a given date. The date specified is fixed, tt is not supported to provide a specific day of the month or other custom configuration. If you select No, the coupon will not have a due date. The default value is No.\n  Do you want to define the payment reference?: if you select Yes you need to provide the payment references for the coupon. Otherwise, PayU defines and sets an automatic reference. The default value is No.\n  Sharing the Payment request After you have configured the Payment coupons, decide how you want to deliver them to your client.\nYou have available the following options:\nSend via e-mail This option lets you send the Payment coupon via e-mail. The clients receive the e-mail and print the coupon to let them pay in cash in the available offices\nTo add the clients one by one, provide the following information:\n Email: e-mail of the client who receives the coupon. Payer name: name of the client. Payment description: description of the payment. Amount: this field is available when you define the amount payed by your client and takes the defined value. Expiration date: this field is available when you define an expiration date of the coupon. Payment reference: this field is available when you define that ypu want to set your own payment reference for the coupon.  Click Add button to save the clients data and add an extra client if required.\nTo add multiple clients, click Add multiple payers from one file and download the sample file by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a client. Provide the information of the example and upload it to the PayU module.\nRegardless of the option selected, click Continue.\nA new window appears showing the resume of the emails to be sent.\nIf you want to edit the information of the issuer and the e-mail, click Edit link displayed in the top right corner of each section.\nFinally, click Send email. Each client receive an e-mail with the coupon.\nPrint the coupons This option lets you generate coupons in PDF format.\nTo add the clients one by one, provide the following information:\n Payer name: name of the client. Payment description: description of the payment. Amount: this field is available when you define the amount payed by your client and takes the defined value. Expiration date: this field is available when you define an expiration date of the coupon. Payment reference: this field is available when you define that ypu want to set your own payment reference for the coupon.  Click Add button to save the clients data and add an extra client if required.\nTo add multiple clients, click Add multiple payers from one file and download the sample file by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a client. Provide the information of the example and upload it to the PayU module.\nRegardless of the option selected, click Continue.\nA new window appears showing the resume of the PDF to be generated.\nIf you want to edit the information of the issuer, click Edit link displayed in the top right corner of the issuer section section.\nFinally, click Generate coupons in PDF. A PDF file is downloaded, each page has the coupon generated per each client.\nGenerate Payment references This option lets you generate an Excel file with the coupons requested.\nTo add the clients one by one, provide the following information:\n Payer name: name of the client. Payment description: description of the payment. Amount: this field is available when you define the amount payed by your client and takes the defined value. Expiration date: this field is available when you define an expiration date of the coupon. Payment reference: this field is available when you define that ypu want to set your own payment reference for the coupon.  Click Add button to save the clients data and add an extra client if required.\nTo add multiple clients, click Add multiple payers from one file and download the sample file by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a client. Provide the information of the example and upload it to the PayU module.\nRegardless of the option selected, click Generate references in Excel.\nThe download starts immediately. Furthermore, a new window appears showing the number of references generated, in this windows, you can also send the Excel file to whoever you need.\nCreate collection cards This option lets you generate cards with the information required to let your clients to be able to make cash payments at the available payment points every time they need to.\nThis option is available when you don\u0026rsquo;t set a fixed payment amount nor a payment deadline.\nNote Available only for Argentina.  Collection cards are plastic cards associated to your PayU account; they have a bar code and you can include a reference code printed on them.\nOnce your card have been generated, deliver them to your customers and they can pay the amount in cash they wish and without any expiration date.\nTo request the cards, you need to provide the following information:\n Design of your collection cards: choose a predefined or custom design for your cards. Custom cards are available from 1000 cards. How many cards do you want to request?: select the number of cards you want to generate according to the design you choose. Delivery address: Click edit link at the top right corner of this panel to provide the address where you want to receive the cards. Payment summary: we calculate the cost of your order depending on the quantity of cards requested and the design you choose.  Note This order will be debited from your PayU account and you must have an available balance.  Click Request cards to continue. A confirmation window appears to let you validate the information of your request.\nConsult the created coupons When you have created coupons of collection cards, you can consult their information to see the received payments or enable or download the coupon.\n In the PayU Module, expand the Sell with PayU option and then, select My tools.   Select either Collection by cash or Collection cards tab according to your needs.\n  You can use the Advanced filter option to find a specific set of coupons.\n  Each coupon present the options to disable or download the coupon. Once the coupon is disabled, it cannot receive more payments.\nFind these options in the three dot menu in the status column.  ","excerpt":"This solution is useful for businesses who need to receive payments on a regular basis such as …","ref":"/docs/tools/payment-coupons.html","title":"Payment Coupons"},{"body":"PayU assumes the fraud or supplantation of the card holders when a Dispute process has been started by a customer. To request the activation of the Anti-fraud Guarantee for your customer, contact your sales representative.\nConsiderations Before using the Anti-fraud Guarantee, take into account the following:\n Anti-fraud Guarantee is not offered by default. Merchants must request it and sign a document where the condition of the guarantees are reflected. The activation of Anti-fraud Guarantee depends on your economical activity. Anti-fraud Guarantee does not cover the sale of services, as well as music, videos, MP3, electronic books, products offered in stores or adult websites, vouchers, gift cards; nor other goods or mechanisms through which the aforementioned products can be acquired. Anti-fraud Guarantee applies only for transactions performed with credit card. PayU validates the evidence of the dispute process and determines whether the chargeback is applies to Anti-fraud Guarantee. If you don\u0026rsquo;t provide evidence of the dispute in the specified times, the result of this will be Lost and the Anti-fraud Guarantee will not apply. Anti-fraud Guarantee does not apply for disputes requested due to customer dissatisfaction with the purchased product.  How does the Anti-fraud Guarantee work? Anti-fraud Guarantee is applied following the next flow.\n  Once PayU notifies you about a Dispute, you must provide the evidence to response to it in the terms specified for your country. If you don\u0026rsquo;t provide evidence, the dispute will be lost and the funds of this sale will be debited from your account and Anti-fraud Guarantee will not apply.\nLearn here what evidence you can provide to resolve the dispute.\n  After you have provided the evidence to resolve the dispute, PayU validates whether the chargebacks apply to be covered by Anti-fraud Guarantee.\n  If the chargebacks apply, PayU returns the funds to your virtual account through discretionary movements.\n  The result of the Anti-fraud Guarantee process can be consulted in the Disputes module.\nFurthermore, you can consult the discretionary movements in your Financial Statement.\n","excerpt":"PayU assumes the fraud or supplantation of the card holders when a Dispute process has been started …","ref":"/docs/tools/antifraud-guarantee.html","title":"Anti-fraud Guarantee"},{"body":"To integrate with Queries SDK, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Queries API includes the following methods:\n Query by Order Id Query by Transaction Id Query by Reference Id Ping  Query by Order Id Order Id is a value generated by PayU to identify all the transactions generated for a payment request performed by your customer. You can use the getOrderDetail command to consult the status of an Order by its identifier.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order’s reference code here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;857817550\u0026#34;); Order response = PayUReports.getOrderDetail(parameters); // -- obtain the order’s properties -- if(response != null){ response.getAccountId(); response.getStatus(); response.getReferenceCode(); response.getAdditionalValue(\u0026#34;TX_VALUE\u0026#34;).getValue(); response.getAdditionalValue(\u0026#34;TX_TAX\u0026#34;).getValue(); if(response.getBuyer() != null){ response.getBuyer().getEmailAddress(); response.getBuyer().getFullName(); } // -- go through the transactions that are associated to the order-- \tList\u0026lt;Transaction\u0026gt; transactions = response.getTransactions(); Iterator\u0026lt;Transaction\u0026gt; transactions_iterator = transactions.iterator(); while(transactions_iterator.hasNext()){ Transaction transaction= (Transaction) transactions_iterator.next(); transaction.getType(); transaction.getTransactionResponse().getState(); transaction.getTransactionResponse().getPaymentNetworkResponseCode(); transaction.getTransactionResponse().getTrazabilityCode(); transaction.getTransactionResponse().getResponseCode(); if(transaction.getPayer() != null){ transaction.getPayer().getFullName(); transaction.getPayer().getEmailAddress(); } } }   // Enter the order’s reference code here. $parameters = array(PayUParameters::ORDER_ID =\u0026gt; \u0026#34;44469220\u0026#34;); $order = PayUReports::getOrderDetail($parameters); if ($order) { $order-\u0026gt;accountId; $order-\u0026gt;status; $order-\u0026gt;referenceCode; $order-\u0026gt;additionalValues-\u0026gt;TX_VALUE-\u0026gt;value; $order-\u0026gt;additionalValues-\u0026gt;TX_TAX-\u0026gt;value; if ($order-\u0026gt;buyer) { $order-\u0026gt;buyer-\u0026gt;emailAddress; $order-\u0026gt;buyer-\u0026gt;fullName; } $transactions=$order-\u0026gt;transactions; foreach ($transactions as $transaction) { $transaction-\u0026gt;type; $transaction-\u0026gt;transactionResponse-\u0026gt;state; $transaction-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $transaction-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $transaction-\u0026gt;transactionResponse-\u0026gt;responseCode; if ($transaction-\u0026gt;payer) { $transaction-\u0026gt;payer-\u0026gt;fullName; $transaction-\u0026gt;payer-\u0026gt;emailAddress; } } }    Query by Transaction Id Transaction Id is a value generated by PayU to identify one transaction generated for an order. You can use the getTransactionResponse command to consult the information of a given transaction.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;3310ba3b-cf64-49b2-80e6-3f9196917131\u0026#34;); TransactionResponse response = PayUReports.getTransactionResponse(parameters); // --you will be able to obtain the properties of the response -- if(response != null){ response.getState(); response.getTrazabilityCode(); response.getAuthorizationCode(); response.getResponseCode(); response.getOperationDate(); }   $parameters = array(PayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;3310ba3b-cf64-49b2-80e6-3f9196917131\u0026#34;); $response = PayUReports::getTransactionResponse($parameters); if ($response) { $response-\u0026gt;state; $response-\u0026gt;trazabilityCode; $response-\u0026gt;authorizationCode; $response-\u0026gt;responseCode; $response-\u0026gt;operationDate; }    Query by Reference Id Reference Id is a value generated by your commerce to identify an order. You can use the getOrderDetailByReferenceCode to consult the status of an Order by your own order identifier (reference).\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the order’s reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;payment_test_1625093692957\u0026#34;); List\u0026lt;Order\u0026gt; orders_response = PayUReports.getOrderDetailByReferenceCode(parameters); Iterator\u0026lt;Order\u0026gt; orders_iterator= orders_response.iterator(); // -- go through the orders with the queried reference-- while(orders_iterator.hasNext()){ Order order= (Order) orders_iterator.next(); if(order != null){ order.getAccountId(); order.getStatus(); order.getReferenceCode(); order.getAdditionalValue(\u0026#34;TX_VALUE\u0026#34;).getValue(); order.getAdditionalValue(\u0026#34;TX_TAX\u0026#34;).getValue(); if(order.getBuyer() != null){ order.getBuyer().getEmailAddress(); order.getBuyer().getFullName(); } // -- go through the transactions associated to the order-- \tList\u0026lt;Transaction\u0026gt; transactions=order.getTransactions(); Iterator\u0026lt;Transaction\u0026gt; transactions_iterator=transactions.iterator(); while(transactions_iterator.hasNext()){ Transaction transaction= (Transaction) transactions_iterator.next(); transaction.getType(); transaction.getTransactionResponse().getState(); transaction.getTransactionResponse().getPaymentNetworkResponseCode(); transaction.getTransactionResponse().getTrazabilityCode(); transaction.getTransactionResponse().getResponseCode(); if(transaction.getPayer() != null){ transaction.getPayer().getFullName(); transaction.getPayer().getEmailAddress(); } } } }   //Enter the order’s reference code here. $parameters = array(PayUParameters::REFERENCE_CODE =\u0026gt; \u0026#34;payment_test_1625093692957\u0026#34;); $response = PayUReports::getOrderDetailByReferenceCode($parameters); foreach ($response as $order) { $order-\u0026gt;accountId; $order-\u0026gt;status; $order-\u0026gt;referenceCode; $order-\u0026gt;additionalValues-\u0026gt;TX_VALUE-\u0026gt;value; $order-\u0026gt;additionalValues-\u0026gt;TX_TAX-\u0026gt;value; if ($order-\u0026gt;buyer) { $order-\u0026gt;buyer-\u0026gt;emailAddress; $order-\u0026gt;buyer-\u0026gt;fullName; } $transactions=$order-\u0026gt;transactions; foreach ($transactions as $transaction) { $transaction-\u0026gt;type; $transaction-\u0026gt;transactionResponse-\u0026gt;state; $transaction-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $transaction-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $transaction-\u0026gt;transactionResponse-\u0026gt;responseCode; if ($transaction-\u0026gt;payer) { $transaction-\u0026gt;payer-\u0026gt;fullName; $transaction-\u0026gt;payer-\u0026gt;emailAddress; } } }    Ping The PING method lets you verify the connection to our platform. The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUReports.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUReports::doPing(); $response -\u0026gt; code;    ","excerpt":"To integrate with Queries SDK, target the requests to the following URLs:\n Java PHP   // URL for …","ref":"/docs/integrations/sdk-integration/queriessdk.html","title":"Queries SDK"},{"body":"Tokenization feature is available under customized commercial agreements. For more information, contact your sales representative.\nTo integrate with Tokenization SDK, target your request to the following URLs according to your environment.\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Tokenization API includes methods to register and remove tokens, and methods to query tokens.\nFor registration a removal of tokens:\n Individual credit card registration Individual token removal Query tokens  Individual credit card registration Using this feature, you can register the information of a customer\u0026rsquo;s credit card and get a token.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   //-- “Create Token” operation-- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Mary Keller\u0026#34;); //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); //Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;32144457\u0026#34;); //Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4668063527597820\u0026#34;); //Enter the expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2024/06\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); CreditCardToken response = PayUTokens.create(parameters); if(response != null){ response.getTokenId(); response.getMaskedNumber(); response.getPayerId(); response.getIdentificationNumber(); response.getPaymentMethod(); }   $parameters = array( //Enter the payer\u0026#39;s name here. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Mary Keller\u0026#34;, //Enter the payer\u0026#39;s ID here. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, //Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;32144457\u0026#34;, //Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4668063527597820\u0026#34;, //Enter the expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2024/10\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34; ); $response = PayUTokens::create($parameters); if($response){ //You can obtain the credit card token \t$response-\u0026gt;creditCardToken-\u0026gt;creditCardTokenId; }    Individual token removal Using this feature, you can remove the token previously registered.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   // -- \u0026#34;Delete token\u0026#34; operation -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the ID of the payer here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Enter the ID of the token here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); CreditCardToken response = PayUTokens.remove(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);      Query tokens Using this feature, you can get the information of tokenized credit cards, you can perform the query by the token number or by a date range.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   // -- \u0026#34;Query token\u0026#34; operation -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // -- Optional parameters -- // Enter the ID of the payer here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Enter the ID of the token here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); // Enter the start and end date to filter in a date range. parameters.put(PayU.PARAMETERS.START_DATE, \u0026#34;2021-06-29T12:00:00\u0026#34;); parameters.put(PayU.PARAMETERS.END_DATE, \u0026#34;2021-07-01T12:00:00\u0026#34;); List\u0026lt;CreditCardToken\u0026gt; response = PayUTokens.find(parameters); Iterator\u0026lt;CreditCardToken\u0026gt; tokens_iterator=response.iterator(); while(tokens_iterator.hasNext()){ CreditCardToken token= (CreditCardToken) tokens_iterator.next(); token.getTokenId(); token.getMaskedNumber(); token.getPayerId(); token.getIdentificationNumber(); token.getPaymentMethod(); }   // -- Optional parameters -- $parameters = array( // Enter the ID of the payer here. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Enter the ID of the token here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;, // Enter the start and end date to filter in a date range. Optional. \tPayUParameters::START_DATE=\u0026gt; \u0026#34;2021-06-29T12:00:00\u0026#34;, PayUParameters::END_DATE=\u0026gt; \u0026#34;2021-07-01T12:00:00\u0026#34; ); $response=PayUTokens::find($parameters); if($response) { $credit_cards = $response-\u0026gt;creditCardTokenList; foreach ($credit_cards as $credit_card) { $credit_card-\u0026gt;creditCardTokenId; $credit_card-\u0026gt;maskedNumber; $credit_card-\u0026gt;payerId; $credit_card-\u0026gt;identificationNumber; $credit_card-\u0026gt;paymentMethod; } }    Payments using Tokenization For payments with credit card tokens, include the parameter CREDIT_CARD_SECURITY_CODE replacing the information of the credit card. The following example shows the body of the request in a high level for a one-step flow, the details of the request are not provided.\nNote To process without CVV is necessary to send the parameter PROCESS_WITHOUT_CVV2 as true in the payment request and remove the parameter CREDIT_CARD_SECURITY_CODE.\nBy default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative.   Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, accountId); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, currency); // -- Buyer -- //Enter the buyer information here. //parameters.put([...], [...]);  // -- Payer -- //Enter the payer information here. //parameters.put([...], [...]);  // -- Credit card data -- // Enter the credit card token here parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); //Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); //Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, CountryName); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters);   $parameters = array( //Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; $accountId, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; $currency, // -- Buyer --  //Enter the buyer information here.  //PayUParameters::[...] =\u0026gt; [...],  // -- Payer --  //Enter the payer information here.  //PayUParameters::[...] =\u0026gt; [...],  // -- Credit card data --  // Enter the credit card token here  PayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;, PayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, //Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, //Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; $country, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters);    For specific details about how to perform payments, refer to the respective article according to the processing country.\n Argentina\nBrazil\nChile\n   Colombia\nMexico\nPeru\n   ","excerpt":"Tokenization feature is available under customized commercial agreements. For more information, …","ref":"/docs/integrations/sdk-integration/tokenizationsdk.html","title":"Tokenization SDK"},{"body":"To integrate with Voids and Refunds SDK, target your request to the following URLs according to your environment.\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    If you need to understand the concepts and read further considerations of Voids and Refunds, refer to this article.\nConsiderations per country Before using Voids and Refunds API, take into account the following considerations.\nArgentina  The maximum time to send a void is 14 days. If no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in maximum 30 working days.  Brazil  The maximum time to send a void is seven (7) days. If no void or capture is sent after this time, the transaction is cancelled. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days for transactions processed in Redecard and 120 for transactions processed in Cielo. When a refund is approved, the payer gets the money back in maximum 15 working days.  Chile  The minimum time to send a void is three (3) hours after the authorization and the maximum is seven (7) days. If no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in 8 to 20 working days. Partial refunds for transactions using installments are received online but PayU processes them manually due to acquirer restrictions. The minimum amount to send a refund is 10 CLP.  Colombia  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is two years. Minimum amount to send the Refund 300 COP. If refund is not sent the same day in which the transaction was captured (before 9 pm UTC-5) the refund goes immediately to a manual process without sending the online attempt. When a refund is approved, the payer gets the money back in maximum 30 working days. Partial refunds are not available for international credit cards.  Mexico  The minimum time to send a void is 10 minutes after the authorization and the maximum is 30 days. If the transaction was made with American Express, the maximum time is seven (7) days.\nIf no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. If the transaction was made processed by Bancomer, the maximum time is 45 days. When a refund is approved, the payer gets the money back in 30 working days. Refunds with decimals are not supported.  Peru  The maximum days to void an authorization are:  Visa: 21 days. If no void or capture is sent after this time, the transaction is auto-captured. Mastercard: 28 days. If no void or capture is sent after this time, the transaction is auto-captured. American Express: 30 days. If no void or capture is sent after this time, the transaction is auto-voided. Diners: 11 days. If no void or capture is sent after this time, the transaction is auto-voided.   The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. Partial refunds are supported for transactions without installments. Recall that transactions with one installment are considered as without installments. Partial refunds with visanet must be sent after one day. When a refund is approved, the payer gets the money back in 15 to 25 working days. Minimum amount to send the Refund is 1 USD or 1 PEN.  Void The VOID method cancels a previously authorized transaction. Void is automatic procedure, as soon as you send the VOID request, it does not follow any approval flow, and the transaction is not charged to the card holder.\nMethod Call The following are the request and response bodies for this transaction type.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Insert the ID of the order here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Insert the ID of the transaction here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Enter the void reason here. Optional parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Reason for requesting the void of the transaction\u0026#34;); TransactionResponse response = PayUPayments.doVoid(parameters); //Response if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Insert the ID of the order here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Insert the ID of the transaction here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // Enter the void reason here. Optional \tPayUParameters::REASON =\u0026gt; \u0026#34;Reason for requesting the void of the transaction\u0026#34;, ); $response = PayUPayments::doVoid($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Refunds A refund is requested when a shop decides to voluntarily return the money spent by the shopper due to dissatisfaction reasons or when the shop does not have enough stock of the product purchased. The REFUND method request the reversal of a previously captured transaction.\nRefunds can be requested by the total or the partial amount (PARTIAL REFUND).\nMethod Call The following are the request and response bodies for this transaction type.\nRefund  Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Insert the ID of the order here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Insert the ID of the transaction here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Enter the refund reason here parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Reason for requesting the refund of the transaction\u0026#34;); TransactionResponse response = PayUPayments.doRefund(parameters); //Response if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Insert the ID of the order here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Insert the ID of the transaction here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // Enter the refund reason here \tPayUParameters::REASON =\u0026gt; \u0026#34;Reason for requesting the refund of the transaction\u0026#34;, ); $response = PayUPayments::doRefund($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Partial Refund  Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Insert the ID of the order here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Insert the ID of the transaction here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // -- Partial Refund Value -- // Enter the partial refund value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;950\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // Enter the partial refund reason here parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Reason for requesting the partial refund of the transaction\u0026#34;); TransactionResponse response = PayUPayments.doPartialRefund(parameters); //Response if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Insert the ID of the order here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Insert the ID of the transaction here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // -- Partial Refund Value --  // Enter the partial refund value here.  PayUParameters::VALUE =\u0026gt; \u0026#34;950\u0026#34;, // Enter the currency here.  PayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // Enter the partial refund reason here \tPayUParameters::REASON =\u0026gt; \u0026#34;Reason for requesting the partial refund of the transaction\u0026#34;, ); $response = PayUPayments::doPartialRefund($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Query the refund status As mentioned before, refund request follows an approval in flow in which, PayU take 1 to 3 days to process the request and approves or rejects the request. If you want to know the status of the refund, you have two options:\nCheck status through the PayU Module  Log into you PayU module account. In the left panel, expand the Transactions menu and select Sales Report option.  Use the Filter my sales field to find the order using the order and the transaction id.  The Status column show whether the refund has been approved or rejected; if the refund has not been approved, this column shows that the refund has been requested.  Check status using queries You can consult the state of the refund by using the Queries SDK. In the response of the query, you need to send the order id.\nWhen query an order, the system returns the last transaction associated with the Order.\nThere are three possible status in the response of your request:\n Unresolved request: if the request has not been resolved, the order found in the query appears in CAPTURED status, the first transaction type is AUTHORIZATION_AND_CAPTURE and the first transaction status is APPROVED. Approved: if the refund request is approved by a PayU’s customer service agent, the order found in the query appears in REFUNDED status , the first transaction type is REFUND and the first transaction status is APPROVED. Declined: if the refund request is approved by a PayU’s customer service agent, the order found in the query appears in CAPTURED status , the first transaction type is REFUND and the first transaction status is DECLINED.  ","excerpt":"To integrate with Voids and Refunds SDK, target your request to the following URLs according to your …","ref":"/docs/integrations/sdk-integration/refundssdk.html","title":"Voids and Refunds SDK"},{"body":"We provide a set of services and tools to let you receive payments, download reports, manage disputes and more.\nIdeally suited for\n All types and size of payments Products and services across all categories Businesses of any size or stage  Benefits of online payments   Increase your sales Expand the scope of your business by offering various payment methods.\n  Accept payments faster See an overview of all your transactions in our system. Consolidate and monitor your sales in the PayU module.\n  Multi-acquisition We are integrated with all processing networks, which can increase your approval rate by up to 5%.\n  How does PayU work? To understand how PayU processes payments, it is important to understand two main concepts:\n Order: an order in PayU is defined as the set of movements related to an online payment. Transaction: any movement related to an order such as charges, retries, refunds, disputes, etc.  For example, a customer purchase a product using your web page, the customer pays using their credit card and the payment is approved and accepted by the customer\u0026rsquo;s bank; Then, the shop finds that they don\u0026rsquo;t have enough stock of this product and request a refund to PayU. PayU, approves the refund and the money is returned to the customer. In this case, the order was the purchase of the product and this order has many transactions such as, the accept of the payment, the charge, the refund approval.\nHow to start using PayU? When you want to integrate your commerce with PayU services and tools, you need to consider the following steps.\n1. Create a PayU account Create your PayU account free of charge. Contact us to support you through the process.\n2. Select how you want to integrate with PayU services and tools. According to your business needs, select how to integrate your shop with the PayU services and tools.\n3. Perform tests Verify that your integration works as expected.\n4. Deploy to production After you perform all the system testing and you have verified that everything is working properly, you can change to the production server; where the actual transactions are processed.\nServices PayU provides the following services.\nPayments Lets your shop process different transaction types with multiple payment methods.\n Queries Lets you check the status of the transactions generated from placed orders.\n Tokenization Lets you safely store the data of your customers' credit cards through the creation of a token.\n Promotions and MSI Lets you consult the valid promotions, along with their associate costs, characteristics, and further relevant information available for your customers.\nApplies only to Argentina and Mexico.\n Voids and Refunds Lets you request the cancellation and refund of the transactions paid with credit cards.\n  \n   PayU Tools PayU provides the following tools to give you more options to sell and receive payments online.\nPayment request Receive payments even if you don't have a web page.\n Shopping cart plugins Integrate your shopping cart solution with any of our available plugins.\n PayU module Manage your PayU account, generate sales reports, query your account balance or transfer money to your bank account.\n Disputes Manage the dispute processes generated in your PayU account.\n Payment coupons Send payment coupons to your customers, they can pay in the cash branches available.\n Anti-fraud Guarantee PayU offers the Anti-fraud Guarantee that protects merchants against the lost due to fraud transactions.\n   Checkout integration PayU Checkout is an integration that allows you to collect through a PayU web form from any device in a simple, fast and secure way.  PayU manages the payment system Easier integration, equally secure Since PayU manages the payment platform, it is easier to get PCI DSS certification  Learn more about WebCheckout integration  API or SDK integration Through API or SDK integrations, you can receive payments securely from anywhere you like, on your website or mobile app.  Design your checkout and manage the payment system of your website. Access to additional services such as Tokenization.  Learn more about API integration Learn more about SDK integration     -- What\u0026rsquo;s next? ","excerpt":"We provide a set of services and tools to let you receive payments, download reports, manage …","ref":"/docs.html","title":"Online Payments"},{"body":"The PayU module is the system where you can securely manage your account. In this module, you can change your password, get sales reports, find the data needed to integrate your website with our platform, use tools to receive payments, and transfer money to your bank account. PayU module is ideal for businesses that need to:\n Keep control of their stocks and sales performed through PayU. Be updated with the information of the financial movements of their account. Make requests to the support team about issues in their account.  To access the PayU module, go to www.payu.com, at the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.\nNote You don\u0026rsquo;t have a user yet? Learn how to create one here.  What you can do using the PayU Module PayU module allows you to perform the following operations:\n See the available funds in your PayU account and transfer them to your bank account. Consult the movements of your accounts, statements, and reports. View the status of your sales Find the authentication credentials to integrate with your sales platform: API Key, API Login, and merchant ID. Update your bank details. Configure your company’s logo to appear on the web checkout (payment gateway). Set the URLs of your confirmation page and answer page (if you have an API integration or web checkout).  PayU module concepts The PayU Module allows a user to manage the merchant and its related accounts. The complexity of your PayU module depends on your size. Let\u0026rsquo;s explain this using the following concepts.\n Merchant: the merchant is the store that offers products or services. PayU defines the merchant as the legal person who hires the PayU service. If your store is legally constituted in two countries (two legal entities), each legal entity must be created as a merchant.\nFor example, Shop ABC has branches in Mexico and Colombia, but the shop has constituted one company in each country, when Shop ABC hires the PayU services, PayU creates two different merchants. Account: an account in PayU represents a processing country, a business line, or a hired PayU feature of a given merchant. If your shop is legally constituted in a country and sells products in many countries, you have a single merchant (your shop) in which you find an account per each country.\nFor example, XYZ systems is a company legally constituted in the United States who offers the services of web hosting in Colombia, Mexico, and Peru. When XYZ systems hires the PayU services, PayU creates a merchant with three accounts.\nMoreover, an account is also one of the following:  A business line: when a merchant has many different business lines in a given country. For example, a software company can offer their product as one business line and the training as another. In this case, this commerce has two accounts. A feature: if you hire two PayU features with a different pricing schema, each feature is represented in your PayU module as an account. For example, a shop has one price to process with credit cards and one different when they process with cash payments.   User: a user is a person who has a profile to manage or consult the information of an account.\nA profile is a set of permissions to access an account. A user can have one or multiple profiles, this means that a user can access multiple accounts and multiple merchants.  The following graphics show the relation between the concepts above.\nMulti merchant shop The shop Shop ABC has branches in Mexico and Colombia, both are legally constituted as Shop ABC Mexico and Shop ABC Colombia, this is the relation between the previous concepts for this example:\n  The PayU module for Shop ABC has two merchants: Shop ABC Mexico and Shop ABC Colombia, each merchant has an account as they process only in the country where they are constituted.\n  Shop ABC has four users; User 2 and User 3 can access both accounts, meanwhile User 1 can only access the Colombian account and User 4 to the Mexican account.\n  Note In this case, each merchant may have multiple accounts, if required.  Single merchant shop with multiple accounts XYZ systems is a company legally constituted in the United States who offers the services of web hosting in Colombia, Mexico, and Peru; in addition, XYZ systems has two business lines in Colombia: web hosting and training. This is the relation between the previous concepts for this example:\n  The PayU module for XYZ systems has a single merchant as they are legally constituted in the United States. As XYZ systems processes in three countries, this merchant has four accounts; two for Colombia (one per each business line), one for Mexico and one for Peru.\n  Shop ABC has four users; User 3 can access all the accounts, meanwhile, the other users can access their assigned country.\n  Note Merchants can be outside of our processing countries. Nevertheless, they must have an intermediary bank account in each country they want to process.  Single merchants with single accounts This is the most common case when using the PayU module. A shop is legally constituted in a country where it offers its products or services, this is the relation between the previous concepts for this example:\n The PayU module for this shop has a single account and a single merchant, where all its users can access according to the profile they have.  ","excerpt":"The PayU module is the system where you can securely manage your account. In this module, you can …","ref":"/payu-module-documentation.html","title":"PayU Module guide"},{"body":"","excerpt":"","ref":"/index.json","title":""},{"body":"","excerpt":"","ref":"/search.html","title":"Search Results"},{"body":"","excerpt":"","ref":"/","title":"TechOS"}]