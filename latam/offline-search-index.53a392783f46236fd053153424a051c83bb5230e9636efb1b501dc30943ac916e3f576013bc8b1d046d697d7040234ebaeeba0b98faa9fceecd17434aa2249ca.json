[{"body":"Consideraciones  La opción para iniciar sesión utilizando cuentas de Google accounts no está disponible para navegadores en modo incógnito. Debes tener un usuario enrolado a al menos una cuenta y comercio registrado utilizando una dirección de corro electrónico de Google. Aunque utilices tu cuenta Google para iniciar sesión, puedes seguir utilizando las credenciales que creaste al momento de la creación de tu cuenta.  Iniciar sesión utilizando una cuenta de Google  Ingresa a www.payu.com. En la esquina superior derecha, encontrarás la opción para iniciar sesión. Para comercios en Colombia, esta opción se llama PayU Login.\nO si lo prefieres, puedes ir directamente a https://merchants.payulatam.com/.  Haz clic en el botón Ingresar con Google.  Aparece una ventana emergente para iniciar sesión utilizando cuentas de Google accounts. Primero, ingresa tu correo electrónico o número de teléfono para iniciar sesión en tu cuenta de Google.  Ingresa la contraseña de tu cuenta de Google.  Si tu usuario puede acceder a más de un comercio, haz clic en él para acceder. En caso contrario, será redirigido a tu comercio.  Tan pronto inicies sesión, puedes utilizar todas las opciones disponibles para manejar tu cuenta.  ","excerpt":"Consideraciones  La opción para iniciar sesión utilizando cuentas de Google accounts no está …","ref":"/es/payu-module-documentation/getting-started/log-in/google-accounts.html","title":"Iniciar sesión utilizando cuentas de Google"},{"body":"Considerations  The option to sign in using Google accounts is not available when using browsers in incognito mode. You must have a user entitled to at least an account and merchant registered using a Google e-mail address. Even though you use your Google account to sign in, you can still using the credentials you created when you created your account.  Signing in using a Google account  Go to www.payu.com. At the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.  Click the Sign in with Google button.  A pop up window appear to sign in using Google accounts. First, provide your e-mail or phone number used to authenticate in your Google account.  Provide the password of your Google account.  If your user can access to more than one merchant, click it to access it. Otherwise, you are redirected to the default merchant.  As soon as you log in, you can use all the available options to manage your PayU account.  ","excerpt":"Considerations  The option to sign in using Google accounts is not available when using browsers in …","ref":"/en/payu-module-documentation/getting-started/log-in/google-accounts.html","title":"Log in using Google Accounts"},{"body":" /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ animation: animatetop 0.4s; } /* Modal Content/Box */ .modal-content { background-color: #fefefe; margin: 15% auto; /* 15% from the top and centered */ border: 1px solid #888; width: 50%; /* Could be more or less, depending on screen size */ } /* The Close Button */ .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; } .header { color: white; background-color: #ED6A5A; padding: 15px; }  Funcionalidad descontinuada\n\u0026times;  La funcionalidad de Pagos Recurrentes ha sido descontinuada y por lo tanto, no se ofrece a los comercios. El siguiente artículo está disponible a modo de consulta para comercios que aún la tienen activa.\nEsta funcionalidad NO será activada nuevamente.\n   // Get the modal var modal = document.getElementById(\"myModal\"); // Get the  element that closes the modal var span = document.getElementsByClassName(\"close\")[0]; var toc = document.getElementById(\"td-section-nav\"); // var content = document.getElementsByClassName(\"td-content\")[0]; // When the page loads, open the modal window.onload = function() { content.style.backgroundImage = \"url('/assets/deprecated.png')\"; modal.style.display = \"block\"; toc.style['pointer-events'] = 'none'; toc.style.backgroundColor = \"rgba(0,0,0,-0.6)\"; } // When the user clicks on  (x), close the modal span.onclick = function() { modal.style.display = \"none\"; toc.removeAttribute(\"style\"); } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if ((event.target == modal) || (event.target.id == \"td-sidebar-menu\")) { modal.style.display = \"none\"; toc.removeAttribute(\"style\"); } }  ","excerpt":"/* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* …","ref":"/es/deprecated/recurring-payments.html","title":"Pagos recurrentes"},{"body":" /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ animation: animatetop 0.4s; } /* Modal Content/Box */ .modal-content { background-color: #fefefe; margin: 15% auto; /* 15% from the top and centered */ border: 1px solid #888; width: 50%; /* Could be more or less, depending on screen size */ } /* The Close Button */ .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; } .header { color: white; background-color: #ED6A5A; padding: 15px; }  Funcionalidad descontinuada\n\u0026times;  La funcionalidad de Pagos Recurrentes ha sido descontinuada y por lo tanto, no se ofrece a los comercios. El siguiente artículo está disponible a modo de consulta para comercios que aún la tienen activa.\nEsta funcionalidad NO será activada nuevamente.\n   // Get the modal var modal = document.getElementById(\"myModal\"); // Get the  element that closes the modal var span = document.getElementsByClassName(\"close\")[0]; var toc = document.getElementById(\"td-section-nav\"); // var content = document.getElementsByClassName(\"td-content\")[0]; // When the page loads, open the modal window.onload = function() { // content.style.backgroundImage = \"url('/assets/deprecated.png')\"; modal.style.display = \"block\"; toc.style['pointer-events'] = 'none'; toc.style.backgroundColor = \"rgba(0,0,0,-0.6)\"; } // When the user clicks on  (x), close the modal span.onclick = function() { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if ((event.target == modal) || (event.target.id == \"td-sidebar-menu\")) { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } }  Nota Pagos recurrentes ha sido descontinuado y no se ofrece para comercios.  ¿Cómo funciona? Con el fin de garantizar el correcto uso del sistema, todas las peticiones deben contener el encabezado HTTP de autorización con las credenciales del comercio, de manera que pueda identificarse quién está realizando la petición. Para esta implementación se usará autorización básica, en donde se envía el nombre de usuario (API Login) y contraseña (API Key).\nEstos son los datos que deben ser enviados en el encabezado de la petición: Los datos pasan un cifrado base 64 con formato: API Login : API Key.\nEjemplo, si el API Login es 0123ABCDEF y API Key es A1B2C3D4E5, entonces el encabezado de autorización sería el siguiente:\nAuthorization: Basic \u0026lt;base64 of 0123ABCDEF:A1B2C3D4E5\u0026gt; Authorization: Basic MDEyM0FCQ0RFRjpBMUIyQzNENEU1 \nPOST /payments-api/4.0/service.cgi HTTP/1.1 Host: sandbox.api.payulatam.com Content-Type: application/json; charset=utf-8 Accept: application/json Accept-language: es Content-Length: length Authorization: Basic MDEyM0FCQ0RFRjpBMUIyQzNENEU1 \nApuntando a las correspondientes URLs:\nAPI  Test: https://sandbox.api.payulatam.com/payments-api/ Production: https://api.payulatam.com/payments-api/   Los métodos disponibles para los pagos recurrentes son: Plan, Cliente, Tarjeta de crédito, Suscripción y Cargos adicionales. A continuación encontrarás la descripción de cada uno.\n1. Plan  Variables usadas para la creación de un plan     Nombre del campo Formato Tamaño Descripción Obligatorio en     planCode Alfanumérico Mín: 1 Máx: 255 Código único que el comercio le asigna al plan para su posterior identificación. Todos los países   description Alfanumérico Mín: 1 Máx: 255 Descripción del plan. Todos los países   accountId Numérico  Identificador de la cuenta del comercio al cual se asocia el plan. Todos los países   interval Alfanumérico Mín: 3 Máx: 5 Intervalo que define cada cuanto se realiza el cobro de la suscripción. Los valores posibles son: DAY, WEEK, MONTH y YEAR. Todos los países   intervalCount Numérico  Cantidad del intervalo que define cada cuanto se realiza el cobro de la suscripción. Todos los países   maxPaymentsAllowed Numérico  Cantidad total de pagos de la suscripción. Todos los países   maxPaymentAttempts Numérico Máx: 3 Cantidad total de reintentos para cada pago rechazado de la suscripción. No   paymentAttemptsDelay Numérico  Cantidad de días de espera entre los reintentos de pago de la suscripción. Todos los países   maxPendingPayments Numérico  Cantidad máxima de pagos pendientes que puede tener una suscripción antes de ser cancelada. No   trialDays Numérico  Cantidad de días de prueba de la suscripción. No   additionalValues.entry.name  64 Valor o monto asociado al plan. En este campo se envía un monto por entrada. Todos los países   transaction.order. additionalValues.entry.string Alfanumérico 64 PLAN_VALUE, es el monto total del plan. Puede contener dos dígitos decimales. Ej. 10000.00 ó 10000. Este valor debe ser enviado en transaction.order.additionalValues.entry. additionalValue.value Colombia   transaction.order. additionalValues.entry.string Alfanumérico 64 PLAN_TAX_VALUE, es el valor del IVA (Impuesto al Valor Agregado solo valido para Colombia) del plan, si se envía el IVA nulo el sistema aplicará el 19% automáticamente. Puede contener dos dígitos decimales. Ej: 19000.00. En caso de no tener IVA debe enviarse en 0. Este valor debe ser enviado en transaction.order.additionalValues.entry. additionalValue.value Colombia   transaction.order. additionalValues.entry.string Alfanumérico 64 PLAN_TAX_RETURN_BASE, Es el valor base sobre el cual se calcula el IVA (solo valido para Colombia). En caso de que no tenga IVA debe enviarse en 0. Este valor debe ser enviado en transaction.order.additionalValues.entry. additionalValue.value Colombia   additionalValues.entry.value Numérico 19, 2 Valor del plan, impuesto o base de retorno de acuerdo a additionalValue.entry.name. Todos los países   additionalValues.entry.currency Alfanumérico 3 El código ISO de la moneda asociada al monto. Ver Divisas admitidas. Todos los países     Mediante esta funcionalidad puedes registrar los datos asociados a tu plan recurrente y así obtener un identificador para el mismo.\nSe encuentran disponibles las siguientes operaciones:\n    URL Método Descripción     /rest/v4.9/plans POST Creación de un nuevo plan para suscripciones asociado al comercio.   /rest/v4.9/plans/{planCode} PUT Actualizar la información de un plan para suscripciones.\n{planCode}: Código de identificación del plan para el comercio.   /rest/v4.9/plans/{planCode} GET Consultar toda la información de un plan para suscripciones asociado al comercio.\n{planCode}: Código de identificación del plan para el comercio.   /rest/v4.9/plans/{planCode} DELETE Eliminar todo un plan para suscripciones asociado al comercio.\n{planCode}: Código de identificación del plan para el comercio.    Creación  JSON XML   Ejemplo petición:\n{ \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;1600\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;8400\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;b3d406d0-abd4-473c-a557-25aa81ff9032\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: 12, \u0026#34;maxPaymentAttempts\u0026#34;: 0, \u0026#34;paymentAttemptsDelay\u0026#34;: 1, \u0026#34;maxPendingPayments\u0026#34;: 0, \u0026#34;trialDays\u0026#34;: 0, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }   Ejemplo petición:\n\u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;maxPendingPayments\u0026gt;0\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \nEjemplo respuesta:\n\u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;0b63bd6d-9a2b-4c40-a314-a70a6bae27e3\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;0\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt;    Actualización  JSON XML   Ejemplo petición:\n{ \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;maxPendingPayments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPaymentAttempts\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;10000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: 12, \u0026#34;maxPaymentAttempts\u0026#34;: 1, \u0026#34;paymentAttemptsDelay\u0026#34;: 3, \u0026#34;maxPendingPayments\u0026#34;: 1, \u0026#34;trialDays\u0026#34;: 0, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }   Ejemplo petición:\n\u0026lt;plan\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \nEjemplo respuesta:\n\u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;trialDays\u0026gt;0\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt;    Consulta  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/plans/sample-plan-code-001 \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;2a852bf2-ce67-4920-b9a6-66af2c68b4ae\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: 1, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: 12, \u0026#34;maxPaymentAttempts\u0026#34;: 3, \u0026#34;paymentAttemptsDelay\u0026#34;: 1, \u0026#34;maxPendingPayments\u0026#34;: 0, \u0026#34;trialDays\u0026#34;: 30, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/plans/sample-plan-code-001 \nEjemplo respuesta:\n\u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;2a852bf2-ce67-4920-b9a6-66af2c68b4ae\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;1\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;0\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt;    Eliminación  JSON / XML   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/plans/sample-plan-code-001 \nEjemplo respuesta:\nHTTP STATUS: 200 OK    2. Cliente  Variables usadas para la creación de un cliente     Nombre del campo Formato Tamaño Descripción Obligatorio en     fullName Alfanumérico Max: 255 Nombre completo del cliente. Todos los países   email Alfanumérico Max: 255 Dirección de correo electrónico del cliente. Todos los países     Un cliente es la unidad que identifica quien será el beneficiario de un producto o servicio prestado y que se encuentra asociado a un plan de pagos recurrentes.\nSe encuentran disponibles las siguientes operaciones:\n    URL Método Descripción     /rest/v4.9/customers/ POST Creación de un cliente en el sistema.   /rest/v4.9/customers/{customerId} PUT Actualiza la información de un cliente en el sistema.\n{customerId}: Identificador del cliente que se desea actualizar.   /rest/v4.9/customers/{customerId} GET Consulta la información relacionada con el cliente\n{customerId}: Identificador del cliente del cual se desea conocer la información asociada.   /rest/v4.9/customers/{customerId} DELETE Elimina un usuario del sistema.\n{customerId}: Identificador del cliente que se desea eliminar.    Creación  JSON XML   Ejemplo petición:\n{ \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;6ahxar252\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; }   Ejemplo petición:\n\u0026lt;customer\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt; \nEjemplo respuesta:\n\u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;6ahxar252\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Pérez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt;    Actualización  JSON XML   Ejemplo petición:\n{ \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;6ahxar252\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; }   Ejemplo petición:\n\u0026lt;customer\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt; \nEjemplo respuesta:\n\u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;6ahxar252\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Pérez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt;    Consulta  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;2mkls9xekm\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;da2224a9-58b7-482a-9866-199de911c23f\u0026#34;, \u0026#34;customerId\u0026#34;: \u0026#34;2mkls9xekm\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;************4242\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Usuario Prueba\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Street 93B\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Office 301\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogota\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } ], \u0026#34;subscriptions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;2mlhk3qxji\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: \u0026#34;2013-08-30T10:46:41.477-05:00\u0026#34;, \u0026#34;currentPeriodEnd\u0026#34;: \u0026#34;2013-09-29T10:46:41.477-05:00\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;414215a2-c990-4525-ba84-072181988d09\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;PLAN-REST-16\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Plan rest test\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nEjemplo respuesta:\n\u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;2mkls9xekm\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;da2224a9-58b7-482a-9866-199de911c23f\u0026lt;/token\u0026gt; \u0026lt;customerId\u0026gt;2mkls9xekm\u0026lt;/customerId\u0026gt; \u0026lt;number\u0026gt;************4242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Usuario Prueba\u0026lt;/name\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Calle 93B\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Oficina 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;Bogota\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;subscriptions\u0026gt; \u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;2mlhk3qxji\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2013-08-30T10:46:41.477-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2013-09-29T10:46:41.477-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;414215a2-c990-4525-ba84-072181988d09\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;PLAN-REST-16\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Plan rest test\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;1\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \u0026lt;/subscriptions\u0026gt; \u0026lt;/customer\u0026gt;    Eliminación  JSON XML   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/7wp1r0atl \nEjemplo respuesta:\n{ \u0026#34;description\u0026#34;: \u0026#34;El cliente [7wp1r0atl] ha sido eliminado.\u0026#34; }   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/7wp1r0atl \nEjemplo respuesta:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;El cliente [7wp1r0atl] ha sido eliminado\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    3. Tarjeta de crédito  Variables usadas para la creación de una tarjeta de crédito     Nombre del campo Formato Tamaño Descripción Obligatorio en     number Numérico Mín: 13 Máx: 20 Número de la tarjeta de crédito. Todos los países   name Alfanumérico Mín: 1 Máx: 255 Nombre completo del tarjeta habiente. Todos los países   document Alfanumérico Mín: 5 Máx: 30 Número del documento de identidad del tarjeta habiente. Todos los países   expMonth Numérico Mín: 1 Máx: 12 Mes de expiración de la tarjeta de crédito. Todos los países   expYear Numérico Mín: 00 Máx: 2999 Año de expiración de la tarjeta de crédito. Si el valor es de dos dígitos corresponde al año comprendido entre 2000 (00) y 2099 (99). Si el valor es de más de dos dígitos se toma literal, siendo el año 2000 como mínimo posible. Todos los países   type Alfanumérico  Corresponde a la franquicia o tipo de tarjeta de crédito. Ver Medios de pago. Todos los países   address   Dirección de correspondencia del tarjeta habiente asociado con la tarjeta de crédito. Todos los países   address.line1 Alfanumérico Mín: 1 Máx: 100 Primera línea de la dirección. Todos los países   address.line2 Alfanumérico Mín: 1 Máx: 100 Segunda línea de la dirección o número de la dirección. No   address.line3 Alfanumérico Mín: 1 Máx: 100 Tercera línea de la dirección o complemento de la dirección. No   address.city Alfanumérico Mín: 1 Máx: 50 Nombre de la ciudad. Todos los países   address.state Alfanumérico Mín: 1 Máx: 40 Estado o departamento de la dirección. *Para Brasil enviar únicamente 2 caracteres. Ejemplo: Si es Sao Paulo enviar SP. Brasil   address.country Alfanumérico 2 País de la dirección en formato ISO 3166 Código Alfa 2. Todos los países   address.postalCode Alfanumérico Mín: 1 Máx: 20 Código postal de la dirección. *Para Brasil utilizar el formato XXXXX-XXX o XXXXXXXX ejemplo: 09210-710 o 09210710. México, Brasil   address.phone Alfanumérico Mín: 1 Máx: 20 Teléfono asociado a la dirección. *Para Brasil usar el formato ddd(2)+numero(7-9) ejemplo: (11)756312633. Todos los países     Es el medio de pago con el cual se relaciona un Plan y un Pagador, se encuentra compuesto por el número de tarjeta de crédito (el cual será tokenizado para almacenar los datos de forma segura), la fecha de vencimiento de la tarjeta y algunos datos adicionales de dirección.\nSe encuentran disponibles las siguientes operaciones:\n    URL Método Descripción     /rest/v4.9/customers/{customerID}/creditCards POST Creación de una tarjeta de crédito (Token) y asociarla a un usuario.\n{customerId} : Identificador del cliente al cual se le va a asociar el token   /rest/v4.9/creditCards/{creditCardId} PUT Actualizar la información de un token.\n{creditCardId}: Identificador del token que se desea actualizar.   /rest/v4.9/creditCards/{creditCardId} GET Consultar la información de una tarjeta de crédito (Token) dato su identificador.\n{creditCardId}: Token de la tarjeta de crédito que desea consultarse   /rest/v4.9/customers/{customerID}/creditCards/{creditCardId} DELETE Eliminar una tarjeta de crédito (Token) asociado a un usuario.\n{customerId} : Identificador del cliente al cual se le va a eliminar el token\n{creditCardId}: Identificador del token que se desea eliminar    Creación  JSON XML   Ejemplo petición:\n{ \u0026#34;name\u0026#34;: \u0026#34;Sample User Name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;1020304050\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4242424242424242\u0026#34;, \u0026#34;expMonth\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;token\u0026#34;: \u0026#34;8186ca42-2f69-417b-94a0-208bd8e089af\u0026#34; }   Ejemplo petición:\n\u0026lt;creditCard\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;document\u0026gt;1020304050\u0026lt;/document\u0026gt; \u0026lt;number\u0026gt;4242424242424242\u0026lt;/number\u0026gt; \u0026lt;expMonth\u0026gt;01\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2018\u0026lt;/expYear\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;8186ca42-2f69-417b-94a0-208bd8e089af\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt;    Actualización  JSON XML   Ejemplo petición:\n{ \u0026#34;expMonth\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2016\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sample user name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;65858645\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Sample Address\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;Cll 93 B\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Ofic. 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;city\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;state\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;2266758\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;, \u0026#34;customerId\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sample user name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;65858645\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Sample Address\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;Cll 93 B\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Ofic. 301\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;city\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;state\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;2266758\u0026#34; } }   Ejemplo petición:\n\u0026lt;creditCard\u0026gt; \u0026lt;expMonth\u0026gt;12\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2016\u0026lt;/expYear\u0026gt; \u0026lt;name\u0026gt;Sample user name\u0026lt;/name\u0026gt; \u0026lt;document\u0026gt;65858645\u0026lt;/document\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Sample Address\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;Cll 93 B\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Ofic. 301\u0026lt;/line3\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;city\u0026gt;city\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;state\u0026gt;state\u0026lt;/state\u0026gt; \u0026lt;phone\u0026gt;2266758\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;customerId\u0026gt;eab38z33hh2\u0026lt;/customerId\u0026gt; \u0026lt;number\u0026gt;424242******4242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample user names\u0026lt;/name\u0026gt; \u0026lt;document\u0026gt;65858645\u0026lt;/document\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Sample Addresss\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;Cll 93 B\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Ofic. 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;city\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;state\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;2266758\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt;    Consulta  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nEjemplo respuesta:\n{ \u0026#34;token\u0026#34;: \u0026#34;256f8e39-e37c-4ff3-9b5f-63937ee5c69c\u0026#34;, \u0026#34;customerId\u0026#34;: \u0026#34;5whjhimjtpn\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sample User Name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;1020304050\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nEjemplo respuesta:\n\u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;8186ca42-2f69-417b-94a0-208bd8e089af\u0026lt;/token\u0026gt; \u0026lt;customerId\u0026gt;11sgnt8s19\u0026lt;/customerId\u0026gt; \u0026lt;number\u0026gt;************4242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt;    Eliminación  JSON XML   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/{customerID}/creditCards/{creditCardId} \nEjemplo respuesta:\n{ \u0026#34;description\u0026#34;: \u0026#34;La tarjeta de crédito f17e9c5c-c414-4dc0-a145-5b0647f7dbf8 se ha eliminado exitosamente\u0026#34; }   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/{customerID}/creditCards/{creditCardId} \nEjemplo respuesta:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;La tarjeta de crédito f17e9c5c-c414-4dc0-a145-5b0647f7dbf8 se ha eliminado exitosamente\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    4. Suscripción  Variables usadas para la creación de un suscripción     Nombre del campo Formato Tamaño Descripción Obligatorio en     quantity Numérico  Cantidad de planes a adquirir con la suscripción. No   installments Numérico  Número de cuotas en las que se diferirá cada cobro de la suscripción. No   trialDays Numérico  Días de prueba que tendrá la suscripción sin generar cobros. No   customer   Cliente(s) asociado(s) a la suscripción. Puedes encontrar mayor información en la sección \u0026ldquo;Cliente\u0026rdquo; de esta página. Todos los países   customer.creditCards   Tarjeta de crédito asociada al cliente, sobre la cual se realizará el cobro. Puedes encontrar mayor información en la sección \u0026ldquo;Tarjeta de credito\u0026rdquo; de esta página. Todos los países   plan   Plan asociado a la suscripción. Puedes encontrar mayor información en la sección \u0026ldquo;Plan\u0026rdquo; de esta página. Todos los países   immediatePayment Booleano  True: Ejecuta la suscripción inmediatamente como una transacción y se crea la suscripción para los siguientes pagos.\nFalse: Se realiza el primer cobro al siguiente día o de acuerdo a los dias de prueba especificados. No   extra1 Alfanumérico Mín: 0 Máx: 255 Campo adicional para enviar información sobre la compra. Ej: Descripción de la compra. No   extra2 Alfanumérico Mín: 0 Máx: 255 Campo adicional para enviar información sobre la compra. Ej: Códigos internos de los productos. No   deliveryAddress   Dirección de envío de los productos. Todos los comercios con envío físico de productos   deliveryAddress.line1 Alfanumérico Mín: 0 Máx: 100 Primera línea de la dirección. Todos los comercios con envío físico de productos   deliveryAddress.line2 Alfanumérico Mín: 0 Máx: 100 Segunda línea de la dirección o número de la dirección. No   deliveryAddress.line3 Alfanumérico Mín: 0 Máx: 100 Tercera línea de la dirección o complemento de la dirección. No   deliveryAddress.city Alfanumérico Mín: 0 Máx: 50 Nombre de la ciudad. Todos los comercios con envío físico de productos   deliveryAddress.state Alfanumérico Mín: 0 Máx: 40 Estado o departamento de la dirección. *Para Brasil enviar únicamente 2 caracteres. Ejemplo: Si es Sao Paulo enviar SP. Brasil (Todos los comercios con envío físico de productos)   deliveryAddress.country Alfanumérico 2 País de la dirección en formato ISO 3166 Código Alfa 2. Todos los comercios con envío físico de productos   deliveryAddress.postalCode Alfanumérico Mín: 0 Máx: 20 Código postal de la dirección. *Para Brasil utilizar el formato XXXXX-XXX o XXXXXXXX ejemplo: 09210-710 o 09210710. México, Brasil (Todos los comercios con envío físico de productos)   deliveryAddress.phone Alfanumérico Mín: 0 Máx: 20 Teléfono asociado a la dirección. *Para Brasil usar el formato ddd(2)+numero(7-9) ejemplo: (11)756312633. Todos los comercios con envío físico de productos   notifyUrl Alfanumérico Mín: 0 Máx: 2048 La URL de notificación o confirmación de la orden. No   recurringBillItems   Cobro adicional o un descuento realizado sobre el valor de uno de los pagos que conforman el plan de pagos recurrentes. Se tendrá en cuenta únicamente si el atributo \u0026ldquo;immediatePayment\u0026rdquo; tiene valor true.\nPara obtener mayor informacion por favor visualizar la sección \u0026ldquo;Cargos adicionales\u0026rdquo; de esta página. No     Una suscripción es la relación entre un plan de pagos, un pagador y una tarjeta de crédito y es el elemento con el que se controla la ejecución de los cobros correspondientes.\nSe encuentran disponibles las siguientes operaciones:\n    URL Métodos Descripción     /rest/v4.9/subscriptions/ POST Creación de una nueva suscripción de un cliente a un plan.   /rest/v4.9/subscriptions/{subscriptionId} PUT Actualizar la información asociada a la suscripción indicada. En este momento sólo es posible actualizar el token de la tarjeta de crédito a la cual se realiza el cargo de la suscripción.\n{subscriptionId}: Identificación de la suscripción   /rest/v4.9/subscriptions/{subscriptionId} GET Consultar la información básica asociada a la suscripción indicada.\n{subscriptionId}: Identificación de la suscripción   /rest/v4.9/subscriptions/{subscriptionId} DELETE Eliminar la suscripción, es decir la relación del cliente al plan.\n{subscriptionId}: Identificación de la suscripción    Creación  Con todos los elementos nuevos  JSON XML   Ejemplo petición:\n{ \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;101010123\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4242424242424242\u0026#34;, \u0026#34;expMonth\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;maxPaymentAttempts\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPendingPayments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;563cbd0o54z\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;145ad747-adeb-43db-80c0-447c8f7ad8b4\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;a39e3zvsru6\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;7b6d637a-6252-47ee-8d3b-ed91807b3146\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1402203600000, \u0026#34;currentPeriodEnd\u0026#34;: 1404795599000 }   Ejemplo petición:\n\u0026lt;subscription\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4242424242424242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;expMonth\u0026gt;1\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2018\u0026lt;/expYear\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nEjemplo respuesta:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;26fb7yxfej0\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;047dbnhsnx9\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;daedc017-bd7d-4887-87b4-13913650c952\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;77e57940-e149-4f77-a190-271caa7ccb7b\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;      Con todos los elementos existentes  JSON XML   Ejemplo petición:\n{ \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;fb6d0m9nqb8\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: 1, \u0026#34;installments\u0026#34;: 1, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1397192400000, \u0026#34;currentPeriodEnd\u0026#34;: 1428728399000 }   Ejemplo petición:\n\u0026lt;subscription\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;trialDays\u0026gt;10\u0026lt;/trialDays\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nEjemplo respuesta:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;fb6d0m9nqb8\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-03T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-02T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;      Plan y cliente ya creados, y una tarjeta nueva  JSON XML   Ejemplo petición:\n{ \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Sample User Name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;101010123\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4242424242424242\u0026#34;, \u0026#34;expMonth\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;c50d94ge25d\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperezz@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;508a715f-2feb-46ba-8945-c948821f080e\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1401771600000, \u0026#34;currentPeriodEnd\u0026#34;: 1404363599000 }   Ejemplo petición:\n\u0026lt;subscription\u0026gt; \u0026lt;trialDays\u0026gt;10\u0026lt;/trialDays\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4242424242424242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;expMonth\u0026gt;1\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2018\u0026lt;/expYear\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nEjemplo respuesta:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;40adcwryufe\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-03T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-02T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;508a715f-2feb-46ba-8945-c948821f080e\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;      Cliente y tarjeta ya creados, y con plan nuevo  JSON XML   Ejemplo petición:\n{ \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;maxPaymentAttempts\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPendingPayments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;320756yk1x0\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperezz@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1403499600000, \u0026#34;currentPeriodEnd\u0026#34;: 1406091599000 }   Ejemplo petición:\n\u0026lt;subscription\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nEjemplo respuesta:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;17d11h3b2xs\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;c653e0ba-e0cb-49d9-9294-1d5617be8f6c\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;     Actualización (Tarjeta de crédito de una suscripción)  JSON XML   Ejemplo petición:\n{ \u0026#34;creditCardToken\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;320756yk1x0\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026#34; }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34; }, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1403499600000, \u0026#34;currentPeriodEnd\u0026#34;: 1406091599000, \u0026#34;creditCardToken\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; }   Ejemplo petición:\n\u0026lt;subscription\u0026gt; \u0026lt;creditCardToken\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/creditCardToken\u0026gt; \u0026lt;/subscription\u0026gt; \nEjemplo respuesta:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;320756yk1x0\u0026lt;/id\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026lt;/id\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;creditCardToken\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/creditCardToken\u0026gt; \u0026lt;/subscription\u0026gt;    Consulta  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/1dhb51hfuu \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;320756yk1x0\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026#34; }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34; }, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1403499600000, \u0026#34;currentPeriodEnd\u0026#34;: 1406091599000, \u0026#34;creditCardToken\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/1dhb51hfuu \nEjemplo respuesta:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;320756yk1x0\u0026lt;/id\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026lt;/id\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;creditCardToken\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/creditCardToken\u0026gt; \u0026lt;/subscription\u0026gt;    Eliminación  JSON XML   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/3hpyu04ij \nEjemplo respuesta:\n{ \u0026#34;description\u0026#34;: \u0026#34;La suscripción [3hpyu04ij] ha sido cancelada\u0026#34; }   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/3hpyu04ij \nEjemplo respuesta:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;La suscripción [3hpyu04ij] ha sido cancelada\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    5. Cargos adicionales  Variables usadas para la creación de un cargo adicional     Nombre del campo Formato Tamaño Descripción Obligatorio en     descripcion Alfanumérico Mín: 1 Máx: 255 Descripción del cargo adicional asociado al cobro. Todos los países   additionalValues.entry.name  64 Valor o monto asociado al cargo adicional. En este campo se envía un monto por entrada. Todos los países   transaction.order. additionalValues.entry.string Alfanumérico 64 ITEM_VALUE, es el monto total del cargo adicional. Puede contener dos dígitos decimales. Ej. 10000.00 ó 10000. Este valor debe ser enviado en transaction.order.additionalValues. entry.additionalValue.value Colombia   transaction.order. additionalValues.entry.string Alfanumérico 64 ITEM_TAX, es el valor del IVA (Impuesto al Valor Agregado solo valido para Colombia) del cargo adicional, si se envía el IVA nulo el sistema aplicará el 19% automáticamente. Puede contener dos dígitos decimales. Ej: 19000.00. En caso de no tener IVA debe enviarse en 0. Este valor debe ser enviado en transaction.order.additionalValues. entry.additionalValue.value Colombia   transaction.order. additionalValues.entry.string Alfanumérico 64 ITEM_TAX_RETURN_BASE, Es el valor base sobre el cual se calcula el IVA (solo valido para Colombia). En caso de que no tenga IVA debe enviarse en 0. Este valor debe ser enviado en transaction.order.additionalValues. entry.additionalValue.value Colombia   additionalValues.entry.value Numérico 19, 2 Valor del cargo, impuesto o base de retorno de acuerdo a additionalValue.entry.name. Todos los países   additionalValues.entry.currency Alfanumérico 3 El código ISO de la moneda asociada al monto. Ver Divisas admitidas. Todos los países     Un cargo puede ser un cobro adicional o un descuento realizado sobre el valor de uno de los pagos que conforman el plan de pagos recurrentes. Estos solo afectan el siguiente cobro pendiente y se ejecutan una única vez.\nSe encuentran disponibles las siguientes operaciones:\n    URL Métodos Descripción     /rest/v4.9/subscriptions/{subscriptionId}/recurringBillItems POST Adiciona cargos extras a la factura correspondiente al periodo actual.\n{subscriptionId}: Identificación de la suscripción   /rest/v4.9/recurringBillItems/{recurringBillItemId} PUT Actualiza la información del cargo extra de una factura\n{recurringBillItemId}: Identificador del cargo extra   /rest/v4.9/recurringBillItems/{recurringBillItemId} GET Consulta la información del cargo extra de una factura a partir de su identificador.\n{recurringBillItemId}: Identificador del cargo extra   /rest/v4.9/recurringBillItems/{recurringBillItemId} DELETE Eliminar un cargo extra de una factura\n{recurringBillItemId}: Identificador del cargo extra   /rest/v4.9/recurringBillItems/ GET Consulta de los cargos extras de las facturas del comercio que cumplen con los filtros estipulados. Los filtros disponibles se muestra a continuación y deben ser enviados como named parameters dentro de la URL:\n{subscriptionId}: Identificación de la suscripción\n{description}: Descripción ingresada en el cargo extra    Creación  JSON XML   Ejemplo petición:\n{ \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;522023su5xg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;52b04sx2s6\u0026#34; }   Ejemplo petición:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \nEjemplo respuesta:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;5e174m7lgns\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;subscriptionId\u0026gt;52b04sx2s6\u0026lt;/subscriptionId\u0026gt; \u0026lt;/recurringBillItem\u0026gt;    Actualización  JSON XML   Ejemplo petición:\n{ \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;5e174m7lgns\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;52b04sx2s6\u0026#34; }   Ejemplo petición:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;id\u0026gt;5e174m7lgns\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \nEjemplo respuesta:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;5e174m7lgns\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;subscriptionId\u0026gt;52b04sx2s6\u0026lt;/subscriptionId\u0026gt; \u0026lt;/recurringBillItem\u0026gt;    Consulta  Por id del cargo adicional  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/2uww909obl \nEjemplo respuesta:\n{ \u0026#34;id\u0026#34;: \u0026#34;5wm1pxmpiwq\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/2uww909obl \nEjemplo respuesta:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uww909obl\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt;      Por descripción del cargo adicional  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?description=Cargo%20b \nEjemplo respuesta:\n{ \u0026#34;recurringBillItemList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5vsags0qsdo\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5vsa272tek7\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5wm1pxmpiwq\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?description=Cargo%20b \nEjemplo respuesta:\n\u0026lt;recurringBillItemResponse\u0026gt; \u0026lt;recurringBillItems\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2waez3h9ac\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;24e207ivi\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;26gzctvub\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uxvargit1\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uy01uio7o\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2ve0qtsjzz\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2w16yddd98\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;/recurringBillItems\u0026gt; \u0026lt;/recurringBillItemResponse\u0026gt;      Por suscripción  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?subscriptionId=26gyv192a \nEjemplo respuesta:\n{ \u0026#34;recurringBillItemList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5wjxrkgk7rc\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Custo do plano\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5wm1pxmpiwq\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?subscriptionId=26gyv192a \nEjemplo respuesta:\n\u0026lt;recurringBillItemResponse\u0026gt; \u0026lt;recurringBillItems\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2waez3h9ac\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uww909obl\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;/recurringBillItems\u0026gt; \u0026lt;/recurringBillItemResponse\u0026gt;     Eliminación  JSON XML   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/ou8ru86nq \nEjemplo respuesta:\n{ \u0026#34;description\u0026#34;: \u0026#34;recurring bill item ou8ru86nq has been removed successfully\u0026#34; }   Ejemplo petición:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/ou8ru86nq \nEjemplo respuesta:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;recurring bill item ou8ru86nq has been removed successfully\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    6. Facturas  Atributos asociados a una factura     Nombre del campo Formato Descripción     recurringBill.id Alfanumérico Identificador de la factura recurrente en la plataforma de PayU.   recurringBill.orderId Numérico Identificador de la orden asociada a la factura recurrente en la plataforma de PayU.   recurringBill.subscriptionId Alfanumérico Identificador de la suscripción asociada a la factura recurrente en la plataforma de PayU.   recurringBill.state Alfanumérico Estado de la factura recurrente. Los estados pueden ser:\nNOT_PAID: Pago rechazado.PAYMENT_IN_PROGRESS: Cobro en progreso.PENDING: Próximo cobro a realizar.RETRYING_PAYMENT: Reintento de pago.PAID: Pago aprobado.CANCELLED: Suscripción cancelada.PENDING_REVIEW: Pago en proceso de validación.   recurringBill.amount Numérico Valor de la factura recurrente.   recurringBill.currency Alfanumérico El código ISO de la moneda asociada al monto. Ver Divisas admitidas.   recurringBill.dateCharge Date Fecha de cobro de la factura recurrente. Cuando se utiliza el formato json la estructura del valor será Epoch/Unix, por lo que se debe convertir.     Una factura es un intento de pago que se realizó sobre una suscripción, o está pendiente por ejecutarse.\nLas facturas solo tienen el método de consulta disponible:\n    URL Métodos Descripción     /rest/v4.3/recurringBill GET Consulta de las facturas que están pagadas o pendientes por pagar. Se puede consultar por cliente, por suscripción o por rango de fechas:\n/rest/v4.3/recurringBill?customerId={customerId}\n/rest/v4.3/recurringBill?subscriptionId={subscriptionId}\n/rest/v4.3/recurringBill?customerId={customerId}\u0026amp;dateBegin;={dateBegin}\u0026amp;dateFinal;={dateFinal}    Consulta  Por id del cliente  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5 \nEjemplo respuesta:\n{ \u0026#34;recurringBillList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026#34;, \u0026#34;orderId\u0026#34;: 71516840, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391490000000 }, { \u0026#34;id\u0026#34;: \u0026#34;56f0f5ca-cf29-437e-8920-7bc35578a39f\u0026#34;, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtf4q8v451\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;CANCELLED\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1392786000000 } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5 \nEjemplo respuesta:\n\u0026lt;recurringBillListResponse\u0026gt; \u0026lt;recurringBills\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71516840\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-04T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;56f0f5ca-cf29-437e-8920-7bc35578a39f\u0026lt;/id\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtf4q8v451\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;CANCELLED\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-19T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;/recurringBills\u0026gt; \u0026lt;/recurringBillListResponse\u0026gt;      Por id de la suscripción  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?subscriptionId=6dtg51j09cr \nEjemplo respuesta:\n{ \u0026#34;recurringBillList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026#34;, \u0026#34;orderId\u0026#34;: 71516840, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391490000000 }, { \u0026#34;id\u0026#34;: \u0026#34;528a91a5-19bf-4db5-9a4a-4ecd2f07056b\u0026#34;, \u0026#34;orderId\u0026#34;: 71651340, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391576400000 } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?subscriptionId=6dtg51j09cr \nEjemplo respuesta:\n\u0026lt;recurringBillListResponse\u0026gt; \u0026lt;recurringBills\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71516840\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-04T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;56f0f5ca-cf29-437e-8920-7bc35578a39f\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71651340\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-19T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;/recurringBills\u0026gt; \u0026lt;/recurringBillListResponse\u0026gt;      Por id del cliente y un rango de fechas  JSON XML   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5\u0026amp;dateBegin;=2014-02-03\u0026amp;dateFinal;=2014-02-04 \nEjemplo respuesta:\n{ \u0026#34;recurringBillList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026#34;, \u0026#34;orderId\u0026#34;: 71516840, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391490000000 } ] }   Ejemplo petición:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5\u0026amp;dateBegin;=2014-02-03\u0026amp;dateFinal;=2014-02-04 \nEjemplo respuesta:\n\u0026lt;recurringBillListResponse\u0026gt; \u0026lt;recurringBills\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71516840\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-04T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;/recurringBills\u0026gt; \u0026lt;/recurringBillListResponse\u0026gt;    ","excerpt":"/* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* …","ref":"/es/deprecated/recurring-payments/recurring-payments-api.html","title":"Pagos recurrentes - API"},{"body":" /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ animation: animatetop 0.4s; } /* Modal Content/Box */ .modal-content { background-color: #fefefe; margin: 15% auto; /* 15% from the top and centered */ border: 1px solid #888; width: 50%; /* Could be more or less, depending on screen size */ } /* The Close Button */ .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; } .header { color: white; background-color: #ED6A5A; padding: 15px; }  Funcionalidad descontinuada\n\u0026times;  La funcionalidad de Pagos Recurrentes ha sido descontinuada y por lo tanto, no se ofrece a los comercios. El siguiente artículo está disponible a modo de consulta para comercios que aún la tienen activa.\nEsta funcionalidad NO será activada nuevamente.\n   // Get the modal var modal = document.getElementById(\"myModal\"); // Get the  element that closes the modal var span = document.getElementsByClassName(\"close\")[0]; var toc = document.getElementById(\"td-section-nav\"); // var content = document.getElementsByClassName(\"td-content\")[0]; // When the page loads, open the modal window.onload = function() { // content.style.backgroundImage = \"url('/assets/deprecated.png')\"; modal.style.display = \"block\"; toc.style['pointer-events'] = 'none'; toc.style.backgroundColor = \"rgba(0,0,0,-0.6)\"; } // When the user clicks on  (x), close the modal span.onclick = function() { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if ((event.target == modal) || (event.target.id == \"td-sidebar-menu\")) { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } }  Nota Pagos recurrentes ha sido descontinuado y no se ofrece para comercios.  ¿Cómo funciona? Tener en cuenta Pagos recurrentes sólo está disponible para cuentas de Brasil, Colombia, Perú y México.  Apuntando a las correspondientes URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Los métodos disponibles para los pagos recurrentes son: Plan, Cliente, Tarjeta de crédito, Suscripción y Cargos adicionales. A continuación encontrarás la descripción de cada uno.\n1. Plan Using this feature you can register a recurring plan and thus get its identifier.\nSe encuentran disponibles las siguientes operaciones:\n    URL Método Descripción     /rest/v4.9/plans POST Creación de un nuevo plan para suscripciones asociado al comercio.   /rest/v4.9/plans/{planCode} PUT Actualizar la información de un plan para suscripciones.\n{planCode}: Código de identificación del plan para el comercio.   /rest/v4.9/plans/{planCode} GET Consultar toda la información de un plan para suscripciones asociado al comercio.\n{planCode}: Código de identificación del plan para el comercio.   /rest/v4.9/plans/{planCode} DELETE Eliminar todo un plan para suscripciones asociado al comercio.\n{planCode}: Código de identificación del plan para el comercio.    Creación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí la descripción del plan parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Basic Plan\u0026#34;); // Ingresa aquí el código de identificación para el plan parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd456\u0026#34; + System.currentTimeMillis()); // Ingresa aquí el intervalo del plan parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Ingresa aquí la cantidad de intervalos parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;12\u0026#34;); // Ingresa aquí la moneda para el plan parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Ingresa aquí el valor del plan parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;50000\u0026#34;); //(OPCIONAL) Ingresa aquí el valor del impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;10000\u0026#34;); //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;40000\u0026#34;); // Ingresa aquí la cuenta Id del plan parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;2\u0026#34;); // Ingresa aquí el intervalo de reintentos parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;2\u0026#34;); // Ingresa aquí la cantidad de cobros que componen el plan parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;2\u0026#34;); SubscriptionPlan response = PayUPlans.create(parameters);   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí la descripción del plan parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Basic Plan\u0026#34;); // Ingresa aquí el código de identificación para el plan parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd456\u0026#34; + System.currentTimeMillis()); // Ingresa aquí el intervalo del plan parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Ingresa aquí la cantidad de intervalos parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;12\u0026#34;); // Ingresa aquí la moneda para el plan parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Ingresa aquí el valor del plan parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;50000\u0026#34;); //(OPCIONAL) Ingresa aquí el valor del impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;10000\u0026#34;); //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;40000\u0026#34;); // Ingresa aquí la cuenta Id del plan parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;2\u0026#34;); // Ingresa aquí el intervalo de reintentos parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;2\u0026#34;); // Ingresa aquí la cantidad de cobros que componen el plan parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;2\u0026#34;); SubscriptionPlan response = PayUPlans.create(parameters);    Actualización  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingrese aquí la nueva descripción para el plan parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;New Basic Plan\u0026#34;); // Ingrese aquí el código del plan (Debe ser un código de plan existente) parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd4561379351327982\u0026#34;); // Ingrese aquí la moneda del plan (Debe ser el mismo que fue usado cuando el plan fue creado) parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Ingrese aquí el nuevo valor del plan parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;100000\u0026#34;); //(OPCIONAL) Ingrese aquí el valor del impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;10000\u0026#34;); //(OPCIONAL) Ingrese aquí base de devolución del impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;40000\u0026#34;); // Ingrese aquí la cantidad de reintentos parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;3\u0026#34;); SubscriptionPlan response; response = PayUPlans.update(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí la descripción del plan \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;New Sample Plan 001\u0026#34;, // Ingresa aquí el código de identificación para el plan \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Ingresa aquí la moneda para el plan \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Ingresa aquí el valor del plan \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, //(OPCIONAL) Ingresa aquí el valor del impuesto \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;0\u0026#34;, //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;0\u0026#34;, // Ingresa aquí el intervalo de reintentos \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad total de reintentos para cada pago rechazado de la suscripción \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Ingresa aquí la cantidad máxima de pagos pendientes que puede tener una suscripción antes de ser cancelada. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, ); $response = PayUSubscriptionPlans::update($parameters); if($response){ }    Consulta  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Ingrese aquí el código del plan parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd4561379351327982\u0026#34;); SubscriptionPlan response = PayUPlans.find(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el código de identificación para el plan \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, ); $response = PayUSubscriptionPlans::find($parameters); if($response) { $response-\u0026gt;id; $response-\u0026gt;description; $response-\u0026gt;accountId; $response-\u0026gt;intervalCount; $response-\u0026gt;interval; $response-\u0026gt;maxPaymentsAllowed; $response-\u0026gt;maxPaymentAttempts; $response-\u0026gt;paymentAttemptsDelay; $response-\u0026gt;maxPendingPayments; $response-\u0026gt;trialDays; }    Eliminación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingrese aquí el código del plan parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd4561379351327982\u0026#34;); boolean response = PayUPlans.delete(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el código de identificación para el plan \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, ); $response = PayUSubscriptionPlans::delete($parameters); if($response) { }    2. Cliente Un cliente es la unidad que identifica quien será el beneficiario de un producto o servicio prestado y que se encuentra asociado a un plan de pagos recurrentes.\nSe encuentran disponibles las siguientes operaciones:\n    URL Método Descripción     /rest/v4.9/customers/ POST Creación de un cliente en el sistema.   /rest/v4.9/customers/{customerId} PUT Actualiza la información de un cliente en el sistema.\n{customerId}: Identificador del cliente que se desea actualizar.   /rest/v4.9/customers/{customerId} GET Consulta la información relacionada con el cliente\n{customerId}: Identificador del cliente del cual se desea conocer la información asociada.   /rest/v4.9/customers/{customerId} DELETE Elimina un usuario del sistema.\n{customerId}: Identificador del cliente que se desea eliminar.    Creación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Ingresa aquí el Nombre del cliente parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Oscar\u0026#34;); //Ingresa aquí el E-mail del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;oscar.romero@payulatam.com\u0026#34;); //Operación crear el cliente Customer response = PayUCustomers.create(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el nombre del cliente \tPayUParameters::CUSTOMER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Ingresa aquí el correo del cliente \tPayUParameters::CUSTOMER_EMAIL =\u0026gt; \u0026#34;pperez@payulatam.com\u0026#34; ); $response = PayUCustomers::create($parameters); if($response) { $response-\u0026gt;id; }    Actualización  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Ingresa aquí el ID del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;f543exh3zh5o\u0026#34;); //Ingresa aquí el Nombre del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Oscar Romero\u0026#34;); //Ingresa aquí el E-mail del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;oscarromero@payulatam.com\u0026#34;); //Operación Actualizar el cliente Customer response = PayUCustomers.update(parameters);Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Ingresa aquí el ID del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;f543exh3zh5o\u0026#34;); //Ingresa aquí el Nombre del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Oscar Romero\u0026#34;); //Ingresa aquí el E-mail del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;oscarromero@payulatam.com\u0026#34;); //Operación Actualizar el cliente Customer response = PayUCustomers.update(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el identificador del cliente, \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;24978c6l3e\u0026#34;, // Ingresa aquí el nombre del cliente \tPayUParameters::CUSTOMER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Ingresa aquí el correo del cliente \tPayUParameters::CUSTOMER_EMAIL =\u0026gt; \u0026#34;pperez@payulatam.com\u0026#34; ); $response = PayUCustomers::update($parameters); if($response){ }    Consulta  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Ingresa aquí el Id del Cliente parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;17ylzjz6bxz\u0026#34;); Customer response = PayUCustomers.find(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el nombre del cliente \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;24978c6l3e\u0026#34;, ); $response = PayUCustomers::find($parameters); if($response) { $response-\u0026gt;fullName; $response-\u0026gt;email; $creditCards=$response-\u0026gt;creditCards; foreach ($creditCards as $creditCard) { $creditCard-\u0026gt;token; $creditCard-\u0026gt;number; $creditCard-\u0026gt;type; $creditCard-\u0026gt;name; $address=$creditCard-\u0026gt;address; $address-\u0026gt;line1; $address-\u0026gt;line2; $address-\u0026gt;line3; $address-\u0026gt;city; $address-\u0026gt;state; $address-\u0026gt;country; $address-\u0026gt;postalCode; $address-\u0026gt;phone; } }    Eliminación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el Id del cliente parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;17ylzjz6bxz\u0026#34;); boolean response = PayUCustomers.delete(parameters);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el identificador del cliente, \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;24978c6l3e\u0026#34; ); $response = PayUCustomers::delete($parameters); if($response){ }    3. Tarjeta de crédito Es el medio de pago con el cual se relaciona un Plan y un Pagador, se encuentra compuesto por el número de tarjeta de crédito (el cual será tokenizado para almacenar los datos de forma segura), la fecha de vencimiento de la tarjeta y algunos datos adicionales de dirección.\nSe encuentran disponibles las siguientes operaciones:\n    URL Método Descripción     /rest/v4.9/customers/{customerID}/creditCards POST Creación de una tarjeta de crédito (Token) y asociarla a un usuario.\n{customerId} : Identificador del cliente al cual se le va a asociar el token   /rest/v4.9/creditCards/{creditCardId} PUT Actualizar la información de un token.\n{creditCardId}: Identificador del token que se desea actualizar.   /rest/v4.9/creditCards/{creditCardId} GET Consultar la información de una tarjeta de crédito (Token) dato su identificador.\n{creditCardId}: Token de la tarjeta de crédito que desea consultarse   /rest/v4.9/customers/{customerID}/creditCards/{creditCardId} DELETE Eliminar una tarjeta de crédito (Token) asociado a un usuario.\n{customerId} : Identificador del cliente al cual se le va a eliminar el token\n{creditCardId}: Identificador del token que se desea eliminar    Creación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;180oklk4o56\u0026#34;); // Ingresa aquí el número de la tarjera. parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4005580000029205\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta. parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2015/01\u0026#34;); // Ingresa aquí el tipo de la tarjeta. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Nombre\u0026#34;); // Ingresa aquí el documento de identificación asociado a la tarjeta. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // -- Todos los parámetros que siguen son opcionales. -- // Ingresa aquí la primera parte de la dirección. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Calle falsa\u0026#34;); // Ingresa aquí la segunda parte de la dirección (si aplica). parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;123\u0026#34;); // Ingresa aquí la tercera parte de la dirección (si aplica). parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;patio trasero\u0026#34;); // Ingresa aquí el departamento. parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); // Ingresa aquí la ciudad. parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C.\u0026#34;); // Ingresa aquí el país. parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, PaymentCountry.CO.name()); // Ingresa aquí el código postal. parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // Ingresa aquí el teléfono. parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); PaymentPlanCreditCard response = PayUCreditCard.create(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el identificador del cliente, \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;6eb24tzp40\u0026#34;, // Ingresa aquí el nombre del cliente \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4242424242424242\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito en formato AAAA/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2018/01\u0026#34;, // Ingresa aquí el nombre de la franquicia de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el documento de identificación asociado a la tarjeta \tPayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPCIONAL) Ingresa aquí el documento de identificación del pagador \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;101010123\u0026#34;, // (OPCIONAL) Ingresa aquí la primera línea de la dirección del pagador \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Street 93B\u0026#34;, // (OPCIONAL) Ingresa aquí la segunda línea de la dirección del pagador \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPCIONAL) Ingresa aquí la tercera línea de la dirección del pagador \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Office 301\u0026#34;, // (OPCIONAL) Ingresa aquí la ciudad de la dirección del pagador \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Bogotá\u0026#34;, // (OPCIONAL) Ingresa aquí el estado o departamento de la dirección del pagador \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C.\u0026#34;, // (OPCIONAL) Ingresa aquí el código del país de la dirección del pagador \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPCIONAL) Ingresa aquí el código postal de la dirección del pagador \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPCIONAL) Ingresa aquí el número telefónico del pagador \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34; ); $response = PayUCreditCards::create($parameters); if($response){ $response-\u0026gt;token; }    Actualización  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador del token de la tarjeta. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;180oklk4o56\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta. parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2015/01\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Nombre\u0026#34;); // Ingresa aquí el documento de identificación asociado a la tarjeta. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // -- Todos los parámetros que siguen son opcionales. -- // Ingresa aquí la primera parte de la dirección. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Calle 5476\u0026#34;); // Ingresa aquí la segunda parte de la dirección (si aplica). parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;123\u0026#34;); // Ingresa aquí la tercera parte de la dirección (si aplica). parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;patio trasero\u0026#34;); // Ingresa aquí el departamento. parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); // Ingresa aquí la ciudad. parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C.\u0026#34;); // Ingresa aquí el país. parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, PaymentCountry.CO.name()); // Ingresa aquí el código postal. parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // Ingresa aquí el teléfono. parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); PaymentPlanCreditCard response = PayUCreditCard.update(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el identificador del token de la tarjeta. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;6f5f32d9-9c6f-4d57-97d7-68cde86f9266\u0026#34;, // Ingresa aquí el nombre del cliente \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito en formato AAAA/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2018/01\u0026#34;, // Ingresa aquí el documento de identificación asociado a la tarjeta \tPayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPCIONAL) Ingresa aquí el documento de identificación del pagador \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;101010123\u0026#34;, // (OPCIONAL) Ingresa aquí la primera línea de la dirección del pagador \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Street 93B\u0026#34;, // (OPCIONAL) Ingresa aquí la segunda línea de la dirección del pagador \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPCIONAL) Ingresa aquí la tercera línea de la dirección del pagador \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Office 301\u0026#34;, // (OPCIONAL) Ingresa aquí la ciudad de la dirección del pagador \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Bogotá\u0026#34;, // (OPCIONAL) Ingresa aquí el estado o departamento de la dirección del pagador \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C.\u0026#34;, // (OPCIONAL) Ingresa aquí el código del país de la dirección del pagador \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPCIONAL) Ingresa aquí el código postal de la dirección del pagador \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPCIONAL) Ingresa aquí el número telefónico del pagador \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34; ); $response= PayUCreditCards::update($parameters); if($response){ }    Consulta  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador del token de la tarjeta. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;25181bb1-b07f-4b9b-ae5d-6b13436c706d\u0026#34;); PaymentPlanCreditCard response = PayUCreditCard.find(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el identificador del token de la tarjeta. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;6f5f32d9-9c6f-4d57-97d7-68cde86f9266\u0026#34; ); $response = PayUCreditCards::find($parameters); if($response){ $response-\u0026gt;token; $response-\u0026gt;number; $response-\u0026gt;type; $response-\u0026gt;name; $response-\u0026gt;document; $address=$response-\u0026gt;address; $address-\u0026gt;line1; $address-\u0026gt;line2; $address-\u0026gt;line3; $address-\u0026gt;city; $address-\u0026gt;state; $address-\u0026gt;country; $address-\u0026gt;postalCode; $address-\u0026gt;phone; }    Eliminación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador del token de la tarjeta. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;25181bb1-b07f-4b9b-ae5d-6b13436c706d\u0026#34;); // Ingresa aquí el Id del cliente parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;17ylzjz6bxz\u0026#34;); boolean response = PayUCreditCard.delete(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el identificador del token de la tarjeta. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;6f5f32d9-9c6f-4d57-97d7-68cde86f9266\u0026#34;, // Ingresa aquí el identificador del cliente, \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;6eb24tzp40\u0026#34; ); $response = PayUCreditCards::delete($parameters); if($response){ }    4. Suscripción Una suscripción es la relación entre un plan de pagos, un pagador y una tarjeta de crédito y es el elemento con el que se controla la ejecución de los cobros correspondientes.\nSe encuentran disponibles las siguientes operaciones:\n    URL Métodos Descripción     /rest/v4.9/subscriptions/ POST Creación de una nueva suscripción de un cliente a un plan.   /rest/v4.9/subscriptions/{subscriptionId} PUT Actualizar la información asociada a la suscripción indicada. En este momento sólo es posible actualizar el token de la tarjeta de crédito a la cual se realiza el cargo de la suscripción.\n{subscriptionId}: Identificación de la suscripción   /rest/v4.9/subscriptions/{subscriptionId} GET Consultar la información básica asociada a la suscripción indicada.\n{subscriptionId}: Identificación de la suscripción   /rest/v4.9/subscriptions/{subscriptionId} DELETE Eliminar la suscripción, es decir la relación del cliente al plan.\n{subscriptionId}: Identificación de la suscripción    Creación  Con todos los elementos nuevos  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el número de cuotas a pagar. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí la cantidad de días de prueba parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); // -- Parámetros del cliente -- // Ingresa aquí el nombre del cliente parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Pedro Perez\u0026#34;); // Ingresa aquí el email del cliente parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;pperezz@payulatam.com\u0026#34;); // -- Parámetros de la tarjeta de crédito -- // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Sample User Name\u0026#34;); // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4242424242424242\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito en formato AAAA/MM parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2018/01\u0026#34;); // Ingresa aquí el nombre de la franquicia de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el documento de identificación asociado a la tarjeta. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // (OPCIONAL) Ingresa aquí el documento de identificación del pagador parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;1020304050\u0026#34;); // (OPCIONAL) Ingresa aquí la primera línea de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Address Name\u0026#34;); // (OPCIONAL) Ingresa aquí la segunda línea de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;17 25\u0026#34;); // (OPCIONAL) Ingresa aquí la tercera línea de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;Of 301\u0026#34;); // (OPCIONAL) Ingresa aquí la ciudad de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;City Name\u0026#34;); // (OPCIONAL) Ingresa aquí el estado o departamento de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;State Name\u0026#34;); // (OPCIONAL) Ingresa aquí el código del país de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); // (OPCIONAL) Ingresa aquí el código postal de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // (OPCIONAL) Ingresa aquí el número telefónico del pagador parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); // -- Parámetros del plan -- // Ingresa aquí la descripción del plan parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Sample Plan 001\u0026#34;); // Ingresa aquí el código de identificación para el plan parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); // Ingresa aquí el intervalo del plan parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Ingresa aquí la cantidad de intervalos parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;1\u0026#34;); // Ingresa aquí la moneda para el plan parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Ingresa aquí el valor del plan parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;10000\u0026#34;); //(OPCIONAL) Ingresa aquí el valor del impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;1600\u0026#34;); //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;8400\u0026#34;); // Ingresa aquí la cuenta Id del plan parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Ingresa aquí el intervalo de reintentos parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;1\u0026#34;); // Ingresa aquí la cantidad de cobros que componen el plan parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;12\u0026#34;); // Ingresa aquí la cantidad total de reintentos para cada pago rechazado de la suscripción parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENT_ATTEMPTS, \u0026#34;3\u0026#34;); // Ingresa aquí la cantidad máxima de pagos pendientes que puede tener una suscripción antes de ser cancelada. parameters.put(PayU.PARAMETERS.PLAN_MAX_PENDING_PAYMENTS, \u0026#34;1\u0026#34;); // Ingresa aquí la cantidad de días de prueba de la suscripción. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;30\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); response.getCustomer().getId(); response.getCreditCardToken(); }   Ejemplo petición:\n$parameters = array( // Ingresa aquí el número de cuotas a pagar. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de días de prueba \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, // -- Parámetros del cliente -- \t// Ingresa aquí el nombre del cliente \tPayUParameters::CUSTOMER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Ingresa aquí el email del cliente \tPayUParameters::CUSTOMER_EMAIL =\u0026gt; \u0026#34;pperezz@payulatam.com\u0026#34;, // -- Parámetros de la tarjeta de crédito -- \t// Ingresa aquí el nombre del pagador. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Sample User Name\u0026#34;, // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4242424242424242\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito en formato AAAA/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2014/12\u0026#34;, // Ingresa aquí el nombre de la franquicia de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el documento de identificación asociado a la tarjeta  PayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPCIONAL) Ingresa aquí el documento de identificación del pagador \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPCIONAL) Ingresa aquí la primera línea de la dirección del pagador \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Address Name\u0026#34;, // (OPCIONAL) Ingresa aquí la segunda línea de la dirección del pagador \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPCIONAL) Ingresa aquí la tercera línea de la dirección del pagador \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Of 301\u0026#34;, // (OPCIONAL) Ingresa aquí la ciudad de la dirección del pagador \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;City Name\u0026#34;, // (OPCIONAL) Ingresa aquí el estado o departamento de la dirección del pagador \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;State Name\u0026#34;, // (OPCIONAL) Ingresa aquí el código del país de la dirección del pagador \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPCIONAL) Ingresa aquí el código postal de la dirección del pagador \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPCIONAL) Ingresa aquí el número telefónico del pagador \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34;, // -- Parámetros del plan -- \t// Ingresa aquí la descripción del plan \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;Sample Plan 001\u0026#34;, // Ingresa aquí el código de identificación para el plan \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Ingresa aquí el intervalo del plan \tPayUParameters::PLAN_INTERVAL =\u0026gt; \u0026#34;MONTH\u0026#34;, // Ingresa aquí la cantidad de intervalos \tPayUParameters::PLAN_INTERVAL_COUNT =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la moneda para el plan \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Ingresa aquí el valor del plan \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, //(OPCIONAL) Ingresa aquí el valor del impuesto \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;1600\u0026#34;, //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;8400\u0026#34;, // Ingresa aquí la cuenta Id del plan \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512321\u0026#34;, // Ingresa aquí el intervalo de reintentos \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de cobros que componen el plan \tPayUParameters::PLAN_MAX_PAYMENTS =\u0026gt; \u0026#34;12\u0026#34;, // Ingresa aquí la cantidad total de reintentos para cada pago rechazado de la suscripción \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Ingresa aquí la cantidad máxima de pagos pendientes que puede tener una suscripción antes de ser cancelada. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de días de prueba de la suscripción. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;30\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; $response-\u0026gt;plan-\u0026gt;id; $response-\u0026gt;customer-\u0026gt;id; }      Con todos los elementos existentes  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el código del plan a suscribirse. parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;eab38z33hh2\u0026#34;); // Ingresa aquí el identificador del token de la tarjeta. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;); // Ingresa aquí la cantidad de días de prueba de la suscripción. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); // Ingresa aquí el número de cuotas a pagar. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); }   Ejemplo petición:\n$parameters = array( // Ingresa aquí el código del plan a suscribirse. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001s\u0026#34;, // Ingresa aquí el identificador del pagador. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;f03612gyte\u0026#34;, // Ingresa aquí el identificador del token de la tarjeta. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;79490437-d64a-4dc6-baeb-8d52492b0a00\u0026#34;, // Ingresa aquí la cantidad de días de prueba de la suscripción. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, // Ingresa aquí el número de cuotas a pagar. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; }      Plan y cliente ya creados, y una tarjeta nueva  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí la cantidad de días de prueba de la suscripción. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); // Ingresa aquí el número de cuotas a pagar. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el código del plan a suscribirse. parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;eab38z33hh2\u0026#34;); // -- Parámetros de la tarjeta de crédito -- // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Sample User Name\u0026#34;); // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4242424242424242\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito en formato AAAA/MM parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2018/01\u0026#34;); // Ingresa aquí el nombre de la franquicia de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el documento de identificación asociado a la tarjeta. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // (OPCIONAL) Ingresa aquí el documento de identificación del pagador parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;1020304050\u0026#34;); // (OPCIONAL) Ingresa aquí la primera línea de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Address Name\u0026#34;); // (OPCIONAL) Ingresa aquí la segunda línea de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;17 25\u0026#34;); // (OPCIONAL) Ingresa aquí la tercera línea de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;Of 301\u0026#34;); // (OPCIONAL) Ingresa aquí la ciudad de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;City Name\u0026#34;); // (OPCIONAL) Ingresa aquí el estado o departamento de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;State Name\u0026#34;); // (OPCIONAL) Ingresa aquí el código del país de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); // (OPCIONAL) Ingresa aquí el código postal de la dirección del pagador parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // (OPCIONAL) Ingresa aquí el número telefónico del pagador parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); response.getCreditCardToken(); }   Ejemplo petición:\n$parameters = array( // Ingresa aquí el número de cuotas a pagar. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de días de prueba \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, // -- Parámetros del cliente -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;f03612gyte\u0026#34;, // -- Parámetros de la tarjeta de crédito -- \t// Ingresa aquí el nombre del pagador. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Sample User Name\u0026#34;, // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4242424242424242\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito en formato AAAA/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2014/12\u0026#34;, // Ingresa aquí el nombre de la franquicia de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el documento de identificación asociado a la tarjeta  PayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPCIONAL) Ingresa aquí el documento de identificación del pagador \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPCIONAL) Ingresa aquí la primera línea de la dirección del pagador \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Address Name\u0026#34;, // (OPCIONAL) Ingresa aquí la segunda línea de la dirección del pagador \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPCIONAL) Ingresa aquí la tercera línea de la dirección del pagador \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Of 301\u0026#34;, // (OPCIONAL) Ingresa aquí la ciudad de la dirección del pagador \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;City Name\u0026#34;, // (OPCIONAL) Ingresa aquí el estado o departamento de la dirección del pagador \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;State Name\u0026#34;, // (OPCIONAL) Ingresa aquí el código del país de la dirección del pagador \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPCIONAL) Ingresa aquí el código postal de la dirección del pagador \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPCIONAL) Ingresa aquí el número telefónico del pagador \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34;, // -- Parámetros del plan -- \t// Ingresa aquí el código del plan a suscribirse. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; }      Cliente y tarjeta ya creados, y con plan nuevo  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el número de cuotas a pagar. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí la cantidad de días de prueba parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;eab38z33hh2\u0026#34;); // Ingresa aquí el identificador del token de la tarjeta. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;); // -- Parámetros del plan -- // Ingresa aquí la descripción del plan parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Sample Plan 001\u0026#34;); // Ingresa aquí el código de identificación para el plan parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); // Ingresa aquí el intervalo del plan parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Ingresa aquí la cantidad de intervalos parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;1\u0026#34;); // Ingresa aquí la moneda para el plan parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Ingresa aquí el valor del plan parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;10000\u0026#34;); //(OPCIONAL) Ingresa aquí el valor del impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;1600\u0026#34;); //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;8400\u0026#34;); // Ingresa aquí la cuenta Id del plan parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Ingresa aquí el intervalo de reintentos parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;1\u0026#34;); // Ingresa aquí la cantidad de cobros que componen el plan parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;12\u0026#34;); // Ingresa aquí la cantidad total de reintentos para cada pago rechazado de la suscripción parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENT_ATTEMPTS, \u0026#34;3\u0026#34;); // Ingresa aquí la cantidad máxima de pagos pendientes que puede tener una suscripción antes de ser cancelada. parameters.put(PayU.PARAMETERS.PLAN_MAX_PENDING_PAYMENTS, \u0026#34;1\u0026#34;); // Ingresa aquí la cantidad de días de prueba de la suscripción. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;30\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); }   Ejemplo petición:\n$parameters = array( // Ingresa aquí el número de cuotas a pagar. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de días de prueba \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, // -- Parámetros de la tarjeta de crédito -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;5131879lzbx\u0026#34;, // Ingresa aquí el identificador del token de la tarjeta. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;158e5bed-1e76-4bb2-83c2-97dc9bb1522d\u0026#34;, // -- Parámetros del plan -- \t// Ingresa aquí la descripción del plan \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;Sample Plan 001\u0026#34;, // Ingresa aquí el código de identificación para el plan \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Ingresa aquí el intervalo del plan \tPayUParameters::PLAN_INTERVAL =\u0026gt; \u0026#34;MONTH\u0026#34;, // Ingresa aquí la cantidad de intervalos \tPayUParameters::PLAN_INTERVAL_COUNT =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la moneda para el plan \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Ingresa aquí el valor del plan \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, //(OPCIONAL) Ingresa aquí el valor del impuesto \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;1600\u0026#34;, //(OPCIONAL) Ingresa aquí la base de devolución sobre el impuesto \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;8400\u0026#34;, // Ingresa aquí la cuenta Id del plan \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512321\u0026#34;, // Ingresa aquí el intervalo de reintentos \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de cobros que componen el plan \tPayUParameters::PLAN_MAX_PAYMENTS =\u0026gt; \u0026#34;12\u0026#34;, // Ingresa aquí la cantidad total de reintentos para cada pago rechazado de la suscripción \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Ingresa aquí la cantidad máxima de pagos pendientes que puede tener una suscripción antes de ser cancelada. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí la cantidad de días de prueba de la suscripción. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;30\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; $response-\u0026gt;plan-\u0026gt;id; }     Actualización (Tarjeta de crédito de una suscripción)  SDK Java   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el ID de la suscripción. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;320756yk1x0\u0026#34;); // Ingresa aquí el identificador del token de la tarjeta. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;); Subscription response = PayUSubscription.update(parameters); if(response!=null){ }    Consulta  SDK Java   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el ID de la suscripción. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;320756yk1x0\u0026#34;); Subscription response = PayUSubscription.find(parameters); if(response!=null){ response.getCreditCardToken(); response.getCustomer(); }    Eliminación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identifcador de la subscripción. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;123\u0026#34;); boolean response = PayUSubscription.cancel(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Ejemplo petición:\n$parameters = array( // Ingresa aquí el ID de la suscripción. \tPayUParameters::SUBSCRIPTION_ID =\u0026gt; \u0026#34;03e481u9l13\u0026#34;, ); $response = PayUSubscriptions::cancel($parameters); if($response){ }    5. Cargos adicionales Un cargo puede ser un cobro adicional o un descuento realizado sobre el valor de uno de los pagos que conforman el plan de pagos recurrentes. Estos solo afectan el siguiente cobro pendiente y se ejecutan una única vez.\nSe encuentran disponibles las siguientes operaciones:\n    URL Métodos Descripción     /rest/v4.9/subscriptions/{subscriptionId}/recurringBillItems POST Adiciona cargos extras a la factura correspondiente al periodo actual.\n{subscriptionId}: Identificación de la suscripción   /rest/v4.9/recurringBillItems/{recurringBillItemId} PUT Actualiza la información del cargo extra de una factura\n{recurringBillItemId}: Identificador del cargo extra   /rest/v4.9/recurringBillItems/{recurringBillItemId} GET Consulta la información del cargo extra de una factura a partir de su identificador.\n{recurringBillItemId}: Identificador del cargo extra   /rest/v4.9/recurringBillItems/{recurringBillItemId} DELETE Eliminar un cargo extra de una factura\n{recurringBillItemId}: Identificador del cargo extra   /rest/v4.9/recurringBillItems/ GET Consulta de los cargos extras de las facturas del comercio que cumplen con los filtros estipulados. Los filtros disponibles se muestra a continuación y deben ser enviados como named parameters dentro de la URL:\n{subscriptionId}: Identificación de la suscripción\n{description}: Descripción ingresada en el cargo extra    Creación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Descripción del item parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;Cargo extra de prueba\u0026#34;); //Valor del item parameters.put(PayU.PARAMETERS.ITEM_VALUE, \u0026#34;20000\u0026#34;); //Moneda parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;COP\u0026#34;); //Identificador de la subscripción parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;52b04sx2s6\u0026#34;); //Impuestos - opcional parameters.put(PayU.PARAMETERS.ITEM_TAX, \u0026#34;0\u0026#34;); //Base de devolución - opcional parameters.put(PayU.PARAMETERS.ITEM_TAX_RETURN_BASE, \u0026#34;0\u0026#34;); RecurringBillItem response = PayURecurringBillItem.create(parameters); if(response!=null){ response.getId(); }   Ejemplo petición:\n$parameters = array( //Descripción del item \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;Cargo extra de prueba\u0026#34;, //Valor del item \tPayUParameters::ITEM_VALUE =\u0026gt; \u0026#34;20000\u0026#34;, //Moneda \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, //Identificador de la subscripción \tPayUParameters::SUBSCRIPTION_ID =\u0026gt; \u0026#34;a9d01imeihk\u0026#34;, //Impuestos - opcional \tPayUParameters::ITEM_TAX =\u0026gt; \u0026#34;0\u0026#34;, //Base de devolución - opcional \tPayUParameters::ITEM_TAX_RETURN_BASE =\u0026gt; \u0026#34;0\u0026#34;, ); $response = PayURecurringBillItem::create($parameters); if($response){ $response-\u0026gt;id; }    Actualización  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Identificador del item existente parameters.put(PayU.PARAMETERS.RECURRING_BILL_ITEM_ID, \u0026#34;15tolsvwz7l\u0026#34;); //(OPCIONAL)Nuevo valor para la descripción del item existente parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;Test Item New\u0026#34;); //(OPCIONAL)Nuevo valor para el valor del item existente parameters.put(PayU.PARAMETERS.ITEM_VALUE, \u0026#34;200.5\u0026#34;); //(OPCIONAL)Nuevo valor para la moneda del item existente parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;COP\u0026#34;); //(OPCIONAL)Nuevo valor para el impuesto del item existente parameters.put(PayU.PARAMETERS.ITEM_TAX, \u0026#34;15\u0026#34;); //(OPCIONAL)Nuevo valor para la base de retorno de impuesto del item existente parameters.put(PayU.PARAMETERS.ITEM_TAX_RETURN_BASE, \u0026#34;185.5\u0026#34;); RecurringBillItem response = PayURecurringBillItem.update(parameters);   Ejemplo petición:\n$parameters = array( //Identificador del cargo extra \tPayUParameters::RECURRING_BILL_ITEM_ID =\u0026gt; \u0026#34;cbb57ywul2l\u0026#34;, //Descripción del item \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;Cargo extra de prueba\u0026#34;, //Valor del item \tPayUParameters::ITEM_VALUE =\u0026gt; \u0026#34;20000\u0026#34;, //Moneda \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, //Impuestos - opcional \tPayUParameters::ITEM_TAX =\u0026gt; \u0026#34;0\u0026#34;, //Base de devolución - opcional \tPayUParameters::ITEM_TAX_RETURN_BASE =\u0026gt; \u0026#34;0\u0026#34;, ); $response = PayURecurringBillItem::update($parameters); if($response){ }    Consulta (Por id del cargo adicional)  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Identificador del cargo extra parameters.put(PayU.PARAMETERS.RECURRING_BILL_ITEM_ID, \u0026#34;5e174m7lgns\u0026#34;); RecurringBillItem response = PayURecurringBillItem.find(parameters); if(response!=null){ }   Ejemplo petición:\n$parameters = array( //Identificador del cargo extra \tPayUParameters::RECURRING_BILL_ITEM_ID =\u0026gt; \u0026#34;cbb57ywul2l\u0026#34;, ); $response = PayURecurringBillItem::find($parameters); if($response){ $response-\u0026gt;description; $response-\u0026gt;subscriptionId; $response-\u0026gt;recurringBillId; }    Eliminación  SDK Java SDK PHP   Ejemplo petición:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Identificador del item existente parameters.put(PayU.PARAMETERS.RECURRING_BILL_ITEM_ID, \u0026#34;15tolsvwz7l\u0026#34;); boolean response = PayURecurringBillItem.delete(parameters);   Ejemplo petición:\n$parameters = array( //Identificador del cargo extra \tPayUParameters::RECURRING_BILL_ITEM_ID =\u0026gt; \u0026#34;228bdp236sy\u0026#34;, ); $response = PayURecurringBillItem::delete($parameters); if($response){ }    ","excerpt":"/* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* …","ref":"/es/deprecated/recurring-payments/recurring-payments-sdk.html","title":"Pagos recurrentes - SDK"},{"body":" /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ animation: animatetop 0.4s; } /* Modal Content/Box */ .modal-content { background-color: #fefefe; margin: 15% auto; /* 15% from the top and centered */ border: 1px solid #888; width: 50%; /* Could be more or less, depending on screen size */ } /* The Close Button */ .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; } .header { color: white; background-color: #ED6A5A; padding: 15px; }  Deprecated feature\n\u0026times;  Recurring Payments feature has been deprecated. Therefore, it is not longer offered to new or existing merchants. The following topic is available as a reference for merchants who still have it enabled.\nThis feature WILL NOT be activated again.\n   // Get the modal var modal = document.getElementById(\"myModal\"); // Get the  element that closes the modal var span = document.getElementsByClassName(\"close\")[0]; var toc = document.getElementById(\"td-section-nav\"); // When the page loads, open the modal window.onload = function() { modal.style.display = \"block\"; toc.style['pointer-events'] = 'none'; toc.style.backgroundColor = \"rgba(0,0,0,-0.6)\"; } // When the user clicks on  (x), close the modal span.onclick = function() { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if ((event.target == modal) || (event.target.id == \"td-sidebar-menu\")) { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } }  ","excerpt":"/* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* …","ref":"/en/deprecated/recurring-payments.html","title":"Recurring payments"},{"body":" /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ animation: animatetop 0.4s; } /* Modal Content/Box */ .modal-content { background-color: #fefefe; margin: 15% auto; /* 15% from the top and centered */ border: 1px solid #888; width: 50%; /* Could be more or less, depending on screen size */ } /* The Close Button */ .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; } .header { color: white; background-color: #ED6A5A; padding: 15px; }  Deprecated feature\n\u0026times;  Recurring Payments feature has been deprecated. Therefore, it is not longer offered to new or existing merchants. The following topic is available as a reference for merchants who still have it enabled.\nThis feature WILL NOT be activated again.\n   // Get the modal var modal = document.getElementById(\"myModal\"); // Get the  element that closes the modal var span = document.getElementsByClassName(\"close\")[0]; var toc = document.getElementById(\"td-section-nav\"); // When the page loads, open the modal window.onload = function() { modal.style.display = \"block\"; toc.style['pointer-events'] = 'none'; toc.style.backgroundColor = \"rgba(0,0,0,-0.6)\"; } // When the user clicks on  (x), close the modal span.onclick = function() { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if ((event.target == modal) || (event.target.id == \"td-sidebar-menu\")) { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } }  Note Recurring payments has been deprecated and it is not offered for commerces.  How does it work? Consider Recurring payments is only available for accounts in Brazil, Colombia, Peru, and Mexico.  To ensure proper use of the system, all requests must contain the HTTP authorization header with the shop’s credentials, so that it can be identified who is making the request. For this implementation basic authorization will be used, where the username (API Login) and password (API Key) are sent.\nThese are the data to be sent in the header of the request: The data pass an encrypted base 64 with the format: API Login : API Key\nFor example, if the API Login is 0123ABCDEF and the API Key is A1B2C3D4E5, then the Authorization header would be:\nAuthorization: Basic \u0026lt;base64 of 0123ABCDEF:A1B2C3D4E5\u0026gt; Authorization: Basic MDEyM0FCQ0RFRjpBMUIyQzNENEU1\nPOST /payments-api/4.0/service.cgi HTTP/1.1 Host: sandbox.api.payulatam.com Content-Type: application/json; charset=utf-8 Accept: application/json Accept-language: es Content-Length: length Authorization: Basic MDEyM0FCQ0RFRjpBMUIyQzNENEU1 \nPointing to the relevant URLs:\nAPI  Test: https://sandbox.api.payulatam.com/payments-api/ Production: https://api.payulatam.com/payments-api/   The available methods for recurring payments are: PLAN, CUSTOMER, CREDIT CARD, SUBSCRIPTION and ADDITIONAL CHARGES. Below is a description of each.\n1. Plan  Variables used for the creation of a plan     Field name Format Size Description Mandatory     planCode Alphanumeric Min: 1 Max: 255 Unique code assigned by the merchant to the plan in order to identify it. All countries   description Alphanumeric Min: 1 Max: 255 Plan description. All countries   accountId Numeric  The identifier of the account to which the plan will be associated. All countries   interval Alphanumeric Min: 3 Max: 5 Interval that defines how often the subscription payment is performed. The possible values are: DAY, WEEK, MONTH, and YEAR. All countries   intervalCount Numeric  Interval count that defines how often the subscription payment is performed. All countries   maxPaymentsAllowed Numeric  Total amount of payments for the subscription. All countries   maxPaymentAttempts Numeric Max: 3 Total amount of payment attempts performed when a subscription payment is declined. No   paymentAttemptsDelay Numeric  Total amount of waiting days between the payment attempts of the subscription. All countries   maxPendingPayments Numeric  Total amount of pending payments that a subscription can have before it is cancelled. No   trialDays Numeric  Total amount of trial days of the subscription. No   additionalValues.entry.name Alphanumeric Min: 1 Max: 255 The type of amount associated to the plan. The possible values are:\nPLAN_VALUE: total value of the plan.PLAN_TAX_VALUE: tax value associated to the value of the plan.PLAN_TAX_RETURN_BASE: tax return base value associated to the value of the plan. A node for each type. All countries   additionalValues.entry.value Numeric 19, 2 Plan value, tax or tax return base according to the additionalValue.entry.name. All countries   additionalValues.entry.currency Alphanumeric 3 The ISO currency code associated with the amount. See Accepted currencies. All countries     Using this feature you can register a recurring plan and thus get its identifier.\nThe following operations are available:\n    URL Method Description     /rest/v4.3/plans POST Creating a new plan for subscriptions associated with the merchant.   /rest/v4.3/plans/{planCode} PUT Update information about a plan for subscriptions.\n{planCode}: Plan’s identification code for the merchant.   /rest/v4.3/plans/{planCode} GET Check all the information of a plan for subscriptions associated with the merchant.\n{planCode}: Plan’s identification code for the merchant   /rest/v4.3/plans/{planCode} DELETE Delete an entire subscription plan associated with the merchant.\n{planCode}: Plan’s identification code for the merchant.    Creation  JSON XML   Request body:\n{ \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;1600\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;8400\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;b3d406d0-abd4-473c-a557-25aa81ff9032\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: 12, \u0026#34;maxPaymentAttempts\u0026#34;: 0, \u0026#34;paymentAttemptsDelay\u0026#34;: 1, \u0026#34;maxPendingPayments\u0026#34;: 0, \u0026#34;trialDays\u0026#34;: 0, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }   Request body:\n\u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;maxPendingPayments\u0026gt;0\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \nResponse body:\n\u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;0b63bd6d-9a2b-4c40-a314-a70a6bae27e3\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;0\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt;    Update  JSON XML   Request body:\n{ \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;maxPendingPayments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPaymentAttempts\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;10000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: 12, \u0026#34;maxPaymentAttempts\u0026#34;: 1, \u0026#34;paymentAttemptsDelay\u0026#34;: 3, \u0026#34;maxPendingPayments\u0026#34;: 1, \u0026#34;trialDays\u0026#34;: 0, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }   Request body:\n\u0026lt;plan\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \nResponse body:\n\u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;trialDays\u0026gt;0\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt;    Query  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/plans/sample-plan-code-001 \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;2a852bf2-ce67-4920-b9a6-66af2c68b4ae\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: 1, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: 12, \u0026#34;maxPaymentAttempts\u0026#34;: 3, \u0026#34;paymentAttemptsDelay\u0026#34;: 1, \u0026#34;maxPendingPayments\u0026#34;: 0, \u0026#34;trialDays\u0026#34;: 30, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/plans/sample-plan-code-001 \nResponse body:\n\u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;2a852bf2-ce67-4920-b9a6-66af2c68b4ae\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;1\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;0\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt;    Deletion  JSON / XML   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/plans/sample-plan-code-001 \nResponse body:\nHTTP STATUS: 200 OK    2. Customer  Variables used for the creation of a customer     Field name Format Size Description Mandatory     fullName Alphanumeric Max: 255 Customer\u0026rsquo;s complete name. All countries   email Alphanumeric Max: 255 Customer\u0026rsquo;s email address. All countries     A customer is the unit that identifies who will be the beneficiary of a provided product or service and who is associated with a recurring payment plan.\nThe following operations are available:\n    URL Method Description     /rest/v4.3/customers/ POST Creation of a customer in the system.   /rest/v4.3/customers/{customerId} PUT Updates the customer’s information in the system.\n{customerId}: Identifier of the client to be updated.   /rest/v4.3/customers/{customerId} GET Queries the information related to the customer.\n{customerId}: Identifier of the client from which you want to find the associated information.   /rest/v4.3/customers/{customerId} DELETE Removes a user from the system.\n{customerId}: Identifier of the client to be deleted.    Creation  JSON XML   Request body:\n{ \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;6ahxar252\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; }   Request body:\n\u0026lt;customer\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt; \nResponse body:\n\u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;6ahxar252\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Pérez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt;    Update  JSON XML   Request body:\n{ \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;6ahxar252\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro E. Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34; }   Request body:\n\u0026lt;customer\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt; \nResponse body:\n\u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;6ahxar252\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro E. Pérez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;/customer\u0026gt;    Query  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;2mkls9xekm\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;da2224a9-58b7-482a-9866-199de911c23f\u0026#34;, \u0026#34;customerId\u0026#34;: \u0026#34;2mkls9xekm\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;************4242\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Usuario Prueba\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Street 93B\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Office 301\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogota\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } ], \u0026#34;subscriptions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;2mlhk3qxji\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: \u0026#34;2013-08-30T10:46:41.477-05:00\u0026#34;, \u0026#34;currentPeriodEnd\u0026#34;: \u0026#34;2013-09-29T10:46:41.477-05:00\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;414215a2-c990-4525-ba84-072181988d09\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;PLAN-REST-16\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Plan rest test\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nResponse body:\n\u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;2mkls9xekm\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperez@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;da2224a9-58b7-482a-9866-199de911c23f\u0026lt;/token\u0026gt; \u0026lt;customerId\u0026gt;2mkls9xekm\u0026lt;/customerId\u0026gt; \u0026lt;number\u0026gt;************4242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Usuario Prueba\u0026lt;/name\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Calle 93B\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Oficina 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;Bogota\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;subscriptions\u0026gt; \u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;2mlhk3qxji\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2013-08-30T10:46:41.477-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2013-09-29T10:46:41.477-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;414215a2-c990-4525-ba84-072181988d09\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;PLAN-REST-16\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Plan rest test\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;1\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \u0026lt;/subscriptions\u0026gt; \u0026lt;/customer\u0026gt;    Deletion  JSON XML   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/7wp1r0atl \nResponse body:\n{ \u0026#34;description\u0026#34;: \u0026#34;El cliente [7wp1r0atl] ha sido eliminado.\u0026#34; }   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/7wp1r0atl \nResponse body:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;El cliente [7wp1r0atl] ha sido eliminado\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    3. Credit card  Variables used for the creation of a credit card     Field name Format Size Description Mandatory     number Numeric Min: 13 Max: 20 Credit card number. All countries   name Alphanumeric Min: 1 Max: 255 Full name of the credit card holder as shown in the credit card. All countries   document Alphanumeric Min: 5 Max: 30 Identification number of the credit card holder. All countries   expMonth Numeric Min: 1 Max: 12 Credit card’s expiration month. All countries   expYear Numeric Min: 00 Max: 2999 Credit card’s expiration year. If it is a two digit value, it represents the years between 2000 (00) and 2099 (99). It the value has more than two digits it is used literally, being 2000 the minimum value. All countries   type Alphanumeric  The franchise or credit card type. See Payment method. All countries   address   Credit card holder\u0026rsquo;s billing address, associated to the credit card. All countries   address.line1 Alphanumeric Min: 1 Max: 100 First line of the address. All countries   address.line2 Alphanumeric Min: 1 Max: 100 Second line of the address or street number. No   address.line3 Alphanumeric Min: 1 Max: 100 Third line of the address. No   address.city Alphanumeric Min: 1 Max: 50 City. All countries   address.state Alphanumeric Min: 1 Max: 40 State or department. *For Brazil send only 2 characters. Example: For Sao Paulo, send SP. Brazil   address.country Alphanumeric 2 Country of the address in format ISO 3166 Alfa 2 code. All countries   address.postalCode Alphanumeric Min: 1 Max: 20 Postal code of the address. *For Brazil use the format XXXXX-XXX or XXXXXXXX, for example: 09210-710 o 09210710. Mexico, Brazil   address.phone Alphanumeric Min: 1 Max: 20 Phone associated to the address. *For Brazil use the format ddd(2)+number(7-9), for example: (11)756312633. All countries     It is the payment method that relates a customer to a plan. It is composed of the credit card number (that will be tokenized to store data securely), the expiration date of the card and some additional address data.\nThe following operations are available:\n    URL Method Description     /rest/v4.3/customers/{customerID}/creditCards POST Creating a credit card (Token) and assigning it to a user.\n{customerId}: Identifier of the client with whom you are going to associate the token with.   /rest/v4.3/creditCards/{creditCardId} PUT Update a token’s information.\n{creditCardId}: Identifier of the token to be updated.   /rest/v4.3/creditCards/{creditCardId} GET Check the information of a credit card (Token) data identifier.\n{creditCardId}: Credit Card Token you want to consult.   /rest/v4.3/customers/{customerID}/creditCards/{creditCardId} DELETE Delete a credit card (Token) associated with a user.\n{customerId}: Identifier of the client of whom you are going to delete the token.\n{creditCardId}: Identifier of the token to be deleted.    Creation  JSON XML   Request body:\n{ \u0026#34;name\u0026#34;: \u0026#34;Sample User Name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;1020304050\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4242424242424242\u0026#34;, \u0026#34;expMonth\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } \nResponse body:\n{ \u0026#34;token\u0026#34;: \u0026#34;8186ca42-2f69-417b-94a0-208bd8e089af\u0026#34; }   Request body:\n\u0026lt;creditCard\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;document\u0026gt;1020304050\u0026lt;/document\u0026gt; \u0026lt;number\u0026gt;4242424242424242\u0026lt;/number\u0026gt; \u0026lt;expMonth\u0026gt;01\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2018\u0026lt;/expYear\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \nResponse body:\n\u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;8186ca42-2f69-417b-94a0-208bd8e089af\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt;    Update  JSON XML   Request body:\n{ \u0026#34;expMonth\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2016\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sample user name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;65858645\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Sample Address\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;Cll 93 B\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Ofic. 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;city\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;state\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;2266758\u0026#34; } } \nResponse body:\n{ \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;, \u0026#34;customerId\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sample user name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;65858645\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Sample Address\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;Cll 93 B\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Ofic. 301\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;city\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;state\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;2266758\u0026#34; } }   Request body:\n\u0026lt;creditCard\u0026gt; \u0026lt;expMonth\u0026gt;12\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2016\u0026lt;/expYear\u0026gt; \u0026lt;name\u0026gt;Sample user name\u0026lt;/name\u0026gt; \u0026lt;document\u0026gt;65858645\u0026lt;/document\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Sample Address\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;Cll 93 B\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Ofic. 301\u0026lt;/line3\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;city\u0026gt;city\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;state\u0026gt;state\u0026lt;/state\u0026gt; \u0026lt;phone\u0026gt;2266758\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \nResponse body:\n\u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;customerId\u0026gt;eab38z33hh2\u0026lt;/customerId\u0026gt; \u0026lt;number\u0026gt;424242******4242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample user names\u0026lt;/name\u0026gt; \u0026lt;document\u0026gt;65858645\u0026lt;/document\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Sample Addresss\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;Cll 93 B\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Ofic. 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;city\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;state\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;2266758\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt;    Query  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nResponse body:\n{ \u0026#34;token\u0026#34;: \u0026#34;256f8e39-e37c-4ff3-9b5f-63937ee5c69c\u0026#34;, \u0026#34;customerId\u0026#34;: \u0026#34;5whjhimjtpn\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Sample User Name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;1020304050\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/customers/2mkls9xekm \nResponse body:\n\u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;8186ca42-2f69-417b-94a0-208bd8e089af\u0026lt;/token\u0026gt; \u0026lt;customerId\u0026gt;11sgnt8s19\u0026lt;/customerId\u0026gt; \u0026lt;number\u0026gt;************4242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt;    Deletion  JSON XML   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/{customerID}/creditCards/{creditCardId} \nResponse body:\n{ \u0026#34;description\u0026#34;: \u0026#34;La tarjeta de crédito f17e9c5c-c414-4dc0-a145-5b0647f7dbf8 se ha eliminado exitosamente\u0026#34; }   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/customers/{customerID}/creditCards/{creditCardId} \nResponse body:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;La tarjeta de crédito f17e9c5c-c414-4dc0-a145-5b0647f7dbf8 se ha eliminado exitosamente\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    4. Subscription  Variables used for the creation of a subscription     Field name Format Size Description Mandatory     quantity Numeric  Total amount of plans that will be acquired with the subscription. No   installments Numeric  Total amount of installments to defer the payment. No   trialDays Numeric  Total amount of trial days of the subscription. This variable has preference over the plan\u0026rsquo;s trial days. No   customer   Customer that will be associated to the subscription. You can find more information in the \u0026ldquo;Customer\u0026rdquo; section of this page. All countries   customer.creditCards   Customer\u0026rsquo;s credit card that is selected to make the payment. You can find more information in the \u0026ldquo;Credit card\u0026rdquo; section of this page. All countries   plan   Plan that will be associated to the subscription. You can find more information in the \u0026ldquo;Plan\u0026rdquo; section of this page. All countries     A subscription is the relationship between a payment plan, a payer and a credit card. It is the element that controls the execution of the respective collections.\nThe following operations are available:\n    URL Methods Description     /rest/v4.3/subscriptions/ POST Creating a new subscription of a client to a plan.   /rest/v4.3/subscriptions/{subscriptionId} PUT Update information associated with the specified subscription. At the moment it is only possible to update the token of the credit card to which the charge of the subscription is made.\n{subscriptionId}: Identification of the subscription.   /rest/v4.3/subscriptions/{subscriptionId} GET Check the basic information associated with the specified subscription.\n{subscriptionId}: Identification of the subscription.   /rest/v4.3/subscriptions/{subscriptionId} DELETE Unsubscribe, delete the relationship of the customer with the plan.\n{subscriptionId}: Identification of the subscription.    Creation  With all new items  JSON XML   Request body:\n{ \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;101010123\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4242424242424242\u0026#34;, \u0026#34;expMonth\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;maxPaymentAttempts\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPendingPayments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;563cbd0o54z\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;145ad747-adeb-43db-80c0-447c8f7ad8b4\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;a39e3zvsru6\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;7b6d637a-6252-47ee-8d3b-ed91807b3146\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1402203600000, \u0026#34;currentPeriodEnd\u0026#34;: 1404795599000 }   Request body:\n\u0026lt;subscription\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4242424242424242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;expMonth\u0026gt;1\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2018\u0026lt;/expYear\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nResponse body:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;26fb7yxfej0\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;047dbnhsnx9\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;daedc017-bd7d-4887-87b4-13913650c952\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;77e57940-e149-4f77-a190-271caa7ccb7b\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;      With all existing elements  JSON XML   Request body:\n{ \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34; } } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;fb6d0m9nqb8\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperez@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: 1, \u0026#34;installments\u0026#34;: 1, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1397192400000, \u0026#34;currentPeriodEnd\u0026#34;: 1428728399000 }   Request body:\n\u0026lt;subscription\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;trialDays\u0026gt;10\u0026lt;/trialDays\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nResponse body:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;fb6d0m9nqb8\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-03T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-02T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;      With plan and client already created, and a new card  JSON XML   Request body:\n{ \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Sample User Name\u0026#34;, \u0026#34;document\u0026#34;: \u0026#34;101010123\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4242424242424242\u0026#34;, \u0026#34;expMonth\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;expYear\u0026#34;: \u0026#34;2018\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;line1\u0026#34;: \u0026#34;Address Name\u0026#34;, \u0026#34;line2\u0026#34;: \u0026#34;17 25\u0026#34;, \u0026#34;line3\u0026#34;: \u0026#34;Of 301\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;00000\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;City Name\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;State Name\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;300300300\u0026#34; } } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34; } } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;c50d94ge25d\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;New Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperezz@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;508a715f-2feb-46ba-8945-c948821f080e\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1401771600000, \u0026#34;currentPeriodEnd\u0026#34;: 1404363599000 }   Request body:\n\u0026lt;subscription\u0026gt; \u0026lt;trialDays\u0026gt;10\u0026lt;/trialDays\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4242424242424242\u0026lt;/number\u0026gt; \u0026lt;name\u0026gt;Sample User Name\u0026lt;/name\u0026gt; \u0026lt;expMonth\u0026gt;1\u0026lt;/expMonth\u0026gt; \u0026lt;expYear\u0026gt;2018\u0026lt;/expYear\u0026gt; \u0026lt;type\u0026gt;VISA\u0026lt;/type\u0026gt; \u0026lt;address\u0026gt; \u0026lt;line1\u0026gt;Address Name\u0026lt;/line1\u0026gt; \u0026lt;line2\u0026gt;17 25\u0026lt;/line2\u0026gt; \u0026lt;line3\u0026gt;Of 301\u0026lt;/line3\u0026gt; \u0026lt;city\u0026gt;City Name\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;State Name\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;00000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;300300300\u0026lt;/phone\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nResponse body:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;40adcwryufe\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-03T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-02T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;508a715f-2feb-46ba-8945-c948821f080e\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;6b104e86-d6ca-41b5-ae39-834a55ed1565\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;New Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;      Customer and card already created, and with a new plan  JSON XML   Request body:\n{ \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;plan\u0026#34;: { \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;maxPaymentsAllowed\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;maxPaymentAttempts\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;paymentAttemptsDelay\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;maxPendingPayments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;320756yk1x0\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026#34;, \u0026#34;planCode\u0026#34;: \u0026#34;sample-plan-code-001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Sample Plan 001\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;intervalCount\u0026#34;: 1, \u0026#34;interval\u0026#34;: \u0026#34;MONTH\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 8400, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Pedro Perez\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;pperezz@payulatam.com\u0026#34;, \u0026#34;creditCards\u0026#34;: [ { \u0026#34;token\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } ] }, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1403499600000, \u0026#34;currentPeriodEnd\u0026#34;: 1406091599000 }   Request body:\n\u0026lt;subscription\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;maxPaymentsAllowed\u0026gt;12\u0026lt;/maxPaymentsAllowed\u0026gt; \u0026lt;maxPaymentAttempts\u0026gt;3\u0026lt;/maxPaymentAttempts\u0026gt; \u0026lt;maxPendingPayments\u0026gt;1\u0026lt;/maxPendingPayments\u0026gt; \u0026lt;paymentAttemptsDelay\u0026gt;1\u0026lt;/paymentAttemptsDelay\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt; \nResponse body:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;17d11h3b2xs\u0026lt;/id\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;fullName\u0026gt;Pedro Perez\u0026lt;/fullName\u0026gt; \u0026lt;email\u0026gt;pperezz@payulatam.com\u0026lt;/email\u0026gt; \u0026lt;creditCards\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;token\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/token\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;/creditCards\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;c653e0ba-e0cb-49d9-9294-1d5617be8f6c\u0026lt;/id\u0026gt; \u0026lt;planCode\u0026gt;sample-plan-code-001\u0026lt;/planCode\u0026gt; \u0026lt;description\u0026gt;Sample Plan 001\u0026lt;/description\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;intervalCount\u0026gt;1\u0026lt;/intervalCount\u0026gt; \u0026lt;interval\u0026gt;MONTH\u0026lt;/interval\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1600\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;8400\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;/subscription\u0026gt;     Update (Credit card of a subscription)  JSON XML   Request body:\n{ \u0026#34;creditCardToken\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;320756yk1x0\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026#34; }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34; }, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1403499600000, \u0026#34;currentPeriodEnd\u0026#34;: 1406091599000, \u0026#34;creditCardToken\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; }   Request body:\n\u0026lt;subscription\u0026gt; \u0026lt;creditCardToken\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/creditCardToken\u0026gt; \u0026lt;/subscription\u0026gt; \nResponse body:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;320756yk1x0\u0026lt;/id\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026lt;/id\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;creditCardToken\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/creditCardToken\u0026gt; \u0026lt;/subscription\u0026gt;    Query  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/1dhb51hfuu \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;320756yk1x0\u0026#34;, \u0026#34;plan\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026#34; }, \u0026#34;customer\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;eab38z33hh2\u0026#34; }, \u0026#34;trialDays\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;quantity\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;currentPeriodStart\u0026#34;: 1403499600000, \u0026#34;currentPeriodEnd\u0026#34;: 1406091599000, \u0026#34;creditCardToken\u0026#34;: \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34; }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/1dhb51hfuu \nResponse body:\n\u0026lt;subscription\u0026gt; \u0026lt;id\u0026gt;320756yk1x0\u0026lt;/id\u0026gt; \u0026lt;trialDays\u0026gt;30\u0026lt;/trialDays\u0026gt; \u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt; \u0026lt;installments\u0026gt;1\u0026lt;/installments\u0026gt; \u0026lt;currentPeriodStart\u0026gt;2014-06-23T00:00:00-05:00\u0026lt;/currentPeriodStart\u0026gt; \u0026lt;currentPeriodEnd\u0026gt;2014-07-22T23:59:59-05:00\u0026lt;/currentPeriodEnd\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;eab38z33hh2\u0026lt;/id\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;plan\u0026gt; \u0026lt;id\u0026gt;68ee02fa-8d1e-4bc3-88fb-b6e66586df3b\u0026lt;/id\u0026gt; \u0026lt;/plan\u0026gt; \u0026lt;creditCardToken\u0026gt;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026lt;/creditCardToken\u0026gt; \u0026lt;/subscription\u0026gt;    Deletion  JSON XML   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/3hpyu04ij \nResponse body:\n{ \u0026#34;description\u0026#34;: \u0026#34;La suscripción [3hpyu04ij] ha sido cancelada\u0026#34; }   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/subscriptions/3hpyu04ij \nResponse body:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;La suscripción [3hpyu04ij] ha sido cancelada\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    5. Additional charges  Variables used for the creation of an additional charge     Field name Format Size Description Mandatory     descripcion Alphanumeric Min: 1 Max: 255 Description of the additional charge associated to the payment. All countries   additionalValues.entry.name Alphanumeric Min: 1 Max: 255 The type of amount associated to the additional charge. The possible values are:\nITEM_VALUE: total value of the additional charge.ITEM_TAX: tax value associated to the value of the additional charge.ITEM_TAX_RETURN_BASE: tax return base value associated to the value of the additional charge. A node for each type. All countries   additionalValues.entry.value Numeric 19, 2 Charge value, tax or tax return base according to the additionalValue.entry.name. All countries   additionalValues.entry.currency Alphanumeric 3 The ISO currency code associated to the amount. See Accepted currencies. All countries     A charge may be an additional charge or a discount realized on the value of one of the payments that comprise the recurring payment plan. These only affect the next pending item and run once.\nThe following operations are available:\n    URL Methods Description     /rest/v4.3/subscriptions/{subscriptionId}/recurringBillItems POST Adds extra charges to the respective invoice for the current period.\n{subscriptionId}: Identification of the subscription   /rest/v4.3/recurringBillItems/{recurringBillItemId} PUT Updates the information from an additional charge in an invoice\n{recurringBillItemId}: Identifier of the additional charge.   /rest/v4.3/recurringBillItems/{recurringBillItemId} GET Query extra charge information of an invoice from its identifier.\n{recurringBillItemId}: Identifier of the additional charge   /rest/v4.3/recurringBillItems/{recurringBillItemId} DELETE Remove an extra charge from an invoice.\n{recurringBillItemId}: Identifier of the additional charge.   /rest/v4.3/recurringBillItems/ GET Query extra charges of shop’s invoices that meet the stipulated filters. The available filters are shown below and should be sent as named parameters in the URL:\n{subscriptionId}: Identification of the subscription.\n{description}: Description entered in the extra charge.    Creation  JSON XML   Request body:\n{ \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;522023su5xg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;52b04sx2s6\u0026#34; }   Request body:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \nResponse body:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;5e174m7lgns\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;subscriptionId\u0026gt;52b04sx2s6\u0026lt;/subscriptionId\u0026gt; \u0026lt;/recurringBillItem\u0026gt;    Update  JSON XML   Request body:\n{ \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20000\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ] } \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;5e174m7lgns\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;52b04sx2s6\u0026#34; }   Request body:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;id\u0026gt;5e174m7lgns\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \nResponse body:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;5e174m7lgns\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;subscriptionId\u0026gt;52b04sx2s6\u0026lt;/subscriptionId\u0026gt; \u0026lt;/recurringBillItem\u0026gt;    Query  By id of extra charge  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/2uww909obl \nResponse body:\n{ \u0026#34;id\u0026#34;: \u0026#34;5wm1pxmpiwq\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/2uww909obl \nResponse body:\n\u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uww909obl\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_TAX_RETURN_BASE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;0\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt;      By description of the extra charge  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?description=Cargo%20b \nResponse body:\n{ \u0026#34;recurringBillItemList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5vsags0qsdo\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5vsa272tek7\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5wm1pxmpiwq\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?description=Cargo%20b \nResponse body:\n\u0026lt;recurringBillItemResponse\u0026gt; \u0026lt;recurringBillItems\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2waez3h9ac\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;24e207ivi\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;26gzctvub\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uxvargit1\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uy01uio7o\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;10000.49\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2ve0qtsjzz\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2w16yddd98\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;/recurringBillItems\u0026gt; \u0026lt;/recurringBillItemResponse\u0026gt;      By subscription  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?subscriptionId=26gyv192a \nResponse body:\n{ \u0026#34;recurringBillItemList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5wjxrkgk7rc\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Custo do plano\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;PLAN_TAX\u0026#34;, \u0026#34;value\u0026#34;: 1600, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;PLAN_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5wm1pxmpiwq\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Cargo extra de prueba\u0026#34;, \u0026#34;additionalValues\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ITEM_VALUE\u0026#34;, \u0026#34;value\u0026#34;: 20000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ITEM_TAX_RETURN_BASE\u0026#34;, \u0026#34;value\u0026#34;: 0, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } ], \u0026#34;subscriptionId\u0026#34;: \u0026#34;5wjxrja8mz9\u0026#34; } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/?subscriptionId=26gyv192a \nResponse body:\n\u0026lt;recurringBillItemResponse\u0026gt; \u0026lt;recurringBillItems\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2waez3h9ac\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo básico\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;PLAN_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;15000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;recurringBillItem\u0026gt; \u0026lt;id\u0026gt;2uww909obl\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Cargo extra de prueba\u0026lt;/description\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;name\u0026gt;ITEM_VALUE\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;20000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;/recurringBillItem\u0026gt; \u0026lt;/recurringBillItems\u0026gt; \u0026lt;/recurringBillItemResponse\u0026gt;     Deletion  JSON XML   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/ou8ru86nq \nResponse body:\n{ \u0026#34;description\u0026#34;: \u0026#34;recurring bill item ou8ru86nq has been removed successfully\u0026#34; }   Request body:\nDELETE https://api.payulatam.com/payments-api/rest/v4.3/recurringBillItems/ou8ru86nq \nResponse body:\n\u0026lt;response\u0026gt; \u0026lt;description\u0026gt;recurring bill item ou8ru86nq has been removed successfully\u0026lt;/description\u0026gt; \u0026lt;/response\u0026gt;    6. Billing  Associated attributes to the bills     Field name Format Description     recurringBill.id Alphanumeric Bill id in the PayU platform.   recurringBill.orderId Numeric Id of the order that is associated to the bill in the PayU platform.   recurringBill.subscriptionId Alphanumeric Id of the subscription that is associated to the bill in the PayU platform.   recurringBill.state Alphanumeric State of the payment. The possible values are:\nNOT_PAID: Declined payment.PAYMENT_IN_PROGRESS: Payment in progress of charge.PENDING: The next payment to charge.RETRYING_PAYMENT: Retrying payment.PAID: Approved payment.CANCELLED: Cancelled subscription.PENDING_REVIEW: Payment in process of validation.   recurringBill.amount Numeric Total amount of the payment.   recurringBill.currency Alphanumeric The ISO currency code associated to the amount. See Accepted currencies.   recurringBill.dateCharge Date Date of the payment. When the json format is used the value structure is Epoch/Unix, therefore it is necessary to convert it.     A bill is a payment attempt performed over a subscription, or its execution is pending.\nBilling only has the following query method available:\n    URL Methods Description     /rest/v4.3/recurringBill GET Query the pill paid or pending. You can query by client, subscription, or date range:\n/rest/v4.3/recurringBill?customerId={customerId}\n/rest/v4.3/recurringBill?subscriptionId={subscriptionId}\n/rest/v4.3/recurringBill?customerId={customerId}\u0026amp;dateBegin;={dateBegin}\u0026amp;dateFinal;={dateFinal}    Query  By id of the client  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5 \nResponse body:\n{ \u0026#34;recurringBillList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026#34;, \u0026#34;orderId\u0026#34;: 71516840, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391490000000 }, { \u0026#34;id\u0026#34;: \u0026#34;56f0f5ca-cf29-437e-8920-7bc35578a39f\u0026#34;, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtf4q8v451\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;CANCELLED\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1392786000000 } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5 \nResponse body:\n\u0026lt;recurringBillListResponse\u0026gt; \u0026lt;recurringBills\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71516840\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-04T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;56f0f5ca-cf29-437e-8920-7bc35578a39f\u0026lt;/id\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtf4q8v451\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;CANCELLED\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-19T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;/recurringBills\u0026gt; \u0026lt;/recurringBillListResponse\u0026gt;      By id of the subscription  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?subscriptionId=6dtg51j09cr \nResponse body:\n{ \u0026#34;recurringBillList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026#34;, \u0026#34;orderId\u0026#34;: 71516840, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391490000000 }, { \u0026#34;id\u0026#34;: \u0026#34;528a91a5-19bf-4db5-9a4a-4ecd2f07056b\u0026#34;, \u0026#34;orderId\u0026#34;: 71651340, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391576400000 } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?subscriptionId=6dtg51j09cr \nResponse body:\n\u0026lt;recurringBillListResponse\u0026gt; \u0026lt;recurringBills\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71516840\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-04T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;56f0f5ca-cf29-437e-8920-7bc35578a39f\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71651340\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-19T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;/recurringBills\u0026gt; \u0026lt;/recurringBillListResponse\u0026gt;      By id of the client and a date range  JSON XML   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5\u0026amp;dateBegin;=2014-02-03\u0026amp;dateFinal;=2014-02-04 \nResponse body:\n{ \u0026#34;recurringBillList\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026#34;, \u0026#34;orderId\u0026#34;: 71516840, \u0026#34;subscriptionId\u0026#34;: \u0026#34;6dtg51j09cr\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PAID\u0026#34;, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34;, \u0026#34;dateCharge\u0026#34;: 1391490000000 } ] }   Request body:\nGET https://api.payulatam.com/payments-api/rest/v4.3/recurringBill?customerId=6dtc2i97hw5\u0026amp;dateBegin;=2014-02-03\u0026amp;dateFinal;=2014-02-04 \nResponse body:\n\u0026lt;recurringBillListResponse\u0026gt; \u0026lt;recurringBills\u0026gt; \u0026lt;recurringBill\u0026gt; \u0026lt;id\u0026gt;cc522b0e-af0b-4ece-978d-f5c5632caa52\u0026lt;/id\u0026gt; \u0026lt;orderId\u0026gt;71516840\u0026lt;/orderId\u0026gt; \u0026lt;subscriptionId\u0026gt;6dtg51j09cr\u0026lt;/subscriptionId\u0026gt; \u0026lt;state\u0026gt;PAID\u0026lt;/state\u0026gt; \u0026lt;amount\u0026gt;10000\u0026lt;/amount\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;dateCharge\u0026gt;2014-02-04T00:00:00-05:00\u0026lt;/dateCharge\u0026gt; \u0026lt;/recurringBill\u0026gt; \u0026lt;/recurringBills\u0026gt; \u0026lt;/recurringBillListResponse\u0026gt;    ","excerpt":"/* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* …","ref":"/en/deprecated/recurring-payments/recurring-payments-api.html","title":"Recurring payments - API"},{"body":" /* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* Stay in place */ z-index: 1; /* Sit on top */ left: 0; top: 0; width: 100%; /* Full width */ height: 100%; /* Full height */ overflow: auto; /* Enable scroll if needed */ background-color: rgb(0,0,0); /* Fallback color */ background-color: rgba(0,0,0,0.4); /* Black w/ opacity */ animation: animatetop 0.4s; } /* Modal Content/Box */ .modal-content { background-color: #fefefe; margin: 15% auto; /* 15% from the top and centered */ border: 1px solid #888; width: 50%; /* Could be more or less, depending on screen size */ } /* The Close Button */ .close { color: #aaa; float: right; font-size: 28px; font-weight: bold; } .close:hover, .close:focus { color: black; text-decoration: none; cursor: pointer; } .header { color: white; background-color: #ED6A5A; padding: 15px; }  Deprecated feature\n\u0026times;  Recurring Payments feature has been deprecated. Therefore, it is not longer offered to new or existing merchants. The following topic is available as a reference for merchants who still have it enabled.\nThis feature WILL NOT be activated again.\n   // Get the modal var modal = document.getElementById(\"myModal\"); // Get the  element that closes the modal var span = document.getElementsByClassName(\"close\")[0]; var toc = document.getElementById(\"td-section-nav\"); // When the page loads, open the modal window.onload = function() { modal.style.display = \"block\"; toc.style['pointer-events'] = 'none'; toc.style.backgroundColor = \"rgba(0,0,0,-0.6)\"; } // When the user clicks on  (x), close the modal span.onclick = function() { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } // When the user clicks anywhere outside of the modal, close it window.onclick = function(event) { if ((event.target == modal) || (event.target.id == \"td-sidebar-menu\")) { modal.style.display = \"none\"; toc.removeAttribute(\"style\") } }  Note Recurring payments has been deprecated and it is not offered for new commerces.  How does it work? Consider Recurring payments is only available for accounts in Brazil, Colombia, Peru, and Mexico.  Pointing to the corresponding URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    The available methods for recurring payments are: PLAN, CUSTOMER, CREDIT CARD, SUBSCRIPTION and ADDITIONAL CHARGES. Below is a description of each.\n1. Plan Using this feature you can register a recurring plan and thus get its identifier.\nThe following operations are available:\n    URL Method Descripción     /rest/v4.3/plans POST Creating a new plan for subscriptions associated with the merchant.   /rest/v4.3/plans/{planCode} PUT Update information about a plan for subscriptions.\n{planCode}: Plan’s identification code for the merchant.   /rest/v4.3/plans/{planCode} GET Check all the information of a plan for subscriptions associated with the merchant.\n{planCode}: Plan’s identification code for the merchant   /rest/v4.3/plans/{planCode} DELETE Delete an entire subscription plan associated with the merchant.\n{planCode}: Plan’s identification code for the merchant.    Creation  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the plan‘s description here. parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Basic Plan\u0026#34;); // Enter the identification code of the plan here. parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd456\u0026#34; + System.currentTimeMillis()); // Enter the interval of the plan here. parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Enter the number of intervals here. parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;12\u0026#34;); // Enter the currency of the plan here. parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Enter the value of the plan here. parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;50000\u0026#34;); // (OPTIONAL) Enter the tax value here. parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;10000\u0026#34;); // (OPTIONAL) Enter the tax base return here. parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;40000\u0026#34;); // Enter the account ID of the plan here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;2\u0026#34;); // Enter the retry interval here parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;2\u0026#34;); // Enter the amount of charges that make up the plan here parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;2\u0026#34;); SubscriptionPlan response = PayUPlans.create(parameters);   Example request:\n$parameters = array( // Enter the plan‘s description here. \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;Sample Plan 001\u0026#34;, // Enter the identification code of the plan here. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Enter the interval of the plan here. \t//DAY||WEEK||MONTH||YEAR \tPayUParameters::PLAN_INTERVAL =\u0026gt; \u0026#34;MONTH\u0026#34;, // Enter the number of intervals here. \tPayUParameters::PLAN_INTERVAL_COUNT =\u0026gt; \u0026#34;1\u0026#34;, // Enter the currency of the plan here. \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Enter the value of the plan here. \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, // (OPTIONAL) Enter the tax value here. \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;1600\u0026#34;, // (OPTIONAL) Enter the tax base return here. \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;8400\u0026#34;, // Enter the account ID of the plan here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512321\u0026#34;, // Enter the retry interval here \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of charges that make up the plan here \tPayUParameters::PLAN_MAX_PAYMENTS =\u0026gt; \u0026#34;12\u0026#34;, // Enter the total amount of retries here for each rejected subscription payment \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Enter the maximum amount of pending payments here that a subscription may have before being canceled. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of trial days of the subscription here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;30\u0026#34;, ); $response = PayUSubscriptionPlans::create($parameters); if($response){ $response-\u0026gt;id; }    Update  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the new plan‘s description here parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;New Basic Plan\u0026#34;); // Enter the identification code of the plan here (Must be an existing code) parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd4561379351327982\u0026#34;); // Enter the currency of the plan here (Must be the same used during the creation of the plan) parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Enter the new value of the plan here parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;100000\u0026#34;); // (OPTIONAL) Enter the tax value here parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;10000\u0026#34;); // (OPTIONAL) Enter the tax base return here parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;40000\u0026#34;); // Enter the retry interval here parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;3\u0026#34;); SubscriptionPlan response; response = PayUPlans.update(parameters);   Example request:\n$parameters = array( // Enter the plan‘s description here. \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;New Sample Plan 001\u0026#34;, // Enter the identification code of the plan here. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Enter the currency of the plan here. \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Enter the value of the plan here. \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, // (OPTIONAL) Enter the tax value here. \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;0\u0026#34;, // (OPTIONAL) Enter the tax base return here. \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;0\u0026#34;, // Enter the retry interval here \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Enter the total amount of retries here for each rejected subscription payment \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Enter the maximum amount of pending payments here that a subscription may have before being canceled. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, ); $response = PayUSubscriptionPlans::update($parameters); if($response){ }    Query  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the identification code of the plan here parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd4561379351327982\u0026#34;); SubscriptionPlan response = PayUPlans.find(parameters);   Example request:\n$parameters = array( // Enter the identification code of the plan here. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, ); $response = PayUSubscriptionPlans::find($parameters); if($response) { $response-\u0026gt;id; $response-\u0026gt;description; $response-\u0026gt;accountId; $response-\u0026gt;intervalCount; $response-\u0026gt;interval; $response-\u0026gt;maxPaymentsAllowed; $response-\u0026gt;maxPaymentAttempts; $response-\u0026gt;paymentAttemptsDelay; $response-\u0026gt;maxPendingPayments; $response-\u0026gt;trialDays; }    Deletion  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the identification code of the plan here parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;ASd4561379351327982\u0026#34;); boolean response = PayUPlans.delete(parameters);   Example request:\n$parameters = array( // Enter the identification code of the plan here. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, ); $response = PayUSubscriptionPlans::delete($parameters); if($response) { }    2. Customer A customer is the unit that identifies who will be the beneficiary of a provided product or service and who is associated with a recurring payment plan.\nThe following operations are available:\n    URL Method Descripción     /rest/v4.3/customers/ POST Creation of a customer in the system.   /rest/v4.3/customers/{customerId} PUT Updates the customer’s information in the system.\n{customerId}: Identifier of the client to be updated.   /rest/v4.3/customers/{customerId} GET Queries the information related to the customer.\n{customerId}: Identifier of the client from which you want to find the associated information.   /rest/v4.3/customers/{customerId} DELETE Removes a user from the system.\n{customerId}: Identifier of the client to be deleted.    Creation  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the costumer name here. parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Oscar\u0026#34;); // Enter the costumer email here. parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;oscar.romero@payulatam.com\u0026#34;); // Operation create costumer Customer response = PayUCustomers.create(parameters);   Example request:\n$parameters = array( // Enter the costumer name here. \tPayUParameters::CUSTOMER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Enter the costumer email here. \tPayUParameters::CUSTOMER_EMAIL =\u0026gt; \u0026#34;pperez@payulatam.com\u0026#34; ); $response = PayUCustomers::create($parameters); if($response) { $response-\u0026gt;id; }    Update  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the customer ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;f543exh3zh5o\u0026#34;); // Enter the custumer name here. parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Oscar\u0026#34;); // Enter the custumer email here. parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;oscarromero@payulatam.com\u0026#34;); // Operation create costumer Customer response = PayUCustomers.update(parameters);   Example request:\n$parameters = array( // Enter the custumer ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;24978c6l3e\u0026#34;, // Enter the custumer name here. \tPayUParameters::CUSTOMER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Enter the custumer email here. \tPayUParameters::CUSTOMER_EMAIL =\u0026gt; \u0026#34;pperez@payulatam.com\u0026#34; ); $response = PayUCustomers::update($parameters); if($response){ }    Query  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the costumer ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;17ylzjz6bxz\u0026#34;); Customer response = PayUCustomers.find(parameters);   Example request:\n$parameters = array( // Enter the costumer name here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;24978c6l3e\u0026#34;, ); $response = PayUCustomers::find($parameters); if($response) { $response-\u0026gt;fullName; $response-\u0026gt;email; $creditCards=$response-\u0026gt;creditCards; foreach ($creditCards as $creditCard) { $creditCard-\u0026gt;token; $creditCard-\u0026gt;number; $creditCard-\u0026gt;type; $creditCard-\u0026gt;name; $address=$creditCard-\u0026gt;address; $address-\u0026gt;line1; $address-\u0026gt;line2; $address-\u0026gt;line3; $address-\u0026gt;city; $address-\u0026gt;state; $address-\u0026gt;country; $address-\u0026gt;postalCode; $address-\u0026gt;phone; } }    Deletion  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the costumer ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;17ylzjz6bxz\u0026#34;); boolean response = PayUCustomers.delete(parameters);   Example request:\n$parameters = array( // Enter the costumer ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;24978c6l3e\u0026#34; ); $response = PayUCustomers::delete($parameters); if($response){ }    3. Credit card Is the payment method that relates a customer to a plan. It is composed of the credit card number (that will be tokenized to store data securely), the expiration date of the card and some additional address data.\nThe following operations are available:\n    URL Method Descripción     /rest/v4.3/customers/{customerID}/creditCards POST Creating a credit card (Token) and assigning it to a user.\n{customerId}: Identifier of the client with whom you are going to associate the token with.   /rest/v4.3/creditCards/{creditCardId} PUT Update a token’s information.\n{creditCardId}: Identifier of the token to be updated.   /rest/v4.3/creditCards/{creditCardId} GET Check the information of a credit card (Token) data identifier.\n{creditCardId}: Credit Card Token you want to consult.   /rest/v4.3/customers/{customerID}/creditCards/{creditCardId} DELETE Delete a credit card (Token) associated with a user.\n{customerId}: Identifier of the client of whom you are going to delete the token.\n{creditCardId}: Identifier of the token to be deleted.    Creation  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;180oklk4o56\u0026#34;); //Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4005580000029205\u0026#34;); //Enter the expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2015/01\u0026#34;); // Enter the credit card’s franchise. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Nombre\u0026#34;); //Enter the payer\u0026#39;s identification document related to the credit card here. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // -- The following parameters are optional -- // Enter the first part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Calle falsa\u0026#34;); // Enter the second part of the address here (if required). parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;123\u0026#34;); // Enter the third part of the address here (if required). parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;patio trasero\u0026#34;); // Enter the city here. parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); // Enter the state here. parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C.\u0026#34;); // Enter the country here. parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, PaymentCountry.CO.name()); // Enter the postal code here. parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // Enter the contact phone here. parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); PaymentPlanCreditCard response = PayUCreditCard.create(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Example request:\n$parameters = array( // Enter the costumer ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;6eb24tzp40\u0026#34;, // Enter the costumer name here. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, //Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4242424242424242\u0026#34;, // Enter the expiration date of the credit card here with format YYYY/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2018/01\u0026#34;, // Enter the credit card’s franchise \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, //Enter the payer\u0026#39;s identification document related to the credit card here.  PayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPTIONAL) Enter the payer\u0026#39;s identification document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;101010123\u0026#34;, // (OPTIONAL) Enter the first part of the address here \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Street 93B\u0026#34;, // (OPTIONAL) Enter the second part of the address here \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPTIONAL) Enter the third part of the address here \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Office 301\u0026#34;, // (OPTIONAL) Enter the city of the payer here. \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Bogotá\u0026#34;, // (OPTIONAL) Enter the state of the payer here. \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C.\u0026#34;, // (OPTIONAL) Enter the code of the country here. \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPTIONAL) Enter the postal code of the payer here. \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPTIONAL) Enter the contact phone here. \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34; ); $response = PayUCreditCards::create($parameters); if($response){ $response-\u0026gt;token; }    Update  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the credit card’s token identifier here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;180oklk4o56\u0026#34;); //Enter the expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2015/01\u0026#34;); //Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Nombre\u0026#34;); //Enter the payer\u0026#39;s identification document related to the credit card here. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // -- The following parameters are optional – // Enter the first part of the address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Calle 5476\u0026#34;); // Enter the second part of the address here (if applies) parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;123\u0026#34;); // Enter the third part of the address here (if applies) parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;patio trasero\u0026#34;); // Enter the city here. parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); // Enter the state here. parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C.\u0026#34;); // Enter the country here. parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, PaymentCountry.CO.name()); // Enter the postal code here. parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // Enter the contact phone here. parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); PaymentPlanCreditCard response = PayUCreditCard.update(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Example request:\n$parameters = array( // Enter the credit card’s token identifier here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;6f5f32d9-9c6f-4d57-97d7-68cde86f9266\u0026#34;, // Enter the costumer name here. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, Enter the expiration date of the credit card here with format YYYY/MM PayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2018/01\u0026#34;, //Enter the payer\u0026#39;s identification document related to the credit card here.  PayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPTIONAL) Enter the payer\u0026#39;s identification document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;101010123\u0026#34;, // (OPTIONAL) Enter the first part of the address here \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Street 93B\u0026#34;, // (OPTIONAL) Enter the second part of the address here \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPTIONAL) Enter the third part of the address here \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Office 301\u0026#34;, // (OPTIONAL) Enter the city of the payer here. \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Bogotá\u0026#34;, // (OPTIONAL) Enter the state of the payer here. \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C.\u0026#34;, // (OPTIONAL) Enter the code of the country here. \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPTIONAL) Enter the postal code of the payer here. \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPTIONAL) Enter the contact phone here. \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34; ); $response= PayUCreditCards::update($parameters); if($response){ }    Query  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the credit card’s token identifier here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;25181bb1-b07f-4b9b-ae5d-6b13436c706d\u0026#34;); PaymentPlanCreditCard response = PayUCreditCard.find(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Example request:\n$parameters = array( // Enter the credit card’s token identifier here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;6f5f32d9-9c6f-4d57-97d7-68cde86f9266\u0026#34; ); $response = PayUCreditCards::find($parameters); if($response){ $response-\u0026gt;token; $response-\u0026gt;number; $response-\u0026gt;type; $response-\u0026gt;name; $response-\u0026gt;document; $address=$response-\u0026gt;address; $address-\u0026gt;line1; $address-\u0026gt;line2; $address-\u0026gt;line3; $address-\u0026gt;city; $address-\u0026gt;state; $address-\u0026gt;country; $address-\u0026gt;postalCode; $address-\u0026gt;phone; }    Deletion  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the credit card’s token identifier here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;25181bb1-b07f-4b9b-ae5d-6b13436c706d\u0026#34;); // Enter the costumer ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;17ylzjz6bxz\u0026#34;); boolean response = PayUCreditCard.delete(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Example request:\n$parameters = array( // Enter the credit card’s token identifier here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;6f5f32d9-9c6f-4d57-97d7-68cde86f9266\u0026#34;, // Enter the costumer ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;6eb24tzp40\u0026#34; ); $response = PayUCreditCards::delete($parameters); if($response){ }    4. Subscription A subscription is the relationship between a payment plan, a payer and a credit card. It is the element that controls the execution of the respective collections.\nThe following operations are available:\n    URL Methods Descripción     /rest/v4.3/subscriptions/ POST Creating a new subscription of a client to a plan.   /rest/v4.3/subscriptions/{subscriptionId} PUT Update information associated with the specified subscription. At the moment it is only possible to update the token of the credit card to which the charge of the subscription is made.\n{subscriptionId}: Identification of the subscription.   /rest/v4.3/subscriptions/{subscriptionId} GET Check the basic information associated with the specified subscription.\n{subscriptionId}: Identification of the subscription.   /rest/v4.3/subscriptions/{subscriptionId} DELETE Unsubscribe, delete the relationship of the customer with the plan.\n{subscriptionId}: Identification of the subscription.    Creation  With all new items  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the amount of trial days here. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); // -- Client parameters -- // Enter the costumer name here. parameters.put(PayU.PARAMETERS.CUSTOMER_NAME, \u0026#34;Pedro Perez\u0026#34;); // Enter the costumer email here. parameters.put(PayU.PARAMETERS.CUSTOMER_EMAIL, \u0026#34;pperezz@payulatam.com\u0026#34;); //-- Credit card parameters -- // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Sample User Name\u0026#34;); //Enter the number of the credit card here. parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4242424242424242\u0026#34;); Enter the expiration date of the credit card here with format YYYY/MM parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2018/01\u0026#34;); // Enter the credit card’s franchise parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); //Enter the payer\u0026#39;s identification document related to the credit card here. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // (OPTIONAL) Enter the payer\u0026#39;s identification document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;1020304050\u0026#34;); // (OPTIONAL) Enter the first part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Address Name\u0026#34;); // (OPTIONAL) Enter the second part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;17 25\u0026#34;); // (OPTIONAL) Enter the third part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;Of 301\u0026#34;); // (OPTIONAL) Enter the city of the payer here. parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;City Name\u0026#34;); // (OPTIONAL) Enter the state of the payer here. parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;State Name\u0026#34;); // (OPTIONAL) Enter the code of the country here. parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); // (OPTIONAL) Enter the postal code of the payer here. parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // (OPTIONAL) Enter the contact phone here. parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); // -- Plan parameters -- // Enter the plan‘s description here. parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Sample Plan 001\u0026#34;); // Enter the identification code of the plan here. parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); // Enter the interval of the plan here. parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Enter the number of intervals here. parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;1\u0026#34;); // Enter the currency of the plan here. parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Enter the value of the plan here. parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;10000\u0026#34;); // (OPTIONAL) Enter the tax value here. parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;1600\u0026#34;); // (OPTIONAL) Enter the tax base return here. parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;8400\u0026#34;); // Enter the account ID of the plan here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the retry interval here parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;1\u0026#34;); // Enter the amount of charges that make up the plan here parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;12\u0026#34;); // Enter the total amount of retries here for each rejected subscription payment parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENT_ATTEMPTS, \u0026#34;3\u0026#34;); // Enter the maximum amount of pending payments here that a subscription may have before being canceled. parameters.put(PayU.PARAMETERS.PLAN_MAX_PENDING_PAYMENTS, \u0026#34;1\u0026#34;); // Enter the amount of trial days of the subscription here. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;30\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); response.getCustomer().getId(); response.getCreditCardToken(); }   Example request:\n$parameters = array( //Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of trial days here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, // -- Client parameters -- \t// Enter the costumer name here. \tPayUParameters::CUSTOMER_NAME =\u0026gt; \u0026#34;Pedro Perez\u0026#34;, // Enter the costumer email here. \tPayUParameters::CUSTOMER_EMAIL =\u0026gt; \u0026#34;pperezz@payulatam.com\u0026#34;, //-- Credit card parameters -- \t// Enter the payer\u0026#39;s name here. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Sample User Name\u0026#34;, // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4242424242424242\u0026#34;, // Enter the expiration date of the credit card here with format YYYY/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2014/12\u0026#34;, // Enter the credit card’s franchise \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, //Enter the payer\u0026#39;s identification document related to the credit card here.  PayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPTIONAL) Enter the payer\u0026#39;s identification document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPTIONAL) Enter the first part of the address here \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Address Name\u0026#34;, // (OPTIONAL) Enter the second part of the address here \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPTIONAL) Enter the third part of the address here \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Of 301\u0026#34;, // (OPTIONAL) Enter the city of the payer here. \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;City Name\u0026#34;, // (OPTIONAL) Enter the state of the payer here. \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;State Name\u0026#34;, // (OPTIONAL) Enter the code of the country here. \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPTIONAL) Enter the postal code of the payer here. \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPTIONAL) Enter the contact phone here. \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34;, // -- Plan parameters -- \t// Enter the plan‘s description here. \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;Sample Plan 001\u0026#34;, // Enter the identification code of the plan here. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Enter the interval of the plan here. \tPayUParameters::PLAN_INTERVAL =\u0026gt; \u0026#34;MONTH\u0026#34;, // Enter the number of intervals here. \tPayUParameters::PLAN_INTERVAL_COUNT =\u0026gt; \u0026#34;1\u0026#34;, // Enter the currency of the plan here. \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Enter the value of the plan here. \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, // (OPTIONAL) Enter the tax value here. \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;1600\u0026#34;, // (OPTIONAL) Enter the tax base return here. \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;8400\u0026#34;, // Enter the account ID of the plan here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512321\u0026#34;, // Enter the retry interval here \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of charges that make up the plan here \tPayUParameters::PLAN_MAX_PAYMENTS =\u0026gt; \u0026#34;12\u0026#34;, // Enter the total amount of retries here for each rejected subscription payment \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Enter the maximum amount of pending payments here that a subscription may have before being canceled. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of trial days of the subscription here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;30\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; $response-\u0026gt;plan-\u0026gt;id; $response-\u0026gt;customer-\u0026gt;id; }      With all existing elements  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the plan code to subscribe parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;eab38z33hh2\u0026#34;); // Enter the credit card’s token identifier here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;); // Enter the amount of trial days of the subscription here. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); //Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); }   Example request:\n$parameters = array( // Enter the plan code to subscribe \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001s\u0026#34;, //Enter the payer\u0026#39;s ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;f03612gyte\u0026#34;, /// Enter the credit card’s token identifier here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;79490437-d64a-4dc6-baeb-8d52492b0a00\u0026#34;, // Enter the amount of trial days of the subscription here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, //Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; }      With plan and client already created, and a new card  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the amount of trial days of the subscription here. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); //Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the plan code to subscribe parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;eab38z33hh2\u0026#34;); //-- Credit card parameters -- //Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Sample User Name\u0026#34;); //Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4242424242424242\u0026#34;); //Enter the expiration date of the credit card here with format YYYY/MM parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2018/01\u0026#34;); // Enter the credit card’s franchise parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); //Enter the payer\u0026#39;s identification document related to the credit card here. parameters.put(PayU.PARAMETERS.CREDIT_CARD_DOCUMENT, \u0026#34;1020304050\u0026#34;); // (OPTIONAL) Enter the payer\u0026#39;s identification document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;1020304050\u0026#34;); // (OPTIONAL) Enter the first part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Address Name\u0026#34;); // (OPTIONAL) Enter the second part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;17 25\u0026#34;); // (OPTIONAL) Enter the third part of the address here parameters.put(PayU.PARAMETERS.PAYER_STREET_3, \u0026#34;Of 301\u0026#34;); // (OPTIONAL) Enter the city of the payer here. parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;City Name\u0026#34;); // (OPTIONAL) Enter the state of the payer here. parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;State Name\u0026#34;); // (OPTIONAL) Enter the code of the country here. parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); // (OPTIONAL) Enter the postal code of the payer here. parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;00000\u0026#34;); // (OPTIONAL) Enter the contact phone here. parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;300300300\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); response.getCreditCardToken(); }   Example request:\n$parameters = array( //Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of trial days here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, // -- Client parameters -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;f03612gyte\u0026#34;, //-- Credit card parameters -- \t//Enter the buyer\u0026#39;s name here. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Sample User Name\u0026#34;, //Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4242424242424242\u0026#34;, // Enter the expiration date of the credit card here with format YYYY/MM \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2014/12\u0026#34;, // Enter the credit card’s franchise \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, //Enter the payer\u0026#39;s identification document related to the credit card here.  PayUParameters::CREDIT_CARD_DOCUMENT =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPTIONAL) Enter the payer\u0026#39;s identification document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;1020304050\u0026#34;, // (OPTIONAL) Enter the first part of the address here \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Address Name\u0026#34;, // (OPTIONAL) Enter the second part of the address here \tPayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;17 25\u0026#34;, // (OPTIONAL) Enter the third part of the address here \tPayUParameters::PAYER_STREET_3 =\u0026gt; \u0026#34;Of 301\u0026#34;, // (OPTIONAL) Enter the city of the payer here. \tPayUParameters::PAYER_CITY =\u0026gt; \u0026#34;City Name\u0026#34;, // (OPTIONAL) Enter the state of the payer here. \tPayUParameters::PAYER_STATE =\u0026gt; \u0026#34;State Name\u0026#34;, // (OPTIONAL) Enter the code of the country here. \tPayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, // (OPTIONAL) Enter the postal code of the payer here. \tPayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;00000\u0026#34;, // (OPTIONAL) Enter the contact phone here. \tPayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;300300300\u0026#34;, // -- Plan parameters -- \t// Enter the plan code to subscribe \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; }      Customer and card already created, and with a new plan  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); //Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the amount of trial days here. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;10\u0026#34;); //Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.CUSTOMER_ID, \u0026#34;eab38z33hh2\u0026#34;); // Enter the credit card’s token identifier here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;); // -- Plan parameters -- // Enter the plan‘s description here. parameters.put(PayU.PARAMETERS.PLAN_DESCRIPTION, \u0026#34;Sample Plan 001\u0026#34;); // Enter the identification code of the plan here. parameters.put(PayU.PARAMETERS.PLAN_CODE, \u0026#34;sample-plan-code-001\u0026#34;); // Enter the interval of the plan here. parameters.put(PayU.PARAMETERS.PLAN_INTERVAL, \u0026#34;MONTH\u0026#34;); // Enter the number of intervals here. parameters.put(PayU.PARAMETERS.PLAN_INTERVAL_COUNT, \u0026#34;1\u0026#34;); // Enter the currency of the plan here. parameters.put(PayU.PARAMETERS.PLAN_CURRENCY, \u0026#34;COP\u0026#34;); // Enter the value of the plan here. parameters.put(PayU.PARAMETERS.PLAN_VALUE, \u0026#34;10000\u0026#34;); // (OPTIONAL) Enter the tax value here. parameters.put(PayU.PARAMETERS.PLAN_TAX, \u0026#34;1600\u0026#34;); // (OPTIONAL) Enter the tax base return here. parameters.put(PayU.PARAMETERS.PLAN_TAX_RETURN_BASE, \u0026#34;8400\u0026#34;); // Enter the account ID of the plan here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the retry interval here parameters.put(PayU.PARAMETERS.PLAN_ATTEMPTS_DELAY, \u0026#34;1\u0026#34;); // Enter the amount of charges that make up the plan here parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENTS, \u0026#34;12\u0026#34;); // Enter the total amount of retries here for each rejected subscription payment parameters.put(PayU.PARAMETERS.PLAN_MAX_PAYMENT_ATTEMPTS, \u0026#34;3\u0026#34;); // Enter the maximum amount of pending payments here that a subscription may have before being canceled. parameters.put(PayU.PARAMETERS.PLAN_MAX_PENDING_PAYMENTS, \u0026#34;1\u0026#34;); // Enter the amount of trial days here. parameters.put(PayU.PARAMETERS.TRIAL_DAYS, \u0026#34;30\u0026#34;); Subscription response = PayUSubscription.create(parameters); if(response!=null){ response.getId(); }   Example request:\n$parameters = array( //Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of trial days here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;10\u0026#34;, //-- Credit card parameters -- \t//Enter the payer\u0026#39;s ID here. \tPayUParameters::CUSTOMER_ID =\u0026gt; \u0026#34;5131879lzbx\u0026#34;, // Enter the credit card’s token identifier here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;158e5bed-1e76-4bb2-83c2-97dc9bb1522d\u0026#34;, // -- Plan parameters -- \t// Enter the plan‘s description here. \tPayUParameters::PLAN_DESCRIPTION =\u0026gt; \u0026#34;Sample Plan 001\u0026#34;, // Enter the identification code of the plan here. \tPayUParameters::PLAN_CODE =\u0026gt; \u0026#34;sample-plan-code-001\u0026#34;, // Enter the interval of the plan here. \tPayUParameters::PLAN_INTERVAL =\u0026gt; \u0026#34;MONTH\u0026#34;, // Enter the number of intervals here. \tPayUParameters::PLAN_INTERVAL_COUNT =\u0026gt; \u0026#34;1\u0026#34;, // Enter the currency of the plan here. \tPayUParameters::PLAN_CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Enter the value of the plan here. \tPayUParameters::PLAN_VALUE =\u0026gt; \u0026#34;10000\u0026#34;, // (OPTIONAL) Enter the tax value here. \tPayUParameters::PLAN_TAX =\u0026gt; \u0026#34;1600\u0026#34;, // (OPTIONAL) Enter the tax base return here. \tPayUParameters::PLAN_TAX_RETURN_BASE =\u0026gt; \u0026#34;8400\u0026#34;, // Enter the account ID of the plan here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512321\u0026#34;, // Enter the retry interval here \tPayUParameters::PLAN_ATTEMPTS_DELAY =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of charges that make up the plan here \tPayUParameters::PLAN_MAX_PAYMENTS =\u0026gt; \u0026#34;12\u0026#34;, // Enter the total amount of retries here for each rejected subscription payment \tPayUParameters::PLAN_MAX_PAYMENT_ATTEMPTS =\u0026gt; \u0026#34;3\u0026#34;, // Enter the maximum amount of pending payments here that a subscription may have before being canceled. \tPayUParameters::PLAN_MAX_PENDING_PAYMENTS =\u0026gt; \u0026#34;1\u0026#34;, // Enter the amount of trial days of the subscription here. \tPayUParameters::TRIAL_DAYS =\u0026gt; \u0026#34;30\u0026#34;, ); $response = PayUSubscriptions::createSubscription($parameters); if($response){ $response-\u0026gt;id; $response-\u0026gt;plan-\u0026gt;id; }     Update (Credit card of a subscription)  SDK Java   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the subscription ID here. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;320756yk1x0\u0026#34;); // Enter the credit card’s token identifier here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;a068e980-a6d7-4a19-b549-75c04f39ec22\u0026#34;); Subscription response = PayUSubscription.update(parameters); if(response!=null){ }    Query  SDK Java   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the subscription ID here. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;320756yk1x0\u0026#34;); Subscription response = PayUSubscription.find(parameters); if(response!=null){ response.getCreditCardToken(); response.getCustomer(); }    Deletion  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identifcador de la subscripción. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;123\u0026#34;); boolean response = PayUSubscription.cancel(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   Example request:\n$parameters = array( // Enter the subscription ID here. \tPayUParameters::SUBSCRIPTION_ID =\u0026gt; \u0026#34;03e481u9l13\u0026#34;, ); $response = PayUSubscriptions::cancel($parameters); if($response){ }    5. Additional charges A charge may be an additional charge or a discount realized on the value of one of the payments that comprise the recurring payment plan. These only affect the next pending item and run once.\nThe following operations are available:\n    URL Methods Descripción     /rest/v4.3/subscriptions/{subscriptionId}/recurringBillItems POST Adds extra charges to the respective invoice for the current period.\n{subscriptionId}: Identification of the subscription   /rest/v4.3/recurringBillItems/{recurringBillItemId} PUT Updates the information from an additional charge in an invoice\n{recurringBillItemId}: Identifier of the additional charge.   /rest/v4.3/recurringBillItems/{recurringBillItemId} GET Query extra charge information of an invoice from its identifier.\n{recurringBillItemId}: Identifier of the additional charge   /rest/v4.3/recurringBillItems/{recurringBillItemId} DELETE Remove an extra charge from an invoice.\n{recurringBillItemId}: Identifier of the additional charge.   /rest/v4.3/recurringBillItems/ GET Query extra charges of shop’s invoices that meet the stipulated filters. The available filters are shown below and should be sent as named parameters in the URL:\n{subscriptionId}: Identification of the subscription.\n{description}: Description entered in the extra charge.    Creation  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Additional charge description parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;Cargo extra de prueba\u0026#34;); // Value of the additional charge parameters.put(PayU.PARAMETERS.ITEM_VALUE, \u0026#34;20000\u0026#34;); // Currency parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;COP\u0026#34;); // Enter the subscription ID here. parameters.put(PayU.PARAMETERS.SUBSCRIPTION_ID, \u0026#34;52b04sx2s6\u0026#34;); // Enter the taxes here (optional) parameters.put(PayU.PARAMETERS.ITEM_TAX, \u0026#34;0\u0026#34;); // Devolution base of the taxes (optional) parameters.put(PayU.PARAMETERS.ITEM_TAX_RETURN_BASE, \u0026#34;0\u0026#34;); RecurringBillItem response = PayURecurringBillItem.create(parameters); if(response!=null){ response.getId(); }   Example request:\n$parameters = array( // Additional charge description \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;Cargo extra de prueba\u0026#34;, // Value of the additional charge \tPayUParameters::ITEM_VALUE =\u0026gt; \u0026#34;20000\u0026#34;, // Currency \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Enter the subscription ID here. \tPayUParameters::SUBSCRIPTION_ID =\u0026gt; \u0026#34;a9d01imeihk\u0026#34;, // Enter the taxes here (optional) \tPayUParameters::ITEM_TAX =\u0026gt; \u0026#34;0\u0026#34;, // Devolution base of the taxes (optional) \tPayUParameters::ITEM_TAX_RETURN_BASE =\u0026gt; \u0026#34;0\u0026#34;, ); $response = PayURecurringBillItem::create($parameters); if($response){ $response-\u0026gt;id; }    Update  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the additional charge ID here. parameters.put(PayU.PARAMETERS.RECURRING_BILL_ITEM_ID, \u0026#34;15tolsvwz7l\u0026#34;); //(OPTIONAL) New description of the additional charge parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;Test Item New\u0026#34;); //(OPTIONAL) New value of the additional charge parameters.put(PayU.PARAMETERS.ITEM_VALUE, \u0026#34;200.5\u0026#34;); //(OPTIONAL) New currency of the additional charge parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;COP\u0026#34;); //(OPTIONAL) New tax value of the additional charge parameters.put(PayU.PARAMETERS.ITEM_TAX, \u0026#34;15\u0026#34;); //(OPTIONAL) New devolution base of the taxes for the additional charge parameters.put(PayU.PARAMETERS.ITEM_TAX_RETURN_BASE, \u0026#34;185.5\u0026#34;); RecurringBillItem response = PayURecurringBillItem.update(parameters);   Example request:\n$parameters = array( // Additional charge ID \tPayUParameters::RECURRING_BILL_ITEM_ID =\u0026gt; \u0026#34;cbb57ywul2l\u0026#34;, // Additional charge description \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;Cargo extra de prueba\u0026#34;, // Value of the additional charge \tPayUParameters::ITEM_VALUE =\u0026gt; \u0026#34;20000\u0026#34;, // Currency \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // Enter the taxes here (optional) \tPayUParameters::ITEM_TAX =\u0026gt; \u0026#34;0\u0026#34;, // Devolution base of the taxes (optional) \tPayUParameters::ITEM_TAX_RETURN_BASE =\u0026gt; \u0026#34;0\u0026#34;, ); $response = PayURecurringBillItem::update($parameters); if($response){ }    Query (by id of extra charge)  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Additional charge ID parameters.put(PayU.PARAMETERS.RECURRING_BILL_ITEM_ID, \u0026#34;5e174m7lgns\u0026#34;); RecurringBillItem response = PayURecurringBillItem.find(parameters); if(response!=null){ }   Example request:\n$parameters = array( // Additional charge ID \tPayUParameters::RECURRING_BILL_ITEM_ID =\u0026gt; \u0026#34;cbb57ywul2l\u0026#34;, ); $response = PayURecurringBillItem::find($parameters); if($response){ $response-\u0026gt;description; $response-\u0026gt;subscriptionId; $response-\u0026gt;recurringBillId; }    Deletion  SDK Java SDK PHP   Example request:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Additional charge ID parameters.put(PayU.PARAMETERS.RECURRING_BILL_ITEM_ID, \u0026#34;15tolsvwz7l\u0026#34;); boolean response = PayURecurringBillItem.delete(parameters);   Example request:\n$parameters = array( // Additional charge ID \tPayUParameters::RECURRING_BILL_ITEM_ID =\u0026gt; \u0026#34;228bdp236sy\u0026#34;, ); $response = PayURecurringBillItem::delete($parameters); if($response){ }    ","excerpt":"/* The Modal (background) */ .modal { display: none; /* Hidden by default */ position: fixed; /* …","ref":"/en/deprecated/recurring-payments/recurring-payments-sdk.html","title":"Recurring payments - SDK"},{"body":"Sigue estos pasos para iniciar sesión en tu cuenta PayU.\n Ingresa a www.payu.com. En la esquina superior derecha, encontrarás la opción para iniciar sesión. Para comercios en Colombia, esta opción se llama PayU Login.\nO si lo prefieres, puedes ir directamente a https://merchants.payulatam.com/.  Inicia sesión en tu cuenta PayU utilizando las credenciales que enviamos a tu correo electrónico registrado.  Si tu usuario puede acceder a más de un comercio, haz clic en él para acceder. En caso contrario, será redirigido a tu comercio.  Tan pronto inicies sesión, puedes utilizar todas las opciones disponibles para manejar tu cuenta.  ","excerpt":"Sigue estos pasos para iniciar sesión en tu cuenta PayU.\n Ingresa a www.payu.com. En la esquina …","ref":"/es/payu-module-documentation/getting-started/log-in.html","title":"Iniciar sesión"},{"body":"Follow the next steps to log in your PayU account.\n Go to www.payu.com. At the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.  Log in to your PayU account by using the credentials we sent to your registered e-mail.  If your user can access to more than one merchant, click it to access it. Otherwise, you are redirected your merchant.  As soon as you log in, you can use all the available options to manage your PayU account.  ","excerpt":"Follow the next steps to log in your PayU account.\n Go to www.payu.com. At the top right corner, you …","ref":"/en/payu-module-documentation/getting-started/log-in.html","title":"Log In"},{"body":" Nota Los reportes en el Módulo PayU están limitados a 20 mil filas para visualización y descarga. Si necesitas tener reportes personalizados o mostrar más información, comunícate con tu representante de ventas.  Permisos requeridos Para tener acceso a este módulo, necesitas un perfil con el permiso Reportes \u0026gt; Reporte de Ventas activado.\nConsulta Perfiles y Permisos para más información.\nConsultar el reporte Ingresa a tu cuenta PayU. En el menú de la izquierda, expande el menú Transacciones y selecciona Reporte de Ventas.\nEn el reporte, puedes ver un cuadro de filtro y la lista de tus últimas ventas. De forma predeterminada, el reporte muestra la información de ventas* de los últimos siete días, desde el más reciente al más antiguo.\n*Limitado a 20 mil registros.\nEl reporte tiene las siguientes columnas:\n   Columna Descripción     Orden Esta columna muestra el identificador de la orden junto con la fecha de la venta.   Referencia Esta columna muestra la referencia de venta y el nombre del producto o servicio ofrecido.   Comprador Esta columna muestra el nombre y la dirección de correo electrónico de la persona que hizo la compra.   Monto Monto de la venta.   Método de pago Información del método de pago utilizado por el comprador.   Estado Estado actual de la orden.    Nota Si necesitas mostrar más información, consulta tu representante de ventas  Consulta los detalles de la orden para conocer todo el detalle de la transacción de la venta.\nFiltrar el reporte Puedes utilizar la barra de búsqueda sobre el gráfico o el calendario para establecer filtros. Puedes filtrar por Referencia, Orden, Comprador, Monto, estado o Método de pago.\nPara establecer un filtro, haz clic en el campo Filtre su búsqueda sobre la tabla del reporte.\nConfigura los valores de los filtros y haz clic en Buscar. Una vez hayas hecho clic, la tabla de filtros muestra las ventas que cumplen con los criterios seleccionados.\nJunto con estos filtros, también puedes establecer un período de tiempo en el que el comprador realizó la compra utilizando el filtro de fechas en la esquina superior derecha.\nEl rango de fechas de este filtro es un (1) mes antes de la fecha final. Si excedes este rango, el reporte muestra la información de un (1) mes después de la fecha de inicio.\nPara ver la información de una fecha específica, configúrala tanto para la fecha de inicio como para la fecha fin.\nDetalles de la transacción Puedes revisar los detalles de la transacción en línea. Para hacer esto, haz clic en el pedido que quieras consultar en la tabla de reporte. Los detalles de la transacción aparecen en el panel derecho.\nEl panel Detalles de la transacción tiene las siguientes secciones:\n     Nombre Descripción     1 Información de la orden Esta sección muestra el ID de la orden, su última fecha de actualización, su estado junto con la descripción del mismo y la referencia de venta.   2 Producto o servicio Descripción del producto o servicio que brindó en la venta.   3 Método de pago Información del Método de pago utilizado en la compra. La información que se muestra en esta sección varía según el método de pago.\nPara pagos en efectivo pendientes, esta sección le permite ver el recibo de pago generado para el comprador.   4 Valores Esta sección muestra los valores involucrados en esta transacción, como el Valor a cobrar (o cobrado), Valor pendiente, Valor reembolsado (para reembolsos), Valor expirado (Para pagos en efectivo).   5 Información del Comprador Información de la persona que realizó la compra.   6 Información de envío Información de las opciones de envío.   7 Esta compra tuvo Transacciones asociadas e esta compra. Haz clic en el simbolo ▾ para encontrar el histórico de las transacciones.\n   8 Actions Acciones disponibles sobre la orden.    Histórico de la transacción Cuando expandes la sección Esta compra tuvo, puedes ver los detalles de cada transacción asociada a una orden.\nLa información disponible incluye los valores debitados de tu cuenta, el método de pago, la información del pagador y más.\nDescargar el reporte Para descargar el reporte, haz clic en el botón Descargar ubicado en la parte superior o inferior de la tabla del reporte.\nAparece una ventana emergente donde puedes seleccionar las opciones para generar el reporte:\n Reporte: te permite generar un reporte con el estado de las órdenes y el estado final de la última transacción o intento de compra relacionado con esa orden. Versión del antiguo Módulo Administrativo: te permite generar un reporte con todas las transacciones y muestra la información del comprador y pagador (correo electrónico, nombre, número de documento)*.  Nota * Si el formato del archivo no se ajusta a tus necesidades, comunícate con tu ejecutivo de ventas para conocer más sobre la opción de enviar archivos a través de SFTP y las plantillas que tenemos para este reporte.  El reporte se descarga automáticamente en formato de Excel (.csv). El nombre del reporte utiliza los siguientes formatos\n Opción Reporte: [FechaDescargaEnMilisegundos]_orders_[AccountId].csv Opción Versión del antiguo Módulo Administrativo: [AccountId]_[FechaDescarga]_transactions.csv*  * fecha de descarga en formato dd-mm-yy-hh-mm-ss\nDescarga un ejemplo del archivo generado utilizando la opción Report.  Descarga un ejemplo del archivo generado utilizando la opción Balance from previous secure.   Nota El reporte generado es almacenado durante 90 días en la sección Mis reportes descargados.  ","excerpt":"Nota Los reportes en el Módulo PayU están limitados a 20 mil filas para visualización y descarga. Si …","ref":"/es/payu-module-documentation/reports/sales-report.html","title":"Reporte de ventas"},{"body":" Note The Sales Report displayed in the merchant panel are limited to 20 thousand rows for both displaying and downloading. If you need display more rows or columns in the report, contact your sales representative.  Permission required To have access to this module, you need to have a profile with the Reports \u0026gt; Sales Report permission enabled.\nRefer to Profiles and Permissions for more information.\nConsult the report Log into your PayU account. In the left menu, expand the Transactions menu and select Sales Report.\nIn the report, you can see a filter box, and the list of your latest sales. By default, the report shows the sales information* of the last seven days, from the most recent to the oldest.\n*Limited to top 20 thousand records.\nThe report has the following columns:\n   Column Description     Order This column shows the identifier of the order along with the date of the sale.   Reference This column shows the sale reference and the name of the product or service offered.   Buyer This column shows the name and the e-mail address of the person who preform the buy.   Amount Amount of the sale.   Payment method Information of the payment method used by the buyer.   Status Current status of the order.    Note If you need to display more information, contact your sales representative.  Refer to Order details to know all the transaction detail of the sale.\nFilter the report You can use the search bar above the graph or the calendar to set filters. You can filter by Reference, Order, Buyer, Amount, status, or Payment method.\nTo set a filter, click the Filter my sales field at the top of the report table.\nConfigure the values for the filters and click Search. Once you click it, the filter table shows the sales that meet the selected criteria.\nAlong with these filters, you can also set a time frame when the buyer performed the purchase using the dates filter at the top right corner.\nThe date range of this filter is one (1) month before the end date. If you exceed this range, The report displays the information of one (1) month after the start date.\nTo see the information of a given date, set it for both start and end date.\nTransaction details You can review the transaction detail online. To do this, click the order you want to consult in the report table. The transaction details appears in the right panel.\nThe Transaction details panel has the following sections:\n     Name Description     1 Order info This section shows the Order Id, its latest update date, its status along with the status description, and the sale reference.   2 Product or service Description of the product or service you provided in the sale.   3 Payment method Information of the Payment method used in the purchase. The information displayed in this section varies according to the payment method.\nFor pending cash payments, this section lets you see the payment receipt generated to the buyer.   4 Values This section shows the values involved in this transaction such as the Value to charge (or charged), Pending value, Refunded value (for refunds), Expired value (for cash payments).   5 Buyer info Information of the person who performed the purchase.   6 Delivery info Information of the delivery options.   7 This purchase had Transactions associated to this purchase. Click the ▾ symbol to find the transaction history.\n   8 Actions Actions available over the order.    Transaction history When you expand the This purchase had section, you can see the details of each transaction associated to an order.\nThe information available includes the values debited from your account, the payment method, the payer information and more.\nDownload the report To download the report, click the Download button located at the top or at the bottom of the report table.\nA pop up window appear where you can select the options to generate the report:\n Report: lets you generate a report with the status of the orders and the final status of the last transaction or attempted purchase related to that order. Balance from previous secure: lets you generate a report with all the transactions and shows the information of the buyer and payer (e-mail, name, document number)*.  Note * If the file format does not meet the your needs, contact your sales executive to know more about the option to send files through SFTP and the templates that we have for this report.  The report is automatically downloaded in an Excel (.csv) format. The name of the report uses the following formats:\n Report option: [DownloadDateInMillis]_orders_[AccountId].csv Balance from previous secure option: [AccountId]_[DownloadDate]_transactions.csv*  * Download date in format dd-mm-yy-hh-mm-ss\nDownload an example of the generated file using the Report option.  Download an example of the generated file using the Balance from previous secure option.   Note The generated report is stored during 90 days in the My downloaded reports section.  ","excerpt":"Note The Sales Report displayed in the merchant panel are limited to 20 thousand rows for both …","ref":"/en/payu-module-documentation/reports/sales-report.html","title":"Sales Report"},{"body":"Currently, e-commerce it\u0026rsquo;s no longer a taboo. Before, people used to think that selling online require a high technical knowledge and programming skills.\nNevertheless, beyond the knowledge, the key is to have the best allies and, mainly, use the best strategies that allows the growth of your product.\nPayU offers the best payment gateway to help your shop sell online even if you don\u0026rsquo;t have a web page.\nHow to sell using PayU? Through PayU Module, you have the tools to start selling online fast and easy, no matter if you don\u0026rsquo;t have a web page.\nTo sell with PayU, you just need an active account in the PayU Module and configure the tool to receive the payment.\nWhat tools are available? There are two options to create payments using the PayU Module:\nPayment request Generate Payment requests which can be shared via email, chats, social networks, or included as a button for your webpage (if you own one).\nLearn more about Payment request   Payment coupons Generate payment coupons and collection cards with the necessary information to let your clients make cash payments as many times as they need in the available payment points.\nLearn more about Payment coupons     Note Review Integrations if you already have a web page and you want to integrate with the PayU services.  ","excerpt":"Currently, e-commerce it\u0026rsquo;s no longer a taboo. Before, people used to think that selling online …","ref":"/en/payu-module-documentation/payu-operations/sell-with-payu.html","title":"Sell With PayU"},{"body":"Actualmente el comercio electrónico ha dejado de ser un tabú. Antes se tenía la creencia de que para vender de manera virtual era necesario tener altos conocimientos técnicos de programación.\nSin embargo, se ha comprobado que más allá de los conocimientos, la clave está en tener buenos aliados y sobretodo utilizar buenas estrategias que permitan el crecimiento de tu negocio.\nPayU ofrece la mejor pasarela de pago para ayudar a tu negocio a vender en línea, incluso si no tienes una página web.\n¿Cómo empezar a vender utilizando PayU? A través del Módulo PayU, tienes las herramientas para comenzar a vender en línea rápido y fácil, sin importar si no tienes una página web.\nPara vender con PayU, solo necesitas una cuenta activa en el Módulo PayU y configurar la herramienta para recibir el pago.\n¿Qué herramientas hay disponibles? Hay dos opciones para crear pagos usando el Módulo PayU:\nSolicitud de pago Genera solicitudes de pago que se pueden compartir a través de correo electrónico, chats, redes sociales o incluirla como un botón para tu página web (si tienes una).\nAprende más sobre Solicitud de pago   Cupones de pago Genera cupones de pago y tarjetas de cobro con la información necesaria para que tus clientes puedan realizar pagos en efectivo las veces que lo necesiten en los puntos de pago disponibles.\nAprende más sobre Cupones de pago     Nota Revisa Integraciones si ya cuentas con una página web y quieres integrarte con los servicios de PayU.  ","excerpt":"Actualmente el comercio electrónico ha dejado de ser un tabú. Antes se tenía la creencia de que para …","ref":"/es/payu-module-documentation/payu-operations/sell-with-payu.html","title":"Vende con PayU"},{"body":"Antes de continuar, vamos a recapitular unos términos claves:\n Un usuario es una persona que tiene un perfil para administrar o consultar la información de una cuenta. Un perfil es un conjunto de permisos para acceder a una cuenta. A usuario puede tener uno o más perfiles, esto significa que un usuarios puede acceder a múltiples cuentas y múltiples comercios.  Para más información, lee los conceptos detrás del Módulo PayU.\nPermisos requeridos Para tener acceso a este módulo, necesitas un perfil con los siguientes permisos activos:\n Consultar usuarios\nEste permiso te permite buscar un usuario en particular. Crear, editar y eliminar usuarios  Consulta Perfiles y Permisos para más información.\nGestión de usuarios Para gestionar usuarios, ingresa a tu cuenta PayU y haz clic en el menú Configuración en la parte superior de la pantalla y luego, selecciona Gestión de usuarios.\nSe abre el módulo de Gestión de usuarios, aquí puedes ver la lista de usuarios disponibles junto con su estado, las cuentas a las que pueden acceder y su perfil.\nNota Los usuarios marcados con una estrella verde () son usuario predeterminados, los cuales no pueden ser borrados (desactivados).  Agregar usuarios Puedes crear un usuario utilizando su correo electrónico o utilizando un nombre de usuario. Sigue estos pasos para crear un nuevo usuario.\n En el módulo Gestión de usuarios, haz clic en Agregar usuario.  Aparece la ventana de Agregar usuario. Aquí puedes ingresar la información de la persona a la que se permitirá recolectar pagos en línea y verificar la información de los pagos, de acuerdo con los permisos que le otorgues.  Ingresa la siguiente información:   Correo electrónico: dirección de correo electrónico del nuevo usuario. PayU envía la información para iniciar sesión a esta dirección, asegúrate de que sea válida y que el usuario tenga acceso a él.\nO si lo prefieres, puedes crear un usuario sin utilizar dirección de correo electrónico. Esto es útil cuando el usuario que quieres crear está atado a un rol y no a una persona específica. Para hacer esto, haz clic en ¿No tiene correo electrónico? e ingresa la siguiente información:  Usuario: nombre de usuario utilizado para iniciar sesión. Este nombre de usuario no puede tener números o caracteres especiales. Correo electrónico (Admin): ingresa la dirección de correo electrónico del usuario administrador al cual, PayU envía la información para generar o recuperar la contraseña de este usuario.   Nombre completo: nombre del usuario que deseas crear. Estado: define si el usuario que vas a crear está Activo o Inactivo.  Configura las preferencias de usuario. puedes configurar las siguientes:   Formato fecha: cambia el formato en que quieres mostrar las fechas en tu módulo PayU,  Puedes utilizar cualquiera de los siguientes formatos:\n   Formato Ejemplo\n24 de Agosto de 2021     dd/mm/aaaa 24/08/2021   mm/dd/aaaa 08/24/2021   aaaa/mm/dd 2021/08/24   aaaa/mmm/dd 2021/Ago/24   dd-mm-aaaa 24-08-2021   mm-dd-aaaa 08-24-2021   aaaa-mm-dd 2021-08-24   aaaa-mmm-dd 2021-Ago-24     Zona horaria: cambia la zona horaria del país en el que deseas visualizar la información de las transacciones.   Formato moneda: cambia el formato en el que deseas visualizar los valores monetarios en tu Módulo PayU.   Idioma: cambia el idioma de tu Módulo PayU.  Al final de la pantalla, se cargan todos los perfiles (predeterminados y personalizados) junto con las cuentas del comercio actual. Configura el acceso a cada cuenta configurando un perfil, si no quieres que tenga acceso a una cuenta, no selecciones ningún perfil.  Nota Si quieres asignarle un perfil personalizado, debes crearlo primero.  Una vez termines, haz clic en Agregar usuario.  En este punto, ¡has agregado el nuevo usuario! Enviamos un correo electrónico a la dirección del usuario para que pueda acceder al Módulo PayU.\nEl nuevo usuario debe activar la cuenta utilizando el botón Activa tu usuario en el cuerpo del correo.  Nota Si el usuario se creó sin usar el correo electrónico, las instrucciones para activar la cuenta se envían al correo electrónico de administrador que definiste.  El nuevo usuario debe asignar una nueva contraseña para acceder a la cuenta.  Una vez que el usuario establece la nueva contraseña, puede acceder a las cuentas seleccionadas usando sus credenciales.  Buscar usuarios Cuando necesites encontrar un usuario específico, puedes utilizar las opciones de filtro para encontrar uno o más usuarios que cumplan con determinadas condiciones.\nEn el módulo Gestión de usuarios, haz clic en el campo Buscar usuarios para ver los filtros disponibles.\nUna vez hayas seleccionado los filtros, haz clic en Buscar. Todos los usuarios que cumplen las condiciones seleccionadas se muestran en la tabla.\nSi quieres eliminar un filtro, haz clic en el ícono x junto a él.\nEditar usuarios A través del módulo de Gestión de usuarios, puedes actualizar algunas propiedades de un usuarios. para actualizar un usuario, búscalo y haz clic en él.\nAparece la ventana de Editar usuarios.\nPuedes actualizar la siguiente información:\n Nombre completo de un usuario Solicitar la recuperación de la contraseña. Actualizar el estado del usuario (activo o inactivo) Cambiar o eliminar el perfil asignado a una cuenta determinada.  Nota La información de las preferencias del usuario no se puede actualizar mediante esta opción, esta información es actualizada por cada usuario por su cuenta.  Una vez termines, haz clic en Guardar configuración para aplicar los cambios.\nEditar múltiples usuarios Para editar varios usuarios, búscalos y utiliza la casilla de verificación de la izquierda. Luego, haz clic en Editar usuarios (n).\nAparece la ventana de Editar usuarios (n), donde puedes actualizar la siguiente información:\n Solicitar la recuperación de contraseña para todos los usuarios. Actualizar su estado de usuario (activo o inactivo) Asignar un perfil a una cuenta determinada.  Ten en cuenta que al utilizar esta opción, todos los usuarios tendrán la misma configuración que definas aquí.\nUna vez termines, haz clic en Guardar configuración para aplicar los cambios.\n","excerpt":"Antes de continuar, vamos a recapitular unos términos claves:\n Un usuario es una persona que tiene …","ref":"/es/payu-module-documentation/user-and-profile-management/user-management.html","title":"Gestión de usuarios"},{"body":"Before moving on, let\u0026rsquo;s recap some key terms:\n A user is a person who has a profile to manage or consult the information of an account. A profile is a set of permissions to access an account. A user can have one or multiple profiles, this means that a user can access multiple accounts and multiple merchants.  For further information, read the concepts behind the PayU Module.\nPermission required To have access to this module, you need to have a profile with the following permission enabled:\n Review Users\nThis permission allows you to search a specified user. Create, edit and delete users  Refer to Profiles and Permissions for more information.\nUser management To manage users, open you PayU account and click Settings menu at the top the screen and then, select User management.\nThe User management module opens, here, you can find a list of the available users along with their status, the accounts they can access, and their profile.\nNote The users marked with a green star () are default users which cannot be deleted (deactivated).  Add users You can create a user using their e-mail address or providing a username. Follow the steps below to create a new user.\n In the User management module, click Add user.  The Add user window appears. Here, you can provide the information of the person who will be allowed to collect payments over the internet and check information about your payments, according to the permission you provide.  Provide the following user information:   E-mail: E-mail address of the new user. PayU sends the login information to this e-mail address, make sure it is valid and the user has access to it.\nAlternatively, you can create a user without using an e-mail address. This is useful specially when the user you want to create is attached to a role and not to a specific person. To do this, click Don\u0026rsquo;t have an e-mail? and provide the following information:  User: username used to log in. This user name cannot have numbers nor special characters. E-mail (Admin): provide the e-mail of the admin user to which, PayU send the options to generate or recover the password for this user.   Full name: name of the user you want to create. Status: set if the user you want to create is Active or Inactive.  Configure the user preferences. You can configure any of the following:   Date format: change the format in which you want to display the dates in your PayU Module,  You can use any of the following formats:\n   Format English Format Example\nAugust 24, 2021     dd/mm/aaaa dd/mm/yyyy 24/08/2021   mm/dd/aaaa mm/dd/yyyy 08/24/2021   aaaa/mm/dd yyyy/mm/dd 2021/08/24   aaaa/mmm/dd yyyy/mmm/dd 2021/Aug/24   dd-mm-aaaa dd-mm-yyyy 24-08-2021   mm-dd-aaaa mm-dd-yyyy 08-24-2021   aaaa-mm-dd yyyy-mm-dd 2021-08-24   aaaa-mmm-dd yyyy-mmm-dd 2021-Aug-24     Time Zone: change the time zone of the country in which you want to display the transaction’s information.   Currency format: change the display format of the currency values shown in your PayU module.   Language: change the language of your PayU module.  At the bottom of the screen, all the profiles created (both default and custom) loads along with the accounts of the current merchant. Configure the access for each account setting a profile, if you don\u0026rsquo;t want to enable access to an account, don\u0026rsquo;t select a profile.  Note If you want to assign a custom profile, you must create it first.  Once finish, click Add user.  At this point, you have added the new user! We sent an e-mail to user address so they can access the PayU module.\nThe new user has to activate the account using the Activate your account button in the e-mail.  Note If the user was created without using e-mail, the instructions to activate the account are sent to the Admin e-mail you defined.  The new user needs to set a new password to access the account.  Once the user sets the new password, they can access to the selected accounts using their credentials.  Search users When you need to find a specific user, you can use the filter options to find one or more users that meet given conditions.\nIn the User management module, click the Search users field to see the available filters.\nOnce you have selected the filters, click Search. All the users that meets the conditions selected are displayed in the table.\nIf you want to remove a filter, click the x icon next to it.\nEdit users Through the User management module, you can update some information of a user. To update a user, search and click them.\nThe Edit user window appears.\nYou can update the following information:\n Full name of a user Request a password recovery. Update the user status (Active or Inactive) Change or remove the profile assigned to a given account.  Note The information of the user preferences cannot be updated using this option, this information is updated by each user by their own.  Once finish, click Save setting to apply the changes.\nEdit multiple users To edit multiple users, search them and use the checkbox at the left. Then, click Edit users (n).\nThe Edit users (n) window appears, where you can update the following information:\n Request a password recovery for all the users. Update their user status (Active or Inactive) Assign a profile to a given account.  Take into account that using this option, all the users will have the same configuration you define here.\nOnce finish, click Save setting to apply the changes.\n","excerpt":"Before moving on, let\u0026rsquo;s recap some key terms:\n A user is a person who has a profile to manage …","ref":"/en/payu-module-documentation/user-and-profile-management/user-management.html","title":"User Management"},{"body":" Nota Una vez se haya activado y validado tu cuenta, tu información de contacto, de negocio y de ventas no puede ser actualizada utilizando el Módulo PayU. Si necesitas actualizar esta información, contacta a ssac@payu.com.  Cambiar contraseña Sigue estos pasos para cambiar tu contraseña actual.\n En la esquina superior derecha, haz clic en el símbolo ▾ junto a la dirección de tu correo electrónico para mostrar las configuraciones de usuario disponibles.\nHaz clic en Mi perfil.  En la pantalla Mi perfil, haz clic en Cambiar contraseña.  Aparece el panel de Cambiar contraseña. Debes ingresar la contraseña actual y la nueva contraseña dos veces.  Una vez termines, haz clic en Guardar cambios en el pie de la sección. En caso contrario, haz clic en Descartar cambios para cerrar el panel de Cambiar contraseña y descartar el cambio de tu contraseña.  Actualizar tus preferencias de usuario En esta sección, puedes cambiar la configuración de visualización de la información que se muestra en tu módulo, así como el formato de fecha, la zona horaria de tu país, el formato de moneda y el idioma de visualización.\nPara esto, haz clic en el símbolo ▾ junto a la dirección de tu correo electrónico para mostrar las configuraciones de usuario disponibles.\nHaz clic en Mi perfil.\nEn la pantalla Mi perfil, ubica el panel Preferencias.\nEn la parte superior del panel, puedes ver un ejemplo de la fecha actual y la hora en la zona horaria seleccionada en el formato que escogiste.\nFormato de fecha Cambia el formato en que quieres mostrar las fechas en tu módulo PayU.\nPuedes utilizar cualquiera de los siguientes formatos:\n   Formato Ejemplo\n24 de Agosto de 2021     dd/mm/aaaa 24/08/2021   mm/dd/aaaa 08/24/2021   aaaa/mm/dd 2021/08/24   aaaa/mmm/dd 2021/Ago/24   dd-mm-aaaa 24-08-2021   mm-dd-aaaa 08-24-2021   aaaa-mm-dd 2021-08-24   aaaa-mmm-dd 2021-Ago-24    Zona Horaria Cambia la zona horaria del país en el que deseas visualizar la información de las transacciones.\nFormato moneda Cambia el formato en el que deseas visualizar los valores monetarios en tu Módulo PayU.\nIdioma Cambia el idioma de tu Módulo PayU.\nNota Luego de realizar cualquier cambio, no olvides hacer clic en Guardar cambios al final de la sección para aplicar los cambios.  Cambiar tu logo Utilizando el módulo PayU, puedes cargar el logo de tu comercio para que se pueda mostrar en nuestro Web checkout.\nPara cargar o actualizar tu logo, sigue estos pasos.\n En las opciones de tu cuenta, expande la cuenta actual utilizando el simbolo ▾ symbol. Luego, selecciona Datos de ventas.  En la ventana Datos de tus Ventas, ubica el campo Logo de tu tienda.\nSi aún no has cargado un logo, selecciona el enlace Selecciona tu logo. Si ya tienes uno, utiliza el enlace Cambiar logo.   Aparece el panel de carga, localiza la imagen de tu logo en tu equipo local.\n  El tamaño máximo permitido para tu logo es de 350x90 pixeles, si la imagen seleccionada es mayo a este tamaño, puedes cortarla utilizando el panel de carga. Además, este panel brinda las opciones para acercar o rotar la imagen.\nCuando termines, has clic en Guardar.\n  Solicitar el cambio de tu cuenta bancaria Una vez tu cuenta ha sido verificada por nuestro equipo de riesgo, puedes solicitar la actualización de tu información bancaria. Debito a rezones de seguridad, la actualización de la información de tu banco debe ser verificada nuevamente de la misma forma que cuando creaste la cuenta.\nPara solicitar la actualización de tu cuenta bancaria, expande la opción Transferencias en el menú de la izquierda. Luego, selecciona Editar datos bancarios.\nSe abre la opción Datos bancarios, haz clic en el enlace Editar para habilitar los campos de tu cuenta.\nIngresa la información relacionada a tu cuenta bancaria como: país, banco, número de cuenta, etc.\nConsideraciones  La información disponible depende del país de tu cuenta. Si la cuenta bancaria es extranjera, debes ingresar la información del Banco intermediario como el nombre, el código ABA, y el código Swift.   Junto con la información que ingresas, necesitas adjuntar una certificación* expedida por tu banco para probar la veracidad y autenticidad de la información.\n* Dependiendo de tu país, es posible que debas adjuntar más documentos.\nCuando termines, haz clic en Guardar cambios. Cuando la información es enviada, se te informa del resultado de la operación.\nAdemás, recibes un correo electrónico informando de la solicitud y entregando un número de ticket.\nEl procedimiento para validar tu cuenta toma de uno a dos días. Mientras tanto, la información que ingresaste se carga en el panel Cuenta bancaria en análisis.\nTan pronto como nuestro equipo de Riesgos haya validado la información de tu cuenta bancaria, podrás transferirle los fondos recaudados en tu cuenta PayU. Mientras la nueva cuenta está en proceso de validación, las transferencias que realices se envían a la cuenta bancaria anterior.\n","excerpt":"Nota Una vez se haya activado y validado tu cuenta, tu información de contacto, de negocio y de …","ref":"/es/payu-module-documentation/getting-started/understanding-the-payu-module/update-my-information.html","title":"Actualizar mi información"},{"body":" Note Once your account has been validated and activated, your contact, business, and sales information cannot be updated using the PayU module. If you need to update this information, contact sac@payu.com.  Change password Follow these steps to change your current password.\n At the top right corner, click the ▾ symbol next to your e-mail address to display the available user settings.\nClick My profile.  In the My profile screen, click Change password.  The Change password panel appears. You must enter here the current password and enter the new password twice.  Once finish, click Save changes at the footer of the section. Otherwise, click Discard changes to close the Change password panel and discard the change of your password.  Update your user preferences In this section, you can change the display settings of the information displayed in your module, such as the date format, time zone of your country, the currency format and the display language.\nTo do this, click the ▾ symbol next to your e-mail address to display the available user settings. Then, click My profile.\nIn the My profile screen, locate the Preferences panel.\nAt the top of the panel, you see an example of the current date and time of the time zone selected and displayed in the format your choose.\nDate format Change the format in which you want to display the dates in your PayU Module.\nYou can use any of the following formats:\n   Format English Format Example\nAugust 24, 2021     dd/mm/aaaa dd/mm/yyyy 24/08/2021   mm/dd/aaaa mm/dd/yyyy 08/24/2021   aaaa/mm/dd yyyy/mm/dd 2021/08/24   aaaa/mmm/dd yyyy/mmm/dd 2021/Aug/24   dd-mm-aaaa dd-mm-yyyy 24-08-2021   mm-dd-aaaa mm-dd-yyyy 08-24-2021   aaaa-mm-dd yyyy-mm-dd 2021-08-24   aaaa-mmm-dd yyyy-mmm-dd 2021-Aug-24    Time Zone Change the time zone of the country in which you want to display the transaction’s information.\nCurrency format Change the display format of the currency values shown in your PayU module.\nLanguage Change the language of your PayU module.\nNote After changing any of the user settings, do not forget to click Save changes button at the footer of the section to apply the changes.  Change your logo Using the PayU module, you can upload the logo of your merchant so it can be displayed in our Web checkout.\nTo upload or update your logo, follow these steps.\n In the account options, expand the current account using the ▾ symbol. Then, select Your sale information.  In the Your sales information window, find the Merchant logo field.\nIf you have not uploaded a logo yet, click the Select your logo link. Otherwise, use the Change logo link.   The upload panel appears, locate the image of your logo in your local machine.\n  The maximum size allowed for your logo is 350x90 pixels, if the selected image is bigger than this size, you can crop it using the upload panel. Furthermore, this panel provides options to zoom in or rotate the image.\nWhen finish, click Save.\n  Request the change of your bank account Once your account has been verified by our Risk team, you can request the update of your bank information. Due to security reasons, the update of bank information must be verified again as when you create the account.\nTo request the update of your Bank account, expand Transfers option at the left menu. Then, select Edit bank details.\nThe Bank information option opens, click the Edit link to enable the fields of the bank account.\nProvide the information related to your Bank Account such as: country, bank, account number, etc.\nConsiderations  The information available depends on the country of your account. If the Bank account is foreign, you must provide the information of the Intermediary bank such as its name, the ABA code, and the Swift code.   Along with the information you provide, you need to attach a certification* issued by your bank to proof the veracity and authenticity of the information.\n* Depending on your country, you may need to attach more documents.\nWhen finish, click Save changes. When the information is submitted, you are prompted about the result of the operation.\nFurthermore, you receive an e-mail informing the request and providing a ticket number.\nThe procedure to validate your account take up two working days. In the meantime, the information you provide is loaded in the Bank account under analysis panel.\nAs soon as your bank account information has been validated by our Risk team, you can transfer to it the funds collected in your PayU account. While the new account is under validation, the transfers you make are sent to the former bank account.\n","excerpt":"Note Once your account has been validated and activated, your contact, business, and sales …","ref":"/en/payu-module-documentation/getting-started/understanding-the-payu-module/update-my-information.html","title":"Update my information"},{"body":"Prerequisites  You need an active account in PayU Latam. You need a valid plan in Shopify. Checkout is not available in Trial plans.  Order management in Shopify Take into account the following when managing orders in Shopify:\n All orders: are the orders with state Approved (fully or partially paid) and Pending (while the payer backs to the store after processing the payment in the gateway). Abandoned checkouts: are payment procedures which meet any of the following criteria:  Uncompleted checkouts. Checkouts abandoned during the payment process. Transactions with Rejected state. Transactions with Pending state as long as the payer does not return to the store after processing the payment in the gateway:\n4.1. Cash Payments (always return Pending state).\n4.2. Credit Card payments that are subject to fraud analysis.    Note  Shopify DOES NOT make any stock reservation or for any of these two cases. Shopify creates the order for these two cases when the final state of the transaction is Approved.   Enable PayU as Payment gateway  Enter to your Shopify admin site. Click Settings and then, select Payments.  Go to the Third-party providers section and click Choose third-party provider.  In the list, find and click the PayU Latam gateway.  Provide the following information of your PayU account:   Account Id (1): ID of the PayU account according to the country where you want to sell. Api Key (2): Unique key of your commerce, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; API Key).  Finally, click Activate PayU Latam button at the bottom of the page.  Open the PayU module and go to the Configuration options (Settings \u0026gt; Technical configuration). Then, disable the validation of unique reference for all states, to avoid issues at the moment of processing your payments.  At this point, your customers can make payments through the PayU Checkout. They are able to pay using payment options including cash, credit cards and bank transfers, depending on the country where you are selling.\nPayment flow in Shopify When you configure PayU as payment gateway in platform, your customer can pay as explained below.\n Your customer selects the product or service they want to buy and add it to their shopping cart.  In the shopping cart, you customer proceeds to the check out.  Once your customer provides their information, they can click Complete order to be redirected to PayU Latam to complete the payment.  When they are in our payment gateway, they can see the sale description and the available payment methods for your country.  ","excerpt":"Prerequisites  You need an active account in PayU Latam. You need a valid plan in Shopify. Checkout …","ref":"/en/docs/tools/shopping-cart-plugins/shopify.html","title":"Shopify"},{"body":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Necesitas un plan válido en Shopify. El Checkout no está disponible para cuentas Trial.  Gestión de órdenes en Shopify Ten en cuenta lo siguiente cuando manejes órdenes en Shopify:\n All orders: son las órdenes con estado Aprobado (con pago completo o parcial) y Pendiente (siempre y cuando el pagador regrese a la tienda luego del procesamiento del pago en la pasarela). Abandoned checkouts: son procesos de pago que cumplen con uno de los siguientes criterios:  No fueron completados. Fueron abandonados durante el proceso de pago. Transacciones con estado Rechazado. Transacciones con estado Pendiente siempre y cuando el pagador no regrese a la tienda luego del procesamiento del pago en la pasarela:\n4.1. Pagos en efectivo (siempre se obtiene el estado Pendiente state).\n4.2. Pagos con Tarjetas de Crédito que entren en validación por las reglas de protección antifraude.    Nota  Shopify NO realiza ningún tipo de reserva de inventarios para los casos anteriores. Shopify crea órdenes para estos casos cuando el estado final de la transacción es Aprobado.   Configurar PayU como pasarela de pagos  Ingresa a tu panel de control de Shopify. Haz clic en Configuración y luego, selecciona Pagos.  Ve a la sección Proveedores de pago y haz clic en Seleccionar un proveedor.  En la lista, localiza y haz clic en la pasarela de PayU Latam.  Ingresa la siguiente información de tu cuenta PayU:   Account Id (1): Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender. Api Key (2): Llave única de tu comercio, puedes obtener esta información en tu Módulo PayU (Configuración \u0026gt; Configuración técnica \u0026gt; API Key).  Por último, haz clic en el botón Activar PayU Latam al final de la página.  Abre el Módulo PayU module y vé a las opciones de Configuración (Configuración \u0026gt; Configuración técnica). Luego, desactiva la validación de referencias únicas para todos los estados para evitar problemas al momento de procesar tus pagos.  En este punto, tus clientes pueden hacer pagos utilizando el Checkout de PayU y podrán pagar utilizando métodos de pago como efectivo, tarjetas de crédito y transferencias bancarias, dependiendo del país en el que estés vendiendo.\nFlujo de pago en Shopify Cuando configuras PayU como pasarela de pago en la plataforma, tu cliente puede pagar de la siguiente forma.\n Tu cliente selecciona el producto o servicio que quiere comprar y luego lo agrega a su carrito de compras.  En el carrito de compras, tu cliente procede al pago.  Una vez tu cliente ingresa su información, puede hacer clic en Finalizar el pedido para ser redireccionado a PayU Latam para completar el pago.  Cuando está en nuestra pasarela de pagos, puede ver la descripción de la venta y los métodos de pago disponibles para tu país.  ","excerpt":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Necesitas un plan válido en Shopify. El …","ref":"/es/docs/tools/shopping-cart-plugins/shopify.html","title":"Shopify"},{"body":"To integrate with Payments SDK Argentina, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments SDK includes the following methods:\n Submit transaction with credit card Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit card This method lets you process the payments performed by your customers using credit cards. For Argentina, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Argentina. For payments with Promotions, set the parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. Promotions feature is only available for one-step flows. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE. When using credit cards, take into account the considerations due to Argentinian regulations for the check out page. Due to Tax regulations, it is mandatory to set the parameters PAYER_STATE and PAYER_DNI_TYPE.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s DNI type here parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 14 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s DNI type here parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Installments When processing transactions with credit cards, you need to show the following aspects to your customer when processing installments:\nWhere:\n   Number in the screen Option Description     1 Total purchase Total amount of the purchase without financing.   2 Total payment Total amount financed of the purchase.   3 Installments Number of installments and their amount.   4 TEA The annual effective interest rate (TEA) applied.   5 CFT The total financial cost (CFT).    The information of the total financial cost (CFT) must comply with the following directions:\n  Must be located next to the reported variables.\n  Must appear in a prominent color typeface using the same font and size of at least five times bigger than the one used to inform the annual effective interest rate (TEA), the number of installments, and their amount.\n  According to the current regulations, you cannot use the phrase without interest (in Spanish, \u0026ldquo;sin interés\u0026rdquo;) or any other similar phrase, when the financial cost of the product or service is transferred to the customer\u0026rsquo;s selling price.\nSubmit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  Send a valid cash Payment Method in the request, see the available Payment Methods for Argentina. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is 15 days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The response returns the following extra parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s DNI type here parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PAGOFACIL\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Payer IP. parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request. TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the cash payment method name here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PAGOFACIL\u0026#34;, // Enter the payment due date \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Argentina, target the requests to the following URLs:\n Java PHP   // …","ref":"/en/docs/integrations/sdk-integration/payments-sdk-argentina.html","title":"Payments SDK - Argentina"},{"body":"Para integrarte con el SDK de Pagos de Argentina, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de pagos incluye los siguientes métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar el SDK de Consultas.  Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito. Para Argentina, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nConsideraciones  Envía un método de pago válido de tarjeta de crédito, mira los métodos de pago disponibles para Argentina. Para pagos con Promociones, asigna los parámetros INSTALLMENTS_NUMBER y PROMOTION_ID con el número de cuotas seleccionadas y el ID de la promoción. Consulta el [API de promociones] (/es/docs/services/promotions.html) para más información. La funcionalidad de promociones solo está disponibles para flujos de un paso. Para pagos con tókenes de tarjeta de crédito, asigna los parámetrosTOKEN_ID y CREDIT_CARD_SECURITY_CODE (si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el SDK de Tokenización. Por defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas. Luego de que se te active esta funcionalidad, asigna el parámetro PROCESS_WITHOUT_CVV2 con true y elimina el parámetro CREDIT_CARD_SECURITY_CODE. Cuando utilices tarjetas de crédito, ten en cuenta las consideraciones relacionadas a las regulaciones argentinas para la página de checkout. Por normativa de impuestos, es obligatorio configurar los parámetros PAYER_STATE y PAYER_DNI_TYPE.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- // Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí el tipo de identificación del pagador parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorization(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí el tipo de identificación del pagador \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorization($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de 14 días. Despues de este tiempo, la transacción es anulada automáticamente. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada.  Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Ingresa aquí el identificador de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Petición de Captura TransactionResponse response = PayUPayments.doCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el identificador de la cuenta. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Ingresa aquí el identificador de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Ingresa aquí el identificador de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador. parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí el tipo de identificación del pagador parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de \u0026#34;Autorización y captura\u0026#34; TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí el tipo de identificación del pagador \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Cuotas Cuando proceses transacciones con tarjetas de crédito, necesitas mostrar los siguientes aspectos a tu cliente cuando se seleccione diferir la compra en cuotas:\nDonde:\n   Número en la pantalla Opción Descripción     1 Total compra El precio de contado.   2 Total a pagar El precio total financiado.   3 Cuotas Número de cuotas y el monto de cada una.   4 TEA La tasa de interés efectiva anual aplicada (TEA).   5 CFT El costo financiero total (CFT).    La información del Costo Financiero Total (CFT) debe tener las siguientes características:\n  Debe estar junto a las variables reportadas.\n  Aparecer en una tipografía en color destacado, de idéntica fuente y con un tamaño al menos cinco veces mayor al utilizado para informar la Tasa de interés efectiva anual (TEA), la cantidad de cuotas, y su importe.\n  Según la regulación vigente, no podrás mencionar la frase “sin interés” (o cualquier otra frase similar), cuando el costo de financiación del producto y/o servicio sea trasladado al precio de venta del consumidor.\nEnviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nConsideraciones  Envía un método de pago válido en efectivo, mira los métodos de pago disponibles para Argentina. El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es 15 días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto La respuesta retorna los siguientes extra parámetros relacionados con la transacción:  REFERENCE: referencia de pago interna generada por PayU. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512322\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.ARS.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador. parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí el tipo de identificación del pagador parameters.put(PayU.PARAMETERS.PAYER_DNI_TYPE, \u0026#34;DNI\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av Centenario 837\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;San Isidro\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;AR-B\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;AR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el nombre del método de pago en efectivo. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PAGOFACIL\u0026#34;); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.AR.name()); // IP del pagador. parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Petición de \u0026#34;Autorización y captura\u0026#34;. TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Ingresa aquí el identificador de la cuenta. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;ARS\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí el tipo de identificación del pagador \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av Centenario 837\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;San Isidro\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Buenos Aires\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;AR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el nombre del método de pago en efectivo. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PAGOFACIL\u0026#34;, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::AR, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"Para integrarte con el SDK de Pagos de Argentina, apunta tus peticiones a las siguientes URLs:\n Java …","ref":"/es/docs/integrations/sdk-integration/payments-sdk-argentina.html","title":"SDK de Pagos - Argentina"},{"body":"You can send your payment request via e-mail or generate a link to share it in chat rooms or social networks. Once your customer receives your payment request, they can make the payment through our secure payment system.\nWith the Payment Request, you have the following benefits:\n Sell online regardless if you don\u0026rsquo;t have a website using e-mail, social networks or, message exchange platforms. Offer several payment methods. Discriminate the payments you receive so you can know who pays what and when.  How does the Payment request work? The Payment request follows a simple flow to let your customers buy your products or services using the secure PayU platform:\n  Generate the Payment request through the PayU module. For a basic payment request, you only need to provide what you want to sell, its price, and decide whether your payment includes taxes* or an expiration date. If you want to include additional information such as shipping, payment reference, comments, and more, you can create a Custom payment request.\n*Only available in Colombia.\n  Once the link has been generated, you can share it with your customers either by e-mail, posting the link on social networks, or including this link as a button in your website (if you have one).\n  When your customers use the link, they are redirected to the PayU\u0026rsquo;s checkout page, where they can pay using any of the available payment methods.\n  Every time a customer pays using the link, you receive a confirmation message and the amount of the purchase* is transferred to your PayU account, where you can transfer it to your bank account.\n*The value transferred corresponds to the amount paid by your customer minus the PayU fee.\n  Creating payment requests According to your business needs, you can create two types of Payment requests: Basic and Custom.\nA Basic Payment Request lets you create a link just by providing the product\u0026rsquo;s name and price; furthermore, you can decide whether you need to include taxes* or whether the link may expire in the future. The Custom Payment Request is a payment link with extra information such as shipping information, payment reference, response pages, comments or narrow down the available payment methods.\n*Only available in Colombia.\nCreate a Basic Payment Request Follow the next procedure to create a Basic Payment Request and share it with your customers.\n  Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\n  Expand the Sell with PayU option and then, select Sell on the internet.\n  Provide the following information:   What are you going to sell?: description of the product or service you want to sell using this payment request. What is the price?: provide the amount of the product or service and select the currency.   Do you charge tax?: choose if the product price includes taxes. If so, select the percentage or fixed amount of the taxes. This option is only available in Colombia.   Payment deadline: choose if the Payment request expires in a given time. If so, select the date and time when the Payment request expires.  Click Generate Link.  Create a Custom Payment Request Follow the next procedure to create a Basic Payment Request and share it with your customers.\n  Follow steps 1 to 3 of the Create a Basic Payment Request procedure.\n  Click I want to customize my link option. The advanced options appears where you can provide the following information.\n   Do you ship your products: this option lets you select whether the shipping information of the product is included in the link. When selecting YES, you can set a fixed shipping amount, and select if the customer must provide the shipping address.   Payment reference: this option lets you decide if you want to set a specific Payment reference for the link.   Transaction redirects: in this option you can set the URLs of the customized response pages you have when a transaction is approved, declined or pending. These fields are not mandatory and if you don\u0026rsquo;t set a URL, the transaction is redirected to the default PayU\u0026rsquo;s response pages.   Buyer comments: this option allows the buyer to add comments related to the purchase. The field where the buyer can add comments can be set in English, Spanish or Portuguese.\nFor example, you can configure this field to let the customer specify a particular description of the product.   Select the available payment methods: this option lets you include or exclude the available payment methods according to your country. For example, if you only want to receive payments through credit cards.\nBy default, all the available payment methods of your country are selected.  Click Generate Link.  Sharing the Payment request After you have configured and generated the Payment request, a confirmation page appears where you can perform the following actions:\n Share on social media with a link: using this option, you can copy the recently generated link, post it on Facebook, tweet it on Twitter or send it to several e-mail addresses.  Note When selecting Facebook or Twitter, you will be prompted to provide the credentials of the account where you want to publish the link.   Publish a button in my webpage: if you have a webpage and you want to include the generated link, PayU lets you create a button which you can added somewhere in your page. You can use any of the preloaded images provided by PayU or upload one using the Custom image option.\nThen, click Copy HTML to copy the button code in your clipboard.  Creating multiple Payment requests The PayU module allows you to create multiple payment request at one time so you can easily include several products in your shop. Links created using this feature can only be sent via e-mail.\nTo create multiple payment links, expand the Sell with PayU option and then, select Sell on the internet. Then, select the option Create multiple payment links.\nTo create multiple payment links at once, you just need to upload a .csv file with all the information of each product you want to sell. You can download an example of how PayU expects the information by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a link. The following table explains each column in it. Recall that the columns marked with asterisk are mandatory and if you leave empty a column, this property is not included in the link.\n   Name Column Description     Buyer\u0026rsquo;s e-mail A The e-mail address to which the Payment link will be sent.   What are you going to sell? B Name or description of the product you want to sell.   What does the product cost? C Price of the product you offer.   Currency D Currency of the product\u0026rsquo;s amount.\nPossible values: COP, USD, PEN, ARS, BRL, and MXN   Tax type E Let\u0026rsquo;s you define if you include taxes in your product.Set Fijo to add a fixed value.Set Porcentaje to add a percentage value.   Tax value F Value of the tax according to the tax type specified.   Due date G Set the due date of the link using the format dd/MM/yy HH:mm.   Redirect on success H Set the URL to which you customers will be redirected when the transaction is successful.   Redirect on failure I Set the URL to which you customers will be redirected when the transaction fails.   Redirect on pending J Set the URL to which you customers will be redirected when the transaction is pending.   Ask for shipping address K Set Si to request delivery address to the payer. Otherwise, set No or leave it empty.   Shipping value L Set a fixed value for shipping in the same currency of the product price.   Let payers add comments M Set Si to let the payers add comments. Otherwise, set No or leave it empty.   Label for payer\u0026rsquo;s comments (ES) N Set the label for the payer\u0026rsquo;s comments field in Spanish.   Label for payer\u0026rsquo;s comments (EN) O Set the label for the payer\u0026rsquo;s comments field in English.   Label for payer\u0026rsquo;s comments (PT) P Set the label for the payer\u0026rsquo;s comments field in Portuguese.   Extra 1 Q Set any additional string data to be included in the link. This column cannot exceed 120 characters.   Extra 2 R Set any additional string data to be included in the link. This column cannot exceed 120 characters.   Select payment methods. S If you leave this column empty, all the payment methods active for the account will be included.To include some payment methods, set the payment methods separated by commas.\nExample: LENDING,VISA,BANK_REFERENCED,AMEX.\nFurthermore, you can define what installments to submit for credit card, to do this, enter the payment methods and indicate the installments you want to be available separated by hyphens.\nExample: VISA-1-2-3,AMEX.    Note You can create up to 1000 links per file.  Once you have completed the Excel file, upload it to the PayU Module and click Send payment links.\n","excerpt":"You can send your payment request via e-mail or generate a link to share it in chat rooms or social …","ref":"/en/docs/tools/payment-request.html","title":"Payment Request"},{"body":"Puedes enviar tu solicitud de pago a través de correo electrónico o generar un link que puedes compartir en salas de chats o redes sociales. Una vez tu cliente recibe tu Solicitud de pago, puede hacer el pago a través de nuestros sistemas de pago seguros.\nCon la Solicitud de pago, tienes los siguientes beneficios:\n Vendes en línea sin importar si tienes página web utilizando correo electrónico, redes sociales o plataformas de mensajería. Ofreces varios métodos de pago. Discriminas los pagos que recibes para que sepas quién pagó qué y cuándo.  ¿Cómo funciona la Solicitud de pago? La Solicitud de pago siguen un flujo simple que le permite a tus clientes comprar tus productos o servicios utilizando la plataforma segura de PayU:\n  Genera la Solicitud de pago a través del Módulo PayU. Para una Solicitud de pago básica, solo necesitas ingresar lo que vas a vender, su precio y decidir si tu pago incluye impuestos* o fecha de expiración. Si quieres incluir información adicional como envío, referencia de pago, comentarios y más, puedes crear una Solicitud de pago personalizada.\n*Disponible únicamente en Colombia.\n  Una vez haya sido generado el link, puedes compartirlo con tus clientes ya sea por correo electrónico, redes sociales o incluyéndolo en tu página web como un botón (si tienes una).\n  Cuando tus clientes utilicen el link, serán redirigidos a la página de checkout de PayU, donde pueden pagar utilizando cualquiera de nuestros métodos de pago disponibles.\n  Cada vez que un cliente pague utilizando el link, recibes un mensaje de confirmación y el monto de la compra se transfiere a tu cuenta PayU, donde puedes transferirla a tu cuenta bancaria.\nEl valor transferido corresponde a la cantidad pagada por el cliente menos la tarifa de PayU.\n  Crear Solicitudes de pago De acuerdo con las necesidades de negocio, puedes crear dos tipos de Solicitudes de pago: Básica y Personalizada.\nUna Solicitud de Pago Básica te permite crear un link solo con ingresar el nombre del producto y el precio; además, puedes decidir si necesitas incluir los impuestos* o si deseas que el link expire en el futuro. La Solicitud de Pago Personalizada es un link de pago con información adicional como los datos del envío, referencia de pago, página de respuesta, comentarios o acotación de los métodos de pago.\n*Disponible únicamente en Colombia.\nCrear Solicitud de Pago Básica Sigue este procedimiento para crear una Solicitud de Pago básica y compartirla con tus clientes.\n  Ingresa a PayU.com y haz clic en la opción de log in en a parte superior de la página. O si lo prefieres, puedes ingresar a https://merchants.payulatam.com/.\n  Expande la opción Cobra con PayU y luego, selecciona Cobra en internet.\n  Ingresa la siguiente información:   ¿Qué vas a cobrar?: descripción del producto o servicio que deseas vender utilizando esta solicitud de pago. ¿Cuánto vale?: ingresa el valor del producto o servicio y selecciona la moneda.   ¿Cobras impuestos?: selecciona si el precio del producto incluye impuestos. Si los incluye, selecciona el porcentaje o el monto de los impuestos. Esta opción está disponible únicamente en Colombia.   ¿Tiene límite de pago?: selecciona si la Solicitud de pago vence en una fecha y hora determinada. De ser así, selecciona la fecha y la hora en la cual expira la Solicitud de pago.  Haz clic en Generar link.  Crear Solicitud de Pago Personalizada Sigue este procedimiento para crear una Solicitud de Pago Personalizada y compartirla con tus clientes.\n  Sigue los pasos 1 al 3 del procedimiento para Crear una Solicitud de Pago Básica.\n  Haz clic en la opción Deseo personalizar mi link. Aparecen las opciones avanzadas donde puedes ingresar la siguiente información.\n   ¿Envías tus productos?: esta opción te permite seleccionar si se incluye la información del envío en el link. Cuando seleccionas SÍ, puedes fijar un valor de envío y seleccionar si el cliente debe ingresar la dirección de envío.   Referencia de pago: esta opción te permite decidir si quieres asignar una referencia de pago específica al link.   Redirecciones de la Transacción: en esta opción, puedes configurar las URLs de las páginas de respuesta personalizadas para cuando una transacción es aprobada, declinada o pendiente. Estos campos no son obligatorios y si no especificas una URL, se redirecciona a la página de respuesta por defecto de PayU.   Comentarios del comprador: esta opción le permite al comprador agregar comentarios relacionados con la compra. El campo en el que el comprador puede agregar comentarios puede ser creado en inglés, español o portugués.\nPor ejemplo, puedes configurar este campo para que el comprador ingrese una descripción particular del producto.   Selecciona los métodos de pago disponibles: esta opción te permite incluir o excluir los métodos de pago disponibles de acuerdo con tu país. Por ejemplo, si solo quieres recibir pagos con tarjetas de crédito.\nPor defecto, todos los métodos de pago disponibles para tu país están disponibles.  Haz clic en Generar link.  Compartir la Solicitud de pago Luego de que hayas configurado y generado la Solicitud de pago, aparece una página de confirmación donde puedes realizar las siguiente acciones:\n Compartir en redes sociales con un link: utilizando esta opción, puedes copiar el link previamente generado, postearlo en Facebook, publicarlo en un trino de Twitter o enviarlo a varias direcciones de correo electrónico.  Nota Cuando selecciones Facebook o Twitter, se te pedirán las credenciales de la cuenta donde quieres publicar el link.   Publicar un botón en mi página web: si tienes una página web y quieres incluir el link generado, PayU te permite crear un botón el cual puede ser agregado en cualquier lugar de tu página. Puedes utilizar las imágenes disponibles o cargar una utilizando la opción Imagen personalizada.\nLuego, haz clic en Copiar HTML, para copiar el código del botón en el portapapeles.  Crear múltiples Solicitudes de pago El modulo PayU te permite crear múltiples solicitudes de pago a la vez para que puedas incluir varios productos en tu tienda. Los links creados utilizando module allows you to create multiple payment request at one time so you can easily include several products in your shop. Los links creados utilizando esta funcionalidad, solo pueden ser enviados a través de correo electrónico.\nPara crear múltiples links de pago, expande la opción Cobra con PayU y luego, selecciona Cobra en internet. Luego, selecciona la opción Crear varios links de cobro.\nPara crear múltiples links de pago a la vez, solo necesitas cargar un archivo .csv con toda la información de cada producto o servicio que deseas vender. Puedes descargar un ejemplo de cómo PayU espera la información haciendo clic en Descargar formato.\nCada fila del archivo corresponde a un link. La siguiente tabla explica cada columna en él. Recuerda que las columnas marcadas con asterisco son obligatorias y que si dejas vacía una columna, no se incluye dicha propiedad en el link.\n   Nombre Descripción     Correo del comprador Dirección de correo electrónico a donde se enviará el link de pago.   ¿Qué vas a cobrar? Nombre o descripción de producto que deseas vender.   ¿Cuánto vale? Precio del producto que ofreces.   Moneda Moneda del valor del producto.\nLos posibles valores son: COP, USD, PEN, ARS, BRL y MXN   Tipo de impuesto Te permite definir si deseas incluir impuestos en tu producto.Ingresa Fijo para asignar un valor fijo.Ingresa Porcentaje para asignar un porcentaje.   Valor del impuesto Valor del impuesto de acuerdo al tipo especificado.   Fecha límite de pago Ingresa la fecha de expiración del link utilizando el formato dd/MM/aa HH:mm.   Si la compra es exitosa, tus clientes serán dirigidos a: Ingresa la URL a la que serán redirigidos tus clientes cuando la transacción sea exitosa.   Si la compra no es exitosa serán dirigidos a: Ingresa la URL a la que serán redirigidos tus clientes cuando la transacción no sea exitosa.   Si la compra queda pendiente serán dirigidos a: Ingresa la URL a la que serán redirigidos tus clientes cuando la transacción queda pendiente.   Pedir dirección de entrega Ingresa Si para solicitar la dirección de envío al pagador. En caso contrario, ingresa No o déjala en blanco.   Valor del envío Ingresa un valor fijo para el envío en la misma moneda del precio del producto.   ¿Quieres que tus compradores puedan incluir un comentario cuando estén pagando? Ingresa Si para dejar que los pagadores ingresen comentarios. En caso contrario, ingresa No o déjala en blanco.   Etiqueta para los comentarios del pagador (En español) Ingresa la etiqueta del campo para los comentarios pagador en español.   Etiqueta para los comentarios del pagador (En inglés) Ingresa la etiqueta del campo para los comentarios pagador en inglés.   Etiqueta para los comentarios del pagador (En portugués) Ingresa la etiqueta del campo para los comentarios pagador en portugués.   Extra 1 Ingresa cualquier dato adicional que quieras incluir en el link. Esta columna no puede exceder los 120 caracteres.   Extra 2 Ingresa cualquier dato adicional que quieras incluir en el link. Esta columna no puede exceder los 120 caracteres.   Personalizar los métodos de pago disponibles Si dejas esta columna en blanco, se incluirán todos los métodos de pago activos para la cuenta.Para incluir algunos métodos de pago, ingrésalos separados por comas.\nEjemplo: LENDING,VISA,BANK_REFERENCED,AMEX.\nAdemás, puedes definir el número de cuotas que puede ingresar con la tarjeta de crédito, para esto, ingresa los métodos de pago e indica las cuotas que vas a dejar disponible separadas por guiones, Ejemplo: VISA-1-2-3,AMEX.    Nota Puedes crear hasta 1000 links por archivo.  Una vez hayas completado el archivo de Excel, cárgalo al módulo PayU y haz clic en Enviar links de cobro.\n","excerpt":"Puedes enviar tu solicitud de pago a través de correo electrónico o generar un link que puedes …","ref":"/es/docs/tools/payment-request.html","title":"Solicitud de pago"},{"body":"El primer paso para empezar a utilizar los servicios de PayU es crear una cuenta. Este artículo te muestra los beneficios de escoger a PayU para recibir pagos en línea.\nBeneficios de PayU  Tasa competitiva Múltiples métodos de pago Vende con o sin sitio web Seguridad  ¿Cómo crear una cuenta? Independiente del tamaño de tu negocio, el procedimiento para crear una cuenta es el siguiente:\n Contáctanos.\nSi quieres empezar a utilizar los servicios y herramientas de PayU para integrar tu tienda y empezar a recibir pagos en línea, contáctanos a través de nuestra página web.\nO puedes llamarnos:    (+54 11) 5984-2132 (+55 11) 4130-5311 (+56 2) 258-13949 (+57) 601 654-0721 (+52 55) 474-11439 (+50 7) 836-5577 (+51 1) 708-5381 Nota Si te encuentras en Colombia y vendes menos de 100 millones COP al month, puedes crear tu cuenta utilizando el siguiente enlace  Revisa nuestros términos y condiciones aquí.   Validación de tu cuenta.\nUna vez hayamos recibido tu solicitud de creación de cuenta, nuestros agentes validarán tu riesgo y tu puntaje bancario. Revisa las Actividades restringidas y prohibidas aquí.\n  Activa tu cuenta.\nLuego de abrir tu cuenta de PayU, recibes un correo electrónico para verificar su dirección e ingresar al Módulo de PayU por primera vez. En este punto, tu cuenta se encuentra activada para recibir pagos en Internet con todos los métodos de pago disponibles. Para activar tu cuenta debes:\n   Haber completado la documentación y el registro en el módulo administrativo. Tener una transacción exitosa.  ¿Qué sigue? Luego de haber creado la cuenta, tú y tus clientes recibirán una notificación por cada pago que realicen. El dinero es acreditado en tu cuenta de PayU.\nDe acuerdo con las necesidades de tu negocio, selecciona cómo quieres integrar tu tienda con los servicios y herramientas de PayU. Consulta Integraciones para más información.\nFinalmente, transfiere el saldo de tu cuenta PayU a tu cuenta bancaria cuando lo requieras.\n","excerpt":"El primer paso para empezar a utilizar los servicios de PayU es crear una cuenta. Este artículo te …","ref":"/es/docs/getting-started/create-an-account.html","title":"Crear una cuenta de PayU"},{"body":"The first step to start using PayU services is create an account. This topic shows you the benefits of choosing PayU to receive payments online.\nPayU benefits  Competitive rate Multiple payment methods Sell with or without a website Security  How to create an Account? Regardless of the size of your business, the procedure to create an account is as follows:\n Contact us.\nIf you want to start using PayU services and tools to integrate your shop and start receiving online payments, contact us through our web page.\nOr you can call us:    (+54 11) 5984-2132 (+55 11) 4130-5311 (+56 2) 258-13949 (+57) 601 654-0721 (+52 55) 474-11439 (+50 7) 836-5577 (+51 1) 708-5381 Note If you are in Colombia and sell less than 100 million COP/month, you can create your account using this link  Review our terms and conditions here.   Validation of your account.\nOnce we received your account request, our agents will validate your risk and bank score. Review the Prohibited, Restricted or Forbidden Activities here.\n  Activate your account.\nAfter opening your PayU account, you receive an e-mail to confirm its address and enter the PayU Module for the first time. At this point, your account is already activated to receive payments on the Internet with all available payment methods. To activate your account, you should:\n   Have completed the documentation and registration in the administrative module. Have a successful transaction.  What\u0026rsquo;s next? After you have created an account, you and your customers receive a notification for each payment they made. The money is then credited to your PayU account.\nAccording to your business needs, select how to integrate your shop with the PayU services and tools. For more information, refer to Integrations.\nFinally, transfer the balance from your PayU account to your bank account whenever you want.\n","excerpt":"The first step to start using PayU services is create an account. This topic shows you the benefits …","ref":"/en/docs/getting-started/create-an-account.html","title":"Create a PayU Account"},{"body":"","excerpt":"","ref":"/es/docs/getting-started.html","title":"Empezando..."},{"body":"","excerpt":"","ref":"/es/payu-module-documentation/getting-started.html","title":"Empezando..."},{"body":"","excerpt":"","ref":"/en/docs/getting-started.html","title":"Getting Started"},{"body":"","excerpt":"","ref":"/en/payu-module-documentation/getting-started.html","title":"Getting Started"},{"body":"      En este artículo, encuentras cómo enviar la información de una transacción a la pasarela de pagos de PayU. Para esto, debes generar un formulario HTML con los datos de la transacción utilizando el método HTTP POST y apuntando a nuestro sistema.\nConsideraciones  Asegúrate de tener los valores correctos de las variables merchantId, accountId y apiKey. Utiliza diferentes referencias de pago por cada pago. No incluyas espacios en los valores de los parámetros. No incluyas valores con más de dos cifras decimales. No incluyas caracteres especiales en el parámetro referenceCode.  Variables Puedes incluir las siguientes variables en el Formulario de pago.\n Variables en el Formulario de pago     Campo Tipo Tamaño Descripción Obligatorio     merchantId Numérico 12 Identificador de tu tienda en el sistema de PayU, puedes encontrar este número en el correo de creación de tu cuenta. ✓   referenceCode Alfanumérico 255 Referencia de la venta o la orden. Debe ser única por cada transacción enviada al sistema. Usualmente, esta es una forma de identificar las peticiones enviadas a la pasarela de pagos. ✓   accountId Numérico 6 Identificador de la cuenta de usuario de cada país asociado con la tienda. Esta variable se utiliza para mostrar los métodos disponibles del país. ✓   description Alfanumérico 255 Descripción de la venta. ✓   currency Alfanumérico 3 Moneda respectiva en la que se hace el pago. El proceso de conciliación se realiza en pesos colombianos a la tasa representativa del día.\nVer monedas aceptadas. ✓   amount Numérico 14 Valor total de la transacción. Puede tener dos cifras decimales. Ejemplo 10000.00 o 10000. ✓   tax Numérico 14,2 Valor del impuesto al valor agregado de la transacción.\nEn Colombia, si no se envía el IVA. el sistema aplica automáticamente el 19%. Puede tener dos dígitos decimales, por ejemplo 19000.00.\nSi el producto o servicio es exento de impuesto al valor agregado, asigne 0 a esta variable. ✓   discount Numérico 14,2 Valor del descuento sobre la venta. —   taxReturnBase Numérico 14,2 Valor base para la devolución de impuestos.\nSi el producto o servicio es exento de impuesto al valor agregado, asigne 0 a esta variable. ✓   additionalValue Numérico 14,2 Valor adicional no comisionable de la venta. —   signature Alfanumérico 255 Firma digital creada por cada transacción. Consulta Firma para el formulario de pago para aprender a generarla. ✓   algorithmSignature Alfanumérico 255 Algoritmo de encriptación de la firma digital (campo signature). Los tres algoritmos disponibles son: MD5, SHA y SHA256. —   test Numérico 1 Indica si la transacción es en modo pruebas o en producción. Asigna 1 para pruebas y 0 para producción. —   lng Alfanumérico 3 Idioma en el que se quiere mostrar la pasarela de pagos.\nVer idiomas soportados. —   extra1 Alfanumérico 255 Campo adicional para enviar información relacionada con la compra. —   extra2 Alfanumérico 255 Campo adicional para enviar información relacionada con la compra. —   extra3 Alfanumérico 255 Campo adicional para enviar información relacionada con la compra. —   template Alfanumérico 255 Plantilla para la página de pagos. —   responseUrl Alfanumérico 255 URL de la página de respuesta. —   confirmationUrl Alfanumérico 255 URL de la página de confirmación. —   sourceUrl Alfanumérico 255 URL de origen de las transacciones del comercio. Aquí es donde se encuentra ubicado el botón de pago. —   airline Alfanumérico 4 Código de la aerolínea. —   billingAddress Alfanumérico 255 Dirección de facturación. —   shippingAddress Alfanumérico 255 Dirección de entrega de la mercancía.\n* Obligatorio si tu tienda envía el producto. ✓*   billingCity Alfanumérico 50 Ciudad asociada con la dirección de facturación. —   shippingCity Alfanumérico 50 Ciudad de entrega de la mercancía\n* Obligatorio si tu tienda envía el producto. ✓*   zipCode Alfanumérico 20 Postal code. —   billingCountry Alfanumérico 2 Código ISO del país asociado con la dirección de facturación. —   shippingCountry Alfanumérico 2 Código ISO del país de entrega de lla mercancía.\n* Obligatorio si tu tienda envía el producto.\nVer los paises de pago. ✓*   buyerEmail Alfanumérico 255 Campo que contiene el correo electrónico del comprador para notificar el resultado de la transacción por medio de correo electrónico. Se recomienda validar que se haya ingresado este campo en el formulario. ✓   telephone Alfanumérico 50 Teléfono de residencia del comprador. ✓   officeTelephone Alfanumérico 50 Teléfono diurno del comprador. —   mobilePhone Alfanumérico 50 Número del móvil del comprador. Este valor será utilizado para diligenciar el formulario de la tarjeta de crédito y será el número de teléfono de contacto. —   buyerFullName Alfanumérico 150 Nombre completo del comprador. ✓   paymentMethods Alfanumérico 255 Lista de métodos de pago habilitados en el proceso de pago.\nEsta lista debe estar separada por comas y sin espacios en blanco. Por ejemplo: VISA,MASTERCARD.\nPuedes incluir cuotas para los métodos de pago añadiéndolas mediante guiones. Ejemplo: VISA-1-3,MASTERCARD-3-5-9.\nConsulta los métodos de pago disponibles para tu país en la columna parámetro de método de pago. —   administrativeFee Numérico 14,2 Valor de la tarifa administrativa. -   taxAdministrativeFee Numérico 14,2 Valor del impuesto de la tarifa administrativa. -   taxAdministrativeFeeReturnBase Numérico 14,2 Valor base para calcular el impuesto de la tarifa administrativa. -   payerEmail Alfanumérico 255 Dirección de correo electrónico del pagador. —   payerPhone Alfanumérico 20 Número de teléfono del pagador. —   payerOfficePhone Alfanumérico 20 Número de teléfono de oficina del pagador. —   payerMobilePhone Alfanumérico 20 Número de teléfono móvil del pagador. —   expirationDate #N/A 19 Fecha de vencimiento de las transacciones para pagos en efectivo. Formato: YYYY-MM-DD HH:mm:ss.\nEste valor debe ser menor que el número de días predeterminado para el pago en efectivo (15 días para Argentina y 7 días para el resto de países). -   payerFullName Alfanumérico 50 Nombre del pagador. Este valor será utilizado para diligenciar el formulario de la tarjeta de crédito. —   payerDocument Alfanumérico 25 Número de identificación del pagador. Este valor será utilizado para diligenciar el formulario de la tarjeta de crédito. —   payerDocumentType Alfanumérico 25 El número de identificación del comprador. Este valor se tomará para completar el formulario de la tarjeta de crédito. -   iin Alfanumérico 2048 Lista de Bins admitidos durante el proceso de pago (separados por coma).\nEste parámetro solo lo pueden utilizar los comercios que validan la firma. -   PaymentMethodsDescription Alfanumérico 255 Descripción de los métodos de pago y Bins admitidos durante el proceso de pago. -   pseBanks Alfanumérico 255 Listado de códigos bancarios habilitados en el proceso de pago a través de PSE.\nEste listado debe estar separado por coma y sin espacios en blanco. -     Consideraciones en las variables  El campo tax es el valor de impuesto al valor agregado y el campo taxReturnBase es el valor base para calcular el impuesto. Si tu producto es exento de impuesto, asigna 0 a ambas variables (tax=0, taxReturnBase=0). Si algunos elementos tiene impuesto y en otros no aplica, debes realizar el siguiente cálculo para saber cómo enviar los valores a la plataforma de pagos.     Producto Campo taxReturnBase Campo tax Valor     A 84.033 15.966 (19%) 100.000   B 181.818 18.181 (10%) 200.000   C 0 0 (0%) 150.000   Total 268.851 34.147 450.000    Importante La sumatoria de los campos Tax y taxReturnBase no puede ser mayor que el valor total de cada producto.   Para comercios registrados en Colombia que pertenezcan al Régimen común, si no envías el impuesto, PayU lo calcula automáticamente utilizando el 19%. Para comercios que pertenecen al Régimen simplificado, si no envías el impuesto, PayU asigna cero (0) automáticamente al valor del impuesto.  Ejemplo del formulario El siguiente es un ejemplo de un formulario de pago básico utilizando únicamente los campos obligatorios y apuntando el request al ambiente de sandbox (modo pruebas).\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;merchantId\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;508029\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;accountId\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;512321\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;description\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;Test PAYU\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;referenceCode\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;TestPayU\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;amount\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;20000\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;tax\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;3193\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;taxReturnBase\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;16806\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;currency\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;COP\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;signature\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;7ee7cf808ce6a39b17481c54f2c57acc\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;test\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;0\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;buyerEmail\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;test@test.com\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;responseUrl\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;http://www.test.com/response\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;confirmationUrl\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;http://www.test.com/confirmation\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;Submit\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Enviar\u0026#34; \u0026gt; \u0026lt;/form\u0026gt; \nSi tu tienda envía los productos, necesitas incluir los siguientes campos:\n\u0026lt;input name=\u0026#34;shippingAddress\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;calle 93 n 47 - 65\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;shippingCity\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;Bogotá\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;shippingCountry\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;CO\u0026#34; \u0026gt; \nLa URL configurada en el campo action depende del ambiente:\nPruebas: https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/ Producción: https://checkout.payulatam.com/ppp-web-gateway-payu/ Firma para el formulario de pago La firma es un método para validar los pagos realizados a través de la plataforma asegurando su autenticidad. Consiste en un string encriptado utilizando MD5, SHA1 o SHA256. El string creado es así:\n\u0026#34;ApiKey~merchantId~referenceCode~amount~currency\u0026#34;. \nNota Si tu formulario de pago incluye las variables paymentMethods, iin o pseBanks, debes concatenarlas en dicho orden:\n\u0026#34;ApiKey~merchantId~referenceCode~amount~currency~paymentMethods~iin~pseBanks\u0026#34;   Por ejemplo, con los siguientes datos:\nmerchantId: 508029 ApiKey: 4Vj8eK4rloUd272L48hsrarnUA referenceCode: TestPayU amount: 20000 currency: COP accountId: 512326 buyerEmail: test@test.com \nLa firma es:\n\u0026#34;4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU~20000~COP\u0026#34; \nEncriptada utilizando MD5:\n\u0026#34;7ee7cf808ce6a39b17481c54f2c57acc\u0026#34; \nEncriptada utilizando SHA1:\n\u0026#34;fa890d3f94e12b5cdb62e8771453b99b78e7ccdc\u0026#34; \nEncriptada utilizando SHA256:\n\u0026#34;af3899a22336b79db46006491d15813158826f944599bf3bf601e2327f898022\u0026#34; Compara tu firma  Algoritmo: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ) Resultado:\u0026nbsp;      Esta calculadora te permite generar la firma utilizando alguno de los métodos de cifrado disponibles.\n","excerpt":"En este artículo, encuentras cómo enviar la información de una transacción a la pasarela de pagos de …","ref":"/es/docs/integrations/webcheckout-integration/payment-form.html","title":"Formulario de pago"},{"body":"      In this topic, you find how to send data from one transaction to the PayU payment gateway. To do so, You must generate an HTML form with the transaction data using the HTTP POST method and pointing it to our system.\nConsiderations  Make sure you have the right merchantId, accountId, and apiKey. Use a different payment reference per payment. Do not include spaces in parameter values. Do not include values with more than two decimal places. Do not include special characters in the referenceCode parameter.  Variables The following variables can be included in the Payment form.\n Variables in the payment form     Field Type Size Description Mandatory     merchantId Number 12 ID number of your shop in PayU’s system, you will find this number in the account creation e-mail. ✓   referenceCode Alphanumeric 255 Reference of the sale or order. It must be unique for each transaction that is sent to the system. Usually, this is a way to identify the requests sent to the payment gateway. ✓   accountId Number 6 ID of the user account for each country associated with the shop. This variable is used to display the available payment methods for this country. ✓   description Alphanumeric 255 Sale’s description. ✓   currency Alphanumeric 3 The respective currency in which the payment is made. The reconciliation process is performed in Colombian pesos at the representative rate of the day.\nSee accepted currencies. ✓   amount Number 14 Total amount of the transaction. It can contain two decimal digits. Example 10000.00 or 10000. ✓   tax Number 14,2 Value of the VAT of the transaction.\nIn Colombia, if no VAT is sent, the system applies 19% automatically. It can contain two decimal digits, for example 19000.00.\nIf the product or service is VAT exempt, assign 0 to this variable. ✓   discount Number 14,2 Discount value applied to the sale. —   taxReturnBase Number 14,2 Base value to calculate the VAT.\nIf the product or service is VAT exempt, assign 0 to this variable. ✓   additionalValue Number 14,2 Additional value of the sale. —   signature Alphanumeric 255 Digital signature created for each transaction. Refer to Signature for Payment form to learn how to generate it. ✓   algorithmSignature Alphanumeric 255 Encryption algorithm of the digital signature (signature field). The three available algorithms are: MD5, SHA and SHA256. —   test Number 1 Indicates whether the transaction is in test or production mode. Set 1 for test and 0 for production. —   lng Alphanumeric 3 Language in which the payment gateway is wished to be displayed.\nSee supported languages. —   extra1 Alphanumeric 255 Additional field to send information about the purchase. —   extra2 Alphanumeric 255 Additional field to send information about the purchase. —   extra3 Alphanumeric 255 Additional field to send information about the purchase. —   template Alphanumeric 255 Template for the payment page. —   responseUrl Alphanumeric 255 The URL of the response page. —   confirmationUrl Alphanumeric 255 The URL of the confirmation page. —   sourceUrl Alphanumeric 255 Source URL of the merchant transactions. This is where the payment button is located. —   airline Alphanumeric 4 Airline code. —   billingAddress Alphanumeric 255 The correspondence address. —   shippingAddress Alphanumeric 255 The delivery address of the merchandise.\n* Mandatory if your shop ships the product. ✓*   billingCity Alphanumeric 50 City associated with the billing address. —   shippingCity Alphanumeric 50 The delivery City of the merchandise\n* Mandatory if your shop ships the product. ✓*   zipCode Alphanumeric 20 Postal code. —   billingCountry Alphanumeric 2 The ISO country code associated with the billing address. —   shippingCountry Alphanumeric 2 The delivery ISO country code for the merchandise.\n* Mandatory if your shop ships the product.\nSee processing countries. ✓*   buyerEmail Alphanumeric 255 Field that contains the buyer’s e-mail to notify the result of the transaction by e-mail. It is recommended to validate if this field has been provided in the form. ✓   telephone Alphanumeric 50 The buyer’s residence phone. ✓   officeTelephone Alphanumeric 50 The buyer’s daytime phone. —   mobilePhone Alphanumeric 50 The buyer’s cell phone number. This value will be taken to fill out the credit card form and will be the contact telephone number. —   buyerFullName Alphanumeric 150 The buyer’s full name. ✓   paymentMethods Alphanumeric 255 List of payment methods enabled in the payment process.\nThis list must be separated by comma and without blanks. For example: VISA,MASTERCARD.\nYou can include installments for the payment methods adding them using hyphens. Example: VISA-1-3,MASTERCARD-3-5-9.\nSee the available Payment Methods for your country in the column paymentMethod parameter. —   administrativeFee Number 14,2 Amount of the administrative fee. —   taxAdministrativeFee Number 14,2 Amount of tax of the administrative fee. —   taxAdministrativeFeeReturnBase Number 14,2 Base value to calculate the tax of the administrative fee. —   payerEmail Alphanumeric 255 The payer’s e-mail. —   payerPhone Alphanumeric 20 The payer’s phone number. —   payerOfficePhone Alphanumeric 20 The payer’s workplace phone number. —   payerMobilePhone Alphanumeric 20 The payer’s mobile phone number. —   expirationDate Alphanumeric 19 Expiration date of the transactions for Cash payments. Format: YYYY-MM-DD HH:mm:ss.\nThis value must be lower than the default number of days for the cash payment (15 days for Argentina and 7 days for the other countries). -   payerFullName Alphanumeric 50 The payer’s name. This value will be taken to fill out the credit card form. —   payerDocument Alphanumeric 25 The buyer’s identification number. This value will be taken to fill out the credit card form. —   payerDocumentType Alphanumeric 25 The buyer’s identification number. This value will be taken to fill out the credit card form. —   iin Alphanumeric 2048 List of Bins admitted during the payment process (separated by comma).\nThis parameter can only be used by merchants that validate signature. —   paymentMethodsDescription Alphanumeric 255 Description of the payment methods and Bins admitted during the payment process. —   pseBanks Alphanumeric 255 List of bank codes enabled in the payment process through PSE.\nThis list must be separated by comma and without blanks. —     Considerations in variables  The tax is the VAT that may be used in some countries and the taxReturnBase is the base value to calculate the VAT. If your product is tax exempt, assign both variables to 0 (tax=0, taxReturnBase=0). If some elements have the tax and it does not apply to others, you must perform the following calculation to find out how to send the values to the payment platform.     Product taxReturnBase tax Amount     A 84.033 15.966 (19%) 100.000   B 181.818 18.181 (10%) 200.000   C 0 0 (0%) 150.000   Total 268.851 34.147 450.000    Important Tax + taxReturnBase cannot be greater than the Total Value of each product.   For businesses registered in Colombia that belong to the program Régimen común, if you don\u0026rsquo;t send the tax, PayU automatically calculates the tax using 19%. If your business belongs to the program Régimen simplificado, if you don\u0026rsquo;t send the tax, PayU automatically assigns the value as zero (0).  Form example The following is an example of a basic Payment form using only the mandatory fields and pointing the request to the sandbox environment (test mode).\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;merchantId\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;508029\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;accountId\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;512321\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;description\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;Test PAYU\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;referenceCode\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;TestPayU\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;amount\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;20000\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;tax\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;3193\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;taxReturnBase\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;16806\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;currency\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;COP\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;signature\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;7ee7cf808ce6a39b17481c54f2c57acc\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;test\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;0\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;buyerEmail\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;test@test.com\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;responseUrl\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;http://www.test.com/response\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;confirmationUrl\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;http://www.test.com/confirmation\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;Submit\u0026#34; type=\u0026#34;submit\u0026#34; value=\u0026#34;Send\u0026#34; \u0026gt; \u0026lt;/form\u0026gt; \nIf your shop ships the products, you need to include the following values:\n\u0026lt;input name=\u0026#34;shippingAddress\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;calle 93 n 47 - 65\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;shippingCity\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;Bogotá\u0026#34; \u0026gt; \u0026lt;input name=\u0026#34;shippingCountry\u0026#34; type=\u0026#34;hidden\u0026#34; value=\u0026#34;CO\u0026#34; \u0026gt; \nThe URL configured in action depends on the environment:\nTest: https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/ Production: https://checkout.payulatam.com/ppp-web-gateway-payu/ Signature for Payment form The signature is a method to validate payments made through the platform and ensuring its authenticity. It consists of a string encrypted using MD5, SHA1, or SHA256. The string is created as follows:\n\u0026#34;ApiKey~merchantId~referenceCode~amount~currency\u0026#34;  Note If your Payment form includes the variables paymentMethods, iin, or pseBanks, you must concatenate them in such order:\n\u0026#34;ApiKey~merchantId~referenceCode~amount~currency~paymentMethods~iin~pseBanks\u0026#34;   For example, with the following data:\nmerchantId: 508029 ApiKey: 4Vj8eK4rloUd272L48hsrarnUA referenceCode: TestPayU amount: 20000 currency: COP accountId: 512326 buyerEmail: test@test.com \nThe signature is:\n\u0026#34;4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU~20000~COP\u0026#34; \nEncrypted using MD5:\n\u0026#34;7ee7cf808ce6a39b17481c54f2c57acc\u0026#34; \nEncrypted using SHA1:\n\u0026#34;fa890d3f94e12b5cdb62e8771453b99b78e7ccdc\u0026#34; \nEncrypted using SHA256:\n\u0026#34;af3899a22336b79db46006491d15813158826f944599bf3bf601e2327f898022\u0026#34; Compare your signature  Algorithm: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ) Result:\u0026nbsp;      This calculator lets you generate the signature using any of the available encryption methods.\n","excerpt":"In this topic, you find how to send data from one transaction to the PayU payment gateway. To do so, …","ref":"/en/docs/integrations/webcheckout-integration/payment-form.html","title":"Payment Form"},{"body":"Puedes incluir el logo de tu compañía en nuestra pasarela enviándolo a través del método HTTP POST.\nNota La persona encargada de la integración de tu tienda con nuestra pasarela de pagos (WebCheckout) debe tener conocimientos de lenguajes de programación dinámicos como PHP o Java.  ¿Cómo funciona la integración con el WebCheckout? El procedimiento para permitir que tus clientes paguen utilizando los servicios de PayU es simple.\n Tu cliente navega tu página y selecciona los productos o servicios que quiere comprar. Tu sistema actualiza el monto de la compra y envía a nuestro sistema el formulario de pago con la información de la compra.\nTu sistema debe enviar esta información a través de HTTP POST.  Para el procesamiento del pago, tu cliente es redirigido a nuestro Checkout donde puede seleccionar el método de pago.\nPayU soporta varios métodos de pago que se ajustan con las necesidades de tu cliente de acuerdo con el país en el que proceses la compra, mira los métodos de pago disponibles.  PayU procesa la transacción y muestra el resultado en nuestra página de respuesta.  Cuando el cliente regresa a tu página luego del proceso de pago, PayU lo redirige a tu Página de respuesta y envía la transacción a través de HTTP GET. Necesitas procesar la respuesta y mostrar su información a tu cliente.  En paralelo, PayU notifica el estado de la transacción a la página de confirmación a través de HTTP POST. Además, PayU te notifica el resultado de la transacción a ti a través de correo electrónico.  Consideraciones  Tu página debe estar codificada en UTF-8. La página del WebCheckout no puede ser incluida en un iframe. No enmascares la URL durante el proceso de checkout. No utilices certificados de seguridad de curva elíptica o aquellos que cuenten con la suite de encriptación TLS_ECDHE_ECDSA_WITH_RC4_128_SHA en tu página de confirmación.  Componentes de integración Consulta las siguientes secciones para aprender a integrarte utilizando la Integración WebCheckout.\n","excerpt":"Puedes incluir el logo de tu compañía en nuestra pasarela enviándolo a través del método HTTP POST. …","ref":"/es/docs/integrations/webcheckout-integration.html","title":"Integración WebCheckout"},{"body":"You can include your company logo in our payment gateway, sending it via HTTP POST method.\nNote The person in charge of integrating your shop with our Payment gateway (WebCheckout) must have strong knowledge in integration with dynamic programming languages such as PHP or Java.  How does the WebCheckout integration work? The procedure to let your shoppers pay using PayU services is simple.\n Your customer navigates your site and selects the products or services they want to purchase. Your system updates the purchase amount and sends to our system the payment form with the purchase information.\nYour system must send this information via HTTP POST.  For the payment process, your customer is redirected to our Checkout where they can select the payment method.\nPayU supports many payment methods that fits to your customers' needs according to the country where you process the purchase, see the available Payment Methods.  PayU processes the transaction and shows the result in our response page.  When you customer back to your page after the payment process, PayU redirects them to you Response page and sends the transaction results via HTTP GET. You need to process the response and show its information to your customer.  In parallel, PayU notifies the status of the transaction to the confirmation page via HTTP POST. Furthermore, PayU notifies to you and your customer the result of the transaction via e-mail.  Considerations  The coding of your page must be UTF-8. The WebCheckout page should not be included in an iframe. Do not mask the URL during the checkout process. Do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA on your confirmation page.  Integration components Refer to the following sections to learn how to integrate using WebCheckout integration.\n","excerpt":"You can include your company logo in our payment gateway, sending it via HTTP POST method.\nNote The …","ref":"/en/docs/integrations/webcheckout-integration.html","title":"WebCheckout integration"},{"body":"Independiente del tipo de integración que escojas, PayU provee operaciones para procesar tus transacciones. La siguiente sección explica estos métodos.\nFlujos de pago PayU puede procesar pagos utilizando dos tipos de flujos: de dos pasos y de un paso.\n  El flujo de un paso combina los pasos de Autorización y Captura en una sola transacción. Los fondos son trasferidos de la cuenta de tu cliente a tu cuenta de PayU cuando se haya autorizado el pago. El único paso en este flujo es:\n Cobro (Autorización y Captura): esta operación envía el monto de la transacción a validar (Autorización) y si se aprueba, el monto es debitado de la tarjeta inmediatamente (Captura). Este es el método más común para procesar transacciones.    En el flujo de dos pasos, primero necesitas autorizar y reservar los fondos del cliente. Luego, completar la transacción para transferir el monto autorizado a tu cuenta de PayU. Los pasos en este flujo son:\n Autorización: esta operación se utiliza para verificar que la tarjeta utilizada para pagar esté activa, tiene fondos suficientes, etc. El cobro no está completo hasta que se envíe una transacción de captura.  Por ejemplo, cuando utilizas aplicaciones de transporte, luego de solicitar el servicio, la aplicación envía una Autorización para reservar el valor del viaje y verificar que tu tarjeta es válida (activa y con fondos suficiente). Sin embargo, el cobro no se realiza todavía. Captura: Esta operación termina la transacción autorizada, es decir, en este punto la cuenta hace débito a la tarjeta. De nuevo en el ejemplo de la aplicación de transporte, una vez el servicio haya finalizado, la aplicación cobra el monto total y termina la transacción.    Nota El flujo de dos pasos no está soportado para Colombia y Panamá. Para Chile, este flujo está disponible únicamente bajo solicitud, contacta a tu representante de ventas.  Métodos de pago Los métodos de pago disponibles utilizados para procesar transacciones son:\n Tarjetas de crédito. Pagos en efectivo o en bancos. Transferencias bancarias.  Nota Consulta este artículo para conocer los métodos de pago disponibles para los compradores por país.  ¿Qué sigue? La integración con esta funcionalidad depende del país de tus transacciones, la operación seleccionada y el método de pago.\n API SDK    API SDK    API SDK    API SDK    API SDK    API      API SDK       ","excerpt":"Independiente del tipo de integración que escojas, PayU provee operaciones para procesar tus …","ref":"/es/docs/services/payments.html","title":"Pagos"},{"body":"Regardless of the integration type you choose, PayU provides operations to process your transactions. The following section explains these methods.\nPayment flows PayU can process the payments using two types of Payment flows: two-step and one-step.\n  In the one-step flow, combines the Authorization and Capture steps into a single transaction. Funds are transferred from your customer\u0026rsquo;s account to your PayU account when the payment has been authorized. The unique step in this flow is:\n Charge (Authorization and capture): this operation sends the amount of the transaction to validate (Authorization) and if it is approved, the amount is debited from the card immediately (capture). This is the most common method to process transactions.    In the two-step flow, first you need to authorize and place a hold on the customer\u0026rsquo;s funds. Then, complete the transaction to transfer the authorized funds to your PayU account. The steps in this flow are:\n Authorization: this operation is used to verify if the card used to pay is active, has funds, etc. The charge is not completed until a transaction capture is sent.  For Example, when you use a transportation app, after you request the service, the app sends an Authorization to reserve the amount of the trip and verify that your card is valid (active and with enough founds). Nevertheless, the charge is not performed in your card yet. Capture: this operation terminates a previously authorized transaction, namely, at this point, the account makes a debit to the card. Back in the transportation app example, once your service has finished, the apps charges the total amount of your trip and terminates the transaction.    Note Two-step flow is not supported for Colombia and Panama. For Chile, this flow is available under request only, contact your sales representative.  Payment methods The available payment methods used to process transactions are:\n Credit cards. Cash or bank payments. Bank transfers.  Note Refer to this article to know the Payment methods available to shoppers per country.  What\u0026rsquo;s next? The integration with this feature depends on the country of your transactions, the operation selected and the payment method.\n API SDK    API SDK    API SDK    API SDK    API SDK    API      API SDK       ","excerpt":"Regardless of the integration type you choose, PayU provides operations to process your …","ref":"/en/docs/services/payments.html","title":"Payments"},{"body":" Note This article has been deprecated and it is not offered for new commerces. Click here to consult the documentation of the PayU module.\nIf you want to migrate to the PayU Module, contact your sales representative.\n To use the Administrative Module go www.payu.com. At the top, you will find the “Login to Your Account”, field. There you can enter your respective username and password, which will have been supplied via email at the time of creation of your PayU account.\nYou still do not have a PayU account? You can create yours here.  Note If you have forgotten your password, you can click on the Forgot My Password option and enter the email with which you created your PayU account. The system will automatically send you an email with a new generated password and an activation link. Please be sure to activate the password before using it to enter the account.  In the PayU Administrative Module you can:\n See the available funds in your PayU account and transfer them to your bank account. Consult the movements of your accounts, statements and reports. View the status of your sales Find the authentication credentials to integrate with your sales platform: API Key, API Login and merchant ID. Update your bank details. Configure your company’s logo to appear on the web checkout (payment gateway). Set the URLs of your confirmation page and answer page (if you have an API integration or web checkout).  ","excerpt":"Note This article has been deprecated and it is not offered for new commerces. Click here to consult …","ref":"/en/deprecated/merchant-panel.html","title":"Merchant panel (Secure panel)"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece para comercios nuevos. Haga clic aquí para consultar la documentación del Módulo PayU.\nSi quieres migrar al Módulo PayU, contacta tu representante de ventas.\n Para hacer uso del Módulo Administrativo debes ir a www.payu.com. En la parte superior encontrarás la opción “Ingresa a tu cuenta”, allí podrás introducir tu respectivo usuario y contraseña, los cuales son suministrados vía e-mail en el momento de la creación de tu cuenta en PayU.\n¿Aún no tienes una cuenta en PayU? Puedes abrir tu cuenta aquí.  Nota Si olvidaste tu contraseña, debes dar clic en la opción Olvidé mi clave e ingresar el correo electrónico con el cual creaste tu cuenta en PayU. El sistema automáticamente enviará a tu correo electrónico un mensaje y el enlace para la activación de tu nueva contraseña.  En el Módulo Administrativo de PayU puedes:\n Ver el dinero disponible en tu cuenta PayU y realizar la transferencia a tu cuenta bancaria. Consultar los movimientos de tus cuentas, generar extractos y reportes. Consultar el estado de las ventas realizadas. Encontrar las credenciales de autenticación para realizar las integraciones: Api Key, Api Login y merchant ID (Id Comercio). Actualizar tus datos bancarios. Configurar el logo de tu empresa para que aparezca en el Web Checkout (pasarela de pagos). Configurar las URLs de tu página de confirmación y página de respuesta (si tienes una integración por API o Web checkout).  ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece para comercios nuevos. Haga clic aquí para …","ref":"/es/deprecated/merchant-panel.html","title":"Módulo Administrativo (Secure panel)"},{"body":"Además, si tienes habilitado el API de Payouts, puedes consultar el estado de los pagos a terceros solicitados. Para más información, consulta Payouts.\nNota Para cuentas brasileñas, el Reporte de transferencias se encuentra en la opción Transferencias diarias (Transferencias \u0026gt; Transferencias diarias).  Permisos requeridos Para tener acceso a este módulo, necesitas un perfil con el siguiente permiso activado.\n Si tu cuenta no es brasileña: Transferencias \u0026gt; Consultar Si tu cuenta es brasileña (Transferencias diarias Brasil):  Ver download.csv    Consulta Perfiles y Permisos para más información.\nConsultar el reporte Ingresa a tu cuenta PayU. En el menú de la izquierda, expande el menú Transferencias y selecciona Transferencias.\nPara cuentas no brasileñas, desplázate hacia abajo hasta la sección Reporte de transferencias realizadas donde se encuentra la tabla del reporte. De forma predeterminada, el reporte muestra las transferencias creadas en los últimos 30 días desde la más reciente a la más antigua.\nEl reporte tiene las siguientes columnas:\n   Columna Descripción     ID Id de la transferencia solicitada.   Fecha de solicitud Fecha y hora en que se creó la transferencia.   Última gestión Fecha y hora de la última acción ejecutada en la transferencia.   Valor debitado Monto de la transferencia junto con sus costos asociados.\nPara saber estos costos, haz clic en el ícono .\n   Cuenta destino Cuenta bancaria de la transferencia.   Estado Último estado de la solicitud. Los posibles estados son: AprobadaEn progresoRechazada    Nota Si necesitas mostrar más información, consulta tu representante de ventas  Puedes filtrar las transferencias por la fecha de su creación utilizando el filtro de fechas en la esquina superior derecha.\nEl intervalo de fechas de este filtro es tres (3) meses antes de la fecha de fin. Si excedes este rango, el informe muestra la información de tres (3) meses después de la fecha de inicio.\nPara ver la información de una fecha determinada, configúrala tanto para la fecha de inicio como para la fecha de fin.\nDescargar el reporte Para descargar el reporte, haz clic en el botón Descargar ubicado en la parte superior o inferior de la tabla del reporte.\nAparece una barra de progreso en la parte superior de la pantalla. Una vez finalizado el proceso, el reporte se descarga automáticamente en formato Excel (.csv). El nombre del reporte usa el formato:\n Si tu cuenta no es brasileña: [FechaDescargaEnMilisegundos]_payment_orders_[AccountId].csv. Si tu cuenta es brasileña: [FechaDescargaEnMilisegundos]_daily_payment_order_[AccountId].csv.  Nota El reporte generado es almacenado durante 90 días en la sección Mis reportes descargados.  ","excerpt":"Además, si tienes habilitado el API de Payouts, puedes consultar el estado de los pagos a terceros …","ref":"/es/payu-module-documentation/reports/transfer-report.html","title":"Reporte de transferencias"},{"body":"Furthermore, if you have enabled the Payouts API, you can query the state of the payouts to third party requested. For more information, refer to Payouts.\nNote For brazilian accounts, the Transfers Report is found in the Daily payouts option (Transfers \u0026gt; Daily payouts).  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n If your account is not brazilian: Transfers \u0026gt; Review If your account is brazilian: (Daily Payouts Brazil):  View download.csv    Refer to Profiles and Permissions for more information.\nConsult the report Log into your PayU account. In the left menu, expand the Transfers menu and select Transfers.\nScroll down to the Created transfers report section where the report table is located. By default, the report displays the transfers created in the last 30 days from the most recent to the oldest.\nThe report has the following columns:\n   Column Description     ID Id of the transfer requested.   Request date Date and time when the transfer was created.   Last update Date and time of the last action executed in the transfer.   Transferred value Amount of the transfer along with its associated costs.\nTo know these costs, click the icon.\n   Destination account Bank account of the request   Status Latest status of the request. The possible states are: ApprovedIn progressRejected    Note If you need to display more information, contact your sales representative.  You can filter transfers by the date of their creation using the dates filter at the top right corner.\nThe date range of this filter is three (3) months before the end date. If you exceed this range, The report displays the information of three (3) months after the start date.\nTo see the information of a given date, set it for both start and end date.\nDownload the report To download the report, click the Download button located at the top or at the bottom of the report table.\nA progress bar appears at the top of the screen. Once the process is completed, the report is automatically downloaded in an Excel (.csv) format. The name of the report uses the format:\n If your account is not brazilian: [DownloadDateInMillis]_payment_orders_[AccountId].csv. If your account is brazilian: [DownloadDateInMillis]_daily_payment_order_[AccountId].csv.  Note The generated report is stored during 90 days in the My downloaded reports section.  ","excerpt":"Furthermore, if you have enabled the Payouts API, you can query the state of the payouts to third …","ref":"/en/payu-module-documentation/reports/transfer-report.html","title":"Transfer Report"},{"body":"En el módulo de Transferencias, puede encontrar las opciones para transferir los fondos recaudados en tu cuenta PayU virtual a tu cuenta bancaria principal registrada.\nConsideraciones Ten en cuenta las siguientes consideraciones antes de transferir fondos a tu cuenta bancaria.\n Debes tener tu información bancaria actualizada y validada. Ten en cuenta que si has solicitado la actualización de tu cuenta bancaria, las transferencias que realices se envían a la cuenta bancaria anterior hasta que nuestro equipo de Riesgos la haya validado. Como PayU en Brasil no es una institución de pago, los fondos recaudados en tu cuenta PayU se transfieren a tu cuenta bancaria diariamente de forma gratuita. Para consultar el estado de estas transferencias, utiliza la opción Transferencias diarias (Transferencias \u0026gt; Transferencias diarias). Las tres primeras transferencias locales realizadas durante el primer mes son gratuitas. Desde la cuarta solicitud de transferencia, PayU cobra los siguientes valores:  Colombia: 6.500,00 COP + VAT (Colombia) Perú: 10,00 PEN + IGV (Perú), Argentina: $ 10,00 ARS+ IVA (Argentina), Chile: 0,00 CLP México: 0,00 MXN   La primera transferencia demora cinco (5) días en depositarse en la cuenta bancaria. El área de Riesgo de PayU solicita un sustento de las ventas en la primera transferencia como proceso administrativo. La segunda y las siguientes transferencias toman un máximo de tres (3) días hábiles. Las transferencias se pueden programar por Monto y por Fecha  Nota Los tiempos y montos explicados aquí aplican solo para transferencias locales (al mismo país de operación) para transferencias internacionales, comunícate con tu representante de ventas.  Permisos requeridos Para tener acceso a este módulo, necesitas un perfil con los siguientes permisos activos:\n Transferencias \u0026gt; Consultar Transferencias \u0026gt; Administrar\nEste permiso te permite realizar transferencias.  Consulta Perfiles y Permisos para más información.\nTransferir fondos Puedes transferir hasta el monto total en tu cuenta PayU al banco registrado. Sigue estos pasos para realizar una transferencia.\n Inicia sesión en tu cuenta PayU. En el menú de la izquierda, expande el menú Transferencias y selecciona Transferencias.  Completa el valor para transferir o seleccione la opción Transferir el saldo total disponible. En el panel derecho, se actualiza el valor ingresado; Además, este panel muestra cuántas transferencias gratuitas tienes hasta el final del mes.\nSi no tienes transacciones gratuitas, este panel también muestra el valor de la transacción junto con los impuestos.  Haz clic en Solicitar transferencia. Aparece una ventana de confirmación para confirmar el monto a transferir, el valor a debitar de tu cuenta y la cuenta de destino.\nHaz clic en Aceptar para confirmar o en Rechazar para descartar la operación.  Aparece el resultado de la operación. Ten en cuenta la cantidad de días para reflejar el dinero en la cuenta objetivo.  Tan pronto como la solicitud ha sido enviada con éxito, la transferencia está en estado En proceso y puedes verla en la sección Reporte de transferencias realizadas al final del módulo; Además, la cantidad solicitada se debita de tu saldo.\nSi las transferencias no pudieron ser procesadas, esta cantidad se regresa a tu cuenta y no se cobra ninguna tarifa por esta operación.\nProgramar transferencias Puedes automatizar las transferencias y solicitar el retiro dado un monto fijo o cada cierto tiempo.\nNota  Programar transferencia no está disponible para Brasil. Al programar transferencias, debes tener fondos suficientes para el momento en que se ejecute la transferencia.   Para programar una transferencia, sigue estos pasos.\n Inicia sesión en tu cuenta PayU. En el menú de la izquierda, expande el menú Transferencias y selecciona Programar transferencia.  Se abre el módulo de Programación de transferencias, aquí puedes ver todas las transferencias programadas que tienes configuradas. Haz clic en Programar transferencia para configurar una nueva.  Opciones La columna opciones tiene las siguientes acciones:\n Editar (): te permite cambiar la configuración de la programación. Eliminar (): le permite desactivar la programación. Una vez que se elimina, no se pueden crear transferencias automáticas.   Selecciona cómo deseas programar la transferencia.    Programar transferencias por periodicidad\nEsta opción te permite transferir una cantidad determinada cada cierto tiempo (días, semanas o meses). Para programar este tipo de transferencias, selecciona la opción Periodicidad.\n  Programar transferencias por saldo disponible\nEsta opción te permite transferir una cantidad determinada cada vez que el saldo alcanza un valor específico. Para programar este tipo de transferencias, selecciona la opción Saldo disponible.\n  Ingresa las siguientes opciones.\n   Opción Descripción     Realizar mi retiro cada Selecciona la periodicidad de las transferencias que deseas programar. Esta opción está disponible para transferencias programadas por periodicidad.\n   Cantidad de dinero que deseas retirar Selecciona la cantidad que deseas transferir, puedes seleccionar el saldo total disponible o un valor fijo.\n   Ingresa el valor a retirar Selecciona la cantidad que deseas transferir. Este campo aparece al seleccionar la opción Configurar valor.   Iniciar mis transferencias a partir de Seleccione la fecha de inicio de la programación. En esta fecha está programada la primera transferencia.\n   Descripción Ingresa una descripción significativa de tu transferencia.    Cuando termines, haz clic en Programar Transferencia.  ","excerpt":"En el módulo de Transferencias, puede encontrar las opciones para transferir los fondos recaudados …","ref":"/es/payu-module-documentation/payu-operations/transfers.html","title":"Transferencias"},{"body":"In the Transfers module, you can find the options to transfer the funds collected in your virtual PayU account to your main bank account registered.\nConsiderations Keep in mind the following considerations before transferring funds to your bank account.\n You must have your bank information updated and validated. Take into account that if you have requested the update of your bank account, the transfers you make are sent to the former bank account until our Risk team have validated it. As PayU in Brazil is not a payment institution, the funds collected in your PayU account are transferred to your bank account daily for free. To check the status of these transfers, use the Daily payouts option (Transfers \u0026gt; Daily Transfers). The first three local transfers performed during the first month are free. Since the 4th transfer request, PayU charges the following values:  Colombia: 6.500,00 COP + VAT (Colombia) Peru: 10,00 PEN + IGV (Peru), Argentina: $ 10,00 ARS+ IVA (Argentina), Chile: 0,00 CLP Mexico: 0,00 MXN   The first transfer takes five (5) days to deposit in the bank account. The Risk area of PayU requests a livelihood of sales in the first transfer as an administrative process. The second, and the following transfers take maximum three (3) business days. The transfers can be programed by Amount and by Date  Note The times and amounts explained here apply only for local transfer (into the same operation country) for international transfers, contact your sales representative.  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n Transfers \u0026gt; Review Transfers \u0026gt; Manage\nThis permission allows you to perform transfers.  Refer to Profiles and Permissions for more information.\nTransfer funds You can transfer up to the total amount in your PayU account to the registered bank. Follow these steps to perform a transfer.\n Log into your PayU account. In the left menu, expand the Transfers menu and select Transfers.  Complete the value to transfer or select the Transfer all available balance option. In the right panel, the value entered is updated; furthermore, this panel shows how many free transfers you have until the end of the month.\nIf you don\u0026rsquo;t have free transactions, this panel also displayed the value of the transaction along with the taxes.  Click Request transfer. A confirmation window appears to confirm the amount to be transferred, the value to be debit from your account, and the target account.\nClick OK to confirm it or Reject to discard it.  The result of the operation appears. Take into account the number of days to reflect the money in the target account.  As soon as the request has been successfully sent the transfer is in In progess status and you can see it in the Created transfers report section at the end of the module; also, the amount requested is debited from your balance.\nIf the transfers could not be processed, this amount backs to your account and no fee is charged for this operation.\nSchedule transfers You can automate the transfers and request the a withdrawal given a fixed amount or each certain time.\nNote  Schedule transfer is not available for Brazil. When scheduling transfers, you must have the enough funds by the time when the transfer is executed.   To schedule a transfer, follow these steps.\n Log into your PayU account. In the left menu, expand the Transfers menu and select Schedule transfer.  The Schedule Transfers module opens, here you can see all the scheduled transfers you have configured. Click Schedule Transfer to set up a new schedule.  Options The options column provides the following actions:\n Edit (): allows you to change the configuration of the schedule. Delete (): allows you to deactivate the schedule. Once the schedule is removed, no automatic transfers can be created.   Select how you want to schedule the transfer.    Schedule transfers by periodicity\nThis option lets you transfer a given amount every certain time (days, weeks, or months). To schedule this type of transfers, select the option Periodicity.\n  Schedule transfers by balance available\nThis option lets you transfer a given amount every time the balance reaches a specific value. To schedule this type of transfers, select the option Balance available.\n  Provide the following options.\n   Option Description     Make a withdrawal each Select the periodicity of the transfers you want to schedule. This option is available for transfers scheduled by periodicity.\n   Select the amount to withdraw Select the amount you want to transfer, you can select the total available balance or a fixed value.\n   Amount to withdraw Select the amount you want to transfer. This field appears when you select the option Configure value.   Start my transfers on Select the starting date for the schedule. In this date, the first transfer is scheduled.\n   Description Provide a meaningful description for your transfer.    When finish, click Schedule Transfer.  ","excerpt":"In the Transfers module, you can find the options to transfer the funds collected in your virtual …","ref":"/en/payu-module-documentation/payu-operations/transfers.html","title":"Transfers"},{"body":" Nota Si realizas un reembolso a través de este panel, este solo se actualiza en el Módulo PayU. Si necesitas controlar y registrar los reembolsos en tu sistema, debes utilizar el API de Reembolsos.  ¿Qué es un reembolso? Un reembolso es la acción para devolver voluntariamente el dinero pagado por un cliente cuando ocurre alguna de las siguientes situaciones:\n El producto o servicio entregado no cumplió con las expectativas del cliente y lo devolvió. El producto está agotado, y el comerciante no puede entregar el producto al cliente.  Procedimiento de reembolso Los reembolsos están sujetos a revisión y aprobación de nuestro equipo. El procedimiento para solicitar reembolsos se explica a continuación:\n  Cuando tu cliente solicita un reembolso, debes solicitarlo utilizando el módulo PayU. Solo necesitas encontrar el pedido y entregar una razón para el reembolso.\n  Una vez enviada la solicitud, PayU la revisa y esta es aprobada o rechazada en uno a tres días hábiles.\n  Estados de reembolso Un reembolso puede estar en uno de los siguientes tres estados:\n En progreso: la solicitud ha sido enviada a PayU para su aprobación y está en proceso de aprobación. Aprobado: la solicitud ha sido aprobada por un agente de servicio al cliente de PayU. Declinado: la solicitud no cumple con las políticas definidas por PayU y fue rechazada por un agente.  Permisos requeridos Para tener acceso a este módulo, necesitas un perfil con los siguientes permisos activos:\n Reembolsos y Contracargos \u0026gt; Listar Reembolsos Reembolsos y Contracargos \u0026gt; Administrar Reembolsos\nEste permiso te permite realizar reembolsos.  Consulta Perfiles y Permisos para más información.\nConsideraciones  Los Reembolsos solo están disponibles para transacciones realizadas con tarjeta de crédito. Puedes reintentar la solicitud de reembolso si fue rechazada previamente. Una vez hagas la solicitud, el monto de la transacción se convierte en parte del Saldo Congelado de tu cuenta de PayU hasta que sea procesado. En Chile:  No se soportan reembolsos para transacciones procesadas con WebPay Plus. Para transacciones con tarjetas prepago que no sean procesadas a través de WebPay Plus, los Reembolsos solicitados luego de la primero hora del cobro pueden ser aprobados o rechazados por la red financiera. Luego de esta hora, se rechazan todos los reembolsos para transacciones realizadas con tarjetas prepago. ISi se rechaza el reembolso, PayU muestra el código de error generado por la red. Los reembolsos parciales para transacciones que utilizan cuotas se reciben en línea pero son procesados de forma manual debido a restricciones de la red adquirente.   En Colombia, no se soportan reembolsos parciales para tarjetas de crédito internacionales. En Perú, se soportan reembolsos parciales para transacciones sin cuotas. Ten en cuenta que las transacciones en una cuota son consideradas como sin cuotas. Si tu solicitud de reembolso es aprobada, el monto es retornado al tarjetahabiente. Si tu solicitud de reembolso es declinada, el monto se libera del Saldo Congelado y retorna a tu cuenta de PayU. Una vez se apruebe el reembolso, este será reflejado en la tarjeta de crédito del pagador cuando el banco lo haga efectivo. Para verificar el estado de tu solicitud de reembolso, puedes consultarla haciendo clic en la venta en el Módulo PayU.  Reembolsos por país Ten en cuenta las siguientes consideraciones por país antes de solicitar reembolsos.\n   Tiempo para enviar el reembolso Monto mínimo ¿Cuánto tiempo tardará el cliente en recuperar el dinero? ¿Acepta reembolsos parciales?   Mín. Max. Mín. Max.      10 minutos 365 días180 días (Reembolsos parciales) - 1 día hábil 30 días hábiles ✓    10 minutos1 día (Reembolsos parciales) 90 o 120 días* - 1 día hábil 15 días hábiles ✓    10 minutos 90 días 10 CLP 8 días hábiles 20 días hábiles ✓    10 minutos 2 años 100 COP 1 día hábil 30 días hábiles ✓    10 minutos 45 o 180 días* - 1 día hábil 30 días hábiles ✓    10 minutos 180 días - 1 día hábil 8 días hábiles X    10 minutos 180 días 1 USD1 PEN 15 días hábiles 25 días hábiles ✓    *Depende de la red.\n¿Cómo solicitar un reembolso? Para solicitar un reembolso, la transacción debe estar aprobada y sin ningún proceso de disputa pendiente. Sigue estos pasos para solicitarlo.\n Inicia sesión en ru cuenta PayU. En el menú de la izquierda, expande el menú Transacciones y selecciona Reporte de ventas.  Se abre el Reporte de ventas. Localiza la transacción que quieres reembolsar y haz clic en ella.  Aparecen los detalles de la transacción a la derecha de la ventana. Haz clic en el botón Devolver dinero al final del panel.  Si necesitas solicitar un reembolso parcial, marca la opción Devolver una parte de la compra e ingresa el valor solicitado.  Ingresa la razón para solicitar el reembolso (parcial o total) y haz clic en Devolver dinero.  Aparece el resumen de la solicitud. Mientras PayU procesa el reembolso, el monto del reembolso se congela en tu cuenta. Si se aprueba la solicitud, el monto reembolsado se devuelve al cliente a través del método de pago utilizado.  Una vez aprobada la solicitud, el estado aparece en la venta.  ","excerpt":"Nota Si realizas un reembolso a través de este panel, este solo se actualiza en el Módulo PayU. Si …","ref":"/es/payu-module-documentation/payu-operations/refunds-mp.html","title":"Reembolsos"},{"body":" Note If you perform a refund through this panel, this is only updated in the PayU Module. If you need to control and record the refunds in your refund system, you should use the Refunds API.  What is a refund? A refund is the action to voluntary return the money paid by a customer when any of the following situations happen:\n The product or service delivered does not met the expectations of the customer and they returned it. The product is out of stock, anf the merchant is not able to deliver the product to the client.  Refund procedure Refunds are subject to review and approval of our team. The procedure to request refunds is explained below:\n  When a refund is requested by your customer, you need to request it using the PayU module. You just need to identify the order and provide a reason for refund.\n  Once you send the request, PayU reviews it and this is approved or rejected in one to three business days.\n  Refund states A refund can be in one of the following three states:\n In return: the request has been sent to PayU for approval and it is under approval. Approved: the request has been approved by a PayU’s customer service agent. Declined: the request does not meet the policies defined by PayU and was rejected by an agent.  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n Refunds and Chargebacks \u0026gt; List Refunds Refunds and Chargebacks \u0026gt; Manage Refunds\nThis permission allows you to perform refunds.  Refer to Profiles and Permissions for more information.\nConsiderations  Refunds are only available for transactions paid with card. You can retry the refund request if this was previously declined. Once you make the request, the transaction amount becomes part of the Frozen Balance of your PayU account until it is processed. In Chile:  Refunds for transactions processed by WebPay Plus are not supported. For transactions prepaid cards not processed by WebPay Plus, Refunds requested during the first hour after their charge can be approved or rejected by the financial network. After the first hour, all the refund for transactions with prepaid cards are rejected. If the refund is rejected, PayU shows the error code generated by the network. Partial refunds for transactions using installments are received online but PayU processes them manually due to acquirer restrictions.   In Colombia, partial refunds are not available for international credit cards. In Peru, partial refunds are supported for transactions without installments. Recall that transactions with one installment are considered as without installments. Partial refunds with visanet must be sent after one day. If your refund request is approved, the amount is refunded to the card holder. If your refund request is declined, the amount is released from the Frozen Balance and returns to the available Balance of your PayU account. Once the refund is approved, this will be reflected in the payer’s credit card when the bank make it effective. To check the status of your refund request, you can consult it by clicking the sale in the PayU Module.  Refunds per country Take into account the following considerations per country before requesting refunds.\n   Time to send the refund Min amount. How long will take to the customer to get the money back? Accepts partial refunds?   Min. Max. Min. Max.      10 minutes 365 days180 days (Partial refunds) - 1 working day 30 working days ✓    10 minutes1 day (Partial refunds) 90 or 120 days* - 1 working day 15 working days ✓    10 minutes 90 days 10 CLP 8 working days 20 working days ✓    10 minutes 2 years 100 COP 1 working day 30 working days ✓    10 minutes 45 or 180 days* - 1 working day 30 working days ✓    10 minutes 180 days - 1 working day 8 working days X    10 minutes 180 days 1 USD1 PEN 15 working days 25 working days ✓    *Depends on the network.\nHow to request a refund? To request a refund, the transaction must be approved and without any pending dispute process. Follow the next steps to request it.\n Log into your PayU account. In the left menu, expand the Transactions menu and select Sales Report.  The Sales Report opens. Locate the transaction you want to refund and click it.  The transaction details appear at the right of the screen, Click the Refund button at the end of the panel.  If you need to request a partial refund, check the option Partial refund and provide the requested value.  Provide the reason to request the refund (partial or total) and click Refund.  The summary of the request appears. While PayU process the refund, the amount of the refund is frozen in your account. If the request is approved, the amount refunded is returned to the customer through the payment method used.  Once the request has been approved, the status appears in the sale.  ","excerpt":"Note If you perform a refund through this panel, this is only updated in the PayU Module. If you …","ref":"/en/payu-module-documentation/payu-operations/refunds-mp.html","title":"Refunds"},{"body":"Un Perfil es un conjunto de permisos para acceder a una funcionalidad de una cuenta. Un usuario es una persona que tiene un perfil para administrar o consultar la información de una cuenta.\nPara más información sobre comercios, cuentas y más, lee los conceptos detrás del Módulo PayU.\nPermisos requeridos Para tener acceso a este módulo, necesitas un perfil con los siguientes permisos activos:\n Consultar permisos y perfiles Crear, editar y eliminar perfiles y permisos  Permisos predeterminados De manera predeterminada, PayU proporciona tres perfiles que permiten a tus usuarios acceder a las cuentas. Estos perfiles son:\n Administrador: este perfil tiene habilitados todos los permisos de la cuenta. Un usuario enrolado con este perfil puede crear, revisar, actualizar, y eliminar (o deshabilitar) la información relacionada con la cuenta. Además, este usuario puede ver y descargar todos los reportes, ver la información técnica, resolver disputas, administrar usuarios, realizar transferencias y administrar perfiles. Consultar y editar: este perfil es el equivalente a un perfil manager. Un usuario enrolado con este perfil puede crear, revisar, actualizar, y eliminar (o deshabilitar) la información relacionada con la cuenta. Además, este usuario puede ver y descargar todos los reportes, ver la información técnica, resolver disputas, y revisar los perfiles de usuarios creados. Solo consultar: este perfil puede acceder a la cuenta en modo solo lectura. Un usuario enrolado con este perfil puede crear, revisar la información relacionada con la cuenta, descargar algunos de los reportes y ver las transferencias de la cuenta. Además, este usuario no puede ver los detalles técnicos o tener acceso a los perfiles de los usuarios.  Estos perfiles no se pueden eliminar y su conjunto de permisos es fijo, si alguno de estos permisos no satisface tus necesidades, debes crear uno.\nGestión de perfiles y permisos Para gestionar perfiles y permisos, ingresa a tu cuenta PayU y haz clic en el menú Configuración en la parte superior de la pantalla y luego, selecciona Perfiles y permisos.\nSe abre el módulo Gestión de servicios y permisos aquí, puedes encontrar una tabla con todos los permisos para acceder al módulo PayU y los perfiles con acceso a los mismos.\nCrear perfiles Cuando ninguno de los perfiles predeterminados satisface tus necesidades, puedes crear uno y asignar un conjunto de permisos personalizado. Sigue estos pasos para crear un perfil.\n En el módulo Gestión de servicios y permisos, haz clic en Crear perfil personalizado.  Se agrega una nueva columna a la tabla. Ingresa un nombre significativo para su perfil personalizado.  Una vez que establezcas el nombre, puedes asignar tantos permisos como necesites haciendo clic en la casilla de verificación de cada fila.  Cuando termines, haz clic en Guardar configuración. Si haces clic en Borrar cambios, el perfil no se guarda y la columna se elimina de la tabla.  Editar perfiles Al editar un perfil, puedes cambiarle el nombre, o asignar o eliminar permisos.\n  Para cambiar el nombre de un perfil, haz clic en el simbolo ▾ junto a su nombre. Luego, haz clic en Cambiar nombre.\nEsto habilita el campo de nombre del perfil para actualizarlo.\n  Para asignar o eliminar un permiso, simplemente haz clic en la casilla de verificación del permiso.\n  Cuando termines, haz clic en Guardar configuración. Si haces clic en Borrar cambios, todos los cambios tanto para el cambio de nombre como para el cambio de permisos se descartan.\nEliminar perfiles Para eliminar un perfil, haz clic en el simbolo ▾ junto a su nombre. Luego, haz clic en Eliminar.\nSi hay usuarios enrolados al perfil que estás a punto de eliminar, se te solicitará que establezcas un nuevo perfil para ellos. Selecciona el nuevo perfil del menú desplegable y haz clic en Eliminar y reasignar.\nTan pronto como elimines el perfil, su columna se elimina de la tabla y ningún usuario podrá tener este perfil.\n","excerpt":"Un Perfil es un conjunto de permisos para acceder a una funcionalidad de una cuenta. Un usuario es …","ref":"/es/payu-module-documentation/user-and-profile-management/profile-and-permissions-management.html","title":"Gestión de perfiles y permisos"},{"body":"A Profile is a set of permissions that allows a user to access to a feature of an account. A user using a profile can access to as many account there are in each merchant.\nFor further information about merchants, accounts, and more, read the concepts behind the PayU Module.\nPermission required To have access to this module, you need to have a profile with the following permission enabled:\n Review permissions and profiles Create, edit and delete profiles and permissions  Default profiles By default, PayU provides three profiles that allow your users to access the accounts. These profiles are:\n Administrator: this profile has enabled all the permission of the account. A user entitled to this profile can create, review, update, and delete (or disable) the information related to the account. Furthermore, this user can see and download all the reports, view the technical information, resolve disputes, manage users, perform transfers, and manage profiles. Read and write: this profile is the equivalent of a manager profile. A user entitled to this profile can create, review, update, and delete (or disable) the information related to the account. Furthermore, this user can see and download all the reports, view the technical information, resolve disputes, and review the users and profiles created. Only read: this profile can access the account in read-only mode. A user entitled to this profile can create, review the information related to the account, download some of the reports, view the transfers of the account. Furthermore, this user cannot see the technical details or has access to the users and profiles.  These profiles cannot be deleted and their set of permissions are fixed, if any of these permissions does not meet your needs, you should create one.\nProfile and Permission management To manage profile and permission, open you PayU account and click Settings menu at the top the screen and then, select Permissions and profiles.\nThe Profiles and permissions management module opens, here, you can find a table with all the permissions to access PayU module and the profiles with access to them.\nCreate profiles When none of the default profiles meets you requirements, you can create one and assign a customized set of permissions. To create a profile follow these steps.\n In the Profiles and permissions management module, click Create custom profile.  A new column is added to the table. Provide a meaningful name for your custom profile.  Once you set the name, you can assign as many permission as you need by clicking the checkbox of each row.  When finish, click Save settings. If you click Delete changes, the profile is not saved and the column is deleted form the table.  Edit profiles When editing a profile, you can either rename it, or assign or remove permissions.\n  To rename a given profile, click the ▾ symbol next to its name. Then, click Change name.\nThis enables the name field of the profile to update it.\n  To assign or remove a permission, just click the checkbox of the permission.\n  When finish, click Save settings. If you click Delete changes, all the changes for both renaming and permission change are discarded.\nDelete profiles To delete a given profile by click the ▾ symbol next to its name. Then, click Delete.\nIf there are users entitled to the profile you are about to delete, you are prompted to set a new profile for them. Select the new profile from the dropdown menu and click Delete and reassign.\nAs soon as you delete the profile, its column is removed from the table and no user will be able to have this profile.\n","excerpt":"A Profile is a set of permissions that allows a user to access to a feature of an account. A user …","ref":"/en/payu-module-documentation/user-and-profile-management/profile-and-permissions-management.html","title":"Profile and Permissions Management"},{"body":"","excerpt":"","ref":"/es/payu-module-documentation/user-and-profile-management.html","title":"Gestión de usuarios y permisos"},{"body":"","excerpt":"","ref":"/en/payu-module-documentation/user-and-profile-management.html","title":"User \u0026 Profile management"},{"body":"Obtener la información técnica Independiente de la integración que utilices, necesitas las siguientes variables en la petición de los métodos o en sus parámetros.\nMerchant y account IDs Estos valores te permiten autenticar tanto a tu comercio (Merchant ID) como a su cuenta (Account ID) cuando utilizas cualquiera de las integraciones para utilizar los servicios que brindamos.\nCuando inicias sesión en tu módulo PayU, encuentras ambos valores en el panel izquierdo.\nAPI key y API Login  En el módulo PayU, haz clic en Configuración y luego selecciona Configuración técnica.  En esta ventana, encontrarás tanto el API key como el API Login que permiten autenticar a tu comercio durante el proceso de integración.  Advertencia Ambas llaves con únicas por comercio en PayU, por lo tanto, debes mantener esta información asegurada y su uso o distribución se hace bajo tu responsabilidad.  Configurar la información técnica En esta sección podrás configurar propiedades técnicas pertenecientes a cada cuenta activa como:\n La configuración de URLs para las páginas de Respuesta y Confirmación Habilitar las opciones de envío de correos al comprador y a tu comercio al momento de realizar una venta. Habilitar las notificaciones para el proceso de Disputas. Seleccionar si tus pagos se procesan en modo pruebas o en producción  Para configurar esta información, haz clic en Configuración y luego selecciona Configuración técnica.\nEn la ventana Configuración técnica, encuentras dos pestañas de acuerdo a tus necesidades: Pagos o Disputas.\nPagos En esta pestaña puedes configurar la siguiente información.\n    Parámetro Descripción     Tus pagos se procesan Selecciona si tus transacciones son procesadas En Producción o en Modo prueba. Cuando procesas en Modo prueba, las transacciones realizadas a través de tu página web o a través de solicitudes de pago son marcadas como de prueba y el pago no es real.   URL de respuesta Es la página a la cual se redirecciona el comprador una vez finaliza la transacción en PayU, en esta página se muestra el estado de la transacción.   URL de confirmación Es la página a la cual PayU envía la confirmación del pago a tu sistema. Esto es útil para actualizar inventarios y bases de datos una vez la transacción llegue a su estado final.\nEsta página no es obligatoria.   Controlar pagos dobles Al habilitar esta opción, validamos que la referencia de cada pago enviado a nuestro sistema sea única. En caso contrario, podrás enviar una misma referencia para todas tus ventas.   Notificaciones de pagos procesados Esta opción te permite enviar un correo electrónico al pagador o a ti cuando el pago sea aprobado o rechazado.    Disputas En esta pestaña puedes configurar la siguiente información del proceso de disputas.\n    Parámetro Descripción     Correos de notificaciones Configura las direcciones de correo electrónico para recibir notificaciones cuando se inicie un proceso de disputa.   URL de notificación automática Si habilitas esta opción, puedes establecer la URL a la que PayU envía la notificación de un proceso de disputa.    Nota No olvides hacer clic en Guardar cambios al final de la sección para aplicar los cambios.  ","excerpt":"Obtener la información técnica Independiente de la integración que utilices, necesitas las …","ref":"/es/payu-module-documentation/getting-started/understanding-the-payu-module/technical-configuration.html","title":"Configuración técnica"},{"body":"Getting Technical information Regardless of the integration you use, you require the following variables in the request of the methods or in their parameters.\nMerchant and account IDs These values allows you to authenticate both your merchant and your account when using any of the integrations to use the services we provide.\nWhen you log in your PayU module, both values are accessible in the left panel.\nAPI key and API Login  In the PayU module, click Settings and then select Technical configuration.  In this window, you find both the API key and API Login which allows you to authenticate you commerce during the integration procedure.  Warning Both keys are unique per commerce in PayU, therefore, you must keep this information secured and their usage or disclosure is under your responsibility.  Configuring technical information In this section, you can configure the technical properties of each active account, such as:\n URL settings for confirmation and response pages. Enable the send e-mails to the buyer and to your store when a sale takes place. Enable notifications for Disputes process. Select if your payments are processed in test mode or live.  To configure this information, click Settings and then select Technical configuration.\nIn the Technical configuration window, you find two tab according to your needs: Payments or Disputes.\nPayments In this tab, you can configure the following information.\n    Parameter Description     Your payments are processed Select whether your transactions are processed In Production or In Test mode. When processing In Test mode, the transactions done through your website or through payment requests, are marked as a test and the payment is not real.   Response URL The page to which the buyer is direct once the transaction in PayU ends. This page displays the status of the transaction.   Confirmation URL The page to which PayU sends the payment confirmation to your system. This is useful when you want to update stocks and database once the transaction reaches its final state.\nThis parameter is not mandatory.   Control duplicate payments When enabling this option, We validate that each payment reference sent to our system is unique. Otherwise, you can send the same reference for all your sales.   Notifications of processed payments This option lets you enable the send of an e-mail to the payer or to you when the payment was approved or rejected.    Disputes In this tab, you can configure the following information of the dispute process.\n    Parameter Description     Notification e-mails Set the e-mail addresses to be notified when a dispute process has been started.   Automatic notification URL If you enable this option, you can set the URL to which PayU sends the notification of a dispute process.    Note To apply the changes you made, do not forget to click the Save changes button.  ","excerpt":"Getting Technical information Regardless of the integration you use, you require the following …","ref":"/en/payu-module-documentation/getting-started/understanding-the-payu-module/technical-configuration.html","title":"Technical Configuration"},{"body":"To recover your password, click the respective link under the Login button.\nProvide the e-mail of your account and perform the validation of the reCAPTCHA.\nClick Recover password. If your e-mail address is registered, you receive an e-mail with the password recovery URL. Check your spam box if you haven\u0026rsquo;t receive the e-mail yet.\nClick Reset password. A new browser window opens, provide your new password twice and click Set password.\n","excerpt":"To recover your password, click the respective link under the Login button.\nProvide the e-mail of …","ref":"/en/payu-module-documentation/getting-started/password-recovery.html","title":"Password Recovery"},{"body":"Para recuperar tu contraseña, haz clic en el enlace bajo el botón Ingresar.\nIngresa el correo electrónico de tu cuenta y realiza la validación de reCAPTCHA.\nHaz clic en Recuperar contraseña. Si tu dirección de correo electrónico está registrada, recibiras un correo electrónico con la URL de recuperación de contraseña. Verifica tu carpeta de spam si aún no has recibido el correo.\nHaz clic en Definir contraseña. Aparece una nueva ventana del navegador, ingres tu contraseña dos veces y haz clic en Definir contraseña.\n","excerpt":"Para recuperar tu contraseña, haz clic en el enlace bajo el botón Ingresar.\nIngresa el correo …","ref":"/es/payu-module-documentation/getting-started/password-recovery.html","title":"Recuperación de contraseña"},{"body":"Prerequisites  You need an active account in PayU Latam. Having installed Magento version 1.7.x to 1.9.x. Having the PayU\u0026rsquo;s Magento plugin downloaded and stored in an accessible location. Click here to download it. You need access to the folders where Magento is installed. You need access to the Magento Admin Panel.  Considerations  Approved payments appear with Processing status in the orders report. Once the payment is received correctly, Magento creates an invoice with the associated order.  Installation Follow the next procedure to install the plugin on your website.\n Log in to your Magento admin panel. Then, expand the System menu at the top and click Cache Management.\nIn the new window, click Flush Magento Cache.  Unzip the plugin. The plugin folder is called app and it has the following structure:  Navigate to [PluginFolder]\\app\\code\\local and copy the Gfgrisales folder into the \\app\\code\\local folder in the root of the Magento installation folder.\nIf this structure does not exist in your installation, create it with read and write permissions.  Navigate to [PluginFolder]\\app\\design\\frontend\\base\\default\\template and copy the payu folder into the \\app\\design\\frontend\\base\\default\\template folder in the root of the Magento installation folder.  Navigate to [PluginFolder]\\app\\etc\\modules and copy the Gfgrisales_Payu.xml file into the \\app\\etc\\modules folder in the root of the Magento installation folder.  Configuration  Back in your Magento admin panel, expand the System menu and click Configuration. Then, expand Advanced section in the menu displayed on the left panel and click Advanced option.\nClick Disable Modules Output and check that the PayU extension called Gfgrisales_Payu is enabled.  In the Configuration menu on the left panel, expand Sales section in the menu displayed on the left panel and click Payment methods option.\nFind and expand the PayU method and provide the information of your PayU Account.   Merchant ID: ID of your commerce in PayU Latam. APIKey: Unique key of your commerce, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; API Key). Account ID: ID of the PayU account according to the country where you want to sell. Gateway URL: Gateway URL.  For test, use https://sandbox.gateway.payulatam.com/ppp-web-gateway For production, use https://gateway.payulatam.com/ppp-web-gateway/    Note For testing purposes, you can use the Merchant ID, APIKey, and Account ID available in Test Your Solution.\nOnce you are in the credit card payment form, and ensuring that you have the message at the top of the gateway Transaction in test mode, you must:\n Enter the text APPROVED in the Full Name field if you want the transaction to be approved, REJECTED if you want it to be rejected or PENDING if you want it to be pending. You must enter a valid card number in the Card Number field according to the selected franchise. For this, you can use an online credit card generator. All other fields can be random.   Once finish, click Save Config to apply changes.\nAt this point, your customers can pay with PayU Latam when they do the checkout in the Magento\u0026rsquo;s shopping cart.\n","excerpt":"Prerequisites  You need an active account in PayU Latam. Having installed Magento version 1.7.x to …","ref":"/en/docs/tools/shopping-cart-plugins/magento.html","title":"Magento"},{"body":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Tener instalado Magento versión 1.7.x a la 1.9.x. Haber descargado el plugin de Magento de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí para descargarlo. Tener acceso a las carpetas donde se encuentra instalado Magento. Tener acceso al Admin Panel de Magento.  Consideraciones  Los pagos aprobados aparecen con estado Processing en el reporte de órdenes. Una vez el pago es recibido correctamente, Magento crea una factura con la orden asociada.  Instalación Sigue este procedimiento para instalar el plugin en tu página web.\n Ingresa a tu Admin panel de Log in to your Magento admin panel. Luego, expande el menú System en la parte superior y haz clic en Cache Management.\nEn la nueva ventana, haz clic en Flush Magento Cache.  Descomprime el plugin. La carpeta del plugin se llama app y tiene la siguente estructura:  Navega a [CarpetaPlugin]\\app\\code\\local y copia la carpeta Gfgrisales en la carpeta \\app\\code\\local en la ruta de instalación de Magento.\nSi esta estructura no existe, créala con permisos de lectura y escritura.  Navega a [CarpetaPlugin]\\app\\design\\frontend\\base\\default\\template y copia la carpeta payu en la carpeta \\app\\design\\frontend\\base\\default\\template en la ruta de instalación de Magento.  Navega a [CarpetaPlugin]\\app\\etc\\modules y copia el archivo Gfgrisales_Payu.xml en la carpeta \\app\\etc\\modules en la raíz de la ruta de instalación de Magento.  Configuración  Regresa al Admin panel de Magento, expande el menú System y haz clic en Configuration. Luego, expande la sección Advanced en el menú mostrado en el panel izquierdo y haz clic en la opción Advanced.\nHas clic en Disable Modules Output y verifica que está habilitada (Enable) la extensión llamada Gfgrisales_Payu.  En el menú Configuration en el panel de la izquierda, expande la sección Sales en el menú mostrado en el panel izquierdo y haz clic en la opción Payment methods.\nLocaliza y expande el método PayU e ingresa la siguiente información de tu cuenta PayU.   Merchant ID: Identificador de tu comercio en PayU Latam. APIKey: Llave única de tu comercio, puedes obtener esta información en tu Módulo Payu (Configuración \u0026gt; Configuración técnica \u0026gt; API Key). Account ID: Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender. Gateway URL: URL de la pasarela.  Para pruebas, utiliza https://sandbox.gateway.payulatam.com/ppp-web-gateway Para producción, utiliza https://gateway.payulatam.com/ppp-web-gateway/    Nota Para pruebas, puedes utilizar los valores de Merchant ID, APIKey y Account ID disponibles en Probar tu solución.\nUna vez estén en el formulario de pago con tarjeta de crédito y asegurandote de que en la parte superior de la pasarela se muestre el mensaje Transacción en modo de prueba, debes:\n Ingresar el texto APPROVED en el campo Nombre completo si quieres que la transacción sea aprobada, REJECTED si quieres que la transacción sea rechazada o PENDING si quieres que la transacción quede pendiente. Para el número de la tarjeta, utiliza un número válido que corresponda a la franquicia seleccionada. Puedes utilizar un generador en línea de tarjetas de crédito. Los demás campos pueden ser aleatorios.   Una vez termines, haz clic en Save Config para guardar los cambios.\nEn este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de Magento.\n","excerpt":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Tener instalado Magento versión 1.7.x a …","ref":"/es/docs/tools/shopping-cart-plugins/magento.html","title":"Magento"},{"body":"Para integrarte con el API de Pagos de Argentina, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito o débito Enviar transacciones en efectivo Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito o débito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito o débito. Para Argentina, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado o provincia de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado o provincia de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se haga con una tarjeta tokenizada reemplazando la información de la tarjeta de crédito. Para más información, consulta API de Tokenización No   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Si procesas utilizando tarjeta débito, no envíes este parámetro.\nEste objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; debitCard   Información de la tarjeta débito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta debito. No   transaction \u0026gt; debitCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta débito. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad la tarjeta débito (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta débito. Formato YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta debito. No   transaction \u0026gt; payer   Información del pagador. Debido a regulaciones de impuestos, es obligatorio enviar los parámetros payer.billingAddress.state y payer.dnitype. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador que debe ser igual al enviado en el parámetro creditCard.name para pagos con tarjeta de crédito. No   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado o provincia de la dirección de facturación. Formato ISO 3166-2 oficial de Argentina. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. No   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. No   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. Sí   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción requerido:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE para flujos de un paso. Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito o débito valido. Ver los métodos de pago disponibles para Argentina. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna AR para Argentina. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, the extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta. En JSON, el parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, el parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Para pagos con Promociones, envía los parámetros INSTALLMENTS_NUMBER y PROMOTION_ID con el número de cuotas seleccionado y el ID de la promoción. Consulta el API de Promociones para más información. La funcionalidad de Promociones solo está disponible para flujos de un paso. Para pagos con tókenes de tarjetas de crédito, incluye los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito . Para más información, consulta el API de Tokenización. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode. Cuando utilices tarjetas de crédito, ten en cuentas las consideraciones debido a regulaciones argentinas para la página de checkout. Debido a regulaciones de impuestos, es obligatorio enviar los parámetros payer.billingAddress.state utilizando el formato ISO 3166-2 oficial de Argentina y payer.dnitype.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T20:25:15.868Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1ffceb14a71948fdeaba5aef81b8e511\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421560, \u0026#34;transactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623338717949, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-10T20:48:38.620Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;52b975674c6b1435c81dde6b8e039730\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421621\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;dd76e186-e4f1-487c-826b-df4e9b125bfa\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;dd76e186-e4f1-487c-826b-df4e9b125bfa\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T10:48:40\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de 14 días. Despues de este tiempo, la transacción es anulada automáticamente. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada. Puedes realizar capturas parciales sobre un monto autorizado. Para esto, necesitas enviar en la petición el parámetro transaction.order.additionalValues.TX_VALUE con su valor (Como se envió durante la Autorización) y asignar PARTIAL_CAPTURE en el parámetro transaction.type.  Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400421560\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421560, \u0026#34;transactionId\u0026#34;: \u0026#34;84ace270-d52d-4e85-b4cf-bbe8710db0d5\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;84ace270-d52d-4e85-b4cf-bbe8710db0d5\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623339599368, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400421560\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421560\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;4522f4ac-4ff2-4e91-aa6c-7f2c2bf18d9d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;DECLINED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseErrorMessage\u0026gt;El saldo disponible no es suficiente para procesar la transacción.\u0026lt;/paymentNetworkResponseErrorMessage\u0026gt; \u0026lt;responseCode\u0026gt;INVALID_TRANSACTION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T10:55:46\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T22:29:35.451Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;70f33e263fbcdf18103101dfc86671ab\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4850110000000000\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421870, \u0026#34;transactionId\u0026#34;: \u0026#34;fc7e5dce-0b69-4865-b7c3-acb0170c1729\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;fc7e5dce-0b69-4865-b7c3-acb0170c1729\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623346177300, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-10T20:48:38.620Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;52b975674c6b1435c81dde6b8e039730\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4850110000000000\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421894\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;fc588a85-3122-4e4e-b958-a03d48b7438f\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;fc588a85-3122-4e4e-b958-a03d48b7438f\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T12:41:15\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Cuotas Cuando proceses transacciones con tarjetas de crédito, necesitas mostrar los siguientes aspectos a tu cliente cuando se seleccione diferir la compra en cuotas:\nDonde:\n   Número en la pantalla Opción Descripción     1 Total compra El precio de contado.   2 Total a pagar El precio total financiado.   3 Cuotas Número de cuotas y el monto de cada una.   4 TEA La tasa de interés efectiva anual aplicada (TEA).   5 CFT El costo financiero total (CFT).    La información del Costo Financiero Total (CFT) debe tener las siguientes características:\n  Debe estar junto a las variables reportadas.\n  Aparecer en una tipografía en color destacado, de idéntica fuente y con un tamaño al menos cinco veces mayor al utilizado para informar la Tasa de interés efectiva anual (TEA), la cantidad de cuotas, y su importe.\n  Según la regulación vigente, no podrás mencionar la frase “sin interés” (o cualquier otra frase similar), cuando el costo de financiación del producto y/o servicio sea trasladado al precio de venta del consumidor.\nEnviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de la autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado o provincia de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado o provincia de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado o provincia de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos en efectivo se realizan en oficinas físicas, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago en efectivo válido. Ver los métodos de pago disponibles para Argentina. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna AR para Argentina. Sí   transaction \u0026gt; expirationDate Alfanumérico 23 Fecha y hora máxima en la que el cliente puede realizar el pago. Formato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza en una oficina física, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta.\nEn JSON, el parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nEn XML, el parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es 15 días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. El parámetro transactionResponse.extraParameters tiene los siguientes parámetros relacionados con la transacción:  REFERENCE: referencia de pago interna generada por PayU. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T20:25:15.868Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1ffceb14a71948fdeaba5aef81b8e511\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PAGOFACIL\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-12T16:07:11\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857787128, \u0026#34;transactionId\u0026#34;: \u0026#34;702ee8a1-d99c-43cc-a097-167db0d7ff1a\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 74794, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857787128Y702ee8a1d99c43cY5769b4d7b64fa1e\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1623514031586, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;99580010000074794000000000000000000001206211107000010000083\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857787128Y702ee8a1d99c43cY5769b4d7b64fa1e\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T14:40:25.549Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1ffceb14a71948fdeaba5aef81b8e511\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PAGOFACIL\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-16T16:07:11\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857792249\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;96a2e817-e26a-456b-85d4-28df8c3a584e\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;75017\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857792249Y96a2e817e26a456Y47e0b9cb12503f6\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T11:07:11\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;99580010000075017000000000000000000001606211107000010000082\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857792249Y96a2e817e26a456Y47e0b9cb12503f6\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de la autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción Obligatorio     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS. Sí   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR. Sí   paymentMethods   Lista de métodos de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago. Sí     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;201\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ARGENCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;212\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;201\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;ARGENCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;212\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PING. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de la autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción.   error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.   transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de Argentina, apunta tus peticiones a las siguientes URLs de …","ref":"/es/docs/integrations/api-integration/payments-api-argentina.html","title":"API de Pagos - Argentina"},{"body":"Para integrarte con el API de Pagos de Brasil, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo Enviar transacciones con transferencia bancaria Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito o débito. Para Brasil, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nAgregar Facilitadores de pago Los comercios pueden ser considerados como Procesadores de Pago por las franquicias y por el Banco Central. Un procesador de pagos es una entidad legal que tiene el dinero de los subcomercios. En caso de quiebra mercantil y gestión fiscal, el Banco Central de Brasil quiere conocer al beneficiario del negocio.\nPara incluir la información del subcomercio, necesitas agregar en la petición de los flujos de Autorización y de Cobro utilizando el objeto submerchant.\n¿Qué es un facilitador de pago? Un facilitador de pago es una compañía que ofrece una alternativa a contratar con una organización de pago tradicional asumiendo la responsabilidad del flujo de fondos en una relación comprador-vendedor.\nMuchos comercios escogen trabajar con facilitadores de pago ya que poseen y manejan la cuenta maestra, por lo tanto, asumen el riesgo. Los comercios también escogen un facilitador de pago debido a la simplicidad de configurar una cuenta, esto ocurre típicamente a través de una aplicación corta y una evaluación de lla suscripción.\n¿Qué información necesitas? Necesitas enviar la siguiente información:\n Identificación interna del subcomercio (opcional) Nombre del subcomercio (opcional) Número de identificación del subcomercio *Individuos o Entidades Dirección del subcomercio (opcional) Estado del subcomercio (obligatorio) Código postal del subcomercio(obligatorio) País del subcomercio (obligatorio)  Encuentra la descripción de estos campos en la sección Variables.\nUtilizar tarjetas tokenizadas PayU soporta pagos con tus tarjetas tokenizadas para que puedas realizar pagos regulares con una tarjeta almacenada en un token. Un token de tarjeta de crédito substituye la información sensible de una tarjeta de crédito y te permite guardarla siguiendo los estándares de seguridad de PCI DSS (Payment Card Industry Data Security Standard).\nPayU puede procesar pagos con los siguientes servicios:\n  Tokenización de PayU.\nProveemos nuestro propio servicio para tokenizar tus tarjetas de crédito bajo petición. Este servicio te permite tokenizar la información de las tarjetas de crédito de tus clientes (independiente de su franquicia) utilizando la integración API o SDK.\nPara más información, consulta Tokenización PayU.\n  MasterCard Digital Enablement Service - MDES.\nServicio de tokenización de Mastercard. Este servicio le permite tokenizar el número de cuenta primario de las tarjetas de crédito MasterCard para poder hacer pagos regular o implementar funcionalidades de pago a un clic.\nPara más información, consulta MasterCard Digital Enablement Service (MDES) en inglés.\n  Visa Token Service - VTS.\nServicio de tokenización de Visa. Este servicio le permite almacenar la información sensible de una tarjeta de crédito Visa para poder hacer pagos regular o implementar funcionalidades de pago a un clic.\nPara más información, consulta Visa Token Service (VTS).\n  Pagar con tokens PayU Para pagos con tókenes de tarjeta de crédito de PayU, incluye el parámetro transaction.creditCardTokenId reemplazando la información de la tarjeta de crédito. El siguiente ejemplo muestra el cuerpo de la petición a alto nivel de un flujo de un paso, no se muestran los detalles de la petición.\nNota Para procesar sin CVV es necesario enviar el parámetro creditCard.processWithoutCvv2 como true en la petición del pago y quitar el parámetro creditCard.securityCode.\nPor defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas.   JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Información de la orden\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Información del pagador\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;creditCard\u0026#34;: { \u0026#34;securityCode\u0026#34;: \u0026#34;123\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parámetros de la solicitud\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Franquicia de la tarjeta\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;País de procesamiento\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Información de la orden --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- IInformación del pagador --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parámetros de la solicitud --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Franquicia de la tarjeta}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{País de procesamiento}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    Pagar con tokens MDES o VTS Si estás tokenizando las tarjetas de crédito de tus clientes, puedes configurar la información del token en el parámetro transaction.networkToken reemplazando la información de la tarjeta de crédito y enviando el parámetro creditCard.processWithoutCvv2 en true.\nPor defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas\nEl siguiente ejemplo muestra el cuerpo de la petición a alto nivel de un flujo de un paso, no se muestran los detalles de la petición.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Información de la orden\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Información del pagador\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;networkToken\u0026#34;: { \u0026#34;tokenPan\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;cryptogram\u0026#34;: \u0026#34;11223344556677889900112233445566778899\u0026#34;, \u0026#34;expiry\u0026#34;: \u0026#34;2028/01\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parámetros de la petición\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Franquicia de la tarjeta\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;País de procesamiento\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Información de la orden --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- Información del pagador --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;networkToken\u0026gt; \u0026lt;tokenPan\u0026gt;4097440000000004\u0026lt;/tokenPan\u0026gt; \u0026lt;cryptogram\u0026gt;11223344556677889900112233445566778899\u0026lt;/cryptogram\u0026gt; \u0026lt;expiry\u0026gt;2028/01\u0026lt;/expiry\u0026gt; \u0026lt;/networkToken\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parámetros de la petición --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Franquicia de la tarjeta}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{País de procesamiento}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    Encuentra la descripción del objeto transaction.networkToken y sus parámetros en la sección Variables.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Debes utilizar un algoritmo para validar el CPF y debe tener el siguiente formato XXX.XXX.XXX-XX. Ejemplo: 811.807.405-64. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alfanumérico Max:14 Número de identificación del comprador (Para persona jurídica en Brasil). Debes utilizar un algoritmo para validar el CNPJ y debe tener el siguiente formato XXXXXXXXXXXXXX. Ejemplo: 32593371000110. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Teléfono asociado a la dirección del comprador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; submerchant   Información del subcomercio. Si no envías este parámetro, PayU configura tu comercio como subcomercio. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; id Alfanumérico Max:15 Identificador interno del subcomercio si utilizas uno para identificarlo. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; fullName Alfanumérico Max:150 Nombre del subcomercio. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address   Dirección del subcomercio. los campos state, country y postalCode son obligatorios cuando se envía este objeto. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street3 Alfanumérico Max:100 Línea de dirección 3. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; state Alfanumérico Max:40 Estado de la dirección. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. Sí   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; country Alfanumérico 2 País de la dirección. Sí   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. Sí   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; identification Alfanumérico Max:14 Número de identificación del comprador (Para persona jurídica en Brasil). Debes utilizar un algoritmo para validar el CNPJ y debe tener el siguiente formato XXXXXXXXXXXXXX. Ejemplo: 32593371000110. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; identificationType Alfanumérico Max:4 Tipo de identificación of the sub-merchant. The possible values are cnpj o cpf. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se haga con una tarjeta tokenizada utilizando la tokenización de PayU reemplazando la información de tu tarjeta de crédito; además, es obligatorio enviar el parámetro transaction.creditCard.expirationDate. Para más información, consulta API de Tokenización. No   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; payer   Información del pagador. No   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. No   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Para Brasil, utiliza el formato XXXXX-XXX or ´. Ejemplo: 09210-710 o 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Debes utilizar un algoritmo para validar el CPF y debe tener el siguiente formato XXX.XXX.XXX-XX. Ejemplo: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; cnpj Alfanumérico Max:14 Número de identificación del pagador (Para persona jurídica en Brasil). Debes utilizar un algoritmo para validar el CNPJ y debe tener el siguiente formato XXXXXXXXXXXXXX. Ejemplo: 32593371000110. No   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver tipos de documentos. No   transaction \u0026gt; networkToken   Información del token. Incluye este parámetro cuando la transacción se realice con una tarjeta tokenizada utilizando la tokenización de VTS o MDES. Para más información, consulta Pagar con tókenes de MDES o VTS. *Cuando envíes este objeto, todos sus parámetros son obligatorios. No   transaction \u0026gt; networkToken \u0026gt; tokenPan Alfanumérico Max:32 Número del token generado por MDES o VTS. Sí*   transaction \u0026gt; networkToken \u0026gt; cryptogram Alfanumérico Max:28 Llave única generada por MDES o VTS para descifrar la información de la tarjeta de crédito. Sí*   transaction \u0026gt; networkToken \u0026gt; expiry Alfanumérico 7 Fecha de expiración del token. Formato YYYY/MM. Sí*   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción requerido:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE para flujos de un paso. Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito valido. Ver los métodos de pago disponibles para Brasil. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna BR para Brasil. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No   transaction \u0026gt; termsAndConditionsAcepted Booleano  Términos y condiciones de PayU que deben aceptar los pagadores. *Este parámetros es obligatorio únicamente si tu cuenta PayU brasilera está asociada a una cuenta bancaria extranjera. No*   transaction \u0026gt; threeDomainSecure   Este objeto contiene la información de 3DS 2.0. No   transaction \u0026gt; threeDomainSecure \u0026gt; embedded Booleano  Asigna true si quieres utilizar un MPI embebido para el proceso de Autorización. Por defecto, este valor está asignado como false. No   transaction \u0026gt; threeDomainSecure \u0026gt; eci Numérico Max:2 Indicador de Comercio Electrónico.\nValor retornado por los servidores de directorio indicando el intento de autenticación.\nEste parámetro es obligatorio cuando transaction.threeDomainSecure.embedded es false y transaction.threeDomainSecure.xid tiene un valor configurado. No   transaction \u0026gt; threeDomainSecure \u0026gt; cavv Alfanumérico Max:28 Valor de verificación de autenticación del titular de la tarjeta (Cardholder Authentication Verification Value).\nCódigo del criptograma utilizado en la autenticación de la transacción codificado en Base 64.\nDependiendo de los códigos ECI específicos establecidos por la red, este valor puede ser opcional. No   transaction \u0026gt; threeDomainSecure \u0026gt; xid Alfanumérico Max:28 Identificador de la transacción enviado por el MPI codificado en Base 64.\nEste parámetro es obligatorio cuando transaction.threeDomainSecure.embedded is false y transaction.threeDomainSecure.eci tiene un valor configurado. No   transaction \u0026gt; threeDomainSecure \u0026gt; directoryServerTransactionId Alfanumérico Max:36 Identificador de la transacción generador por el servidor de directorio durante la autenticación. No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta. En JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Si tu comercio no tiene una entidad local, es obligatorio enviar tanto el CPF (parámetro transaction.[payer|buyer].dniNumber) o el CNPJ (parámetro transaction.[payer|buyer].cnpj) cuando utilices Autorización o Cobro. Si no envías información del subcomercio. PayU configura a tu comercio como subcomercio. Para pagos con tókenes de tarjetas de crédito generador por PayU, incluye los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el API de Tokenización. Para pagos con tókenes de tarjetas de crédito generador por MDES o VTS, incluye el objeto transaction.networkToken y sus parámetros. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode.\nEs obligatorio tener activa esta funcionalidad cuando utilices tókenes de tarjetas de crédito generados utilizando MDES o VTS. El extra parámetro CIELO_TID identifica la transacción, se necesita este parámetro para procesar anulaciones (voids). La variable transaction.threeDomainSecure no reemplaza la información de la tarjeta o ninguno de los campos obligatorios de la transacción. Este objeto es adicional y no es obligatorio. La variable transaction.threeDomainSecure corresponde a un escenario Pass Through donde el comercio realiza la autenticación por su cuenta.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;submerchant\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;ROBSON BATISTA DE OLIVEIRA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Rua Alsácia\u0026#34;, \u0026#34;street2\u0026#34;: null, \u0026#34;street3\u0026#34;: null, \u0026#34;city\u0026#34;: \u0026#34;São Paulo\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;04630010\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;identification\u0026#34;: \u0026#34;17126661851\u0026#34;, \u0026#34;identificationType\u0026#34;: \u0026#34;CNPJ\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5253203387684619\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;threeDomainSecure\u0026#34;: { \u0026#34;embedded\u0026#34;: false, \u0026#34;eci\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;cavv\u0026#34;: \u0026#34;AOvG5rV058/iAAWhssPUAAADFA==\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026#34;, \u0026#34;directoryServerTransactionId\u0026#34;: \u0026#34;00000-70000b-5cc9-0000-000000000cb\u0026#34; } }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400434770, \u0026#34;transactionId\u0026#34;: \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-CIELO-1623957118463\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623939118784, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;submerchant\u0026gt; \u0026lt;address\u0026gt; \u0026lt;city\u0026gt;São Paulo\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;04630010\u0026lt;/postalCode\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;street1\u0026gt;Rua Alsácia\u0026lt;/street1\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;fullName\u0026gt;ROBSON BATISTA DE OLIVEIRA\u0026lt;/fullName\u0026gt; \u0026lt;identification\u0026gt;17126661851\u0026lt;/identification\u0026gt; \u0026lt;identificationType\u0026gt;cnpj\u0026lt;/identificationType\u0026gt; \u0026lt;/submerchant\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;5253203387684619\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;threeDomainSecure\u0026gt; \u0026lt;embedded\u0026gt;false\u0026lt;/embedded\u0026gt; \u0026lt;eci\u0026gt;01\u0026lt;/eci\u0026gt; \u0026lt;cavv\u0026gt;AOvG5rV058/iAAWhssPUAAADFA==\u0026lt;/cavv\u0026gt; \u0026lt;xid\u0026gt;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026lt;/xid\u0026gt; \u0026lt;directoryServerTransactionId\u0026gt;00000-70000b-5cc9-0000-000000000cb\u0026lt;/directoryServerTransactionId\u0026gt; \u0026lt;/threeDomainSecure\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400434942\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;1af49d5d-464a-4efb-98db-f7875e3c580b\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-CIELO-1623962788239\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-17T10:46:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de siete (7) días. Despues de este tiempo, la transacción es cancelada. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada.  Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400434770\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400434770, \u0026#34;transactionId\u0026#34;: \u0026#34;2e753a5e-0eba-4a4c-9778-6880b5f16605\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;BR-456\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624029247864, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400436982\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;2cb57976-31d1-4563-b014-8047bd1b2b2a\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400436982\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;78d4c328-7157-4b50-9fa9-12e019e7df58\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;6\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;BR-456\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-18T10:19:01\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;submerchant\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;ROBSON BATISTA DE OLIVEIRA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Rua Alsácia\u0026#34;, \u0026#34;street2\u0026#34;: null, \u0026#34;street3\u0026#34;: null, \u0026#34;city\u0026#34;: \u0026#34;São Paulo\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;04630010\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;identification\u0026#34;: \u0026#34;17126661851\u0026#34;, \u0026#34;identificationType\u0026#34;: \u0026#34;CNPJ\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5178151142107990\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;threeDomainSecure\u0026#34;: { \u0026#34;embedded\u0026#34;: false, \u0026#34;eci\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;cavv\u0026#34;: \u0026#34;AOvG5rV058/iAAWhssPUAAADFA==\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026#34;, \u0026#34;directoryServerTransactionId\u0026#34;: \u0026#34;00000-70000b-5cc9-0000-000000000cb\u0026#34; } }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400437001, \u0026#34;transactionId\u0026#34;: \u0026#34;f0f8c441-43e8-490a-b4f2-c14d2c403175\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-CIELO-1624047897817\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624029898077, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;submerchant\u0026gt; \u0026lt;address\u0026gt; \u0026lt;city\u0026gt;São Paulo\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;04630010\u0026lt;/postalCode\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;street1\u0026gt;Rua Alsácia\u0026lt;/street1\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;fullName\u0026gt;ROBSON BATISTA DE OLIVEIRA\u0026lt;/fullName\u0026gt; \u0026lt;identification\u0026gt;17126661851\u0026lt;/identification\u0026gt; \u0026lt;identificationType\u0026gt;cnpj\u0026lt;/identificationType\u0026gt; \u0026lt;/submerchant\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;5178151142107990\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;threeDomainSecure\u0026gt; \u0026lt;embedded\u0026gt;false\u0026lt;/embedded\u0026gt; \u0026lt;eci\u0026gt;01\u0026lt;/eci\u0026gt; \u0026lt;cavv\u0026gt;AOvG5rV058/iAAWhssPUAAADFA==\u0026lt;/cavv\u0026gt; \u0026lt;xid\u0026gt;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026lt;/xid\u0026gt; \u0026lt;directoryServerTransactionId\u0026gt;00000-70000b-5cc9-0000-000000000cb\u0026lt;/directoryServerTransactionId\u0026gt; \u0026lt;/threeDomainSecure\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400437005\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;5d3cea31-c5e5-4105-9359-984edcaede37\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;6\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-CIELO-1624047952405\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-18T10:25:52\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un recibo de pago como el siguiente.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. Sí   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. Sí   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Debes utilizar un algoritmo para validar el CPF y debe tener el siguiente formato XXX.XXX.XXX-XX. Ejemplo: 811.807.405-64. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alfanumérico Max:14 Número de identificación del comprador (Para persona jurídica en Brasil). Debes utilizar un algoritmo para validar el CNPJ y debe tener el siguiente formato XXXXXXXXXXXXXX. Ejemplo: 32593371000110. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Teléfono asociado a la dirección del comprador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Esta información es opcional. No   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. No   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. Para Brasil, solo debes enviar dos caracteres, por ejemplo, asigna SP para São Paulo. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Para Brasil, utiliza el formato XXXXX-XXX or ´. Ejemplo: 09210-710 o 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Debes utilizar un algoritmo para validar el CPF y debe tener el siguiente formato XXX.XXX.XXX-XX. Ejemplo: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; cnpj Alfanumérico Max:14 Número de identificación del comprador (Para persona jurídica en Brasil). Debes utilizar un algoritmo para validar el CNPJ y debe tener el siguiente formato XXXXXXXXXXXXXX. Ejemplo: 32593371000110. No   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del comprador. Ver tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos en efectivo se realizan en oficinas físicas, La única transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Seleccione un método de pago en efectivo válido. Ver los métodos de pago disponibles para Brasil. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna BR para Brasil. Sí   transaction \u0026gt; expirationDate Alfanumérico 23 Fecha y hora máxima en la que el cliente puede realizar el pago. Formato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago es realizado por el usuario en una oficia física, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Si tu comercio no tiene una entidad local, es obligatorio enviar tanto el CPF (parámetro transaction.[payer|buyer].dniNumber) o el CNPJ (parameter transaction.[payer|buyer].cnpj). El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. El paso se ve reflejado al siguiente día hábil. El parámetro transactionResponse.extraParameters Tiene los siguientes parámetros relacionados con la transacción:  URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. TAquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_BOLETO_BANCARIO: recibo de pago en formato de impresión. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: Código de barras que le permite al pagador realizar el pago.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;BOLETO_BANCARIO\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-19T21:57:12.559\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 43626780, \u0026#34;transactionId\u0026#34;: \u0026#34;63091676-673d-46bf-a283-54e686ba0238\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=63091676-673d-46bf-a283-54e686ba0238\u0026amp;orderId=43626780\u0026amp;signature=647b061ddef2a25fd19cb362860e1d21ef59e16a\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1399507200000, \u0026#34;URL_BOLETO_BANCARIO\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=63091676-673d-46bf-a283-54e686ba0238\u0026amp;orderId=43626780\u0026amp;signature=647b061ddef2a25fd19cb362860e1d21ef59e16a\u0026#34;, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;34191.75389 38894.912930 81898.480009 9 60560000010000\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;BOLETO_BANCARIO\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-19T21:57:12.559\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;43625300\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;89ff03a7-9f86-4193-a25d-94b758c135bb\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=89ff03a7-9f86-4193-a25d-94b758c135bb\u0026amp;orderId=43625300\u0026amp;signature=e9e89a2cd8d9d2d79d637eac84debae9012584de\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2014-05-08T00:00:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_BOLETO_BANCARIO\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=89ff03a7-9f86-4193-a25d-94b758c135bb\u0026amp;orderId=43625300\u0026amp;signature=e9e89a2cd8d9d2d79d637eac84debae9012584de\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;34191.75389 38894.752930 81898.480009 3 60570000010000\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones con transferencia bancaria Este método te permite procesar los pagos realizados por tus clientes por medio de transferencia bancaria. Cuando utilices este método de pago, el pagador realiza una transferencia desde su cuenta bancaria emitida por ITAU.\nPara integrarte con estas transacciones, debes redirigir a tu cliente a la URL que se encuentra en la respuesta del método.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Debes utilizar un algoritmo para validar el CPF y debe tener el siguiente formato XXX.XXX.XXX-XX. Ejemplo: 811.807.405-64. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alfanumérico Max:14 Número de identificación del comprador (Para persona jurídica en Brasil). Debes utilizar un algoritmo para validar el CNPJ y debe tener el siguiente formato XXXXXXXXXXXXXX. Ejemplo: 32593371000110. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Teléfono asociado a la dirección del comprador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. No   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. No   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Para Brasil, utiliza el formato XXXXX-XXX o XXXXXXXX. Ejemplo: 09210-710 o 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. Formato YYYY-MM-DD. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Para Brasil, utiliza el formato ddd(2)+number(7-9). Ejemplo: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Debes utilizar un algoritmo para validar el CPF y debe tener el siguiente formato XXX.XXX.XXX-XX. Ejemplo: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del comprador. Ver tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos por transferencia bancaria se realizan en oficinas físicas, La única transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago por transferencia bancaria válido. Ver los métodos de pago disponibles para Brasil. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna BR para Brasil. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago es realizado por el usuario en una oficia física, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181964158Ya5b4bd5e7c6e4ebY4085cd2deb967f2\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181964158Ya5b4bd5e7c6e4ebY4085cd2deb967f2\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  Si tu comercio no tiene una entidad local, es obligatorio enviar tanto el CPF (parámetro transaction.[payer|buyer].dniNumber) o el CNPJ (parameter transaction.[payer|buyer].cnpj). El parámetro transaction.expirationDate is not obligatorio. Si no envías este parámetro, su valor por defecto es cuatro (4) días después de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. Cuando el pagador selecciona este método de pago, PayU crea una orden en estado in progress y una transacción en estado PENDING. En el cuerpo de la respuesta, puedes encontrar el recibo generador por PayU y su fecha de expiración.  Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;ITAU\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:30:21.231\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1181965590, \u0026#34;transactionId\u0026#34;: \u0026#34;bd273cec-d2f2-4f00-a125-c705c82b5605\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181965590Ybd273cecd2f24f0Y88337fa73366de5\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1626207065416 }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;ITAU_SHOPLINE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;ITAU\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:30:21.231\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1181965893\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;8397992b-3717-49c5-92ee-345a65ff13cf\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181965893Y8397992b371749cY7ad19f758dd04bc\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-07-13T15:14:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;ITAU_SHOPLINE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   paymentMethods   Lista de métodos de pago.   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;177\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;172\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;177\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;172\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PING. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción.   error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.   transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de Brasil, apunta tus peticiones a las siguientes URLs de …","ref":"/es/docs/integrations/api-integration/payments-api-brazil.html","title":"API de Pagos - Brasil"},{"body":"Para integrarte con el API de Pagos de Chile, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito o débito Enviar transacciones en efectivo Enviar transacciones con tarjeta débito o prepago utilizando WebPay Plus Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito o débito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito o débito. Para Chile, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nNota Las transacciones con tarjeta de crédito utilizando flujos de dos pasos está disponibles bajo demanda. Contacta a tu representante de ventas para más información.  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción. This amount cannot include decimals. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se haga con una tarjeta tokenizada reemplazando la información de la tarjeta de crédito. Para más información, consulta API de Tokenización No   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta débito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; debitCard   Información de la tarjeta débito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta debito. No   transaction \u0026gt; debitCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta débito. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad la tarjeta débito (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta débito. Formato YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta debito. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador que debe ser igual al enviado en el parámetro creditCard.name para pagos con tarjeta de crédito. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción requerido:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE para flujos de un paso. Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito o débito valido. Ver los métodos de pago disponibles para Chile. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna CL para Chile. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta. En JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Para pagos con tókenes de tarjetas de crédito, incluye los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito . Para más información, consulta el API de Tokenización. No están soportadas las tarjetas débito internacionales. No se permiten transacciones en PESOS CHILENOS con decimales. El flujo de dos pasos no está soportado para tarjetas débito, prepago o internacionales. Las transacciones utilizando el flujo de dos pasos están soportadas para pagos en una sola cuota. Si envías una transacción de dos pasos con dos o más cuotas, esta se rechaza automáticamente por el adquirente.\nEl flujo de dos pasos está disponible bajo demanda, contacta a tu representante de ventas para más información. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-25T16:33:48.512Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;77d72fb91eb43f9b15fb300d5f173da3\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400455722, \u0026#34;transactionId\u0026#34;: \u0026#34;49cb24d9-eda6-43de-aad9-a17ffa9e5fb8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;195569\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;49cb24d9-eda6-43de-aad9-a17ffa9e5fb8\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;195569\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624616739664, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab3984007f3010d2adb6c02d104f85b8268ccf4b95da4b56f3abdb339e1c52\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-25T16:33:48.512ZZ\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;77d72fb91eb43f9b15fb300d5f173da3\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400455931\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;56f77e02-447a-4c98-a04b-9a8f3f92f3e7\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;363838\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;56f77e02-447a-4c98-a04b-9a8f3f92f3e7\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;363838\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-25T06:33:55\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01ab79a6030063a6b4039a64a8cf7de471d7ad02390c118fbd7d66cfd1af9864\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de 7 días. Despues de este tiempo, la transacción es anulada automáticamente. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada. Solo puedes realizar una captura parcial sobre un monto autorizado. Para esto, necesitas enviar en la petición el parámetro transaction.order.additionalValues.TX_VALUE con su valor (Como se envió durante la Autorización) y asignar PARTIAL_CAPTURE en el parámetro transaction.type.\nEl monto mínimo es 50 CLP. No está permitido capturar un monto mayor al previamente autorizado. Solo se permite capturar transacciones en una cuota.  Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400421560\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400455931, \u0026#34;transactionId\u0026#34;: \u0026#34;da91c0ec-632b-44e3-883d-b85821390519\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;da91c0ec-632b-44e3-883d-b85821390519\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;169018\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624629865424, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab5a10f3c1bdd401ac86d7c21e4347a7b848171fad7830157abcaac0373c7e\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400456250\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;ead41073-a03a-45aa-9e83-23d4b03197f0\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400456250\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;9c4d12c4-277d-4936-9d15-735e21dd5a19\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;9c4d12c4-277d-4936-9d15-735e21dd5a19\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;698999\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-25T09:08:16\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01ab6ddef1f9350f7b970d33b9766db9b0d52c6b9cb353618ddc8cd58d076b59\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400431556, \u0026#34;transactionId\u0026#34;: \u0026#34;14aed0cc-95cb-4b04-b4dd-0c7f8c3296e8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;456505\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;14aed0cc-95cb-4b04-b4dd-0c7f8c3296e8\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;456505\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623834912248, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab306b62cd0ce17d462501b121ed6cac3794375054b80a51c01bad4ec51550\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400431549\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;937ed9fe-72d3-44e2-b1b8-e38e9f8e08a4\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;185495\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;937ed9fe-72d3-44e2-b1b8-e38e9f8e08a4\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;185495\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T04:13:51\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abc29e7b32bbf011cdd2a1e9961c5d6bd068220f4b506b06c66e15de1acfd2\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente selecciona efectivo y genera el código de pago.\nNota Klap se conocía anteriormente como MULTICAJA. Aún puede que veas elementos o configuraciones relacionadas con MULTICAJA.  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos en efectivo se realizan en oficinas físicas, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Seleccione un método de pago en efectivo válido. Ver los métodos de pago disponibles para Chile. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna CL para Chile. Sí   transaction \u0026gt; expirationDate Alfanumérico 23 Fecha y hora máxima en la que el cliente puede realizar el pago. Formato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. Para pagos en efectivo, necesitas incluir la URL de respuesta para redirigir a tus clientes de vuelta a tu página web cuando completen su pago.\nEn JSON, El parámetro extraParameters se configura así: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;NETWORK_CALLBACK_URL\u0026quot;: \u0026quot;http://www.test.com/response\u0026quot;\n}\nEn XML, El parámetro extraParameters se configura así: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;NETWORK_CALLBACK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza en una oficina física, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Para pagos en efectivo, extraParameters tiene un solo elemento con la URL a donde debes redirigir a tu cliente.\nEn JSON, el parámetro extraParameters es: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://www.multicaja.cl/bdp/order.xhtml?id=123456789012345\u0026quot;\n}\nEn XML, el parámetro extraParameters es: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://www.multicaja.cl/bdp/order.xhtml?id=123456789012345\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete días luego de la fecha actual a las 12:00 pm.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. Debes configurar una URL de respuesta en el parámetro NETWORK_CALLBACK_URL dentro de transaction.extraParameters; esta URL regresa al usuario a tu página luego de completar el proceso de pago en línea. Debes redirigir al pagador a la página web de Klap webpage (antes Multicaja) para permitirle hacer el pago en efectivo. Esta URL se encuentra en el parámetro BANK_URL en la respuesta.  Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;NETWORK_CALLBACK_URL\u0026#34;: \u0026#34;http://domain.com/backup_cart/response.php\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MULTICAJA\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-18T20:00:03.105\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857794995, \u0026#34;transactionId\u0026#34;: \u0026#34;f468aa69-82e0-410e-9cc2-3cabba0f970d\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;462623325642199\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://apidev.mcdesaqa.cl/bdp/order.xhtml?id=462623325642199\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;NETWORK_CALLBACK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://domain.com/backup_cart/response.php\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MULTICAJA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-18T20:00:03.105\u0026lt;/expirationDate\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400432986\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;71a72319-f143-4359-8cb9-bc44a21d2b25\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;a0d9d7d6-000a-4777-af78-e33917a30fd8\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T12:22:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T17:42:53\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abbca6da54f4e4ef9eb37fb9cacf72fdcc52797f6a9ca20377bc59eb0d2706\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones con tarjeta débito o prepago utilizando WebPay Plus Este método te permite procesar los pagos con tarjetas débito o prepago de tus clientes. Para integrarte con estas transacciones, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico de comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Región de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos se realizan en la página de WebPay plus, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Seleccione un método de pago válido para Tarjetas Débito y prepago. Ver los métodos de pago disponibles para Chile. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna CL para Chile. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. Para los pagos a través de WebPay plus, esta es la página de respuesta de tu comercio.\nEn JSON, El parámetro extraParameters se configura así: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;RESPONSE_URL\u0026quot;: \u0026quot;http://www.test.com/response\u0026quot;\n}\nEn XML, El parámetro extraParameters se configura así: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt;\nhttp://www.test.com/response\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;URL_PAYMENT_REDIRECT\u0026quot;: \u0026quot;xxxx\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;xxxx\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Si no envías el parámetro RESPONSE_URL en transaction.extraParameters, el API toma el valor de la variable URL de respuesta en tu Módulo PayU (Configuración \u0026gt; Configuración técnica). Cuando procesas pagos a través de WebPay plus, debes redirigir a tu cliente a la URL que encuentras en el extra parámetro URL_PAYMENT_REDIRECT concatenado con el extra parámetro TRANSBANK_DIRECT_TOKEN así: URL_PAYMENT_REDIRECT?token_ws=TRANSBANK_DIRECT_TOKEN. Si la solicitud de pago es exitosa, la transacción queda con estado PENDING y responseCode PENDING_PAYMENT_IN_ENTITY; esto es debido a que el pagador es redirigido al banco seleccionado para completar el pago. La página de respuesta debe tener las siguientes variables:     Variable Descripción     transactionState Estado de la transacción.   reference_pol Código de la referencia para identificar la transacción en PayU.   TX_VALUE Monto de la transacción.   authorizationCode Código de autorización de la transacción.   processingDate Fecha de la transacción.   cc_number Número visible de la tarjeta utilizada en la transacción.    Las variables anteriores se envía a través de GET.\nLlamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;RESPONSE_URL\u0026#34;: \u0026#34;http://www.test.com/response\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;TRANSBANK_DEBIT\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400432466, \u0026#34;transactionId\u0026#34;: \u0026#34;e2609a58-97d6-4a65-8638-1b03da03cc7a\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;5f0cac61-c023-4fa3-bf27-ff888fa36c3c\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623856942412, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;EXPIRATION_DATE\u0026#34;: 1623875847781, \u0026#34;URL_PAYMENT_REDIRECT\u0026#34;: \u0026#34;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab155164939156988ee462d09ed5613b7efd297fe97b099c684ec8599c5cc5\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;TRANSBANK_DEBIT\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400432986\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;71a72319-f143-4359-8cb9-bc44a21d2b25\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;a0d9d7d6-000a-4777-af78-e33917a30fd8\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T12:22:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T17:42:53\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abbca6da54f4e4ef9eb37fb9cacf72fdcc52797f6a9ca20377bc59eb0d2706\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   paymentMethods   Lista de métodos de pago.   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;716\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;712\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;716\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;712\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DINERS\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta #variables-for-request-and-response-4}  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PING. Sí   test (JSON)isTest (XML) Booleano  Asigna true Si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción Obligatorio     code Alfanumérico  Código de respuesta de la transacción.    error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.    transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.      Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de Chile, apunta tus peticiones a las siguientes URLs de acuerdo …","ref":"/es/docs/integrations/api-integration/payments-api-chile.html","title":"API de Pagos - Chile"},{"body":"Para integrarte con el API de Pagos de Colombia, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo o referencia bancaria Enviar transacciones con transferencia bancaria (PSE) Lista de Bancos - PSE Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito o débito. Para Colombia, puedes realizar los flujos de un paso (Cobro). Para más información, consulta los flujos de pago.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayUID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor no puede tener decimales. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del IVA (Impuesto al Valor Agregado). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del IVA.\nSi no se envía este parámetro, PayU aplica el impuesto actual (19%).\nSi la cantidad está exenta de IVA, envía 0.\nEste valor puede tener dos dígitos decimales No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el IVA.\nSi la cantidad está exenta de IVA, envía 0.\nEste valor puede tener dos dígitos decimales No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el valor base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se hace cun una tarjeta de crédito tokenizada; además, es obligatorio enviar el parámetro transaction.creditCard.expirationDate.\nPara más información, consulte el API de Tokenización. No   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador que debe ser igual al enviado en el parámetro transaction.creditCard.name. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción. Para Colombia, asigna AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito valido. Ver los métodos de pago disponibles para Colombia. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna CO para Colombia. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, el parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, el parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No   transaction \u0026gt; threeDomainSecure   Este objeto contiene la información de 3DS 2.0. No   transaction \u0026gt; threeDomainSecure \u0026gt; embedded Booleano  Asigna true si quieres utilizar un MPI embebido para el proceso de Autorización. Por defecto, este valor está asignado como false. No   transaction \u0026gt; threeDomainSecure \u0026gt; eci Numérico Max:2 Indicador de Comercio Electrónico.\nValor retornado por los servidores de directorio indicando el intento de autenticación.\nEste parámetro es obligatorio cuando transaction.threeDomainSecure.embedded es false y transaction.threeDomainSecure.xid tiene un valor configurado. No   transaction \u0026gt; threeDomainSecure \u0026gt; cavv Alfanumérico Max:28 Valor de verificación de autenticación del titular de la tarjeta (Cardholder Authentication Verification Value).\nCódigo del criptograma utilizado en la autenticación de la transacción codificado en Base 64.\nDependiendo de los códigos ECI específicos establecidos por la red, este valor puede ser opcional. No   transaction \u0026gt; threeDomainSecure \u0026gt; xid Alfanumérico Max:28 Identificador de la transacción enviado por el MPI codificado en Base 64.\nEste parámetro es obligatorio cuando transaction.threeDomainSecure.embedded is false y transaction.threeDomainSecure.eci tiene un valor configurado. No   transaction \u0026gt; threeDomainSecure \u0026gt; directoryServerTransactionId Alfanumérico Max:36 Identificador de la transacción generador por el servidor de directorio durante la autenticación. No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta. En JSON, el parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, el parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  Para pagos con tókenes de tarjeta, incluya los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el API de Tokenización. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode. La variable transaction.threeDomainSecure no reemplaza la información de la tarjeta o ninguno de los campos obligatorios de la transacción. Este objeto es adicional y no es obligatorio. La variable transaction.threeDomainSecure corresponde a un escenario Pass Through donde el comercio realiza la autenticación por su cuenta. Para la tarjeta Crédito Fácil Codensa, el número de cuotas soportadas es 1 a 12, 18, 24, 36 y 48. Para la tarjeta Crédito Fácil Codensa, el pagador puede escoger uno de los siguientes tipos de documento en la variable transaction.payer.dniType:     ISO Descripción     CC Cédula de ciudadanía.   CE Cédula de extranjería.   NIT Número de Identificación Tributaria (Empresas).   TI Tarjeta de identidad.   PP Pasaporte.   IDC Identificador único de cliente, para el caso de ID’s únicos de clientes/usuarios de servicios públicos.   CEL En caso de identificarse a través de la línea del móvil.   RC Registro civil de nacimiento.   DE Documento de identificación extranjero.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449660, \u0026#34;transactionId\u0026#34;: \u0026#34;aa2f50b2-62a8-42de-b3be-c6fe08ec712f\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;81\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;CRED - 666039677\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;123238\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved by the merchant\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624461913704, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;CREDIBANCO\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449666\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;c29d0543-810d-48c4-bd3e-163e935c2173\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;79\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;CRED - 666116683\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;787517\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved administrative transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T10:26:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;CREDIBANCO\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones en efectivo o referencia bancaria Este método te permite procesar los pagos en efectivo o por referencia bancaria de tus clientes. Para integrarte con estas transacciones, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un recibo de pago como los siguientes.\nPagos en efectivo Pagos con Referencia bancaria Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayUID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del IVA (Impuesto al Valor Agregado). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del IVA.\nSi no se envía este parámetro, PayU aplica el impuesto actual (19%).\nSi la cantidad está exenta de IVA, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el IVA.\nSi la cantidad está exenta de IVA, envía 0.\nEste valor puede tener dos dígitos decimales No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el valor base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos en efectivo se realizan en oficinas físicas, la única transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Seleccione un método de pago en efectivo o de referencia bancaria válido. Ver los métodos de pago disponibles para Colombia. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna CO para Colombia. Sí   transaction \u0026gt; expirationDate Alfanumérico 23 Fecha y hora máxima en la que el cliente puede realizar el pago. Formato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta.\nEn JSON, el parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nEn XML, el parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. Para BALOTO y EFECTY, la confirmación del pago tarda 15 minutos. Para BANK_REFERENCED y OTHERS_CASH (Su Red), la confirmación es en línea. Los valores mínimos de máximos para pagos en BALOTO, EFECTY y OTHERS_CASH (Su Red) son:  BALOTO \u0026gt; Min: $3.000 COP - Max: $1.000.000 COP EFECTY \u0026gt; Min: $20.000 COP - Max: $6.000.000 COP OTHERS_CASH (Su Red) \u0026gt; Min: $1.000 COP - Max: $4.000.000 COP   El parámetro transactionResponse.extraParameters tiene los siguientes parámetros relacionados con la transacción:  EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. REFERENCE: referencia de pago interna generada por PayU. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF. BANCO_BOGOTA_SERVICE_CODE: código de pago para Banco de Bogotá. Disponible cuando utilices BANK_REFERENCED. BANK_REFERENCED_NAME: nombre de la referencia para Bancolombia. Disponible cuando utilices BANK_REFERENCED. BANCOLOMBIA_SERVICE_CODE: código de pago para Bancolombia. Disponible cuando utilices BANK_REFERENCED.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;EFECTY\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-24T20:58:35.804\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449740, \u0026#34;transactionId\u0026#34;: \u0026#34;f3531b6a-3e30-4a8b-8a69-d4a5bd2a3377\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;f3531b6a-3e30-4a8b-8a69-d4a5bd2a3377\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624463917065, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;EXPIRATION_DATE\u0026#34;: 1624568315804, \u0026#34;REFERENCE\u0026#34;: 1400449740, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400449740Yf3531b6a3e304a8Y30f3f7b4598eb19\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/v2?vid=1400449740Yf3531b6a3e304a8Y30f3f7b4598eb19\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;EFECTY\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;EFECTY\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-24T20:58:35.804\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449797\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;0b41f4d0-4486-4acf-ab5e-d757e35d994d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;0b41f4d0-4486-4acf-ab5e-d757e35d994d\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T11:20:03\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-30T23:59:59\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;1400449797\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400449797Y0b41f4d044864acY3e5f14fc8ef00e8\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/v2?vid=1400449797Y0b41f4d044864acY3e5f14fc8ef00e8\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;EFECTY\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones con transferencia bancaria (PSE) Este método te permite procesar los pagos realizados por tus clientes por medio de transferencia bancaria. En Colombia, las transferencias bancarias se hacen a través de PSE, para integrarte con este método de pago, necesitas crear un formulario de pago siguiendo estos pasos:\n Incluye un botón PSE button haciendo evidente que tu cliente va a utilizar Proveedor de Servicios Electrónicos PSE.   Puedes utilizar los siguientes nombres:  Débito desde cuenta corriente/ahorros Debito bancario PSE PSE   No utilices ninguno de los siguientes nombres  Transferencia bancaria Débito de cuenta Tarjeta débito     Consulta la lista de bancos disponibles para mostrarla al pagador. Para consultar la lista de bancos, consulta este método.\nDebes actualizar la lista de bancos en tu sistema por lo menos una vez al día.\n  Muestra la lista de bancos tal y como se muestra a continuación:\n  Cuando el pagador seleccione un banco, debes enviar al parámetro pseCode seleccionado en el extra parámetro FINANCIAL_INSTITUTION_CODE de la petición.\nMuestra una lista para que el pagador escoja si es una persona Natural (N) o Jurídica (J). Dependiendo de lo que escoja, debes enviar el valor en el extra parámetro USER_TYPE de la petición. La lista debe verse así:  Muestra una lista para que el pagador escoja su tipo de identificación. Debes enviar el código ISO del valor seleccionado en el extra parámetro PSE_REFERENCE2 de la petición. La lista debe verse así:  La lista de documentos disponibles es:\n   ISO Descripción     CC Cédula de ciudadanía.   CE Cédula de extranjería.   NIT Número de Identificación Tributaria (Empresas).   TI Tarjeta de identidad.   PP Pasaporte.   IDC Identificador único de cliente, para el caso de ID’s únicos de clientes/usuarios de servicios públicos.   CEL En caso de identificarse a través de la línea del móvil.   RC Registro civil de nacimiento.   DE Documento de identificación extranjero.    Debes enviar el número de identificación del pagador en el extra parámetro PSE_REFERENCE3 de la petición.  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayUID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Departamento de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como estos pagos se realizan en la página web de PSE, la única transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago por transferencia bancaria válido. Ver los métodos de pago disponibles para Colombia. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna CO para Colombia. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. Para pagos por transferencia bancaria, esta es la página de respuesta de tu comercio.\nEn JSON, el parámetro extraParameters se asigna como: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;PSE_REFERENCE3\u0026quot;: \u0026quot;123456789\u0026quot;\n}\nEn XML, el parámetro extraParameters se asigna como: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;PSE_REFERENCE3\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;123456789\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados con la respuesta.\nEn JSON, el parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;xxxx\u0026quot;\n}\nEn XML, el parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;xxxx\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Para probar las transferencias bancarias PSE en el ambiente de Sandbox de PayU, consulta la Guía de pruebas de PSE (PDF). Todos los valores de pago deben estar formateados en miles sin excepción (p.ej., 1,200.00 o 1,200). Si la solicitud de pago es exitosa, el estado de la transacción es pendiente (PENDING) y el responseCode es PENDING_TRANSACTION_CONFIRMATION; esto es debido a que el pagador es redirigido al naco seleccionado para completar el pago; debes redirigir al pagador a la URL retornada en el extra parámetro BANK_URL. La URL retornada en el extra parámetro BANK_URL se configura en el Modulo PayU y debe mostrar la siguiente información:\nLos parámetros que empiezan con el símbolo $ se envían vía GET. Una vez el cliente hace clic en el botón de pago, debe desactivarse para evitar enviar una nueva solicitud sobre el mismo pago. No muestres la página del banco en contenedores (frames, panel, iframes, etc). El proceso de pago debe ser fluido. Además, evita abrir la página del banco en una nueva pestaña o en una nueva ventana del navegador. Si necesitas utilizar una nueva pestaña o ventana, bloquea la página de origen para evitar enviar una nueva solicitud sobre el mismo pago. Debes agregar a la página de respuesta las opciones para reintentar el pago, finalizar la transacción e imprimir el recibo. Los estados mostrados en la página de respuesta pueden ser los siguientes:     polTransactionState polResponseCode Estado     4 1 Transacción aprobada   6 5 Transacción fallida   6 4 Transacción rechazada   12 o 14 9994 o 25 Transacción pendiente, por favor revisar si el débito fue realizado en el banco.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;RESPONSE_URL\u0026#34;: \u0026#34;http://www.payu.com/response\u0026#34;, \u0026#34;PSE_REFERENCE1\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;FINANCIAL_INSTITUTION_CODE\u0026#34;: \u0026#34;1022\u0026#34;, \u0026#34;USER_TYPE\u0026#34;: \u0026#34;N\u0026#34;, \u0026#34;PSE_REFERENCE2\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;PSE_REFERENCE3\u0026#34;: \u0026#34;123456789\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449959, \u0026#34;transactionId\u0026#34;: \u0026#34;4d49e544-e23f-474e-92b1-59357e0e85e8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;2204682\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624471332753, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;TRANSACTION_CYCLE\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://sandbox.api.payulatam.com/payments-api/pse-caller?enc=aHR0cHM6Ly9yZWdpc3Ryby5kZXNhcnJvbGxvLnBzZS5jb20uY28vUFNFVXNlclJlZ2lzdGVyL1N0YXJ0VHJhbnNhY3Rpb24uYXNweD9lbmM9dG5QY0pITUtsU25tUnBITThmQWJ1NHVWTmt6YW92Q0tWR2g0b0IxbEpkOXNEeGlSU2E5cXl1Uk5TUW5mbkxSdiMjcGF5ZXJfdGVzdEB0ZXN0LmNvbSMjMTIzNDU2Nzg5IyNDQw==\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://www.payu.com/response\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE1\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;127.0.0.1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;FINANCIAL_INSTITUTION_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1022\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;USER_TYPE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;N\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE2\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CC\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE3\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;123456789\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PSE\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449974\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;6c99b11b-fe6f-4270-8c9a-dfc35b7c7e34\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;2204695\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T13:12:14\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSACTION_CYCLE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.api.payulatam.com/payments-api/pse-caller?enc=aHR0cHM6Ly9yZWdpc3Ryby5kZXNhcnJvbGxvLnBzZS5jb20uY28vUFNFVXNlclJlZ2lzdGVyL1N0YXJ0VHJhbnNhY3Rpb24uYXNweD9lbmM9dG5QY0pITUtsU25tUnBITThmQWJ1NHVWTmt6YW92Q0tWR2g0b0IxbEpkJTJmSGhQT0oyU2t4UnRmOEdLTk5tcGNYIyNwYXllcl90ZXN0QHRlc3QuY29tIyMxMjM0NTY3ODkjI0ND\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;PSE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Lista de Bancos - PSE Este método retorna la lista de bancos disponibles para realizar pagos utilizando PSE.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_BANKS_LIST. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   bankListInformation   Este objeto tiene la información de la consulta. Sí   bankListInformation \u0026gt; paymentMethod Alfanumérico  Asigna PSE. Sí   bankListInformation \u0026gt; paymentCountry Alfanumérico  Asigna CO. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   banks   Lista de bancos disponibles en PSE.   banks \u0026gt; id Numérico  Identificador interno del banco.   banks \u0026gt; description Alfanumérico  Nombre del banco para ser mostrado en la lista.   banks \u0026gt; pseCode Alfanumérico  Código para enviar en el extra parámetro FINANCIAL_INSTITUTION_CODE de la solicitud de pago.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_BANKS_LIST\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;test\u0026#34;: false, \u0026#34;bankListInformation\u0026#34;: { \u0026#34;paymentMethod\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;banks\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;34e6e912-a395-4d31-9599-9baa176c1a61\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A continuación seleccione su banco\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;0\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;033aec11-e068-4252-8043-237144be9233\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BAN.CO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1552\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a720cb4c-6549-4932-83be-6d72b3eb0016\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCAMIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1059\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d9280852-47a5-4e99-94ac-3d7648ba79a3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1040\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;ff216e8a-28ba-4bf6-9935-b94dfdfd96a0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1081\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5073154e-efd4-4870-9315-abb926e87519\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO QA DEFECTOS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1080\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;6e61a91d-58bf-46ec-aa09-1f44974dda7e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CAJA SOCIAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10322\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;e062711e-6bbd-4a13-819a-d60084f9c6fa\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CAJA SOCIAL DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1032\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a9b5cc17-b0ae-4708-9835-586a0bef95df\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COMERCIAL AVVILLAS S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1052\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c5c97dfe-6101-453f-bcd4-691f4b329a3c\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COOMEVA S.A. - BANCOOMEVA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1061\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7a2e8d04-e8c8-404b-8e49-d5d37c107a12\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COOPERATIVO COOPCENTRAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1066\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;197fe0af-f658-4fe0-ad1b-952e174de549\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CREDIFINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1058\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;b1de44f1-cede-4aca-9d3f-3313d5cc0c63\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DAVIVIENDA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1051\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7a10219e-04a7-4c31-b747-54ded27c7f07\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DAVIVIENDA Desarrollo\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10512\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;ed06f40e-a1b9-4e48-8851-bffb4cda0480\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE BOGOTA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1039\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4592a13b-6334-4fba-8402-9d006b599fa8\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE BOGOTA DESARROLLO 2013\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1001\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;55f59084-cd3b-47d2-a420-6442cdb9e4b1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE OCCIDENTE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1023\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8e134fca-4fde-44e6-b012-55e8f2d338ca\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO FALABELLA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1062\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8eb03abf-5608-419b-8d2c-9d90b8ab6b88\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO GNB COLOMBIA (ANTES HSBC)\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1010\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;283e0068-749f-43f1-a2e5-340910f41af3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO GNB SUDAMERIS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1012\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8b0bf5e7-394d-4f7e-a467-e4d21d04c9fb\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO PICHINCHA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1060\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;beeb494a-4ce5-41b4-b497-0756f0b6a6d9\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO POPULAR\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1002\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a5a4b740-1644-4627-ae2a-41b13ffc7c5e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO PRODUCTOS POR SEPARADO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1203\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;47e747ef-c817-4be6-9eff-b6b16f50d001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco PSE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1101\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;589939d7-06d1-4933-a101-8bb29b801d76\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO SANTANDER COLOMBIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1065\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;fcdaa98e-99ce-4e76-a504-1e053a05e773\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO SERFINANZA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1069\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;201608c6-81de-436f-967a-2ec7c212c100\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO TEQUENDAMA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1035\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a8f33ba3-0053-464a-afbe-9add7c63fbc3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco union Colombia Credito\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1004\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5dfa1b2c-64bd-4e8c-9fad-585337cfd4ff\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO UNION COLOMBIANO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1022\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;56e306ef-6011-4f41-9640-b98449d6a6be\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO UNION COLOMBIANO FD2\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1005\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;bc883c0d-3610-4a88-96ca-2e2baa1dd2e5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco Web Service ACH\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1055\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4e97e580-fc92-47ea-af4f-7b3b3ddffff8\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco Web Service ACH WSE 3.0\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1055\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;931f6bfb-283e-4721-bb86-4a7484bfd28e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA DATAPOWER\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10072\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1285de9c-8d47-49f7-b00a-e87882e2a3f9\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10071\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;451f0e5f-5db4-4f55-a1fc-b38e06526e04\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA QA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1007\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;448e00ec-c479-497d-9a35-0dfbbf462f72\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANKA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1077\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5f3a7adb-b283-4ca3-bee9-741f1306a03d\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BBVA COLOMBIA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1013\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;cd4286fa-850a-4b34-96d1-f71d6a79f44a\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BBVA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1513\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;10e9b7b6-7a5f-4d5b-8d7f-4b2020f43f93\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CITIBANK COLOMBIA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1009\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;77f0988f-cf45-4931-bbcd-984e07e0fc51\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COLTEFINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1370\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;48c81f6a-e0f1-4c1d-ab9b-9915726e3596\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CONFIAR COOPERATIVA FINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1292\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8694df26-5ccd-45c0-b5b7-2b995c47f81a\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COOPERATIVA FINANCIERA COTRAFA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1289\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1c222feb-2b58-408c-a495-ade06b6825c0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COOPERATIVA FINANCIERA DE ANTIOQUIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1283\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;70a18a09-38f2-4f62-aba6-9ad28c30c966\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CREDIFIANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1558\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;3f8b3126-8aa3-4438-8a6c-1d544184f2d7\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DALE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1097\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a953078b-5e22-42ea-9301-954558e8f463\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DAVIPLATA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1551\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;2ad780ba-a1e8-4cb9-9150-670429aae092\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;GIROS Y FINANZAS COMPAÑIA DE FINANCIAMIENTO S.A\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1303\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c0bfb716-a098-40f6-84b5-1972a4846506\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;IRIS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1637\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7e1efd88-4f88-4e21-a972-28b526b27da5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ITAU\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1006\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;26c9a2df-6b4f-4309-9137-3692d9bb9f82\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MOVII S.A\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1801\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d9b48a70-6068-4116-a345-154381e5d953\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;NEQUI CERTIFICACION\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1508\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;60199dc5-7d38-49c6-92a5-b839dc0087d2\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;prueba restriccion\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;9988\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;be467299-d90a-407e-86d3-01e30ade1e06\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Prueba Steve\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;121212\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;201acc05-4c4f-49dc-9be6-3261a6ce4a3c\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;RAPPIPAY\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1151\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7602e001-6199-48bc-9ee3-466f8eb2e422\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SCOTIABANK COLPATRIA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1019\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;9bb638a0-4c3f-41d2-8811-f8cdd29b0db2\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SCOTIABANK COLPATRIA UAT\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1078\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;086547b5-313b-42c7-acef-93d0f76b1dd5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SEIVY – GM FINANCIAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1305\u0026#34; } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_BANKS_LIST\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;bankListInformation\u0026gt; \u0026lt;paymentMethod\u0026gt;PSE\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;/bankListInformation\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;bankListResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;banks\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;34e6e912-a395-4d31-9599-9baa176c1a61\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;A continuación seleccione su banco\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;0\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;033aec11-e068-4252-8043-237144be9233\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BAN.CO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1552\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a720cb4c-6549-4932-83be-6d72b3eb0016\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCAMIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1059\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;d9280852-47a5-4e99-94ac-3d7648ba79a3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1040\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;ff216e8a-28ba-4bf6-9935-b94dfdfd96a0\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1081\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5073154e-efd4-4870-9315-abb926e87519\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO QA DEFECTOS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1080\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;6e61a91d-58bf-46ec-aa09-1f44974dda7e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CAJA SOCIAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10322\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;e062711e-6bbd-4a13-819a-d60084f9c6fa\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CAJA SOCIAL DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1032\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a9b5cc17-b0ae-4708-9835-586a0bef95df\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COMERCIAL AVVILLAS S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1052\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;c5c97dfe-6101-453f-bcd4-691f4b329a3c\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COOMEVA S.A. - BANCOOMEVA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1061\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7a2e8d04-e8c8-404b-8e49-d5d37c107a12\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COOPERATIVO COOPCENTRAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1066\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;197fe0af-f658-4fe0-ad1b-952e174de549\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CREDIFINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1058\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;b1de44f1-cede-4aca-9d3f-3313d5cc0c63\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DAVIVIENDA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1051\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7a10219e-04a7-4c31-b747-54ded27c7f07\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DAVIVIENDA Desarrollo\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10512\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;ed06f40e-a1b9-4e48-8851-bffb4cda0480\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE BOGOTA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1039\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;4592a13b-6334-4fba-8402-9d006b599fa8\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE BOGOTA DESARROLLO 2013\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1001\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;55f59084-cd3b-47d2-a420-6442cdb9e4b1\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE OCCIDENTE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1023\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8e134fca-4fde-44e6-b012-55e8f2d338ca\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO FALABELLA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1062\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8eb03abf-5608-419b-8d2c-9d90b8ab6b88\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO GNB COLOMBIA (ANTES HSBC)\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1010\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;283e0068-749f-43f1-a2e5-340910f41af3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO GNB SUDAMERIS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1012\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8b0bf5e7-394d-4f7e-a467-e4d21d04c9fb\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO PICHINCHA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1060\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;beeb494a-4ce5-41b4-b497-0756f0b6a6d9\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO POPULAR\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1002\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a5a4b740-1644-4627-ae2a-41b13ffc7c5e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO PRODUCTOS POR SEPARADO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1203\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;47e747ef-c817-4be6-9eff-b6b16f50d001\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco PSE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1101\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;589939d7-06d1-4933-a101-8bb29b801d76\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO SANTANDER COLOMBIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1065\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;fcdaa98e-99ce-4e76-a504-1e053a05e773\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO SERFINANZA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1069\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;201608c6-81de-436f-967a-2ec7c212c100\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO TEQUENDAMA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1035\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a8f33ba3-0053-464a-afbe-9add7c63fbc3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco union Colombia Credito\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1004\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5dfa1b2c-64bd-4e8c-9fad-585337cfd4ff\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO UNION COLOMBIANO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1022\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;56e306ef-6011-4f41-9640-b98449d6a6be\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO UNION COLOMBIANO FD2\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1005\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;bc883c0d-3610-4a88-96ca-2e2baa1dd2e5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco Web Service ACH\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1055\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;4e97e580-fc92-47ea-af4f-7b3b3ddffff8\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco Web Service ACH WSE 3.0\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1055\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;931f6bfb-283e-4721-bb86-4a7484bfd28e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA DATAPOWER\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10072\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;1285de9c-8d47-49f7-b00a-e87882e2a3f9\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10071\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;451f0e5f-5db4-4f55-a1fc-b38e06526e04\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA QA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1007\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;448e00ec-c479-497d-9a35-0dfbbf462f72\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANKA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1077\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5f3a7adb-b283-4ca3-bee9-741f1306a03d\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BBVA COLOMBIA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1013\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;cd4286fa-850a-4b34-96d1-f71d6a79f44a\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BBVA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1513\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;10e9b7b6-7a5f-4d5b-8d7f-4b2020f43f93\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CITIBANK COLOMBIA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1009\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;77f0988f-cf45-4931-bbcd-984e07e0fc51\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COLTEFINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1370\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;48c81f6a-e0f1-4c1d-ab9b-9915726e3596\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CONFIAR COOPERATIVA FINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1292\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8694df26-5ccd-45c0-b5b7-2b995c47f81a\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COOPERATIVA FINANCIERA COTRAFA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1289\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;1c222feb-2b58-408c-a495-ade06b6825c0\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COOPERATIVA FINANCIERA DE ANTIOQUIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1283\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;70a18a09-38f2-4f62-aba6-9ad28c30c966\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CREDIFIANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1558\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;3f8b3126-8aa3-4438-8a6c-1d544184f2d7\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DALE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1097\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a953078b-5e22-42ea-9301-954558e8f463\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DAVIPLATA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1551\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;2ad780ba-a1e8-4cb9-9150-670429aae092\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;GIROS Y FINANZAS COMPAÑIA DE FINANCIAMIENTO S.A\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1303\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;c0bfb716-a098-40f6-84b5-1972a4846506\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;IRIS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1637\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7e1efd88-4f88-4e21-a972-28b526b27da5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;ITAU\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1006\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;26c9a2df-6b4f-4309-9137-3692d9bb9f82\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MOVII S.A\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1801\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;d9b48a70-6068-4116-a345-154381e5d953\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;NEQUI CERTIFICACION\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1508\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;60199dc5-7d38-49c6-92a5-b839dc0087d2\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;prueba restriccion\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;9988\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;be467299-d90a-407e-86d3-01e30ade1e06\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Prueba Steve\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;121212\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;201acc05-4c4f-49dc-9be6-3261a6ce4a3c\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;RAPPIPAY\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1151\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7602e001-6199-48bc-9ee3-466f8eb2e422\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SCOTIABANK COLPATRIA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1019\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;9bb638a0-4c3f-41d2-8811-f8cdd29b0db2\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SCOTIABANK COLPATRIA UAT\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1078\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;086547b5-313b-42c7-acef-93d0f76b1dd5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SEIVY – GM FINANCIAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1305\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;/banks\u0026gt; \u0026lt;/bankListResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   paymentMethods   Lista de métodos de pago.   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;35\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BALOTO\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;co\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;35\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BALOTO\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;10\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PING. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción.   error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.   transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de Colombia, apunta tus peticiones a las siguientes URLs de …","ref":"/es/docs/integrations/api-integration/payments-api-colombia.html","title":"API de Pagos - Colombia"},{"body":"Para integrarte con el API de Pagos de México, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito o débito Enviar transacciones en efectivo Enviar transacciones con transferencia bancaria Enviar transacciones con referencia bancaria Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito o débito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito o débito. Para México, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nNota El flujo de dos pasos solo está soportados para Mastercard y Visa.  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se haga con una tarjeta tokenizada reemplazando la información de la tarjeta de crédito. Para más información, consulta API de Tokenización No   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; debitCard   Información de la tarjeta débito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta debito. No   transaction \u0026gt; debitCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta débito. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad la tarjeta débito (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta débito. Formato YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta debito. No   transaction \u0026gt; payer   Información del pagador. Debido a regulaciones de impuestos, es obligatorio enviar los parámetro payer.billingAddress.postalCode y payer.birthdate. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador que debe ser igual al enviado en el parámetro creditCard.name para pagos con tarjeta de crédito. No   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. Formato YYYY-MM-DD. Sí   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. No   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. No   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. Sí   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción requerido:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE para flujos de un paso. Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito o débito valido. Ver los métodos de pago disponibles para México. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna MX para México. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No    monthsWithoutInterest | | | Information when paying the purchase using Months Without Interests.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/es/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No | | transaction  monthsWithoutInterest  months | Numérico | Max:2 | Numérico of Months Without Interests for the purchase. The available values are 3, 6, 9, or 12.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/es/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No | | transaction  monthsWithoutInterest  bank | Alfanumérico | Max:255 | Issuing bank of the credit card used to pay the purchase using Months Without Interests.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/es/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No |--   Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta. En JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  El flujo de dos pasos solo está soportados para Mastercard y Visa. Para pagos con Promociones, envía los parámetros INSTALLMENTS_NUMBER y PROMOTION_ID con el número de cuotas seleccionado y el ID de la promoción. Consulta el API de Promociones para más información. Para pagos con Meses Sin Intereses - MSI, envía el extra parámetro INSTALLMENTS_NUMBER con el número de meses. Consulta MSI para más información. Los bancos disponibles para MSI son: BANAMEX, BANCO REGIONAL DE MONTERREY S.A, BANCOPPEL, BANCO AZTECA, SCOTIABANK, HSBC, INBURSA, BANCA MIFEL SA, BANCO MULTIVA, BAJIO, CI BANCO, Afirme, Banregio, Banjercito, Banorte, Famsa, Invex, Premium Card Liverpool, Santander y Bancomer. Cuando utilices MSI, promociones o apliques cuotas, debes mostrar siempre la frase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; durante el proceso de pago. Cuando se apliquen cuotas (cargos asumidos por el pagador), muestra el monto original de la transacción, el monto luego de las cuotas, el número de cuotas y el monto por cuota incluyendo el valor adicional. La funcionalidad de Promociones solo está disponible para flujos de un paso. Para pagos con tókenes de tarjetas de crédito, incluye los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito . Para más información, consulta el API de Tokenización. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos utilizando Mastercard o Visa. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446409, \u0026#34;transactionId\u0026#34;: \u0026#34;596ccd26-41a3-40b0-a241-262b3331aedc\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624383236617\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624365236861, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624987980000, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446580\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;f03be7ef-e82a-41e3-9a3c-5451c4d8ab99\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624389497244\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:18:17\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-29T14:18:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos para Mastercard y Visa. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de 30 días. Despues de este tiempo, la transacción es anulada automáticamente. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada. Puedes realizar capturas parciales sobre un monto autorizado siempre y cuando este no exceda el monto autorizado. Para esto, necesitas enviar en la petición el parámetro transaction.order.additionalValues.TX_VALUE con su valor (Como se envió durante la Autorización) y asignar PARTIAL_CAPTURE en el parámetro transaction.type.  Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400446409\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;596ccd26-41a3-40b0-a241-262b3331aedc\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446409, \u0026#34;transactionId\u0026#34;: \u0026#34;434312fd-90c6-48e0-9c73-dd3c2bb40d27\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624389983478\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624371983901, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400446409\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;596ccd26-41a3-40b0-a241-262b3331aedc\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446580\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;febf383f-add7-4986-82a2-941f0f4e9b45\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624390154273\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:29:14\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446667, \u0026#34;transactionId\u0026#34;: \u0026#34;868e169b-1857-4c52-a80d-e4b6d228a74f\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624391396880\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624373397257, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4850110000000000\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446670\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;a32da7ad-fb55-41ff-863d-ee49361334cb\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624391456868\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:50:57\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. Formato YYYY-MM-DD. Sí   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos en efectivo se realizan en oficinas físicas, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago en efectivo válido. Ver los métodos de pago disponibles para México. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna MX para México. Sí   transaction \u0026gt; expirationDate Alfanumérico 23 Fecha y hora máxima en la que el cliente puede realizar el pago. Formato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pagoCódigo de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. Cuando el método de pago es OXXO, la confirmación del pago será un día después del mismo. Para otros métodos de pago en efectivo, la confirmación es en línea. El parámetro transactionResponse.extraParameters tiene los siguientes parámetros relacionados con la transacción:  BANK_REFERENCED_CODE: tipo de pago. EXPIRATION_DATE: término máximo que tine el pagador para realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. REFERENCE: referencia interna de pago generada por PayU. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF. PAYMENT_WAY_ID: red financiera del tipo de pago.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;SEVEN_ELEVEN\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T21:02:14.593\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857806658, \u0026#34;transactionId\u0026#34;: \u0026#34;c7b15feb-e8e6-4330-a04b-2a4c0cc2b776\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CASH\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624482134593, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;00012345678900008578066580000000100000202106238\u0026#34;, \u0026#34;REFERENCE\u0026#34;: 857806658, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857806658Yc7b15febe8e6433Y2568534adcdf6da\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857806658Yc7b15febe8e6433Y2568534adcdf6da\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;SEVEN_ELEVEN\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;SEVEN_ELEVEN\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T21:02:14.593\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857806714\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;194e0320-2711-49d6-9d58-493dd0a59694\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CASH\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-23T16:23:05\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;00012345678900008578067140000000100000202106230\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857806714\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857806714Y194e0320271149dY36e0ad0392e7f5f\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857806714Y194e0320271149dY36e0ad0392e7f5f\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;SEVEN_ELEVEN\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones con transferencia bancaria Este método te permite procesar los pagos realizados por tus clientes por medio de transferencia bancaria. Cuando utilices este método de pago, el pagador realiza una transferencia bancaria desde su cuenta a una cuenta CLABE de PayU.\nPara integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. Formato YYYY-MM-DD. Sí   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos con transferencia bancaria se realizan en la página web de SPEI, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago por transferencia bancaria válido. Ver los métodos de pago disponibles para México. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna MX para México. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pagoCódigo de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;SPEI_CLABE_ACCOUNT_NUMBER\u0026quot;: \u0026quot;646180132800000009\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. Cuando el pagador selecciona este método de pago, PayU crea una orden en estado in progress y una transacción en estado pendiente (PENDING). Para realizar el pago, el pagador debe iniciar sesión en la sucursal virtual de su banco (el banco debe aparecer en la lista de bancos disponibles de SPEI).\nPrimero, el pagador debe registrar la cuenta CLABE de PayU en la sucursal de su banco. Una vez la cuenta CLABE esté activa para realizar transferencias, el pagador debe ingresar en su sucursal virtual, la referencia retornada por PayU en el parámetro trazabilityCode y el monto tal y como PayU lo retornó. En el cuerpo de la respuesta, puedes encontrar las variables para generar el recibo de pago (voucher) y la URL del mismo generado en formato HTML y PDF. Si quieres generar el voucher, utiliza las siguientes variables:  trazabilityCode: identificador único de máximo 7 dígitos; corresponde a la referencia de pago que debe ingresar el pagador en la sucursal virtual. Es obligatorio ingresar el mismo valor en el campo referencia de la sucursal virtual para que el pago sea exitoso. value: el pagador debe ingresar como monto de la transferencia el mismo valor informado en la solicitud, para que el pago sea exitoso. SPEI_CLABE_ACCOUNT_NUMBER: es la CLABE interbancaria de PayU, es decir, la cuenta donde se transfiere el monto. El pagador debe registrar esta CLABE como beneficiario en la sucursal de su banco antes de realizar la transferencia. SPEI_BANK_NAME: nombre del banco asociado a la cuenta CLABE de PayU. La cuenta beneficiaria está asociada al banco STP y para PayU siempre es el mismo banco.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;SPEI\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:30:21.231\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400447116, \u0026#34;transactionId\u0026#34;: \u0026#34;16d49526-8d29-4bec-8c56-478491ddb327\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;25914\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624383022721, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;ELECTRONIC_PAYMENT\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: \u0026#34;2021-06-23 23:59:59\u0026#34;, \u0026#34;SPEI_BANK_NAME\u0026#34;: \u0026#34;STP\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400447116Y16d495268d294beY2063d953fc5dab2\u0026#34;, \u0026#34;SPEI_CLABE_ACCOUNT_NUMBER\u0026#34;: \u0026#34;646180132800000009\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/V2?vid=1400447116Y16d495268d294beY2063d953fc5dab2\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;STP\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;SPEI\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:30:21.231\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400447132\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;62a8e1e4-3787-494b-93ca-a8ddb658a754\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;25915\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T12:39:50\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;ELECTRONIC_PAYMENT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;2021-06-23 23:59:59\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;SPEI_BANK_NAME\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;STP\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400447132Y62a8e1e43787494Yef7e6cd39d91243\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/V2?vid=1400447132Y62a8e1e43787494Yef7e6cd39d91243\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;3\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;STP\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones con referencia bancaria Este método te permite procesar los pagos realizados por tus clientes por medio de referencia bancaria. Para integrarte con las transacciones con referencia bancaria, debes redirigir a tu cliente a la URL que se encuentra en la respuesta.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. Formato YYYY-MM-DD. Sí   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos con referencia bancaria se realizan en oficinas físicas, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago por Referencia bancaria válido. Ver los métodos de pago disponibles para México. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna MX para México. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pagoCódigo de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;SPEI_CLABE_ACCOUNT_NUMBER\u0026quot;: \u0026quot;646180132800000009\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Información adicional de la respuesta. Este objeto tiene la misma estructura de transactionResponse.extraParameters.     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. El parámetro transactionResponse.extraParameters tiene los siguientes parámetros relacionados con la transacción:  REFERENCE: referencia de pago interna generada por PayU. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago con referencia bancaria. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;BANK_REFERENCED\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:46:20.551\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857807112, \u0026#34;transactionId\u0026#34;: \u0026#34;6f8b46f4-9c4c-4523-9d80-ab51c684a44d\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 857807112, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857807112Y6f8b46f49c4c452Y6a8c3d9204ae7c3\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624488380551, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;85780711227811246\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857807112Y6f8b46f49c4c452Y6a8c3d9204ae7c3\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANCOMER\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;BANK_REFERENCED\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:46:20.551\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857807162\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;2b7547fd-a6e8-4bcc-8f82-883775d85380\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857807162\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857807162Y2b7547fda6e84bcYa83c5dd72117110\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-23T17:54:58\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;85780716227811234\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857807162Y2b7547fda6e84bcYa83c5dd72117110\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANCOMER\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS. Sí   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR. Sí   paymentMethods   Lista de los métodos de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago. Sí   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago. Sí     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;299\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;OTHERS_CASH_MX\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;139\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;299\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;OTHERS_CASH_MX\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;139\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;AMEX\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PING. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción.   error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.   transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de México, apunta tus peticiones a las siguientes URLs de …","ref":"/es/docs/integrations/api-integration/payments-api-mexico.html","title":"API de Pagos - México"},{"body":"Para integrarte con el API de Pagos de Panamá, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito . Para Panamá, puedes realizar los flujos de un paso (Cobro). Para más información, consulta los flujos de pago.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción. This amount cannot include decimals. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se haga con una tarjeta tokenizada reemplazando la información de la tarjeta de crédito. Para más información, consulta API de Tokenización Sí   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador que debe concordar con el parámetro transaction.creditCard.name. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del comprador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. Sí   transaction \u0026gt; type Alfanumérico 32 Set this value according to the transaction. Para Panamá, set AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito valido. Ver los métodos de pago disponibles para Panamá. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna PA para Panamá. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta. En JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Para pagos con tókenes de tarjetas de crédito, incluye los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito . Para más información, consulta el API de Tokenización. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode.  Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512326\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T21:28:14.962Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;782997f7981288b6ea411709188ff926\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857804178, \u0026#34;transactionId\u0026#34;: \u0026#34;299f50c4-d7d9-4f24-a4fc-1454ff26d5c4\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624311390098, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512326\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T21:28:14.962Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;782997f7981288b6ea411709188ff926\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;USD\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PA\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857804176\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;69de6de1-9e18-45ae-8429-866bb3b47822\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T16:35:06\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   paymentMethods   Lista de los métodos de pago.   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;450\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;451\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;450\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;451\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PING. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción.   error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.   transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de Panamá, apunta tus peticiones a las siguientes URLs de …","ref":"/es/docs/integrations/api-integration/payments-api-panama.html","title":"API de Pagos - Panamá"},{"body":"Para integrarte con el API de Pagos de Peru, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de pagos incluye los siguiente métodos:\n Enviar transacciones con tarjeta de crédito o débito Enviar transacciones en efectivo Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar una de las siguientes opciones:\n Navega a la URL configurada en la variable transaction.notifyUrl o la opción URL de confirmación ubicada en el Módulo PayU en Configuración \u0026gt; Configuración técnica. Utiliza el API o SDK de consultas.   Enviar transacciones con tarjeta de crédito o débito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito o débito. Para Perú, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; creditCardTokenId   Incluye este parámetro cuando la transacción se haga con una tarjeta tokenizada reemplazando la información de la tarjeta de crédito. Para más información, consulta API de Tokenización No   transaction \u0026gt; creditCard   Información de la tarjeta de crédito. Si procesas utilizando tarjeta débito, no envíes este parámetro.\nEste objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta de crédito no tokenizada. No   transaction \u0026gt; creditCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad de la tarjeta de crédito (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Booleano Max:255 Te permite procesar transacciones sin incluir el código de seguridad de la tarjeta de crédito. Tu comercio requiere autorización de PayU antes de utilizar esta funcionalidad. No   transaction \u0026gt; debitCard   Información de la tarjeta débito. Este objeto y sus parámetros son obligatorios cuando el pago se realiza utilizando una tarjeta debito. No   transaction \u0026gt; debitCard \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta débito. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alfanumérico Min:1 Max:4 Código de seguridad la tarjeta débito (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta débito. Formato YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta debito. No   transaction \u0026gt; payer   Información del pagador. No   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador que debe ser igual al enviado en el parámetro creditCard.name para pagos con tarjeta de crédito. No   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del comprador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. No   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. No   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. Sí   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción requerido:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE para flujos de un paso. Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito o débito valido. Ver los métodos de pago disponibles para Perú. Sí   transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna PE para Perú. Sí   transaction \u0026gt; deviceSessionId Alfanumérico Max:255 Identificador de la sesión del dispositivo donde el cliente realiza la transacción. Para más información, consulta este artículo. Sí   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; cookie Alfanumérico Max:255 Cookie almacenada por el dispositivo donde el cliente realiza la transacción. Sí   transaction \u0026gt; userAgent Alfanumérico Max:1024 User agent del navegador donde el cliente realiza la transacción. Sí   transaction \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la petición. El tamaño máximo de cada nombre de extraParameters es 64 caracteres.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta. En JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  Para pagos con tókenes de tarjetas de crédito, incluye los parámetros transaction.creditCardTokenId y transaction.creditCard.securityCode (Si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito . Para más información, consulta el API de Tokenización. Por defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas. Luego de que esté activado, envía en la petición la variable creditCard.processWithoutCvv2 con valor true y elimina la variable creditCard.securityCode. En Perú, puedes seleccionar 0 o de 2 a 36 cuotas cuando pagas con tarjeta de crédito. Si seleccionas una (1) cuota, PayU envía cero (0) como valor por defecto.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443216, \u0026#34;transactionId\u0026#34;: \u0026#34;eebf01c3-7531-4952-a8e8-647a9eebac95\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624275552379, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443244\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;62cb2c6a-a9d5-4438-a767-7be501f0973d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T06:47:21\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n Puedes realizar capturas parciales sobre un monto autorizado. Para esto, necesitas enviar en la petición el parámetro transaction.order.additionalValues.TX_VALUE con su valor (Como se envió durante la Autorización) y asignar PARTIAL_CAPTURE en el parámetro transaction.type. Para capturas parciales, el mínimo valor a capturar puede ser 10% menor que el valor autorizado. Para capturas parciales, las redes de pago liberan los valores no capturados entre 2 y 10 días para tarjetas locales y 28 días para tarjetas extranjeras.  Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400443216\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;eebf01c3-7531-4952-a8e8-647a9eebac95\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443382, \u0026#34;transactionId\u0026#34;: \u0026#34;e82d47b3-72cf-42f0-ae30-3eeb42575cc7\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;10140044338210c\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624279912864, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400443382\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;10ccdb41-3fa8-4961-b6c0-88d74f737d4e\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443382\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;e82d47b3-72cf-42f0-ae30-3eeb42575cc7\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;10140044338210c\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;APPROVED\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APPROVED\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T07:51:52\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443595, \u0026#34;transactionId\u0026#34;: \u0026#34;acd8a1c6-fb44-497f-8fa5-de6136be4562\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624286793995, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443759\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;d7af220a-d427-486f-b35d-c363e12430e2\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T10:49:30\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; accountId Numérico  Identificador de tu cuenta. Sí   transaction \u0026gt; order \u0026gt; referenceCode Alfanumérico Min:1 Max:255 Representa el identificador de la orden en tu sistema. Sí   transaction \u0026gt; order \u0026gt; description Alfanumérico Min:1 Max:255 Descripción de la orden. Sí   transaction \u0026gt; order \u0026gt; language Alfanumérico 2 Idioma utilizado en los correos electrónicos enviados al comprador y al vendedor. Sí   transaction \u0026gt; order \u0026gt; notifyUrl Alfanumérico Max:2048 URL de confirmación de la orden. No   transaction \u0026gt; order \u0026gt; partnerId Alfanumérico Max:255 ID de aliado dentro de PayU. No   transaction \u0026gt; order \u0026gt; signature Alfanumérico Max:255 Firma asociada al formulario. Para más información, consulta Firma de autenticación. Sí   transaction \u0026gt; order \u0026gt; shippingAddress   Dirección de envío. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:100 Línea de dirección 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alfanumérico Max:100 Línea de dirección 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alfanumérico Max:8 Código postal de la dirección. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alfanumérico Max:11 Número de teléfono asociado a la dirección. No   transaction \u0026gt; order \u0026gt; buyer   Información del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alfanumérico Max:100 Identificador del comprador en tu sistema. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alfanumérico Max:150 Nombre del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alfanumérico Max:20 Teléfono del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alfanumérico  Dirección de envío del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alfanumérico Max:150 Línea de dirección 1 del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alfanumérico 2 País de la dirección del comprador en formato ISO 3166 alpha-2. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Numérico Max:20 Código postal de la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Numérico Max:20 Número de teléfono asociado a la dirección del comprador. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Monto de la orden y sus valores asociados. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19, 2 Especifica el monto de la transacción, este valor puede tener dos dígitos decimales (Ej. 10000.00 o 10000). Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alfanumérico 64 Monto del impuesto a las ventas. Sí   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Numérico 19, 2 Especifica el monto del impuesto a las ventas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alfanumérico 64 Valor base para calcular el impuesto.\nSi el monto no tiene impuesto, envía 0.\nEste valor puede tener dos dígitos decimales. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Numérico 19, 2 Especifica el monto base de la transacción. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. No   transaction \u0026gt; payer   Información del pagador. Sí   transaction \u0026gt; payer \u0026gt; emailAddress Alfanumérico Max:255 Correo electrónico del pagador. Sí   transaction \u0026gt; payer \u0026gt; merchantPayerId Alfanumérico Max:100 Identificador del pagador en tu sistema. No   transaction \u0026gt; payer \u0026gt; fullName Alfanumérico Max:150 Nombre del pagador. Sí   transaction \u0026gt; payer \u0026gt; billingAddress   Dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alfanumérico Max:100 Línea 1 de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alfanumérico Max:100 Línea 2 de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alfanumérico Max:50 Ciudad de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alfanumérico Max:40 Estado de la dirección de facturación. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alfanumérico 2 País de la dirección de facturación en formato ISO 3166 Alpha-2. Sí   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alfanumérico Max:20 Código postal de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alfanumérico Max:20 Número de teléfono de la dirección de facturación. No   transaction \u0026gt; payer \u0026gt; birthdate Alfanumérico Max:10 Fecha de nacimiento del pagador. No   transaction \u0026gt; payer \u0026gt; contactPhone Alfanumérico Max:20 Número de teléfono del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniNumber Alfanumérico Max:20 Número de identificación del pagador. Sí   transaction \u0026gt; payer \u0026gt; dniType Alfanumérico 2 Tipo de identificación del pagador. Ver los tipos de documentos. No   transaction \u0026gt; type Alfanumérico 32 Como los pagos en efectivo se realizan en oficinas físicas, el único tipo de transacción disponible es AUTHORIZATION_AND_CAPTURE Sí   transaction \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago en efectivo válido. Ver los métodos de pago disponibles para Perú.    transaction \u0026gt; paymentCountry Alfanumérico 2 Asigna PE para Perú. Sí   transaction \u0026gt; expirationDate Alfanumérico 23 Fecha y hora máxima en la que el cliente puede realizar el pago. Formato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alfanumérico Max:39 Dirección IP del dispositivo donde el cliente realiza la transacción. Sí      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador generado o existente de la orden en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción. Como el pago se realiza de forma externa, el estado de una transacción exitosa es PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; pendingReason Alfanumérico Max:21 Código de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pagoCódigo de la razón asociada con el estado, como se mencionó en transactionResponse \u0026gt; state, la transacción está en espera del pago.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado con el estado. En este caso, para una transacción exitosa es PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación de la respuesta en el sistema de PayU.   transactionResponse \u0026gt; extraParameters   Parámetros adicionales o datos asociados a la respuesta.\nEn JSON, El parámetro extraParameters sigue esta estructura: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nEn XML, El parámetro extraParameters sigue esta estructura: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Consideraciones  El parámetro transaction.expirationDate no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto. Para los pagos en efectivo, los siguientes parámetros son obligatorios:  transaction.order.buyer.fullName transaction.payer.fullName transaction.payer.emailAddress o transaction.order.buyer.emailAddress.   El parámetro transactionResponse.extraParameters tiene los siguientes parámetros relacionados con la transacción:  REFERENCE: referencia de pago interna generada por PayU. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF.    Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PAGOEFECTIVO\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-22T19:51:20.302\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: true } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857804123, \u0026#34;transactionId\u0026#34;: \u0026#34;fd685f0a-f5b2-40cf-9527-dcc85febe184\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;Se ha Generado el CIP: 00000002592100 .\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;2592100\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 857804123, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857804123Yfd685f0af5b240cYd231ed8660a7c9a\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624391480302, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;2592100\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857804123Yfd685f0af5b240cYd231ed8660a7c9a\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PAGOEFECTIVO\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-16T16:07:11\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857804131\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;185f578b-2247-4a28-85b9-128c7b90c989\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;Se ha Generado el CIP: 00000002592102 .\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;2592102\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;1\u0026lt;/authorizationCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857804131\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857804131Y185f578b22474a2Y11601e067841b94\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-28T23:59:59\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;2592102\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857804131Y185f578b22474a2Y11601e067841b94\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados.   command Alfanumérico Max:32 Asigna GET_PAYMENT_METHODS.   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false.   merchant   Este objeto tiene los datos de autenticación.   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   paymentMethods   Lista de los métodos de pago.   paymentMethods \u0026gt; paymentMethodComplete   Este objeto tiene la información de un método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numérico  Identificador del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alfanumérico Max:32 Nombre del método de pago.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alfanumérico 2 Código ISO del país del método de pago.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. Para el propósito de este ejemplo, la respuesta muestra dos métodos de pago.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;258\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;1067\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;258\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DINERS\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;1067\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Nombre del campo Descripción     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados.   command Alfanumérico Max:32 Asigna PING.   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false.   merchant   Este objeto tiene los datos de autenticación.   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key      Respuesta (Response)     Nombre del campo Formato Nombre del campo Descripción     code Alfanumérico  Código de respuesta de la transacción.   error Alfanumérico Max:2048 Mensaje de error asociado si ocurrió un error.   transactionResponse transactionResponse Max:2048 La respuesta del método PING si ocurrió un error.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"Para integrarte con el API de Pagos de Peru, apunta tus peticiones a las siguientes URLs de acuerdo …","ref":"/es/docs/integrations/api-integration/payments-api-peru.html","title":"API de Pagos - Perú"},{"body":"To integrate with Payments API Argentina, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit card Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit card This method lets you process the payments performed by your customers using credit or debit cards. For Argentina, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. If you process using debit card, do not send this parameter.\nThis object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. Due to Tax regulations, it is mandatory to send the parameters payer.billingAddress.state and payer.dnitype. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter creditCard.name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Format ISO 3166-2 ARG official. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Argentina. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set AR for Argentina. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with Promotions, send the parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. Promotions feature is only available for one-step flows. For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. When using credit cards, take into account the considerations due to Argentinian regulations for the check out page. Due to Tax regulations, it is mandatory to send the parameters payer.billingAddress.state using format ISO 3166-2 ARG official and payer.dnitype.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T20:25:15.868Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1ffceb14a71948fdeaba5aef81b8e511\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421560, \u0026#34;transactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623338717949, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-10T20:48:38.620Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;52b975674c6b1435c81dde6b8e039730\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421621\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;dd76e186-e4f1-487c-826b-df4e9b125bfa\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;dd76e186-e4f1-487c-826b-df4e9b125bfa\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T10:48:40\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 14 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. You can perform partial captures over an authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400421560\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421560, \u0026#34;transactionId\u0026#34;: \u0026#34;84ace270-d52d-4e85-b4cf-bbe8710db0d5\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;84ace270-d52d-4e85-b4cf-bbe8710db0d5\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623339599368, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400421560\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421560\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;4522f4ac-4ff2-4e91-aa6c-7f2c2bf18d9d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;DECLINED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseErrorMessage\u0026gt;El saldo disponible no es suficiente para procesar la transacción.\u0026lt;/paymentNetworkResponseErrorMessage\u0026gt; \u0026lt;responseCode\u0026gt;INVALID_TRANSACTION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T10:55:46\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T22:29:35.451Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;70f33e263fbcdf18103101dfc86671ab\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4850110000000000\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400421870, \u0026#34;transactionId\u0026#34;: \u0026#34;fc7e5dce-0b69-4865-b7c3-acb0170c1729\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;fc7e5dce-0b69-4865-b7c3-acb0170c1729\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623346177300, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-10T20:48:38.620Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;52b975674c6b1435c81dde6b8e039730\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4850110000000000\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400421894\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;fc588a85-3122-4e4e-b958-a03d48b7438f\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;fc588a85-3122-4e4e-b958-a03d48b7438f\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-10T12:41:15\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Installments When processing transactions with credit cards, you need to show the following aspects to your customer when processing installments:\nWhere:\n   Number in the screen Option Description     1 Total purchase Total amount of the purchase without financing.   2 Total payment Total amount financed of the purchase.   3 Installments Number of installments and their amount.   4 TEA The annual effective interest rate (TEA) applied.   5 CFT The total financial cost (CFT).    The information of the total financial cost (CFT) must comply with the following directions:\n  Must be located next to the reported variables.\n  Must appear in a prominent color typeface using the same font and size of at least five times bigger than the one used to inform the annual effective interest rate (TEA), the number of installments, and their amount.\n  According to the current regulations, you cannot use the phrase without interest (in Spanish, \u0026ldquo;sin interés\u0026rdquo;) or any other similar phrase, when the financial cost of the product or service is transferred to the customer\u0026rsquo;s selling price.\nSubmit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Argentina. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set AR for Argentina. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is 15 days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512322\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-10T20:25:15.868Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1ffceb14a71948fdeaba5aef81b8e511\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av Centenario 837\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;San Isidro\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;AR-B\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PAGOFACIL\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-12T16:07:11\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857787128, \u0026#34;transactionId\u0026#34;: \u0026#34;702ee8a1-d99c-43cc-a097-167db0d7ff1a\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 74794, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857787128Y702ee8a1d99c43cY5769b4d7b64fa1e\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1623514031586, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;99580010000074794000000000000000000001206211107000010000083\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857787128Y702ee8a1d99c43cY5769b4d7b64fa1e\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512322\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T14:40:25.549Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1ffceb14a71948fdeaba5aef81b8e511\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av Centenario 837\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;San Isidro\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;AR-B\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PAGOFACIL\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-16T16:07:11\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;AR\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857792249\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;96a2e817-e26a-456b-85d4-28df8c3a584e\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;75017\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857792249Y96a2e817e26a456Y47e0b9cb12503f6\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T11:07:11\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;99580010000075017000000000000000000001606211107000010000082\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857792249Y96a2e817e26a456Y47e0b9cb12503f6\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description Mandatory     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS. Yes   error Alphanumeric Max:2048 The error message associated when the response code is ERROR. Yes   paymentMethods   List of the payment methods. Yes   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country. Yes     API call The following are the bodies of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;201\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ARGENCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;212\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;AR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;201\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;ARGENCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;212\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;AR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Argentina, target your request to the following URLs according to …","ref":"/en/docs/integrations/api-integration/payments-api-argentina.html","title":"Payments API - Argentina"},{"body":"To integrate with Payments API Brazil, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash Submit transaction with bank transfer Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Brazil, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nAdding Payment Facilitators Merchants can be considered as Payment Processor by franchises and the Central Bank. A payment processor is a legal entity that has money from sub-merchants. In the case of merchant bankruptcy and tax management, the Brazilian Central Bank wants to know the business\u0026rsquo;s beneficiary.\nTo include the information of the sub-merchant, you need to include it in the request of the Authorization, and Charge flows using the submerchant object.\nWhat is a Payment Facilitator? A payment facilitator is a company that offers an alternative to contracting with a traditional payment organization by assuming responsibility for the flow of funds in a buyer-seller relationship.\nMany merchants are choosing to work with payment facilitators because the payment facilitator possesses and manages the master account, thus assuming a risk. Merchants also choose a payment facilitator due the simplicity of setting up an account, typically occurring through a short application and underwriting evaluation.\nWhat information is required? You need to send the following information:\n Sub-merchant\u0026rsquo;s internal identification (optional) Sub-merchant\u0026rsquo;s Name (optional) Sub-merchant\u0026rsquo;s ID Number (mandatory) *Individuals or Legal Entities Sub-merchant\u0026rsquo;s Address (optional) Sub-merchant\u0026rsquo;s State (mandatory) Sub-merchant\u0026rsquo;s Postal Code (mandatory) Sub-merchant\u0026rsquo;s Country (mandatory)  Find the description of these fields in the Variables section.\nUsing tokenized cards PayU supports payments with your tokenized card to let you make payments on a regular bases with a card stored in a token. A credit card token substitutes the sensitive information of a credit card and allows you to safely store it following PCI DSS (Payment Card Industry Data Security Standard) security standards.\nPayU can process payments with the following services:\n  PayU Tokenization.\nWe provide our own service to tokenize your credit cards enabled under request. This service lets you tokenize the information of your customers' credit cards (regardless of their franchise) using our API or SDK integration.\nFor more information, refer to PayU Tokenization.\n  MasterCard Digital Enablement Service - MDES.\nTokenization service provided by Mastercard. This service lets you tokenize the Primary Account Number of the MasterCard credit cards to let you use them to make regular payments or build one-click payments features.\nFor more information, refer to MasterCard Digital Enablement Service (MDES).\n  Visa Token Service - VTS.\nTokenization service provided by Visa. This service lets you store the sensitive information of the Visa credit cards in a token to let you use them to make regular payments or build one-click payments features.\nFor more information, refer to Visa Token Service (VTS).\n  Pay with PayU tokens For payments with PayU credit card tokens, include the parameter transaction.creditCardTokenId replacing the information of the credit card. The following example shows the body of the request in a high level for a one-step flow, the details of the request are not provided.\nNote To process without CVV is necessary to send the parameter creditCard.processWithoutCvv2 as true in the payment request and remove the parameter creditCard.securityCode.\nBy default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative.   JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Information of the order\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Information of the payer\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;creditCard\u0026#34;: { \u0026#34;securityCode\u0026#34;: \u0026#34;123\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parameters of the request\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Card franchise\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;Processing country\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Information of the order --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- Information of the payer --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parameters of the request --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Card franchise}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{Processing country}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    Pay with MDES or VTS tokens If you are tokenizing your customer\u0026rsquo;s credit cards using MDES or VTS, you can configure the information of the token in the parameter transaction.networkToken replacing the information of the credit card and send the parameter creditCard.processWithoutCvv2 as true.\nBy default, processing credit cards without security code is not enabled, contact your Sales representative to enable it.\nThe following example shows the body of the request in a high level for a one-step flow, the details of the request are not provided.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Information of the order\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Information of the payer\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;networkToken\u0026#34;: { \u0026#34;tokenPan\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;cryptogram\u0026#34;: \u0026#34;11223344556677889900112233445566778899\u0026#34;, \u0026#34;expiry\u0026#34;: \u0026#34;2028/01\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parameters of the request\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Card franchise\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;Processing country\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Information of the order --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- Information of the payer --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;networkToken\u0026gt; \u0026lt;tokenPan\u0026gt;4097440000000004\u0026lt;/tokenPan\u0026gt; \u0026lt;cryptogram\u0026gt;11223344556677889900112233445566778899\u0026lt;/cryptogram\u0026gt; \u0026lt;expiry\u0026gt;2028/01\u0026lt;/expiry\u0026gt; \u0026lt;/networkToken\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parameters of the request --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Card franchise}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{Processing country}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    Find the description of the object transaction.networkToken and its parameters in the Variables section.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. For Brazil, only send two characters, For example, set SP for São Paulo. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; submerchant   Information of the sub-merchant. If you don\u0026rsquo;t send this parameter, PayU configures your merchant as sub-merchant. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; id Alphanumeric Max:15 Internal ID of the sub-merchant if you use one to identify it. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; fullName Alphanumeric Max:150 Full name of the sub-merchant. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address   Sub-merchant address. The fields state, country, and postalCodeare mandatory when sending this object. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; street3 Alphanumeric Max:100 Address Line 3. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; state Alphanumeric Max:40 Address State. For Brazil, only send two characters, For example, set SP for São Paulo. Yes   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; country Alphanumeric 2 Address country. Yes   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; address \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; identification Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. No   transaction \u0026gt; order \u0026gt; submerchant \u0026gt; identificationType Alphanumeric Max:4 Identification type of the sub-merchant. The possible values are cnpj or cpf. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card using the PayU Tokenization; moreover, it is mandatory to also send the parameter transaction.creditCard.expirationDate.\nFor more information, refer to Tokenization API. No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. This parameter is mandatory when the payment is performed using a tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; payer   Payer information. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter transaction.creditCard.name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. For Brazil, use the format XXXXX-XXX or ´. Example: 09210-710 or 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; networkToken   Information of the token. Include this parameter when the transaction is done using a tokenized card using the VTS or MDES Tokenization. For more information, refer to Pay with MDES or VTS tokens. *When sending this object, all its parameters are mandatory. No   transaction \u0026gt; networkToken \u0026gt; tokenPan Alphanumeric Max:32 Token number generated either by MDES or VTS. Yes*   transaction \u0026gt; networkToken \u0026gt; cryptogram Alphanumeric Max:28 Unique key generated by MDES or VTS to decrypt the information of the credit card. Yes*   transaction \u0026gt; networkToken \u0026gt; expiry Alphanumeric 7 Expiration date of the token. Format YYYY/MM. Yes*   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods for Brazil. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set BR for Brazil. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No   transaction \u0026gt; termsAndConditionsAcepted Boolean  PayU terms and conditions that the payers must accept. *This parameter is only mandatory if your Brazilian PayU account is associated to a foreign bank account. No*   transaction \u0026gt; threeDomainSecure   This object contains the information of 3DS 2.0. No   transaction \u0026gt; threeDomainSecure \u0026gt; embedded Boolean  Set true if you want to use and embedded MPI for the Authorization process. By default, this value is set as false. No   transaction \u0026gt; threeDomainSecure \u0026gt; eci Number Max:2 Electronic Commerce Indicator.\nValue returned by the directory servers showing the authentication attempt.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.xid has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; cavv Alphanumeric Max:28 Cardholder Authentication Verification Value.\nCode of the cryptogram used in the transaction authentication in Base64.\nDepending on the specific ECI codes established by the process network, this value may be optional. No   transaction \u0026gt; threeDomainSecure \u0026gt; xid Alphanumeric Max:28 Transaction ID sent by the MPI in Base64.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.eci has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; directoryServerTransactionId Alphanumeric Max:36 Transaction ID generated by the Directory Server during the Authentication. No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  If your commerce does not have a local entity, it is mandatory to send either the CPF (parameter transaction.[payer|buyer].dniNumber) or the CNPJ (parameter transaction.[payer|buyer].cnpj) when using Authorization or Charge. If you don\u0026rsquo;t send any information for the sub-merchants, PayU configures your merchant as sub-merchant. For payments with credit card tokens generated by PayU, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. For payments with credit card tokens generated using MDES or VTS, include the object transaction.networkToken and its parameters. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.\nHaving this feature enable is mandatory when using credit card tokens generated using MDES or VTS. The extra parameter CIELO_TID identifies the transaction, this parameter is needed when you want to process voids. The variable transaction.threeDomainSecure does not replace the card information nor any of the mandatory fields of the transaction. This object is additional and not mandatory. The variable transaction.threeDomainSecure corresponds to a Pass Through scenario where the commerce performs the authentication by their own.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;submerchant\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;ROBSON BATISTA DE OLIVEIRA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Rua Alsácia\u0026#34;, \u0026#34;street2\u0026#34;: null, \u0026#34;street3\u0026#34;: null, \u0026#34;city\u0026#34;: \u0026#34;São Paulo\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;04630010\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;identification\u0026#34;: \u0026#34;17126661851\u0026#34;, \u0026#34;identificationType\u0026#34;: \u0026#34;CNPJ\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5253203387684619\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;threeDomainSecure\u0026#34;: { \u0026#34;embedded\u0026#34;: false, \u0026#34;eci\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;cavv\u0026#34;: \u0026#34;AOvG5rV058/iAAWhssPUAAADFA==\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026#34;, \u0026#34;directoryServerTransactionId\u0026#34;: \u0026#34;00000-70000b-5cc9-0000-000000000cb\u0026#34; } }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400434770, \u0026#34;transactionId\u0026#34;: \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-CIELO-1623957118463\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623939118784, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;submerchant\u0026gt; \u0026lt;address\u0026gt; \u0026lt;city\u0026gt;São Paulo\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;04630010\u0026lt;/postalCode\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;street1\u0026gt;Rua Alsácia\u0026lt;/street1\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;fullName\u0026gt;ROBSON BATISTA DE OLIVEIRA\u0026lt;/fullName\u0026gt; \u0026lt;identification\u0026gt;17126661851\u0026lt;/identification\u0026gt; \u0026lt;identificationType\u0026gt;cnpj\u0026lt;/identificationType\u0026gt; \u0026lt;/submerchant\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;5253203387684619\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;threeDomainSecure\u0026gt; \u0026lt;embedded\u0026gt;false\u0026lt;/embedded\u0026gt; \u0026lt;eci\u0026gt;01\u0026lt;/eci\u0026gt; \u0026lt;cavv\u0026gt;AOvG5rV058/iAAWhssPUAAADFA==\u0026lt;/cavv\u0026gt; \u0026lt;xid\u0026gt;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026lt;/xid\u0026gt; \u0026lt;directoryServerTransactionId\u0026gt;00000-70000b-5cc9-0000-000000000cb\u0026lt;/directoryServerTransactionId\u0026gt; \u0026lt;/threeDomainSecure\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400434942\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;1af49d5d-464a-4efb-98db-f7875e3c580b\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-CIELO-1623962788239\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-17T10:46:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is seven (7) days. After this time, the transaction is cancelled. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400434770\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400434770, \u0026#34;transactionId\u0026#34;: \u0026#34;2e753a5e-0eba-4a4c-9778-6880b5f16605\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;BR-456\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624029247864, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400436982\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;2cb57976-31d1-4563-b014-8047bd1b2b2a\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400436982\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;78d4c328-7157-4b50-9fa9-12e019e7df58\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;6\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;BR-456\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-18T10:19:01\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;submerchant\u0026#34;: { \u0026#34;fullName\u0026#34;: \u0026#34;ROBSON BATISTA DE OLIVEIRA\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Rua Alsácia\u0026#34;, \u0026#34;street2\u0026#34;: null, \u0026#34;street3\u0026#34;: null, \u0026#34;city\u0026#34;: \u0026#34;São Paulo\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;04630010\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;identification\u0026#34;: \u0026#34;17126661851\u0026#34;, \u0026#34;identificationType\u0026#34;: \u0026#34;CNPJ\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;5178151142107990\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;threeDomainSecure\u0026#34;: { \u0026#34;embedded\u0026#34;: false, \u0026#34;eci\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;cavv\u0026#34;: \u0026#34;AOvG5rV058/iAAWhssPUAAADFA==\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026#34;, \u0026#34;directoryServerTransactionId\u0026#34;: \u0026#34;00000-70000b-5cc9-0000-000000000cb\u0026#34; } }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400437001, \u0026#34;transactionId\u0026#34;: \u0026#34;f0f8c441-43e8-490a-b4f2-c14d2c403175\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;282856\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-CIELO-1624047897817\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624029898077, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;CIELO_TID\u0026#34;: \u0026#34;1006993069000509C28A\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;submerchant\u0026gt; \u0026lt;address\u0026gt; \u0026lt;city\u0026gt;São Paulo\u0026lt;/city\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;04630010\u0026lt;/postalCode\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;street1\u0026gt;Rua Alsácia\u0026lt;/street1\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;fullName\u0026gt;ROBSON BATISTA DE OLIVEIRA\u0026lt;/fullName\u0026gt; \u0026lt;identification\u0026gt;17126661851\u0026lt;/identification\u0026gt; \u0026lt;identificationType\u0026gt;cnpj\u0026lt;/identificationType\u0026gt; \u0026lt;/submerchant\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;5178151142107990\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;threeDomainSecure\u0026gt; \u0026lt;embedded\u0026gt;false\u0026lt;/embedded\u0026gt; \u0026lt;eci\u0026gt;01\u0026lt;/eci\u0026gt; \u0026lt;cavv\u0026gt;AOvG5rV058/iAAWhssPUAAADFA==\u0026lt;/cavv\u0026gt; \u0026lt;xid\u0026gt;Nmp3VFdWMlEwZ05pWGN3SGo4TDA=\u0026lt;/xid\u0026gt; \u0026lt;directoryServerTransactionId\u0026gt;00000-70000b-5cc9-0000-000000000cb\u0026lt;/directoryServerTransactionId\u0026gt; \u0026lt;/threeDomainSecure\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400437005\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;5d3cea31-c5e5-4105-9359-984edcaede37\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;6\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;282856\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-CIELO-1624047952405\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-18T10:25:52\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CIELO_TID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1006993069000509C28A\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. Yes   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. Yes   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. For Brazil, only send two characters, For example, set SP for São Paulo. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. This information is optional. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. For Brazil, only send two characters, For example, set SP for São Paulo. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. For Brazil, use the format XXXXX-XXX or ´. Example: 09210-710 or 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Brazil. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set BR for Brazil. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  If your commerce does not have a local entity, it is mandatory to send either the CPF (parameter transaction.[payer|buyer].dniNumber) or the CNPJ (parameter transaction.[payer|buyer].cnpj). The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The payment is reflected in the next business day. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_BOLETO_BANCARIO: payment receipt in printable format. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;(11)756312633\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;BOLETO_BANCARIO\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-19T21:57:12.559\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 43626780, \u0026#34;transactionId\u0026#34;: \u0026#34;63091676-673d-46bf-a283-54e686ba0238\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=63091676-673d-46bf-a283-54e686ba0238\u0026amp;orderId=43626780\u0026amp;signature=647b061ddef2a25fd19cb362860e1d21ef59e16a\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1399507200000, \u0026#34;URL_BOLETO_BANCARIO\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=63091676-673d-46bf-a283-54e686ba0238\u0026amp;orderId=43626780\u0026amp;signature=647b061ddef2a25fd19cb362860e1d21ef59e16a\u0026#34;, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;34191.75389 38894.912930 81898.480009 9 60560000010000\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;(11)756312633\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;BOLETO_BANCARIO\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-19T21:57:12.559\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;43625300\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;89ff03a7-9f86-4193-a25d-94b758c135bb\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=89ff03a7-9f86-4193-a25d-94b758c135bb\u0026amp;orderId=43625300\u0026amp;signature=e9e89a2cd8d9d2d79d637eac84debae9012584de\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2014-05-08T00:00:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_BOLETO_BANCARIO\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/bl.zul?transactionId=89ff03a7-9f86-4193-a25d-94b758c135bb\u0026amp;orderId=43625300\u0026amp;signature=e9e89a2cd8d9d2d79d637eac84debae9012584de\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;34191.75389 38894.752930 81898.480009 3 60570000010000\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. When using this payment method, the payer performs a bank transfer from their bank account issued in ITAU.\nTo integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; cnpj Alphanumeric Max:14 Identification number of the buyer (For Legal person in Brazil). You must use an algorithm to validate the CNPJ and must be set using the format XXXXXXXXXXXXXX. Example: 32593371000110. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. For Brazil, use the format XXXXX-XXX or XXXXXXXX. Example: 09210-710 or 09210710. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. For Brazil, use the format ddd(2)+number(7-9). Example: (11)756312633. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. You must use an algorithm to validate the CPF and must be set using the format XXX.XXX.XXX-XX. Example: 811.807.405-64. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in Bank transfer. See the available Payment Methods for Brazil. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set BR for Brazil. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181964158Ya5b4bd5e7c6e4ebY4085cd2deb967f2\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181964158Ya5b4bd5e7c6e4ebY4085cd2deb967f2\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  If your commerce does not have a local entity, it is mandatory to send either the CPF (parameter transaction.[payer|buyer].dniNumber) or the CNPJ (parameter transaction.[payer|buyer].cnpj). The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is four (4) day after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payer selects this payment method, PayU creates an order in in progress state and a transaction in PENDING state. In the response body, you can find the receipt generated by PayU and the expiration date.  API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512327\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;fbc089272288edc52c332395d9566f4c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;BRL\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;811.807.405-64\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;32593371000110\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Manaos\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;SP\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;10012545\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;ITAU\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:30:21.231\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1181965590, \u0026#34;transactionId\u0026#34;: \u0026#34;bd273cec-d2f2-4f00-a125-c705c82b5605\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181965590Ybd273cecd2f24f0Y88337fa73366de5\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1626207065416 }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;ITAU_SHOPLINE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512327\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-17T19:11:57.179Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;fbc089272288edc52c332395d9566f4c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;BRL\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;811.807.405-64\u0026lt;/dniNumber\u0026gt; \u0026lt;cnpj\u0026gt;32593371000110\u0026lt;/cnpj\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Quadra QNP 34 Conjunto G 780\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Manaos\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;SP\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;10012545\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;ITAU\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:30:21.231\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;BR\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1181965893\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;8397992b-3717-49c5-92ee-345a65ff13cf\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://gateway.payulatam.com/ppp-web-gateway/payment-redirect.zul?prid=1181965893Y8397992b371749cY7ad19f758dd04bc\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-07-13T15:14:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;ITAU_SHOPLINE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the bodies of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;177\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;172\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;BR\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;177\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;172\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;BR\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Brazil, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/payments-api-brazil.html","title":"Payments API - Brazil"},{"body":"To integrate with Payments API Chile, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit cards Submit transaction with cash Submit transaction with debit and prepaid cards using WebPay Plus Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit cards This method lets you process the payments performed by your customers using credit or debit cards. For Chile, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Transactions with credit card using two-step flows are available under demand. Contact your Sales representative for more information.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction. This amount cannot include decimals. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter transaction.creditCard.name for credit card payments. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Chile. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CL for Chile. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. International debit cards are not supported. Transactions in CHILEAN PESOS with decimal amounts are not allowed. Two-step flows are not supported for debit, prepaid and international credit cards. Transactions with credit card using two-step flows are available for single installment payments. If you send a two-step transaction with more two installments or more, this transaction is automatically rejected by the acquirer.\nTwo-step flow is available under request, contact your Sales representative for more information. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-25T16:33:48.512Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;77d72fb91eb43f9b15fb300d5f173da3\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;777\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400455722, \u0026#34;transactionId\u0026#34;: \u0026#34;49cb24d9-eda6-43de-aad9-a17ffa9e5fb8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;195569\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;49cb24d9-eda6-43de-aad9-a17ffa9e5fb8\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;195569\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624616739664, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab3984007f3010d2adb6c02d104f85b8268ccf4b95da4b56f3abdb339e1c52\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-25T16:33:48.512ZZ\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;77d72fb91eb43f9b15fb300d5f173da3\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400455931\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;56f77e02-447a-4c98-a04b-9a8f3f92f3e7\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;363838\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;56f77e02-447a-4c98-a04b-9a8f3f92f3e7\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;363838\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-25T06:33:55\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01ab79a6030063a6b4039a64a8cf7de471d7ad02390c118fbd7d66cfd1af9864\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 7 days. After this time, the transaction is auto-voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. You can perform only one partial capture over an authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type.\nThe minimum amount is 50 CLP. It is not allowed to capture a higher amount than the amount previously authorized. Captures are only allowed for transactions in one installment.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400421560\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;db9d9d7f-b62c-4ed2-a3b9-d146d33bdaf5\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400455931, \u0026#34;transactionId\u0026#34;: \u0026#34;da91c0ec-632b-44e3-883d-b85821390519\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;da91c0ec-632b-44e3-883d-b85821390519\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;169018\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624629865424, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab5a10f3c1bdd401ac86d7c21e4347a7b848171fad7830157abcaac0373c7e\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400456250\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;ead41073-a03a-45aa-9e83-23d4b03197f0\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400456250\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;9c4d12c4-277d-4936-9d15-735e21dd5a19\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;9c4d12c4-277d-4936-9d15-735e21dd5a19\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;698999\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-25T09:08:16\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01ab6ddef1f9350f7b970d33b9766db9b0d52c6b9cb353618ddc8cd58d076b59\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400431556, \u0026#34;transactionId\u0026#34;: \u0026#34;14aed0cc-95cb-4b04-b4dd-0c7f8c3296e8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;456505\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;14aed0cc-95cb-4b04-b4dd-0c7f8c3296e8\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;456505\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved transaction\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623834912248, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab306b62cd0ce17d462501b121ed6cac3794375054b80a51c01bad4ec51550\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400431549\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;937ed9fe-72d3-44e2-b1b8-e38e9f8e08a4\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;185495\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;937ed9fe-72d3-44e2-b1b8-e38e9f8e08a4\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;185495\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T04:13:51\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abc29e7b32bbf011cdd2a1e9961c5d6bd068220f4b506b06c66e15de1acfd2\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer selects cash and generates the payment code.\nNote Klap is formerly known as MULTICAJA. You can still see elements or configurations related to MULTICAJA.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Chile. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CL for Chile. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. For cash payments, you need to include the response URL to redirect your customers back when they complete their payment.\nIn JSON, the extraParameters parameter is set as: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;NETWORK_CALLBACK_URL\u0026quot;: \u0026quot;http://www.test.com/response\u0026quot;\n}\nIn XML, the extraParameters parameter is set as: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;NETWORK_CALLBACK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   For cash payments, extraParameters has a single element with the URL to which you must redirect your customer.\nIn JSON, the extraParameters parameter is: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;https://www.multicaja.cl/bdp/order.xhtml?id=123456789012345\u0026quot;\n}\nIn XML, the extraParameters parameter is: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;https://www.multicaja.cl/bdp/order.xhtml?id=123456789012345\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven days after the current date at 12:00 pm.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. You must set a response URL in the parameter NETWORK_CALLBACK_URL inside transaction.extraParameters; this URL redirects the user back to your page after they finish the online payment procedure. You must redirect the payer to the Klap webpage (fka as Multicaja) to let them perform the cash payment. This URL is found in the BANK_URL parameter in the response.  API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;NETWORK_CALLBACK_URL\u0026#34;: \u0026#34;http://domain.com/backup_cart/response.php\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MULTICAJA\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-18T20:00:03.105\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857794995, \u0026#34;transactionId\u0026#34;: \u0026#34;f468aa69-82e0-410e-9cc2-3cabba0f970d\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;462623325642199\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://apidev.mcdesaqa.cl/bdp/order.xhtml?id=462623325642199\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;NETWORK_CALLBACK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://domain.com/backup_cart/response.php\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MULTICAJA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-18T20:00:03.105\u0026lt;/expirationDate\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400432986\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;71a72319-f143-4359-8cb9-bc44a21d2b25\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;a0d9d7d6-000a-4777-af78-e33917a30fd8\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T12:22:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T17:42:53\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abbca6da54f4e4ef9eb37fb9cacf72fdcc52797f6a9ca20377bc59eb0d2706\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with debit and prepaid cards using WebPay Plus This method lets you process the bank debit and prepaid card payments of your customers. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As payments are made on the WebPay plus page, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method for Debit and prepaid cards. See the available Payment Methods for Chile. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CL for Chile. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. For payments through WebPay plus, this is the response page of your commerce.\nIn JSON, the extraParameters parameter is set as: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;RESPONSE_URL\u0026quot;: \u0026quot;http://www.test.com/response\u0026quot;\n}\nIn XML, the extraParameters parameter is set as: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt;\nhttp://www.test.com/response\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;URL_PAYMENT_REDIRECT\u0026quot;: \u0026quot;xxxx\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;xxxx\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  If you don\u0026rsquo;t send the RESPONSE_URL parameter in transaction.extraParameters, the API takes the value from the Response URL variable in your PayU Module (Settings \u0026gt; Technical configuration). When you process payments through WebPay plus, you must redirect the customer to the URL found in the URL_PAYMENT_REDIRECT extra parameter concatenated with the TRANSBANK_DIRECT_TOKEN extra parameter as follows: URL_PAYMENT_REDIRECT?token_ws=TRANSBANK_DIRECT_TOKEN. If the payment request is successful, the transaction has state PENDING and responseCode PENDING_PAYMENT_IN_ENTITY; this is because the payer is redirected to the selected bank to complete the payment. The response page must have the following variables:     Variable Description     transactionState State of the transaction.   reference_pol Reference code to identify a transaction in PayU.   TX_VALUE Transaction amount.   authorizationCode Authorization code of the transaction.   processingDate Transaction date.   cc_number Visible number of the card used in the transaction.    The variables above are sent via GET.\nAPI call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512325\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;75ae7a887dfd759894c57eb1bc5a4288\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;CLP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;RM\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Talagante\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;RESPONSE_URL\u0026#34;: \u0026#34;http://www.test.com/response\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;TRANSBANK_DEBIT\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400432466, \u0026#34;transactionId\u0026#34;: \u0026#34;e2609a58-97d6-4a65-8638-1b03da03cc7a\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;5f0cac61-c023-4fa3-bf27-ff888fa36c3c\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1623856942412, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;EXPIRATION_DATE\u0026#34;: 1623875847781, \u0026#34;URL_PAYMENT_REDIRECT\u0026#34;: \u0026#34;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026#34;, \u0026#34;TRANSBANK_DIRECT_TOKEN\u0026#34;: \u0026#34;01ab155164939156988ee462d09ed5613b7efd297fe97b099c684ec8599c5cc5\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512325\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-15T20:35:48.975Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;75ae7a887dfd759894c57eb1bc5a4288\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;CLP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;RM\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Talagante\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://www.test.com/response\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;TRANSBANK_DEBIT\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CL\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400432986\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;71a72319-f143-4359-8cb9-bc44a21d2b25\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;a0d9d7d6-000a-4777-af78-e33917a30fd8\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-16T12:22:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-16T17:42:53\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_REDIRECT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://webpay3gint.transbank.cl/webpayserver/initTransaction\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSBANK_DIRECT_TOKEN\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;01abbca6da54f4e4ef9eb37fb9cacf72fdcc52797f6a9ca20377bc59eb0d2706\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the examples of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;716\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;712\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CL\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;716\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;712\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DINERS\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CL\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description Mandatory     code Alphanumeric  The response code of the transaction. Yes   error Alphanumeric Max:2048 The error message associated if an error ocurred. Yes   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred. Yes     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Chile, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/payments-api-chile.html","title":"Payments API - Chile"},{"body":"To integrate with Payments API Colombia, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit card Submit transaction with cash or Bank reference Submit transaction with bank transfer (PSE) Bank List - PSE Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Colombia, you can perform one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order and its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction. This amount cannot include decimals. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (IVA - Impuesto al Valor Agregado). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the IVA.\nIf this parameter is not set, PayU applies the current tax value (19%).\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the IVA.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card; moreover, it is mandatory to also send the parameter transaction.creditCard.expirationDate.\nFor more information, refer to Tokenization API. No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. This parameter is mandatory when the payment is performed using a tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter transaction.creditCard.name. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction. For Colombia, set AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods for Colombia. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CO for Colombia. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No   transaction \u0026gt; threeDomainSecure   This object contains the information of 3DS 2.0. No   transaction \u0026gt; threeDomainSecure \u0026gt; embedded Boolean  Set true if you want to use and embedded MPI for the Authorization process. By default, this value is set as false. No   transaction \u0026gt; threeDomainSecure \u0026gt; eci Number Max:2 Electronic Commerce Indicator.\nValue returned by the directory servers showing the authentication attempt.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.xid has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; cavv Alphanumeric Max:28 Cardholder Authentication Verification Value.\nCode of the cryptogram used in the transaction authentication in Base64.\nDepending on the specific ECI codes established by the process network, this value may be optional. No   transaction \u0026gt; threeDomainSecure \u0026gt; xid Alphanumeric Max:28 Transaction ID sent by the MPI in Base64.\nThis parameter is mandatory when transaction.threeDomainSecure.embedded is false and transaction.threeDomainSecure.eci has been set. No   transaction \u0026gt; threeDomainSecure \u0026gt; directoryServerTransactionId Alphanumeric Max:36 Transaction ID generated by the Directory Server during the Authentication. No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. The variable transaction.threeDomainSecure does not replace the card information nor any of the mandatory fields of the transaction. This object is additional and not mandatory. The variable transaction.threeDomainSecure corresponds to a Pass Through scenario where the commerce performs the authentication by their own. For Crédito Fácil Codensa card, the number of installments supported are 1 to 12, 18, 24, 36 and 48. For Crédito Fácil Codensa card, the payer can choose any of the following document types for the variable transaction.payer.dniType:     ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Customer´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    API call The following are the examples of the request and response of this payment method.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449660, \u0026#34;transactionId\u0026#34;: \u0026#34;aa2f50b2-62a8-42de-b3be-c6fe08ec712f\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;81\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;CRED - 666039677\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;123238\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Approved by the merchant\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624461913704, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;CREDIBANCO\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449666\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;c29d0543-810d-48c4-bd3e-163e935c2173\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;79\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;CRED - 666116683\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;787517\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Approved administrative transaction\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T10:26:28\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;CREDIBANCO\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash or Bank reference This method lets you process the payments of your customers in cash or using a Bank reference. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like the followings.\nPayments in cash Payments with Bank reference Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (IVA - Impuesto al Valor Agregado). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the IVA.\nIf this parameter is not set, PayU applies the current tax value (19%).\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the IVA.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash and Bank reference payments are performed in physical offices, la única transacción disponible es AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash or Bank Reference. See the available Payment Methods for Colombia. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CO for Colombia. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. For BALOTO and EFECTY, the confirmation of the payment takes 15 minutes. For BANK_REFERENCED and OTHERS_CASH (Su Red), the confirmation is online. The minimum and maximum values for BALOTO, EFECTY, and OTHERS_CASH (Su Red) are:  BALOTO \u0026gt; Min: $3.000 COP - Max: $1.000.000 COP EFECTY \u0026gt; Min: $20.000 COP - Max: $6.000.000 COP OTHERS_CASH (Su Red) \u0026gt; Min: $1.000 COP - Max: $4.000.000 COP   The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  EXPIRATION_DATE: maximum term for the payer to perform the payment. REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. BANCO_BOGOTA_SERVICE_CODE: payment code for Banco de Bogotá. Available when using BANK_REFERENCED. BANK_REFERENCED_NAME: Reference name for Bancolombia. Available when using BANK_REFERENCED. BANCOLOMBIA_SERVICE_CODE: payment code for Bancolombia. Available when using BANK_REFERENCED.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;EFECTY\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-24T20:58:35.804\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449740, \u0026#34;transactionId\u0026#34;: \u0026#34;f3531b6a-3e30-4a8b-8a69-d4a5bd2a3377\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;f3531b6a-3e30-4a8b-8a69-d4a5bd2a3377\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624463917065, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;EXPIRATION_DATE\u0026#34;: 1624568315804, \u0026#34;REFERENCE\u0026#34;: 1400449740, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400449740Yf3531b6a3e304a8Y30f3f7b4598eb19\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/v2?vid=1400449740Yf3531b6a3e304a8Y30f3f7b4598eb19\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;EFECTY\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;EFECTY\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-24T20:58:35.804\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449797\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;0b41f4d0-4486-4acf-ab5e-d757e35d994d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;0b41f4d0-4486-4acf-ab5e-d757e35d994d\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T11:20:03\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-30T23:59:59\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;1400449797\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400449797Y0b41f4d044864acY3e5f14fc8ef00e8\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/v2?vid=1400449797Y0b41f4d044864acY3e5f14fc8ef00e8\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;EFECTY\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank transfer (PSE) This method lets you process the bank transfer payments of your customers. In Colombia, bank transfers are made through PSE, to perform an integration with this payment method, you need to create a Payment form following these steps:\n Include a PSE button making clear that your customer will use Proveedor de Servicios Electrónicos PSE.   You can use the following names in Spanish:  Débito desde cuenta corriente/ahorros Débito bancario PSE PSE   Do no use any of the following names  Transferencia bancaria Débito de cuenta Tarjeta débito     Query the available bank list to show them to the payer. To query the bank list, refer to this method.\nYou must update the the bank list in your system once a day.\n  Show the list of banks as displayed below:\n  When the payer selects a bank, you must send the parameter pseCode of the selection in the extra parameter FINANCIAL_INSTITUTION_CODE in the request.\nShow a list to let the payer choose whether they are a Natural (N) or Legal (J) person. Depending on what the payer choose, you must send the value in the extra parameter USER_TYPE in the request. The list must be displayed as follows:  Show a list to let the payer choose their identification type. You must send the ISO code of the value selected in the extra parameter PSE_REFERENCE2 in the request. The list must be displayed as follows:  The list of available documents is:\n   ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Customer´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    You must send the payer identification number in the extra parameter PSE_REFERENCE3 in the request.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As these payments are performed in PSE webpage, la única transacción disponible es AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in Bank transfer. See the available Payment Methods for Colombia. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set CO for Colombia. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. For Bank transfer payments, this is the response page of your commerce.\nIn JSON, the extraParameters parameter is set as: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;PSE_REFERENCE3\u0026quot;: \u0026quot;123456789\u0026quot;\n}\nIn XML, the extraParameters parameter is set as: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;PSE_REFERENCE3\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;123456789\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_URL\u0026quot;: \u0026quot;xxxx\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;xxxx\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  To test PSE bank transfers in the PayU Sandbox environment, see the PSE Test Guide (PDF). All the payment process values must be formatted in thousands (i.e., 1,200.00 or 1,200) without exception. If the payment request is successful, the transaction has state PENDING and responseCode PENDING_TRANSACTION_CONFIRMATION; this is because the payer is redirected to the selected bank to complete the payment; you must redirect the payer to the URL returned in the extra parameter BANK_URL. The URL returned in the extra parameter BANK_URL is configured in the PayU Module and must show the following information:\nParameters starting with $ symbol are sent via GET. Once the client clicks the Pay button, this must be disabled to avoid sending a new request over the same payment. It is recommended to display a wait message while your customer is redirected. Do not show the bank site in containers (frames, panel, iframes, etc). The payment process must be fluid. Furthermore, avoid opening the bank site in a new tab nor a new browser window. If you need to use a new tab or window, block the origin page to avoid sending a new request over the same payment. You must add in the response page the options to retry the payment, finish the transaction and print the receipt. The status displayed in the response page can be any of the following:     polTransactionState polResponseCode State     4 1 Approved transaction   6 5 Failed transaction   6 4 Rejected transaction   12 or 14 9994 or 25 Pending transaction, please check if the debit was made in the bank.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512321\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;1d6c33aed575c4974ad5c0be7c6a1c87\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 65000, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 10378, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 54622, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Cr 23 No. 53-50\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogotá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogotá D.C.\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;RESPONSE_URL\u0026#34;: \u0026#34;http://www.payu.com/response\u0026#34;, \u0026#34;PSE_REFERENCE1\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;FINANCIAL_INSTITUTION_CODE\u0026#34;: \u0026#34;1022\u0026#34;, \u0026#34;USER_TYPE\u0026#34;: \u0026#34;N\u0026#34;, \u0026#34;PSE_REFERENCE2\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;PSE_REFERENCE3\u0026#34;: \u0026#34;123456789\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400449959, \u0026#34;transactionId\u0026#34;: \u0026#34;4d49e544-e23f-474e-92b1-59357e0e85e8\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;2204682\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624471332753, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;TRANSACTION_CYCLE\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;BANK_URL\u0026#34;: \u0026#34;https://sandbox.api.payulatam.com/payments-api/pse-caller?enc=aHR0cHM6Ly9yZWdpc3Ryby5kZXNhcnJvbGxvLnBzZS5jb20uY28vUFNFVXNlclJlZ2lzdGVyL1N0YXJ0VHJhbnNhY3Rpb24uYXNweD9lbmM9dG5QY0pITUtsU25tUnBITThmQWJ1NHVWTmt6YW92Q0tWR2g0b0IxbEpkOXNEeGlSU2E5cXl1Uk5TUW5mbkxSdiMjcGF5ZXJfdGVzdEB0ZXN0LmNvbSMjMTIzNDU2Nzg5IyNDQw==\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-23T19:59:43.229Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;1d6c33aed575c4974ad5c0be7c6a1c87\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;65000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;10378\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54622\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Cr 23 No. 53-50\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogotá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogotá D.C.\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;RESPONSE_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;http://www.payu.com/response\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE1\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;127.0.0.1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;FINANCIAL_INSTITUTION_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1022\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;USER_TYPE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;N\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE2\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CC\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PSE_REFERENCE3\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;123456789\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PSE\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400449974\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;6c99b11b-fe6f-4270-8c9a-dfc35b7c7e34\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;2204695\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-23T13:12:14\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TRANSACTION_CYCLE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_URL\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.api.payulatam.com/payments-api/pse-caller?enc=aHR0cHM6Ly9yZWdpc3Ryby5kZXNhcnJvbGxvLnBzZS5jb20uY28vUFNFVXNlclJlZ2lzdGVyL1N0YXJ0VHJhbnNhY3Rpb24uYXNweD9lbmM9dG5QY0pITUtsU25tUnBITThmQWJ1NHVWTmt6YW92Q0tWR2g0b0IxbEpkJTJmSGhQT0oyU2t4UnRmOEdLTk5tcGNYIyNwYXllcl90ZXN0QHRlc3QuY29tIyMxMjM0NTY3ODkjI0ND\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;PSE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Bank List - PSE This method returns a list of the banks available for payments using PSE.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_BANKS_LIST. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   bankListInformation   This object has the information of the query. Yes   bankListInformation \u0026gt; paymentMethod Alphanumeric  Set PSE. Yes   bankListInformation \u0026gt; paymentCountry Alphanumeric  Set CO. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   banks   List of the banks available in PSE.   banks \u0026gt; id Numeric  Internal bank identifier.   banks \u0026gt; description Alphanumeric  Bank name to be displayed in the list.   banks \u0026gt; pseCode Alphanumeric  Code to send in the extra parameter FINANCIAL_INSTITUTION_CODE of the payment request.     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_BANKS_LIST\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;test\u0026#34;: false, \u0026#34;bankListInformation\u0026#34;: { \u0026#34;paymentMethod\u0026#34;: \u0026#34;PSE\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;banks\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;34e6e912-a395-4d31-9599-9baa176c1a61\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A continuación seleccione su banco\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;0\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;033aec11-e068-4252-8043-237144be9233\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BAN.CO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1552\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a720cb4c-6549-4932-83be-6d72b3eb0016\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCAMIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1059\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d9280852-47a5-4e99-94ac-3d7648ba79a3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1040\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;ff216e8a-28ba-4bf6-9935-b94dfdfd96a0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1081\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5073154e-efd4-4870-9315-abb926e87519\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO AGRARIO QA DEFECTOS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1080\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;6e61a91d-58bf-46ec-aa09-1f44974dda7e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CAJA SOCIAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10322\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;e062711e-6bbd-4a13-819a-d60084f9c6fa\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CAJA SOCIAL DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1032\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a9b5cc17-b0ae-4708-9835-586a0bef95df\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COMERCIAL AVVILLAS S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1052\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c5c97dfe-6101-453f-bcd4-691f4b329a3c\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COOMEVA S.A. - BANCOOMEVA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1061\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7a2e8d04-e8c8-404b-8e49-d5d37c107a12\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO COOPERATIVO COOPCENTRAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1066\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;197fe0af-f658-4fe0-ad1b-952e174de549\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO CREDIFINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1058\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;b1de44f1-cede-4aca-9d3f-3313d5cc0c63\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DAVIVIENDA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1051\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7a10219e-04a7-4c31-b747-54ded27c7f07\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DAVIVIENDA Desarrollo\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10512\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;ed06f40e-a1b9-4e48-8851-bffb4cda0480\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE BOGOTA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1039\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4592a13b-6334-4fba-8402-9d006b599fa8\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE BOGOTA DESARROLLO 2013\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1001\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;55f59084-cd3b-47d2-a420-6442cdb9e4b1\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO DE OCCIDENTE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1023\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8e134fca-4fde-44e6-b012-55e8f2d338ca\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO FALABELLA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1062\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8eb03abf-5608-419b-8d2c-9d90b8ab6b88\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO GNB COLOMBIA (ANTES HSBC)\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1010\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;283e0068-749f-43f1-a2e5-340910f41af3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO GNB SUDAMERIS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1012\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8b0bf5e7-394d-4f7e-a467-e4d21d04c9fb\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO PICHINCHA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1060\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;beeb494a-4ce5-41b4-b497-0756f0b6a6d9\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO POPULAR\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1002\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a5a4b740-1644-4627-ae2a-41b13ffc7c5e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO PRODUCTOS POR SEPARADO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1203\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;47e747ef-c817-4be6-9eff-b6b16f50d001\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco PSE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1101\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;589939d7-06d1-4933-a101-8bb29b801d76\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO SANTANDER COLOMBIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1065\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;fcdaa98e-99ce-4e76-a504-1e053a05e773\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO SERFINANZA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1069\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;201608c6-81de-436f-967a-2ec7c212c100\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO TEQUENDAMA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1035\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a8f33ba3-0053-464a-afbe-9add7c63fbc3\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco union Colombia Credito\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1004\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5dfa1b2c-64bd-4e8c-9fad-585337cfd4ff\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO UNION COLOMBIANO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1022\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;56e306ef-6011-4f41-9640-b98449d6a6be\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCO UNION COLOMBIANO FD2\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1005\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;bc883c0d-3610-4a88-96ca-2e2baa1dd2e5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco Web Service ACH\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1055\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;4e97e580-fc92-47ea-af4f-7b3b3ddffff8\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Banco Web Service ACH WSE 3.0\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1055\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;931f6bfb-283e-4721-bb86-4a7484bfd28e\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA DATAPOWER\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10072\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1285de9c-8d47-49f7-b00a-e87882e2a3f9\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;10071\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;451f0e5f-5db4-4f55-a1fc-b38e06526e04\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANCOLOMBIA QA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1007\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;448e00ec-c479-497d-9a35-0dfbbf462f72\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BANKA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1077\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;5f3a7adb-b283-4ca3-bee9-741f1306a03d\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BBVA COLOMBIA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1013\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;cd4286fa-850a-4b34-96d1-f71d6a79f44a\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BBVA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1513\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;10e9b7b6-7a5f-4d5b-8d7f-4b2020f43f93\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CITIBANK COLOMBIA S.A.\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1009\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;77f0988f-cf45-4931-bbcd-984e07e0fc51\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COLTEFINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1370\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;48c81f6a-e0f1-4c1d-ab9b-9915726e3596\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CONFIAR COOPERATIVA FINANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1292\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;8694df26-5ccd-45c0-b5b7-2b995c47f81a\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COOPERATIVA FINANCIERA COTRAFA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1289\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1c222feb-2b58-408c-a495-ade06b6825c0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;COOPERATIVA FINANCIERA DE ANTIOQUIA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1283\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;70a18a09-38f2-4f62-aba6-9ad28c30c966\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;CREDIFIANCIERA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1558\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;3f8b3126-8aa3-4438-8a6c-1d544184f2d7\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DALE\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1097\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;a953078b-5e22-42ea-9301-954558e8f463\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DAVIPLATA\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1551\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;2ad780ba-a1e8-4cb9-9150-670429aae092\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;GIROS Y FINANZAS COMPAÑIA DE FINANCIAMIENTO S.A\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1303\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;c0bfb716-a098-40f6-84b5-1972a4846506\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;IRIS\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1637\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7e1efd88-4f88-4e21-a972-28b526b27da5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;ITAU\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1006\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;26c9a2df-6b4f-4309-9137-3692d9bb9f82\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MOVII S.A\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1801\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;d9b48a70-6068-4116-a345-154381e5d953\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;NEQUI CERTIFICACION\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1508\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;60199dc5-7d38-49c6-92a5-b839dc0087d2\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;prueba restriccion\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;9988\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;be467299-d90a-407e-86d3-01e30ade1e06\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Prueba Steve\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;121212\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;201acc05-4c4f-49dc-9be6-3261a6ce4a3c\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;RAPPIPAY\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1151\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;7602e001-6199-48bc-9ee3-466f8eb2e422\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SCOTIABANK COLPATRIA DESARROLLO\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1019\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;9bb638a0-4c3f-41d2-8811-f8cdd29b0db2\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SCOTIABANK COLPATRIA UAT\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1078\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;086547b5-313b-42c7-acef-93d0f76b1dd5\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;SEIVY – GM FINANCIAL\u0026#34;, \u0026#34;pseCode\u0026#34;: \u0026#34;1305\u0026#34; } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_BANKS_LIST\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;bankListInformation\u0026gt; \u0026lt;paymentMethod\u0026gt;PSE\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;/bankListInformation\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;bankListResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;banks\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;34e6e912-a395-4d31-9599-9baa176c1a61\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;A continuación seleccione su banco\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;0\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;033aec11-e068-4252-8043-237144be9233\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BAN.CO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1552\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a720cb4c-6549-4932-83be-6d72b3eb0016\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCAMIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1059\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;d9280852-47a5-4e99-94ac-3d7648ba79a3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1040\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;ff216e8a-28ba-4bf6-9935-b94dfdfd96a0\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1081\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5073154e-efd4-4870-9315-abb926e87519\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO AGRARIO QA DEFECTOS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1080\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;6e61a91d-58bf-46ec-aa09-1f44974dda7e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CAJA SOCIAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10322\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;e062711e-6bbd-4a13-819a-d60084f9c6fa\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CAJA SOCIAL DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1032\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a9b5cc17-b0ae-4708-9835-586a0bef95df\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COMERCIAL AVVILLAS S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1052\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;c5c97dfe-6101-453f-bcd4-691f4b329a3c\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COOMEVA S.A. - BANCOOMEVA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1061\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7a2e8d04-e8c8-404b-8e49-d5d37c107a12\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO COOPERATIVO COOPCENTRAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1066\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;197fe0af-f658-4fe0-ad1b-952e174de549\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO CREDIFINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1058\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;b1de44f1-cede-4aca-9d3f-3313d5cc0c63\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DAVIVIENDA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1051\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7a10219e-04a7-4c31-b747-54ded27c7f07\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DAVIVIENDA Desarrollo\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10512\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;ed06f40e-a1b9-4e48-8851-bffb4cda0480\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE BOGOTA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1039\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;4592a13b-6334-4fba-8402-9d006b599fa8\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE BOGOTA DESARROLLO 2013\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1001\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;55f59084-cd3b-47d2-a420-6442cdb9e4b1\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO DE OCCIDENTE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1023\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8e134fca-4fde-44e6-b012-55e8f2d338ca\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO FALABELLA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1062\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8eb03abf-5608-419b-8d2c-9d90b8ab6b88\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO GNB COLOMBIA (ANTES HSBC)\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1010\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;283e0068-749f-43f1-a2e5-340910f41af3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO GNB SUDAMERIS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1012\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8b0bf5e7-394d-4f7e-a467-e4d21d04c9fb\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO PICHINCHA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1060\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;beeb494a-4ce5-41b4-b497-0756f0b6a6d9\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO POPULAR\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1002\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a5a4b740-1644-4627-ae2a-41b13ffc7c5e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO PRODUCTOS POR SEPARADO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1203\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;47e747ef-c817-4be6-9eff-b6b16f50d001\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco PSE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1101\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;589939d7-06d1-4933-a101-8bb29b801d76\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO SANTANDER COLOMBIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1065\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;fcdaa98e-99ce-4e76-a504-1e053a05e773\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO SERFINANZA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1069\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;201608c6-81de-436f-967a-2ec7c212c100\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO TEQUENDAMA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1035\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a8f33ba3-0053-464a-afbe-9add7c63fbc3\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco union Colombia Credito\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1004\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5dfa1b2c-64bd-4e8c-9fad-585337cfd4ff\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO UNION COLOMBIANO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1022\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;56e306ef-6011-4f41-9640-b98449d6a6be\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCO UNION COLOMBIANO FD2\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1005\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;bc883c0d-3610-4a88-96ca-2e2baa1dd2e5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco Web Service ACH\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1055\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;4e97e580-fc92-47ea-af4f-7b3b3ddffff8\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Banco Web Service ACH WSE 3.0\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1055\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;931f6bfb-283e-4721-bb86-4a7484bfd28e\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA DATAPOWER\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10072\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;1285de9c-8d47-49f7-b00a-e87882e2a3f9\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;10071\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;451f0e5f-5db4-4f55-a1fc-b38e06526e04\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANCOLOMBIA QA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1007\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;448e00ec-c479-497d-9a35-0dfbbf462f72\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BANKA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1077\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;5f3a7adb-b283-4ca3-bee9-741f1306a03d\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BBVA COLOMBIA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1013\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;cd4286fa-850a-4b34-96d1-f71d6a79f44a\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BBVA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1513\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;10e9b7b6-7a5f-4d5b-8d7f-4b2020f43f93\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CITIBANK COLOMBIA S.A.\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1009\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;77f0988f-cf45-4931-bbcd-984e07e0fc51\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COLTEFINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1370\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;48c81f6a-e0f1-4c1d-ab9b-9915726e3596\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CONFIAR COOPERATIVA FINANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1292\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;8694df26-5ccd-45c0-b5b7-2b995c47f81a\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COOPERATIVA FINANCIERA COTRAFA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1289\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;1c222feb-2b58-408c-a495-ade06b6825c0\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;COOPERATIVA FINANCIERA DE ANTIOQUIA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1283\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;70a18a09-38f2-4f62-aba6-9ad28c30c966\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;CREDIFIANCIERA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1558\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;3f8b3126-8aa3-4438-8a6c-1d544184f2d7\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DALE\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1097\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;a953078b-5e22-42ea-9301-954558e8f463\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DAVIPLATA\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1551\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;2ad780ba-a1e8-4cb9-9150-670429aae092\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;GIROS Y FINANZAS COMPAÑIA DE FINANCIAMIENTO S.A\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1303\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;c0bfb716-a098-40f6-84b5-1972a4846506\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;IRIS\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1637\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7e1efd88-4f88-4e21-a972-28b526b27da5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;ITAU\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1006\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;26c9a2df-6b4f-4309-9137-3692d9bb9f82\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MOVII S.A\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1801\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;d9b48a70-6068-4116-a345-154381e5d953\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;NEQUI CERTIFICACION\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1508\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;60199dc5-7d38-49c6-92a5-b839dc0087d2\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;prueba restriccion\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;9988\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;be467299-d90a-407e-86d3-01e30ade1e06\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;Prueba Steve\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;121212\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;201acc05-4c4f-49dc-9be6-3261a6ce4a3c\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;RAPPIPAY\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1151\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;7602e001-6199-48bc-9ee3-466f8eb2e422\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SCOTIABANK COLPATRIA DESARROLLO\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1019\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;9bb638a0-4c3f-41d2-8811-f8cdd29b0db2\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SCOTIABANK COLPATRIA UAT\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1078\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;bank\u0026gt; \u0026lt;id\u0026gt;086547b5-313b-42c7-acef-93d0f76b1dd5\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;SEIVY – GM FINANCIAL\u0026lt;/description\u0026gt; \u0026lt;pseCode\u0026gt;1305\u0026lt;/pseCode\u0026gt; \u0026lt;/bank\u0026gt; \u0026lt;/banks\u0026gt; \u0026lt;/bankListResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the examples of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;35\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;BALOTO\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;co\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;35\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;BALOTO\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;10\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Colombia, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/payments-api-colombia.html","title":"Payments API - Colombia"},{"body":"To integrate with Payments API Mexico, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit cards Submit transaction with cash Submit transaction with bank transfer Submit transaction with bank reference Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit card This method lets you process the payments performed by your customers using credit or debit cards. For Mexico, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Two-step flows are only supported for Mastercard and Visa.  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. Due to Tax regulations, it is mandatory to send the parameters payer.billingAddress.postalCode and payer.birthdate. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter transaction.creditCard.name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No    monthsWithoutInterest | | | Information when paying the purchase using Months Without Interests.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/en/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No | | transaction  monthsWithoutInterest  months | Number | Max:2 | Number of Months Without Interests for the purchase. The available values are 3, 6, 9, or 12.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/en/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No | | transaction  monthsWithoutInterest  bank | Alphanumeric | Max:255 | Issuing bank of the credit card used to pay the purchase using Months Without Interests.\nThis parameter is mandatory when you want to use [Months Without Interests (Meses Sin Intereses - MSI) feature](/en/docs/services/promotions.html#months-without-interest-msi---meses-sin-intereses). | No |--   Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  Two-step flows are only available for Mastercard and Visa. For payments with Promotions, send the extra parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. For payments with Months Without Interests (Meses Sin Intereses - MSI), send the extra parameter INSTALLMENTS_NUMBER with the number of months. Refer to MSI for more information. The available banks for MSI are: BANAMEX, BANCO REGIONAL DE MONTERREY S.A, BANCOPPEL, BANCO AZTECA, SCOTIABANK, HSBC, INBURSA, BANCA MIFEL SA, BANCO MULTIVA, BAJIO, CI BANCO, Afirme, Banregio, Banjercito, Banorte, Famsa, Invex, Premium Card Liverpool, Santander, and Bancomer. When using MSI, promotions or apply installments, always display the phrase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; during the payment process. When installments applied (fees assumed by the payer), display the original amount of the transaction, the total amount after the fees, the number of installments, and the amount per installment including the extra fee. Promotions feature is only available for one-step flows. For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.  Authorization Use this method to perform the Authorization step of a two-step flow using Mastercard or Visa. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446409, \u0026#34;transactionId\u0026#34;: \u0026#34;596ccd26-41a3-40b0-a241-262b3331aedc\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624383236617\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624365236861, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624987980000, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446580\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;f03be7ef-e82a-41e3-9a3c-5451c4d8ab99\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624389497244\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:18:17\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-29T14:18:00\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow for Mastercard and Visa. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 30 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. You can perform partial captures over an authorized amount as long as the partial capture amount does not exceed the authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400446409\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;596ccd26-41a3-40b0-a241-262b3331aedc\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446409, \u0026#34;transactionId\u0026#34;: \u0026#34;434312fd-90c6-48e0-9c73-dd3c2bb40d27\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624389983478\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624371983901, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400446409\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;596ccd26-41a3-40b0-a241-262b3331aedc\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446580\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;febf383f-add7-4986-82a2-941f0f4e9b45\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624390154273\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:29:14\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400446667, \u0026#34;transactionId\u0026#34;: \u0026#34;868e169b-1857-4c52-a80d-e4b6d228a74f\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;458250371149\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;MOCK-BTE-1624391396880\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624373397257, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANORTE\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4850110000000000\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400446670\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;a32da7ad-fb55-41ff-863d-ee49361334cb\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;458250371149\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;MOCK-BTE-1624391456868\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T09:50:57\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANORTE\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;cardType\u0026gt;CREDIT\u0026lt;/cardType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payment method is OXXO, the confirmation of the payment will be one day after the payment. For other cash payment methods, the confirmation is online. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  BANK_REFERENCED_CODE: payment type. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. PAYMENT_WAY_ID: network payment of the payment type.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;SEVEN_ELEVEN\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T21:02:14.593\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857806658, \u0026#34;transactionId\u0026#34;: \u0026#34;c7b15feb-e8e6-4330-a04b-2a4c0cc2b776\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CASH\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624482134593, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;00012345678900008578066580000000100000202106238\u0026#34;, \u0026#34;REFERENCE\u0026#34;: 857806658, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857806658Yc7b15febe8e6433Y2568534adcdf6da\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857806658Yc7b15febe8e6433Y2568534adcdf6da\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;1\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;SEVEN_ELEVEN\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;SEVEN_ELEVEN\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T21:02:14.593\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857806714\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;194e0320-2711-49d6-9d58-493dd0a59694\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CASH\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-23T16:23:05\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;00012345678900008578067140000000100000202106230\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857806714\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857806714Y194e0320271149dY36e0ad0392e7f5f\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857806714Y194e0320271149dY36e0ad0392e7f5f\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;SEVEN_ELEVEN\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. When using this payment method, the payer performs a bank transfer from their bank account to a PayU\u0026rsquo;s CLABE account.\nTo integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in Bank transfer. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;SPEI_CLABE_ACCOUNT_NUMBER\u0026quot;: \u0026quot;646180132800000009\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payer selects this payment method, PayU creates an order in in progress state and a transaction in PENDING state. To perform the payment, the payer must log in the virtual branch of their bank (The bank must appear in the list of SPEI available banks). First, the payer must register the PayU CLABE account in their bank branch. Once the PayU CLABE account is enabled to perform transfers, the payer must provide the reference returned by PayU in the parameter trazabilityCode and the amount as returned by PayU in their virtual branch. In the response body, you can find the needed variables to generate the payment receipt (voucher) and the URL of the receipt generated by PayU in HTML and PDF format. If you want to generate the voucher, use the following variables:  trazabilityCode: unique identifier of maximum 7 digits long; corresponds to the payment reference that the payer must provide in the virtual branch. It is mandatory to enter the same value in the reference field of the bank branch so the payment can be successful. value: the payer must enter as transfer amount the same value informed in the request, so the payment can be successful. SPEI_CLABE_ACCOUNT_NUMBER: is the PayU\u0026rsquo;s interbank CLABE, namely, the account where the amount will be transferred. The payer must register this CLABE as beneficiary in their bank branch before performing the transfer. SPEI_BANK_NAME: name associated with the PayU CLABE account. The beneficiary account is associated with the STP bank and it\u0026rsquo;s always the same bank for PayU.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;SPEI\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:30:21.231\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400447116, \u0026#34;transactionId\u0026#34;: \u0026#34;16d49526-8d29-4bec-8c56-478491ddb327\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;25914\u0026#34;, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_PAYMENT_IN_ENTITY\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624383022721, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;ELECTRONIC_PAYMENT\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: \u0026#34;2021-06-23 23:59:59\u0026#34;, \u0026#34;SPEI_BANK_NAME\u0026#34;: \u0026#34;STP\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400447116Y16d495268d294beY2063d953fc5dab2\u0026#34;, \u0026#34;SPEI_CLABE_ACCOUNT_NUMBER\u0026#34;: \u0026#34;646180132800000009\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/V2?vid=1400447116Y16d495268d294beY2063d953fc5dab2\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;3\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;STP\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;SPEI\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:30:21.231\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400447132\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;62a8e1e4-3787-494b-93ca-a8ddb658a754\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;25915\u0026lt;/trazabilityCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_PAYMENT_IN_ENTITY\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_PAYMENT_IN_ENTITY\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-22T12:39:50\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;ELECTRONIC_PAYMENT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;2021-06-23 23:59:59\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;SPEI_BANK_NAME\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;STP\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=1400447132Y62a8e1e43787494Yef7e6cd39d91243\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app/V2?vid=1400447132Y62a8e1e43787494Yef7e6cd39d91243\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;3\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;STP\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with bank reference This method lets you process payments of your customers using bank references. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. Format YYYY-MM-DD. Yes   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As payments with Bank reference are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Bank reference Payment Method. See the available Payment Methods for Mexico. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set MX for Mexico. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_PAYMENT_IN_ENTITY.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;SPEI_CLABE_ACCOUNT_NUMBER\u0026quot;: \u0026quot;646180132800000009\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;646180132800000009\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;   transactionResponse \u0026gt; additionalInfo   Additional information associated with the response. This object follows the same structure than transactionResponse.extraParameters.     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects bank reference payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512324\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;payment test\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;6fd48e7150c652833866799a3fbf87bb\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 1000, \u0026#34;currency\u0026#34;: \u0026#34;MXN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;birthdate\u0026#34;: \u0026#34;1994-06-21\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Domingo Diez 1589\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Cuernavaca\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Morelos\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;BANK_REFERENCED\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-23T22:46:20.551\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857807112, \u0026#34;transactionId\u0026#34;: \u0026#34;6f8b46f4-9c4c-4523-9d80-ab51c684a44d\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 857807112, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857807112Y6f8b46f49c4c452Y6a8c3d9204ae7c3\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624488380551, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;85780711227811246\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857807112Y6f8b46f49c4c452Y6a8c3d9204ae7c3\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;paymentNetwork\u0026#34;: \u0026#34;BANCOMER\u0026#34;, \u0026#34;rejectionType\u0026#34;: \u0026#34;NONE\u0026#34;, \u0026#34;responseNetworkMessage\u0026#34;: null, \u0026#34;travelAgencyAuthorizationCode\u0026#34;: null, \u0026#34;cardType\u0026#34;: null, \u0026#34;transactionType\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34; } } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512324\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-22T17:33:42.775Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;payment test\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;6fd48e7150c652833866799a3fbf87bb\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;1000\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;MXN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Domingo Diez 1589\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Cuernavaca\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Morelos\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;birthdate\u0026gt;1994-06-21\u0026lt;/birthdate\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;BANK_REFERENCED\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-23T22:46:20.551\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;MX\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857807162\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;2b7547fd-a6e8-4bcc-8f82-883775d85380\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857807162\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857807162Y2b7547fda6e84bcYa83c5dd72117110\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-23T17:54:58\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;85780716227811234\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857807162Y2b7547fda6e84bcYa83c5dd72117110\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;paymentNetwork\u0026gt;BANCOMER\u0026lt;/paymentNetwork\u0026gt; \u0026lt;rejectionType\u0026gt;NONE\u0026lt;/rejectionType\u0026gt; \u0026lt;transactionType\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/transactionType\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description Mandatory     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS. Yes   error Alphanumeric Max:2048 The error message associated when the response code is ERROR. Yes   paymentMethods   List of the payment methods. Yes   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name. Yes   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country. Yes     API call The following are the bodies of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;299\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;OTHERS_CASH_MX\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;139\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;MX\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;299\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;OTHERS_CASH_MX\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;139\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;AMEX\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;MX\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Mexico, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/payments-api-mexico.html","title":"Payments API - Mexico"},{"body":"To integrate with Payments API Panama, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit card Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Panama, you can perform one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction. This amount cannot include decimals. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API Yes   transaction \u0026gt; creditCard   Credit card information. This object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter transaction.creditCard.name. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction. For Panama, set AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods for Panama. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set PA for Panama. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode.  API call The following are the examples of the request and response of this payment method.\n JSON XML   Request example:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512326\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T21:28:14.962Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;782997f7981288b6ea411709188ff926\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Via Jose A. Arango, Juan Diaz\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Panamá\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2030/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857804178, \u0026#34;transactionId\u0026#34;: \u0026#34;299f50c4-d7d9-4f24-a4fc-1454ff26d5c4\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624311390098, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512326\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T21:28:14.962Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;782997f7981288b6ea411709188ff926\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;USD\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Via Jose A. Arango, Juan Diaz\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Panamá\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Panamá\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4037997623271984\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2030/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PA\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857804176\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;69de6de1-9e18-45ae-8429-866bb3b47822\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T16:35:06\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the examples of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;450\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;451\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PA\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;450\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;451\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;MASTERCARD\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PA\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PING. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     API call The following are the examples of the request and response of this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Panama, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/payments-api-panama.html","title":"Payments API - Panama"},{"body":"To integrate with Payments API Peru, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Payments API includes the following methods:\n Submit transaction with credit or debit cards Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use one of the following options:\n Navigate to the the URL set in the transaction.notifyUrl variable or the Confirmation URL option located in the PayU Module in Settings \u0026gt; Technical configuration. Use the Queries API or SDK.   Submit transaction with credit or debit cards This method lets you process the payments performed by your customers using credit or debit cards. For Peru, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; creditCardTokenId   Include this parameter when the transaction is done using a tokenized card replacing the information of the credit card. For more information, refer to Tokenization API No   transaction \u0026gt; creditCard   Credit card information. If you process using debit card, do not send this parameter.\nThis object and its parameters are mandatory when the payment is performed using not tokenized credit card. No   transaction \u0026gt; creditCard \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. No   transaction \u0026gt; creditCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Credit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; creditCard \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. No   transaction \u0026gt; creditCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. No   transaction \u0026gt; creditCard \u0026gt; processWithoutCvv2 Boolean Max:255 Allows you to process transactions without including the credit card security code. Your commerce requires PayU\u0026rsquo;s authorization before using this feature. No   transaction \u0026gt; debitCard   Debit card information. This object and its parameters are mandatory when the payment is performed using debit card. No   transaction \u0026gt; debitCard \u0026gt; number Alphanumeric Min:13 Max:20 Debit card number. No   transaction \u0026gt; debitCard \u0026gt; securityCode Alphanumeric Min:1 Max:4 Debit card security code (CVC2, CVV2, CID). No   transaction \u0026gt; debitCard \u0026gt; expirationDate Alphanumeric 7 Debit card expiration date. Format YYYY/MM. No   transaction \u0026gt; debitCard \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the debit card. No   transaction \u0026gt; payer   Payer information. No   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. No   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer which must meet the name sent in the parameter transaction.creditCard.name for credit card payments. No   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Buyer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Buyer\u0026rsquo;s phone number. No   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. No   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nAUTHORIZATIONCAPTUREAUTHORIZATION_AND_CAPTURE for one-step flows. Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit or Debit card Payment Method. See the available Payment Methods for Peru. Yes   transaction \u0026gt; paymentCountry Alphanumeric 2 Set PE for Peru. Yes   transaction \u0026gt; deviceSessionId Alphanumeric Max:255 Session identifier of the device where the customer performs the transaction. For more information, refer to this topic. Yes   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes   transaction \u0026gt; cookie Alphanumeric Max:255 Cookie stored by the device where the customer performs the transaction. Yes   transaction \u0026gt; userAgent Alphanumeric Max:1024 The User agent of the browser where the customer performs the transaction. Yes   transaction \u0026gt; extraParameters   Additional parameters or data associated with the request. The maximum size of each extraParameters name is 64 characters.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;INSTALLMENTS_NUMBER\u0026quot;: 1\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt; No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response. In JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;BANK_REFERENCED_CODE\u0026quot;: \u0026quot;CREDIT\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt;\n\u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  For payments with credit card tokens, include the parameters transaction.creditCardTokenId and transaction.creditCard.securityCode (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization API. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, send in the request the variable creditCard.processWithoutCvv2 as true and remove the variable creditCard.securityCode. In Peru, you can select 0 or 2 to 36 installments when paying with credit card. If you select one (1) installment, PayU sends zero (0) as default value.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443216, \u0026#34;transactionId\u0026#34;: \u0026#34;eebf01c3-7531-4952-a8e8-647a9eebac95\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624275552379, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443244\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;62cb2c6a-a9d5-4438-a767-7be501f0973d\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T06:47:21\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n You can perform partial captures over an authorized amount. To do this, you need to send in the request the parameter transaction.order.additionalValues.TX_VALUE with its value (as sent during the Authorization) and set PARTIAL_CAPTURE for transaction.type. For partial captures, the minimum value to capture can be 10% lower than the amount authorized. For partial captures, the payment networks release the no captured value at 2-10 days for local cards and 28 days for foreign cards.  The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400443216\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;eebf01c3-7531-4952-a8e8-647a9eebac95\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443382, \u0026#34;transactionId\u0026#34;: \u0026#34;e82d47b3-72cf-42f0-ae30-3eeb42575cc7\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;10140044338210c\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624279912864, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400443382\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;CAPTURE\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;10ccdb41-3fa8-4961-b6c0-88d74f737d4e\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443382\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;e82d47b3-72cf-42f0-ae30-3eeb42575cc7\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;00\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;10140044338210c\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;APPROVED\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APPROVED\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T07:51:52\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;creditCard\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;4097440000000004\u0026#34;, \u0026#34;securityCode\u0026#34;: \u0026#34;321\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2022/12\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: 1 }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400443595, \u0026#34;transactionId\u0026#34;: \u0026#34;acd8a1c6-fb44-497f-8fa5-de6136be4562\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624286793995, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;number\u0026gt;4097440000000004\u0026lt;/number\u0026gt; \u0026lt;securityCode\u0026gt;777\u0026lt;/securityCode\u0026gt; \u0026lt;expirationDate\u0026gt;2022/12\u0026lt;/expirationDate\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400443759\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;d7af220a-d427-486f-b35d-c363e12430e2\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-21T10:49:30\u0026lt;/operationDate\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; accountId Number  Identifier of your account. Yes   transaction \u0026gt; order \u0026gt; referenceCode Alphanumeric Min:1 Max:255 Represents the identifier of the order in your system. Yes   transaction \u0026gt; order \u0026gt; description Alphanumeric Min:1 Max:255 Description of the order. Yes   transaction \u0026gt; order \u0026gt; language Alphanumeric 2 Language used in emails sent to the buyer and the seller. Yes   transaction \u0026gt; order \u0026gt; notifyUrl Alphanumeric Max:2048 Confirmation URL of the order. No   transaction \u0026gt; order \u0026gt; partnerId Alphanumeric Max:255 Partner ID in PayU. No   transaction \u0026gt; order \u0026gt; signature Alphanumeric Max:255 The signature associated to the form. For more information refer Authentication signature. Yes   transaction \u0026gt; order \u0026gt; shippingAddress   Shipping address. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:100 Address Line 1. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; street2 Alphanumeric Max:100 Address Line 2. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Address city. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Address State. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Address country. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; postalCode Alphanumeric Max:8 Address Zip code. No   transaction \u0026gt; order \u0026gt; shippingAddress \u0026gt; phone Alphanumeric Max:11 Phone number associated to the address. No   transaction \u0026gt; order \u0026gt; buyer   Buyer information. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; merchantBuyerId Alphanumeric Max:100 Buyer ID in your system. No   transaction \u0026gt; order \u0026gt; buyer \u0026gt; fullName Alphanumeric Max:150 Full name of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; emailAddress Alphanumeric Max:255 E-mail of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; contactPhone Alphanumeric Max:20 Phone number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress Alphanumeric  Shipping address of the buyer. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; street1 Alphanumeric Max:150 Buyer\u0026rsquo;s shipping address Line 1. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; city Alphanumeric Max:50 Buyer\u0026rsquo;s shipping address city. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; state Alphanumeric Max:40 Buyer\u0026rsquo;s shipping address state. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; country Alphanumeric 2 Buyer\u0026rsquo;s shipping address country in format ISO 3166 alpha-2. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; postalCode Number Max:20 Buyer\u0026rsquo;s shipping address zip code. Yes   transaction \u0026gt; order \u0026gt; buyer \u0026gt; shippingAddress \u0026gt; phone Number Max:20 Buyer\u0026rsquo;s shipping address phone number. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt;  64 Amount of the order or its associated values. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19, 2 Specifies the amount of the transaction, this value may have two decimal digits (Ex. 10000.00 or 10000). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX Alphanumeric 64 Amount of the Value Added Tax (VAT). Yes   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; value Number 19, 2 Specifies the amount of the VAT. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE Alphanumeric 64 Base value to calculate the VAT.\nIf the amount does not have IVA, send 0.\nThis value may have two decimal digits. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; value Number 19, 2 Specifies the base amount of the transaction. No   transaction \u0026gt; order \u0026gt; additionalValues \u0026gt; TX_TAX_RETURN_BASE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. No   transaction \u0026gt; payer   Payer information. Yes   transaction \u0026gt; payer \u0026gt; emailAddress Alphanumeric Max:255 Payer e-mail address. Yes   transaction \u0026gt; payer \u0026gt; merchantPayerId Alphanumeric Max:100 Identifier of the payer in your system. No   transaction \u0026gt; payer \u0026gt; fullName Alphanumeric Max:150 Name of the payer. Yes   transaction \u0026gt; payer \u0026gt; billingAddress   Billing address. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street1 Alphanumeric Max:100 Billing Address Line 1. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; street2 Alphanumeric Max:100 Billing Address Line 2. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; city Alphanumeric Max:50 Billing address city. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; state Alphanumeric Max:40 Billing address state. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; country Alphanumeric 2 Billing address country in format ISO 3166 Alpha-2. Yes   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; postalCode Alphanumeric Max:20 Billing address zip code. No   transaction \u0026gt; payer \u0026gt; billingAddress \u0026gt; phone Alphanumeric Max:20 Billing address phone number. No   transaction \u0026gt; payer \u0026gt; birthdate Alphanumeric Max:10 Payer\u0026rsquo;s date of birth. No   transaction \u0026gt; payer \u0026gt; contactPhone Alphanumeric Max:20 Payer\u0026rsquo;s phone number. Yes   transaction \u0026gt; payer \u0026gt; dniNumber Alphanumeric Max:20 Identification number of the buyer. Yes   transaction \u0026gt; payer \u0026gt; dniType Alphanumeric 2 Identification type of the buyer. See Document types. No   transaction \u0026gt; type Alphanumeric 32 As cash payments are performed in physical offices, the only available transaction type is AUTHORIZATION_AND_CAPTURE Yes   transaction \u0026gt; paymentMethod Alphanumeric 32 Select a valid Payment Method in cash. See the available Payment Methods for Peru.    transaction \u0026gt; paymentCountry Alphanumeric 2 Set PE for Peru. Yes   transaction \u0026gt; expirationDate Alphanumeric 23 Maximum date and time that the payer has to make the payment. Format YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11.586. No   transaction \u0026gt; ipAddress Alphanumeric Max:39 IP address of the device where the customer performs the transaction. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction. As the payment is performed by the user in a physical office, the state for a successful transaction is PENDING   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; pendingReason Alphanumeric Max:21 The reason code associated with the status, as mentioned in transactionResponse \u0026gt; state, the transaction is waiting for the payment.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status. In this case, for successful transactions is PENDING_TRANSACTION_CONFIRMATION.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.   transactionResponse \u0026gt; extraParameters   Additional parameters or data associated with the response.\nIn JSON, the extraParameters parameter follows this structure: \u0026quot;extraParameters\u0026quot;: {\n\u0026quot;REFERENCE\u0026quot;: \u0026quot;74794\u0026quot;\n}\nIn XML, the extraParameters parameter follows this structure: \u0026lt;extraParameters\u0026gt;\n\u0026lt;entry\u0026gt;\n\u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt;\n\u0026lt;int\u0026gt;74794\u0026lt;/int\u0026gt;\n\u0026lt;/entry\u0026gt;\n\u0026lt;/extraParameters\u0026gt;     Considerations  The parameter transaction.expirationDate is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. For cash payments, the following parameters are mandatory:  transaction.order.buyer.fullName transaction.payer.fullName transaction.payer.emailAddress or transaction.order.buyer.emailAddress.   The parameter transactionResponse.extraParameters has the following parameters related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    API call The following are the bodies of the request and response of this payment method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;accountId\u0026#34;: \u0026#34;512323\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description\u0026#34;, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;signature\u0026#34;: \u0026#34;af24b22ad0aa0b14dbe3c21a07d9558c\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payu.com/notify\u0026#34;, \u0026#34;additionalValues\u0026#34;: { \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 100, \u0026#34;currency\u0026#34;: \u0026#34;PEN\u0026#34; } }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Lima\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Lima y Callao\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; } }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;PAGOEFECTIVO\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2021-06-22T19:51:20.302\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;test\u0026#34;: true } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 857804123, \u0026#34;transactionId\u0026#34;: \u0026#34;fd685f0a-f5b2-40cf-9527-dcc85febe184\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;Se ha Generado el CIP: 00000002592100 .\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;2592100\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pendingReason\u0026#34;: \u0026#34;AWAITING_NOTIFICATION\u0026#34;, \u0026#34;responseCode\u0026#34;: \u0026#34;PENDING_TRANSACTION_CONFIRMATION\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: { \u0026#34;REFERENCE\u0026#34;: 857804123, \u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857804123Yfd685f0af5b240cYd231ed8660a7c9a\u0026#34;, \u0026#34;EXPIRATION_DATE\u0026#34;: 1624391480302, \u0026#34;BAR_CODE\u0026#34;: \u0026#34;2592100\u0026#34;, \u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;: \u0026#34;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857804123Yfd685f0af5b240cYd231ed8660a7c9a\u0026#34; }, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;accountId\u0026gt;512323\u0026lt;/accountId\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-06-21T16:39:10.965Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;signature\u0026gt;af24b22ad0aa0b14dbe3c21a07d9558c\u0026lt;/signature\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payu.com/notify\u0026lt;/notifyUrl\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;PEN\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;Av. Isabel La Católica 103-La Victoria\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Lima\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Lima y Callao\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;PAGOEFECTIVO\u0026lt;/paymentMethod\u0026gt; \u0026lt;expirationDate\u0026gt;2021-06-16T16:07:11\u0026lt;/expirationDate\u0026gt; \u0026lt;paymentCountry\u0026gt;PE\u0026lt;/paymentCountry\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;857804131\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;185f578b-2247-4a28-85b9-128c7b90c989\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;Se ha Generado el CIP: 00000002592102 .\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;2592102\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;1\u0026lt;/authorizationCode\u0026gt; \u0026lt;pendingReason\u0026gt;AWAITING_NOTIFICATION\u0026lt;/pendingReason\u0026gt; \u0026lt;responseCode\u0026gt;PENDING_TRANSACTION_CONFIRMATION\u0026lt;/responseCode\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;REFERENCE\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;857804131\u0026lt;/int\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_PDF\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/receipt?vid=857804131Y185f578b22474a2Y11601e067841b94\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;EXPIRATION_DATE\u0026lt;/string\u0026gt; \u0026lt;date\u0026gt;2021-06-28T23:59:59\u0026lt;/date\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BAR_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;2592102\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;URL_PAYMENT_RECEIPT_HTML\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/app?vid=857804131Y185f578b22474a2Y11601e067841b94\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Available payment methods query This method returns a list of the payment methods available in all countries.\nVariables for request and response  Request     Field name Format Size Description     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages.   command Alphanumeric Max:32 Set GET_PAYMENT_METHODS.   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false.   merchant   This object has the authentication data.   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   paymentMethods   List of the payment methods.   paymentMethods \u0026gt; paymentMethodComplete   This object has the information of a payment method.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; id Numeric  Payment method identifier.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; description Alphanumeric Max:32 Payment method name.   paymentMethods \u0026gt; paymentMethodComplete \u0026gt; country Alphanumeric 2 ISO code of the Payment method country.     API call The following are the bodies of the request and response of this method. For the sake of the example, the response here shows two payment methods.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;paymentMethods\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;258\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;1067\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;PE\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;reason\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentMethodsResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;paymentMethods\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;258\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;DINERS\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;paymentMethodComplete\u0026gt; \u0026lt;id\u0026gt;1067\u0026lt;/id\u0026gt; \u0026lt;description\u0026gt;VISA\u0026lt;/description\u0026gt; \u0026lt;country\u0026gt;PE\u0026lt;/country\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/paymentMethodComplete\u0026gt; \u0026lt;/paymentMethods\u0026gt; \u0026lt;/paymentMethodsResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform.\nVariables for request and response  Request     Field name Format Size Description     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages.   command Alphanumeric Max:32 Set PING.   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false.   merchant   This object has the authentication data.   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction.   error Alphanumeric Max:2048 The error message associated if an error ocurred.   transactionResponse transactionResponse Max:2048 The response of the PING method if an error ocurred.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: null }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;/paymentResponse\u0026gt;    ","excerpt":"To integrate with Payments API Peru, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/payments-api-peru.html","title":"Payments API - Peru"},{"body":"To integrate with Payments SDK Brazil, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments SDK includes the following methods:\n Submit transaction with credit cards Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Brazil, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Brazil. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE. The extra parameter CIELO_TID identifies the transaction, this parameter is needed when you want to process voids.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples shows how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Enter the buyer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Payer -- // Enter the payer Id here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the Payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the Payer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the Payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the Payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Enter the Payer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Enter the Payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;5253203387684619\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;MASTERCARD\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.BR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Enter the buyer\u0026#39;s CNPJ. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Payer --  // Enter the payer Id here.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the Payer\u0026#39;s name here.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the Payer\u0026#39;s e-mail here  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the Payer\u0026#39;s contact phone here.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the Payer\u0026#39;s contact document here.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Enter the Payer\u0026#39;s CNPJ.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Enter the Payer\u0026#39;s address here.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;5253203387684619\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;MASTERCARD\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is seven (7) days. After this time, the transaction is cancelled. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400434770\u0026#34;); // Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400434770\u0026#34;, // Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Enter the buyer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Payer -- // Enter the payer Id here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the Payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the Payer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the Payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the Payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Enter the Payer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Enter the Payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;5178151142107990\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;MASTERCARD\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.BR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Enter the buyer\u0026#39;s CNPJ. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Payer --  // Enter the payer Id here.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the Payer\u0026#39;s name here.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the Payer\u0026#39;s e-mail here  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the Payer\u0026#39;s contact phone here.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the Payer\u0026#39;s contact document here.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Enter the Payer\u0026#39;s CNPJ.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Enter the Payer\u0026#39;s address here.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;5178151142107990\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;MASTERCARD\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  Send a valid cash Payment Method in the request, see the available Payment Methods for Brazil. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The payment is reflected in the next business day. The response returns the following extra parameters related to the transaction  URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_BOLETO_BANCARIO: payment receipt in printable format. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Enter the buyer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Payer -- // Enter the payer Id here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the Payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the Payer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the Payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the Payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Enter the Payer\u0026#39;s CNPJ. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Enter the Payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;BOLETO_BANCARIO\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tString url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String boletoBancario = (String)extraParameters.get(\u0026#34;URL_BOLETO_BANCARIO\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Enter the buyer\u0026#39;s CNPJ. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Payer --  // Enter the payer Id here.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the Payer\u0026#39;s name here.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the Payer\u0026#39;s e-mail here  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the Payer\u0026#39;s contact phone here.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the Payer\u0026#39;s contact document here.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Enter the Payer\u0026#39;s CNPJ.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Enter the Payer\u0026#39;s address here.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Enter the cash payment method name here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;BOLETO_BANCARIO\u0026#34;, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_BOLETO_BANCARIO; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Brazil, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/en/docs/integrations/sdk-integration/payments-sdk-brazil.html","title":"Payments SDK - Brazil"},{"body":"Para integrarte con el SDK de Pagos de Brasil, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de pagos incluye los siguientes métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar el SDK de Consultas.  Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito. Para Brasil, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nConsideraciones  Envía un método de pago válido de tarjeta de crédito, mira los métodos de pago disponibles para Brasil. Para pagos con tókenes de tarjeta de crédito, asigna los parámetros TOKEN_ID y CREDIT_CARD_SECURITY_CODE (si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el SDK de Tokenización. Por defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas. Luego de que se te active esta funcionalidad, asigna el parámetro PROCESS_WITHOUT_CVV2 con true y elimina el parámetro CREDIT_CARD_SECURITY_CODE. El extra parámetro CIELO_TID identifica la transacción, se necesita este parámetro para procesar anulaciones (voids).  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes ejempleod muestran cómo llamas el método para este tipo de transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Ingresa aquí el CNPJ del comprador. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el número de documento del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Ingresa aquí el CNPJ del pagador. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;5253203387684619\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;MASTERCARD\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.BR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorization(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Ingresa aquí el CNPJ del comprador. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Pagador --  // Ingresa aquí el identificador del pagador.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del pagador.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del pagador.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el número de documento del pagador.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Ingresa aquí el CNPJ del pagador.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Ingresa aquí la dirección del pagador.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;5253203387684619\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;MASTERCARD\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorization($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de siete (7) días. Despues de este tiempo, la transacción es cancelada. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada.  Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400434770\u0026#34;); // Ingresa aquí el identificador de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Petición de Captura TransactionResponse response = PayUPayments.doCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el identificador de la cuenta. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Ingresa aquí el identificador de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400434770\u0026#34;, // Ingresa aquí el identificador de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;79de715b-fe77-401e-8b18-241820afb375\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Ingresa aquí el CNPJ del comprador. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el número de documento del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Ingresa aquí el CNPJ del pagador. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;5178151142107990\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;MASTERCARD\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.BR.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Ingresa aquí el CNPJ del comprador. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Pagador --  // Ingresa aquí el identificador del pagador.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del pagador.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del pagador.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el número de documento del pagador.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Ingresa aquí el CNPJ del pagador.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Ingresa aquí la dirección del pagador.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;5178151142107990\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;MASTERCARD\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nConsideraciones  Envía un método de pago válido en efectivo, mira los métodos de pago disponibles para Brasil. El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto El pago se ve reflejado el siguiente día hábil. La respuesta retorna los siguientes extra parámetros relacionados con la transacción  URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_BOLETO_BANCARIO: recibo de pago en formato printable. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512327\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.BRL.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Ingresa aquí el CNPJ del comprador. parameters.put(PayU.PARAMETERS.BUYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el número de documento del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;811.807.405-64\u0026#34;); // Ingresa aquí el CNPJ del pagador. parameters.put(PayU.PARAMETERS.PAYER_CNPJ, \u0026#34;32593371000110\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Manaos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;SP\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;BR\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;10012545\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;(11)756312633\u0026#34;); // Ingresa aquí el nombre del método de pago en efectivo. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;BOLETO_BANCARIO\u0026#34;); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tString url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String boletoBancario = (String)extraParameters.get(\u0026#34;URL_BOLETO_BANCARIO\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;BRL\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Ingresa aquí el CNPJ del comprador. \tPayUParameters::BUYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // -- Pagador --  // Ingresa aquí el identificador del pagador.  PayUParameters::PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del pagador.  PayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador  PayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del pagador.  PayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el número de documento del pagador.  PayUParameters::PAYER_DNI =\u0026gt; \u0026#34;811.807.405-64\u0026#34;, // Ingresa aquí el CNPJ del pagador.  PayUParameters::PAYER_CNPJ =\u0026gt; \u0026#34;32593371000110\u0026#34;, // Ingresa aquí la dirección del pagador.  PayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Quadra QNP 34 Conjunto G 780\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Manaos\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;SP\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;BR\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;10012545\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;(11)756312633\u0026#34;, // Ingresa aquí el nombre del método de pago en efectivo. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;BOLETO_BANCARIO\u0026#34;, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::BR, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_BOLETO_BANCARIO; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"Para integrarte con el SDK de Pagos de Brasil, apunta tus peticiones a las siguientes URLs:\n Java …","ref":"/es/docs/integrations/sdk-integration/payments-sdk-brazil.html","title":"SDK de Pagos - Brasil"},{"body":"De acuerdo con tus necesidades de negocio, puedes utilizar los servicios de integración los las herramientas de PayU.\nIntegraciones Implementa PayU con el modelo agregador o gateway, utilizando los acuerdos financieros de PayU o los tuyos\nIntegración WebCheckout El WebCheckout de PayU Checkout es una integración que te permite cobrar a través del formulario web de PayU desde cualquier dispositivo de forma fácil, rápida y segura.  PayU administra el sistema de pagos Integración más fácil e igual de segura Como PayU maneja la plataforma de pagos, es más fácil obtener la certificación PCI DSS  Aprende más sobre la integración WebCheckout  Integración API o SDK A través de las integraciones API o SDK, puedes recibir pagos de forma segura desde cualquier lugar que desees, en tu propia página web o en tu aplicación móvil.  Diseña tu propio checkout y administra el sistema de pagos de tu sitio web. Disfruta de servicios adicionales seguros como el servicio de Tokenización de tarjetas de crédito.  Aprende más sobre la integración API Aprende más sobre la integración SDK     Herramientas de PayU Cualquiera de las siguientes herramientas te da más opciones para vender y recibir pagos en línea.\nSolicitud de pago Recibe pagos incluso si no tienes una página web.\n Plugins para carritos de compra Integra tu solución de carrito de compra con cualquiera de nuestros plugins que tenemos disponibles.\n Módulo PayU Administra tu cuenta PayU, genera reportes de ventas, consulta el balance de tu cuenta o transfiere dinero a tu cuenta bancaria.\n Disputas Administra el proceso de disputas generadas en tu cuenta PayU.\n Cupones de pago Envía cupones de pago a tus clientes, ellos pueden pagar en cualquiera de los puntos de pago en efectivo disponibles.\n Garantía Antifraude PayU ofrece la Garantía Antifraude que protege a los comercios contra las pérdidas generadas por transacciones fraudulentas.\n   ","excerpt":"De acuerdo con tus necesidades de negocio, puedes utilizar los servicios de integración los las …","ref":"/es/docs/getting-started/select-your-integration.html","title":"Seleccionar tu integración"},{"body":"According to your business needs you can use the integration services or the PayU tools.\nIntegrations Implement PayU with the aggregator model or gateway, using PayU’s financial agreements or your own\nCheckout integration PayU Checkout is an integration that allows you to collect through a PayU web form from any device in a simple, fast and secure way.  PayU manages the payment system Easier integration, equally secure Since PayU manages the payment platform, it is easier to get PCI DSS certification  Learn more about WebCheckout integration  API or SDK integration Through API or SDK integrations, you can receive payments securely from anywhere you like, on your website or mobile app.  Design your checkout and manage the payment system of your website. Access to additional services such as Tokenization.  Learn more about API integration Learn more about SDK integration     PayU Tools Any of the following tools give you more options to sell and receive payments online.\nPayment request Receive payments even if you don't have a web page.\n Shopping cart plugins Integrate your shopping cart solution with any of our available plugins.\n PayU module Manage your PayU account, generate sales reports, query your account balance or transfer money to your bank account.\n Disputes Manage the dispute processes generated in your PayU account.\n Payment coupons Send payment coupons to your customers, they can pay in the cash branches available.\n Anti-fraud Guarantee PayU offers the Anti-fraud Guarantee that protects merchants against the lost due to fraud transactions.\n   ","excerpt":"According to your business needs you can use the integration services or the PayU tools. …","ref":"/en/docs/getting-started/select-your-integration.html","title":"Select Your Integration"},{"body":"","excerpt":"","ref":"/en/docs/services.html","title":"Services"},{"body":"","excerpt":"","ref":"/es/docs/services.html","title":"Servicios"},{"body":"      Consideraciones  Algunos proveedores de hosting tienen configuraciones que no permite enviar URLs como valores de parámetros. Por ejemplo: \u0026amp;merchant_url=http%3A%2F%2Fwww.mitienda.com Para cuentas de Brasil, no hay redirección a la página de respuesta. No dependas de la página de respuesta para actualizar tu base de datos o ejecutar procesos ya que es posible que el usuario no regrese a la misma; utiliza la página de confirmación. Si quieres mostrar información relacionada con la transacción, te sugerimos mostrar como mínimo lo siguiente: estado, referencia, valor, moneda y fecha. Se recomienda enviar el parámetro responseUrl en el formulario de pago o configurarlo en el Módulo PayU; tiene mayor prioridad el enviado como parámetro. Si PayU no encuentra ninguno, el proceso de pago finaliza en el Webcheckout.  Importante Si deseas que PayU siempre muestra la información de la transacción, no envíes ningún valor en el parámetro responseUrl del formulario de pagos y déjalo en blanco en el Módulo PayU. En este caso, el comprador no tendrá la opción de regresar a tu página.  Variables Variables enviadas a la Página de respuesta.\n Variables enviadas a la Página de respuesta     Campo Tipo Tamaño Descripción Aplica para     merchantId Numérico 12 Identificador de tu tienda en el sistema de PayU, puedes encontrar este número en el correo de creación de tu cuenta. —   transactionState Numérico 2 Indica el estado de la transacción en el sistema.\nVer los estados de la transacción en la columna respectiva. —   risk Decimal (#.00) — Riesgo asociado con la transacción. Los posibles valores están entre 0 y 1.\nEntre mayor sea el valor, mayor es el riesgo.\nFormato ###.00. —   polResponseCode Alfanumérico 64 Código de respuesta.\nVer los códigos de respuesta en la columna respectiva. —   referenceCode Alfanumérico 255 Referencia de la venta o la orden. Debe ser única por cada transacción enviada al sistema. —   reference_pol Alfanumérico 255 Referencia o número de transacción generado por PayU. —   signature Alfanumérico 255 Firma digital creada por cada transacción. —   polPaymentMethod Alfanumérico 255 Identificador interno utilizado por los métodos de pago. —   polPaymentMethodType Numérico 2 Método de pago utilizado.\nVer los códigos de los métodos de pago. —   installmentsNumber Numérico 2 Número de cuotas en las cuales se difirió el pago con tarjeta crédito. —   TX_VALUE Numérico 14,2 Valor total de la transacción. Puede contener dos dígitos decimales. Por ejemplo 10000.00 o 10000. —   TX_TAX Numérico 14,2 Valor del IVA de la transacción, si no se envió IVA, el sistema aplica el 19% automáticamente.\nPuede contener dos dígitos decimales. Por ejemplo 19000.00.\nEn caso de que no tenga IVA, debe enviarse 0. —   buyerEmail Alfanumérico 255 Campo que contiene el correo electrónico del comprador para notificar el resultado de la transacción. Se recomienda validarlo cuando se toma este valor del formulario. —   processingDate Fecha (AAAA-MM-DD HH:mm:ss) — Fecha en la que se realizó la transacción. —   currency Alfanumérico 3 Moneda respectiva en la que se hace el pago. El proceso de conciliación se realiza en pesos colombianos a la tasa representativa del día. —   cus Alfanumérico 255 El CUS, Código Único de Seguimiento, es la referencia de pago dentro del banco, aplica solo para pagos con PSE. PSE Colombia.   pseBank Alfanumérico 255 Nombre del banco, aplica solo para pagos con PSE. PSE Colombia.   lng Alfanumérico 2 Idioma en el que se quiere mostrar la pasarela de pagos. —   description Alfanumérico 255 Descripción de la venta. —   lapResponseCode Alfanumérico 64 Código de Respuesta entregado por PayU.\nVer los códigos de respuesta en la columna respectiva. —   lapPaymentMethod Alfanumérico 255 Método de pago utilizado, por ejemplo VISA. —   lapPaymentMethodType Alfanumérico 255 Tipo del método de pago utilizado, por ejemplo CREDIT_CARD. —   lapTransactionState Alfanumérico 32 Estado de la transacción.\nVer los estados de la transacción en la columna respectiva. —   message Alfanumérico 255 Descripción del estado de la transacción. —   extra1 Alfanumérico 255 Campo adicional para enviar información relacionada con la compra. —   extra2 Alfanumérico 255 Campo adicional para enviar información relacionada con la compra. —   extra3 Alfanumérico 255 Campo adicional para enviar información relacionada con la compra. —   authorizationCode Alfanumérico 12 Código de autorización de la venta. —   merchant_address Alfanumérico 255 Dirección del comercio. —   merchant_name Alfanumérico 255 Nombre del comercio. —   merchant_url Alfanumérico 255 URL de la página web del comercio. —   orderLanguage Alfanumérico 2 Idioma de la orden (ISO-639-1). —   pseCycle Numérico — Identificador generado por PSE. PSE Colombia   pseReference1 Alfanumérico 255 Referencia no. 1 por PSE payments. PSE Colombia   pseReference2 Alfanumérico 255 Referencia no. 2 por PSE payments. PSE Colombia   pseReference3 Alfanumérico 255 Referencia no. 3 por PSE payments. PSE Colombia   telephone Alfanumérico 20 Teléfono del comercio. —   transactionId Alfanumérico 36 Identificador del comercio. —   trazabilityCode Alfanumérico 64 Código de trazabilidad de la venta en la página web del comercio. —   TX_ADMINISTRATIVE_FEE Decimal (#.00) — Valor de la tarifa administrativa. —   TX_TAX_ADMINISTRATIVE _FEE Decimal (#.00) — Valor del impuesto de la tarifa administrativa. —   TX_TAX_ADMINISTRATIVE _FEE_RETURN_BASE Decimal (#.00) — Valor base de la tarifa administrativa para reintegro de impuestos. —   action_code_description Alfanumérico 255 Descripción del código de respuesta de VISANET. VISANET Perú   cc_holder Alfanumérico 150 Nombre del tarjetahabiente. VISANET Perú   cc_number Alfanumérico — Número de la tarjeta de crédito. VISANET Perú   processing_date_time Fecha (AAAA-MM-DD) — Fecha de procesamiento de la venta. VISANET Perú   request_number Alfanumérico 9 Número de Orden + identificador de la transacción. VISANET Perú     Integrar la página de respuesta El siguiente es un ejemplo en PHP de cómo integrar la página de respuesta:\n\u0026lt;?php $ApiKey = \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;; $merchant_id = $_REQUEST[\u0026#39;merchantId\u0026#39;]; $referenceCode = $_REQUEST[\u0026#39;referenceCode\u0026#39;]; $TX_VALUE = $_REQUEST[\u0026#39;TX_VALUE\u0026#39;]; $New_value = number_format($TX_VALUE, 1, \u0026#39;.\u0026#39;, \u0026#39;\u0026#39;); $currency = $_REQUEST[\u0026#39;currency\u0026#39;]; $transactionState = $_REQUEST[\u0026#39;transactionState\u0026#39;]; $firma_cadena = \u0026#34;$ApiKey~$merchant_id~$referenceCode~$New_value~$currency~$transactionState\u0026#34;; $firmacreada = md5($firma_cadena); $firma = $_REQUEST[\u0026#39;signature\u0026#39;]; $reference_pol = $_REQUEST[\u0026#39;reference_pol\u0026#39;]; $cus = $_REQUEST[\u0026#39;cus\u0026#39;]; $extra1 = $_REQUEST[\u0026#39;description\u0026#39;]; $pseBank = $_REQUEST[\u0026#39;pseBank\u0026#39;]; $lapPaymentMethod = $_REQUEST[\u0026#39;lapPaymentMethod\u0026#39;]; $transactionId = $_REQUEST[\u0026#39;transactionId\u0026#39;]; if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 4 ) { $estadoTx = \u0026#34;Transacción aprobada\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 6 ) { $estadoTx = \u0026#34;Transacción rechazada\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 104 ) { $estadoTx = \u0026#34;Error\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 7 ) { $estadoTx = \u0026#34;Pago pendiente\u0026#34;; } else { $estadoTx=$_REQUEST[\u0026#39;mensaje\u0026#39;]; } if (strtoupper($firma) == strtoupper($firmacreada)) { ?\u0026gt;\u0026lt;h2\u0026gt;Resumen de la transacción\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Estado de la transacción\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $estadoTx; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ID de la transacción\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $transactionId; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Referencia de venta\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $reference_pol; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Referencia de la transacción\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $referenceCode; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;?php if($pseBank != null) { ?\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;cus \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $cus; ?\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Banco \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $pseBank; ?\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Valor total\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;$\u0026lt;?php echo number_format($TX_VALUE); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Moneda\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $currency; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Descripción\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo ($extra1); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Entidad:\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo ($lapPaymentMethod); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;?php } else { ?\u0026gt; \u0026lt;h1\u0026gt;Error validando la firma digital.\u0026lt;/h1\u0026gt; \u0026lt;?php } ?\u0026gt; \nEjemplo GET enviado a la página de respuesta.\nhttp://mypaginadeprueba.com/response.php?\u0026amp;merchantId=508029\u0026amp;merchant_name=Test+PayU+Test\u0026amp;merchant_address=Av+123+Calle+12\u0026amp;telephone=7512354\u0026amp;merchant_url=http%3A%2F%2Fpruebaslapv.xtrweb.com\u0026amp;transactionState=6\u0026amp;lapTransactionState=DECLINED\u0026amp;message=Declinada\u0026amp;referenceCode=2015-05-27+13%3A04%3A37\u0026amp;reference_pol=7069375\u0026amp;transactionId=f5e668f1-7ecc-4b83-a4d1-0aaa68260862\u0026amp;description=test_payu_01\u0026amp;trazabilityCode=\u0026amp;cus=\u0026amp;orderLanguage=es\u0026amp;extra1=\u0026amp;extra2=\u0026amp;extra3=\u0026amp;polTransactionState=6\u0026amp;signature=e1b0939bbdc99ea84387bee9b90e4f5c\u0026amp;polResponseCode=5\u0026amp;lapResponseCode=ENTITY_DECLINED\u0026amp;risk=1.00\u0026amp;polPaymentMethod=10\u0026amp;lapPaymentMethod=VISA\u0026amp;polPaymentMethodType=2\u0026amp;lapPaymentMethodType=CREDIT_CARD\u0026amp;installmentsNumber=1\u0026amp;TX_VALUE=100.00\u0026amp;TX_TAX=.00\u0026amp;currency=USD\u0026amp;lng=es\u0026amp;pseCycle=\u0026amp;buyerEmail=test%40payulatam.com\u0026amp;pseBank=\u0026amp;pseReference1=\u0026amp;pseReference2=\u0026amp;pseReference3=\u0026amp;authorizationCode=\u0026amp;TX_ADMINISTRATIVE_FEE=.00\u0026amp;TX_TAX_ADMINISTRATIVE_FEE=.00\u0026amp;TX_TAX_ADMINISTRATIVE_FEE_RETURN_BASE=.00 Validación de la firma La validación de la firma te permite comprobar la integridad de los datos, debes generar la firma con los datos que encuentras en la página de respuesta y compararla con la información del parámetro signature.\nPara validar la firma en la página de respuesta debes tener en cuenta:\n Para obtener el nuevo valor new_value se debe aproximar TX_VALUE siempre a un decimal con el método de redondeo Round half to even:  Si el primer decimal es par y el segundo es 5, redondéalo hacia el menor valor. Si el primer decimal es impar y el segundo es 5, redondéalo hacia el mayor valor. Si no, debes redondearlo al decimal más cercano.   Obten los parámetros para generar la firma (merchantId, referenceCode, TX_VALUE, currency y transactionState) de la página de respuesta, no de la base de datos. Debes guardar tu ApiKey de forma segura. Crea la firma así:  \u0026#34;ApiKey~merchantId~referenceCode~new_value~currency~transactionState\u0026#34; \nEjemplos:\nPrimer decimal es par y el segundo es 5\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parámetros obtenidos de la página de respuesta: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.25 - currency = USD - transactionState = 6 La firma se genera así: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.2~USD~6) = 00286dc735bd9eaa8ae3a3a4cbb40688 signature = 00286dc735bd9eaa8ae3a3a4cbb40688 Primer decimal es impar y el segundo es 5\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parámetros obtenidos de la página de respuesta: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.35 - currency = USD - transactionState = 6 La firma se genera así: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.4~USD~6) = 9df2bb60e2838170009040982967923f signature = 9df2bb60e2838170009040982967923f Otros casos\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parámetros obtenidos de la página de respuesta: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.34 - currency = USD - transactionState = 6 La firma se genera así: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.3~USD~6) = 779f163be9347a691bcdb25064644795 signature = 779f163be9347a691bcdb25064644795 Compara tu firma   Algoritmo: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ~ 4 (Aprobada) 6 (Rechazada) 104 (Error) 5 (Expirada) 7 (Pendiente)  ) Resultado:\u0026nbsp;      Esta calculadora te permite generar la firma utilizando alguno de los métodos de cifrado disponibles.\n","excerpt":"Consideraciones  Algunos proveedores de hosting tienen configuraciones que no permite enviar URLs …","ref":"/es/docs/integrations/webcheckout-integration/response-page.html","title":"Página de Respuesta"},{"body":"      Considerations  Some hosting providers have settings that do not allow sending URLs as parameter values. Example: \u0026amp;merchant_url=http%3A%2F%2Fwww.myshop.com For Brazil accounts, there is no redirection to the response page. Do not depend on the response page to update your database or execute processes, users may not return to it. Use the confirmation page. If you want to display information related to the transaction, we suggest showing at least the following: status, reference value, currency, and date. It is recommended to send the responseUrl parameter in the payment form or set PayU Module; it has priority the one sent in the parameter. If PayU does not find any, the payment process ends at the Webcheckout.  Important If you want that PayU always shows the transaction information, do not send any value in the responseUrl parameter of the payment form, and leave it blank in PayU Module. In this case, the buyer cannot return to your website.  Variables Variables sent to the response page.\n Variables to be sent to the response page     Field Type Size Description Applies to     merchantId Numeric 12 Merchant’s ID number in PayU’s system, you find this number in the account creation mail. —   transactionState Numeric 2 Indicates the transaction’s status in the system.\nSee the transaction states in the given column. —   risk Decimal (#.00) — Risk associated with the transaction. Values between 0 and 1.\nThe higher value, the greater the risk.\nFormat ###.00. —   polResponseCode Alphanumeric 64 Response code.\nSee the response codes in the given column. —   referenceCode Alphanumeric 255 Reference of the sale or order. It must be unique for each transaction sent to the system. —   reference_pol Alphanumeric 255 Reference or transaction number generated by PayU. —   signature Alphanumeric 255 Digital signature created for each one of the transactions. —   polPaymentMethod Alphanumeric 255 Internal identifier of the used payment methods. —   polPaymentMethodType Numeric 2 The type of payment method used for payment.\nSee the codes of the payment methods. —   installmentsNumber Numeric 2 Number of installments in which the credit card payment was deferred. —   TX_VALUE Numeric 14,2 Total amount of the transaction. It can contain two decimal digits. For example 10000.00 or 10000 —   TX_TAX Numeric 14,2 Value of the VAT of the transaction, if no VAT is sent, the system applies 19% automatically.\nIt can contain two decimal digits, for example 19000.00.\nIn case you have no VAT you should fill out 0. —   buyerEmail Alphanumeric 255 Field that contains the buyer’s e-mail to notify the result of the transaction. It is recommended to validate it when the data is taken on a form. —   processingDate Date (YYYY-MM-DD HH:mm:ss) — The date the transaction was made. —   currency Alphanumeric 3 The respective currency in which the payment is made. The reconciliation process is performed in Colombian pesos at the representative rate of the day. —   cus Alphanumeric 255 The CUS, unique tracking code, is the payment’s reference within the Bank, it applies only to payments with PSE. PSE Colombia.   pseBank Alphanumeric 255 The name of the bank, applies only to payments with PSE. PSE Colombia.   lng Alphanumeric 2 Language in which to display the payment gateway. —   description Alphanumeric 255 Description of sale. —   lapResponseCode Alphanumeric 64 Response code that PayU delivers.\nSee the responses codes in the given column. —   lapPaymentMethod Alphanumeric 255 Payment method used in the payment, for example VISA. —   lapPaymentMethodType Alphanumeric 255 Payment method type used in the payment, for example CREDIT_CARD. —   lapTransactionState Alphanumeric 32 Transaction status.\nSee the transaction status in the given column. —   message Alphanumeric 255 Description of the transaction status. —   extra1 Alphanumeric 255 Additional field to send information about the purchase. —   extra2 Alphanumeric 255 Additional field to send information about the purchase. —   extra3 Alphanumeric 255 Additional field to send information about the purchase. —   authorizationCode Alphanumeric 12 Authorization Code of the sale. —   merchant_address Alphanumeric 255 Merchant’s address. —   merchant_name Alphanumeric 255 Merchant’s_name —   merchant_url Alphanumeric 255 Merchant’s website URL. —   orderLanguage Alphanumeric 2 Language of the order (ISO-639-1). —   pseCycle Numeric — Identifier generated by PSE. PSE Colombia   pseReference1 Alphanumeric 255 Reference no. 1 for PSE payments. PSE Colombia   pseReference2 Alphanumeric 255 Reference no. 2 for PSE payments. PSE Colombia   pseReference3 Alphanumeric 255 Reference no. 3 for PSE payments. PSE Colombia   telephone Alphanumeric 20 Merchant’s phone number. —   transactionId Alphanumeric 36 Transaction identifier. —   trazabilityCode Alphanumeric 64 Traceability Code of the sale on the merchant\u0026rsquo;s site. —   TX_ADMINISTRATIVE_FEE Decimal (#.00) — Value of the administrative fee. —   TX_TAX_ADMINISTRATIVE_FEE Decimal (#.00) — Value of the tax of the administrative fee. —   TX_TAX_ADMINISTRATIVE_FEE_RETURN_BASE Decimal (#.00) — Base value of the administrative fee for the tax refund. —   action_code_description Alphanumeric 255 VISANET response code description. VISANET Peru   cc_holder Alphanumeric 150 Name of cardholder. VISANET Peru   cc_number Alphanumeric — Credit card number. VISANET Peru   processing_date_time Date (YYYY-MM-DD) — Date of the sale’s processing. VISANET Peru   request_number Alphanumeric 9 Order Number + transaction identifier VISANET Peru     Integrate the response page The following is an example in PHP of how you can integrate the response page:\n\u0026lt;?php $ApiKey = \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;; $merchant_id = $_REQUEST[\u0026#39;merchantId\u0026#39;]; $referenceCode = $_REQUEST[\u0026#39;referenceCode\u0026#39;]; $TX_VALUE = $_REQUEST[\u0026#39;TX_VALUE\u0026#39;]; $New_value = number_format($TX_VALUE, 1, \u0026#39;.\u0026#39;, \u0026#39;\u0026#39;); $currency = $_REQUEST[\u0026#39;currency\u0026#39;]; $transactionState = $_REQUEST[\u0026#39;transactionState\u0026#39;]; $firma_cadena = \u0026#34;$ApiKey~$merchant_id~$referenceCode~$New_value~$currency~$transactionState\u0026#34;; $firmacreada = md5($firma_cadena); $firma = $_REQUEST[\u0026#39;signature\u0026#39;]; $reference_pol = $_REQUEST[\u0026#39;reference_pol\u0026#39;]; $cus = $_REQUEST[\u0026#39;cus\u0026#39;]; $extra1 = $_REQUEST[\u0026#39;description\u0026#39;]; $pseBank = $_REQUEST[\u0026#39;pseBank\u0026#39;]; $lapPaymentMethod = $_REQUEST[\u0026#39;lapPaymentMethod\u0026#39;]; $transactionId = $_REQUEST[\u0026#39;transactionId\u0026#39;]; if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 4 ) { $estadoTx = \u0026#34;Transaction approved\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 6 ) { $estadoTx = \u0026#34;Transaction rejected\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 104 ) { $estadoTx = \u0026#34;Error\u0026#34;; } else if ($_REQUEST[\u0026#39;transactionState\u0026#39;] == 7 ) { $estadoTx = \u0026#34;Pending payment\u0026#34;; } else { $estadoTx=$_REQUEST[\u0026#39;mensaje\u0026#39;]; } if (strtoupper($firma) == strtoupper($firmacreada)) { ?\u0026gt;\u0026lt;h2\u0026gt;Transaction Summary\u0026lt;/h2\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Transaction status\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $estadoTx; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Transaction ID\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $transactionId; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Reference sale\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $reference_pol; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Reference transaction\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $referenceCode; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;?php if($pseBank != null) { ?\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;cus \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $cus; ?\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Bank \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $pseBank; ?\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;?php } ?\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;total amount\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;$\u0026lt;?php echo number_format($TX_VALUE); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Currency\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo $currency; ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Description\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo ($extra1); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Entity:\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;?php echo ($lapPaymentMethod); ?\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;?php } else { ?\u0026gt; \u0026lt;h1\u0026gt;Error validating digital signature.\u0026lt;/h1\u0026gt; \u0026lt;?php } ?\u0026gt; \nGET example sent to the response page.\nhttp://mytestsite.com/response.php?\u0026amp;merchantId=508029\u0026amp;merchant_name=Test+PayU+Test\u0026amp;merchant_address=Av+123+Calle+12\u0026amp;telephone=7512354\u0026amp;merchant_url=http%3A%2F%2Fpruebaslapv.xtrweb.com\u0026amp;transactionState=6\u0026amp;lapTransactionState=DECLINED\u0026amp;message=Declinada\u0026amp;referenceCode=2015-05-27+13%3A04%3A37\u0026amp;reference_pol=7069375\u0026amp;transactionId=f5e668f1-7ecc-4b83-a4d1-0aaa68260862\u0026amp;description=test_payu_01\u0026amp;trazabilityCode=\u0026amp;cus=\u0026amp;orderLanguage=es\u0026amp;extra1=\u0026amp;extra2=\u0026amp;extra3=\u0026amp;polTransactionState=6\u0026amp;signature=e1b0939bbdc99ea84387bee9b90e4f5c\u0026amp;polResponseCode=5\u0026amp;lapResponseCode=ENTITY_DECLINED\u0026amp;risk=1.00\u0026amp;polPaymentMethod=10\u0026amp;lapPaymentMethod=VISA\u0026amp;polPaymentMethodType=2\u0026amp;lapPaymentMethodType=CREDIT_CARD\u0026amp;installmentsNumber=1\u0026amp;TX_VALUE=100.00\u0026amp;TX_TAX=.00\u0026amp;currency=USD\u0026amp;lng=es\u0026amp;pseCycle=\u0026amp;buyerEmail=test%40payulatam.com\u0026amp;pseBank=\u0026amp;pseReference1=\u0026amp;pseReference2=\u0026amp;pseReference3=\u0026amp;authorizationCode=\u0026amp;TX_ADMINISTRATIVE_FEE=.00\u0026amp;TX_TAX_ADMINISTRATIVE_FEE=.00\u0026amp;TX_TAX_ADMINISTRATIVE_FEE_RETURN_BASE=.00 Signature validation The signature validation allows you to check the data integrity, you must generate the signature with the information you find in the response page and compare it with the information from the signature parameter.\nTo validate the signature in the response page, you should consider:\n To get the new value new_value, approximate the TX_VALUE to a decimal, using the rounding method Round half to even:  If the first decimal is even and the second is 5, round it to the lowest value. If the first decimal is odd and the second is 5, round it to the higher value. Otherwise you must round it to the nearest decimal.   Get the parameters to generate the signature (merchantId, referenceCode, TX_VALUE, currency, and transactionState) from the response page, do not get them from your database. You must store your ApiKey safely. Create the signature as follows:  \u0026#34;ApiKey~merchantId~referenceCode~new_value~currency~transactionState\u0026#34; \nExamples:\nFirst decimal is an even number and the second is 5\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters get from the response page: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.25 - currency = USD - transactionState = 6 The signature is generated as follows: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.2~USD~6) = 00286dc735bd9eaa8ae3a3a4cbb40688 signature = 00286dc735bd9eaa8ae3a3a4cbb40688 First decimal is an odd number and the second is 5\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters get from the response page: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.35 - currency = USD - transactionState = 6 The signature is generated as follows: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.4~USD~6) = 9df2bb60e2838170009040982967923f signature = 9df2bb60e2838170009040982967923f Other cases\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters get from the response page: - merchantId = 508029 - referenceCode = TestPayU04 - TX_VALUE = 150.34 - currency = USD - transactionState = 6 The signature is generated as follows: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.3~USD~6) = 779f163be9347a691bcdb25064644795 signature = 779f163be9347a691bcdb25064644795 Compare your signature   Algorithm: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ~ 4 (Approved) 6 (Declined) 104 (Error) 5 (Expired) 7 (Pending)  ) Result:\u0026nbsp;      This calculator lets you generate the signature using any of the available encryption methods.\n","excerpt":"Considerations  Some hosting providers have settings that do not allow sending URLs as parameter …","ref":"/en/docs/integrations/webcheckout-integration/response-page.html","title":"Response Page"},{"body":"Consideraciones Antes de utilizar la funcionalidad de Consultas, ten en cuenta las siguientes consideraciones:\n Se recomienda utilizar Consultas para transacciones en estado PENDING. De acuerdo con el método de pago, el tiempo para realizar la consulta puede variar. Sin embargo, te recomendamos realizar la primera consulta siete minutos luego de que se crea la transacción. No reintentes consultar una transacción cuando PayU indica que no existe. Las transacciones de transferencias bancarias están disponibles cada diez minutos.  Criterios de consulta Para consultar transacciones, PayU te permite buscar por cualquiera de los siguientes criterios:\n Order Id: es generado por PayU. Identifica la orden en el sistema de PayU y es el principal elemento donde se registra cualquier movimiento (cobros, reintentos, reembolsos, etc) Transaction Id: PayU genera este identificador por cada movimiento asociado con una orden (Order ID). Reference Number: es generado por la tienda. Identifica la orden o la compra en tu sistema, PayU guarda este valor tal y como lo envías.  ¿Qué sigue? La integración con esta funcionalidad puede realizarse con cualquiera de nuestros tipos de integración:\n Para integración API, consulta este artículo Para integración SDK, consulta este artículo  ","excerpt":"Consideraciones Antes de utilizar la funcionalidad de Consultas, ten en cuenta las siguientes …","ref":"/es/docs/services/queries.html","title":"Consulta de transacciones"},{"body":"Considerations Before using the Queries feature, take into account the following considerations:\n It is recommended to use Queries for transactions in PENDING state. According to the payment method, the time to perform the query may vary. Nevertheless, it is recommended to perform the first query seven minutes after the transaction is created. Do not retry a query of a transaction when PayU indicates that the transaction does not exist. Bank transfer transactions are only available every ten minutes.  Query criteria To query transactions, PayU allows you to search by any of the following criteria:\n Order Id: it is generated by PayU. Identifies the order in PayU system and is the main element where any movement is recorded (charges, retries, refunds, etc) Transaction Id: PayU generates this identifier per each movement associated with an order (Order ID). Reference Number: it is generated by the shop. Identifies the order or purchase in your system, PayU saves this value as you send it.  What\u0026rsquo;s next? The integration with this feature can be performed using one of our integration types:\n For API integrations, refer to this topic For SDK integrations, refer to this topic  ","excerpt":"Considerations Before using the Queries feature, take into account the following considerations:\n It …","ref":"/en/docs/services/queries.html","title":"Queries for transactions"},{"body":"You can connect your online store to the PayU platform and the checkout process will be handled on your website. To integrate this option you must have a PayU Business account and advanced programming skills.\nAccess multiple payment methods (varies per country), including credit cards, bank transfers, and cash payments.\nInitial settings PayU allows you to integrate with the transactional gateway, available payment tools and Queries by developing a HTTPS client to send the transaction information through SSL. It is critical that sensitive transaction data such as credit card number, expiration date, are not stored. It is recommended to follow PCI DSS’ best practices (Payment Card Industry Data Security Standard).\nThe transmission of transactions is secured through a TLS (Transport Layer Security) 256-bit connection from the shop\u0026rsquo;s server our payment Gateway. The exchange of messages is done via JSON or XML strings and operations are distinguished by a command that is included in the request. Check out the following JSON and XML examples:\n JSON XML   POST /payments-api/4.0/service.cgi HTTP/1.1\nHost: sandbox.api.payulatam.com\nContent-Type: application/json; charset=utf-8\nAccept: application/json\nContent-Length: length { \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;xxxxxxxxxxxxx\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;xxxxxxxxxxxxx\u0026#34; } }   POST /payments-api/4.0/service.cgi HTTP/1.1\nHost: sandbox.api.payulatam.com\nContent-Type: application/json; charset=utf-8\nAccept: application/xml\nContent-Length: length\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;xxxxxxxxxxxxx\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;xxxxxxxxxxxxx\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    You can set the language you want to use in the request through the Content-type and Accept HTTP headers. You can use all possible combinations:\n   CONTENT-TYPE ACCEPT     application/xml application/xml   application/json application/json   application/xml application/json   application/json application/xml    Considerations  You must have an active PayU account. You must install a valid SSL certificate in your server and your site must be able to make SSL connections. Due to this, the virtual machine must have appropriate security extensions. Temporarily, do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA in your payment requests. You must have CGI or server languages such as Java, C#, VB, PHP, etc. You must be able to store your authentication credentials (API Key and API Login) safely. The encoding for messages must be UTF-8. The dates must have format yyyy-MM-ddTHH:mm:ss, the time format is 24 hours. Example: 2015-08-22T21:35:12. Normally the connection guarantees response times of three seconds on average. If there is an unusual situation, the maximum response time is one minute. It is highly recommended that you set timeouts when you connect with PayU. It is important to validate the length and numbers of credit cards by franchise, together with the security codes.  Available features ","excerpt":"You can connect your online store to the PayU platform and the checkout process will be handled on …","ref":"/en/docs/integrations/api-integration.html","title":"API Integration"},{"body":"Puedes contactar tu tienda en línea a la plataforma de PayU y el proceso de checkout será manejado en tu página web. Para integrar esta opción, debes tener una cuenta de PayU empresarial y habilidades de programación avanzadas.\nAccede a múltiples métodos de pago (varía por país) incluyendo tarjetas de crédito, transferencias bancarias y pagos en efectivo.\nConfiguraciones iniciales PayU te permite integrarte con la pasarela de pagos transaccional, las herramientas de pago disponibles y las consultas desarrollando un cliente HTTPS para enviar la información de la transacción a través de SSL. Es muy importante que los datos sensibles de la transacción como el número de la tarjeta de crédito, la fecha de expiración de la misma y demás, no sean almacenados. Recomendamos que sigas las mejores prácticas de PCI DSS (Payment Card Industry Data Security Standard).\nla transmisión de las transacciones se asegurada a través de una conexión TLS (Transport Layer Security) de 256 bits desde el servidor de tu tienda hasta nuestra pasarela de pagos. El intercambio de mensajes se hace a través de cadenas JSON o XML y las operaciones se distinguen por un comando que se incluye en la petición. Observa los siguientes ejemplos JSON y XML:\n JSON XML   POST /payments-api/4.0/service.cgi HTTP/1.1\nHost: sandbox.api.payulatam.com\nContent-Type: application/json; charset=utf-8\nAccept: application/json\nContent-Length: length { \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_PAYMENT_METHODS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;xxxxxxxxxxxxx\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;xxxxxxxxxxxxx\u0026#34; } }   POST /payments-api/4.0/service.cgi HTTP/1.1\nHost: sandbox.api.payulatam.com\nContent-Type: application/json; charset=utf-8\nAccept: application/xml\nContent-Length: length\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_PAYMENT_METHODS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;xxxxxxxxxxxxx\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;xxxxxxxxxxxxx\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    Puedes definir en lenguaje que deseas utilizar en la petición a través de las cabeceras HTTP Content-type y Accept. Puedes utilizar todas las combinaciones posibles:\n   CONTENT-TYPE ACCEPT     application/xml application/xml   application/json application/json   application/xml application/json   application/json application/xml    Consideraciones  Debes tener una cuenta activa de PayU. Debes instalar un certificado SSL válido en tu servidor y tu página web debe poder hacer conexiones SSL. Debido a esto, la máquina virtual debe contar con las extensiones de seguridad apropiadas. Temporalmente NO utilices certificados de seguridad de curva elíptica o aquellos que cuenten con la suite de cifrado TLS_ECDHE_ECDSA_WITH_RC4_128_SHA en tus peticiones de pago. Debes tener lenguajes de servidor o CGI tales como Java, C#, VB, PHP, etc. Debes estar en capacidad de almacenar de forma segura tus credenciales de autenticación (API Key y API Login). Los mensajes deben ser codificados utilizando UTF-8. Las fechas deben utilizar el formato yyyy-MM-ddTHH:mm:ss, el formato de hora es 24 horas. Ejemplo: 2015-08-22T21:35:12. En condiciones normales la conexión garantiza tiempos de respuesta de tres segundos en promedio. Si hay una situación anormal, el tiempo máximo de respuesta será de un minuto. Te recomendamos que configures los timeouts cuando te conectes a PayU. Es importante validar la longitud y los números de tarjetas de crédito por franquicia junto con los códigos de seguridad.  Funcionalidades disponibles ","excerpt":"Puedes contactar tu tienda en línea a la plataforma de PayU y el proceso de checkout será manejado …","ref":"/es/docs/integrations/api-integration.html","title":"Integración API"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  Activate my personal account To activate your personal account follow these simple steps:\n You must enter your administrative module by clicking on the Activate your account tab.  We will ask you about your sales in order to learn more about your economic activity.  You can register the bank account where we will transfer the money from your sales.  Note If the bank account does not belong to the country where you created your account, PayU will show a different menu.  You must attach the images of the required documents. The supported formats are: .txt, .png, .tiff, .jpg, .pdf, or .doc The most important documents in the account activation process are:   Copy of your ID. A bank statement certifying that the bank account is in the name of the person who registered the account in PayU.  You will receive an email confirming that you have sent the documents. Additionally we will inform you how long it will take to process.  If a correction in any document is necessary, PayU will let you know through an email, you can change the documents clicking on the edit button.\nAfter the validation of the data, you will receive an email telling you we have successfully activated of your account.  Activate my business account To activate your business account you must follow these simple steps:\n You must enter your administrative module by clicking on the Activate your account tab.  We will ask you about your sales in order to learn more about your economic activity.  You can register the bank account to which we will transfer funds from your sales.  Note If the bank account is not located in the country where you created your account, PayU will show a different menu.  You must attach the images of the required documents, the supported formats are: .txt, .png, .tiff, .jpg, .pdf, or.doc  You will receive an email confirming that you have sent the documents. Additionally, we will inform you how long it will take process them.  If a correction in any document is necessary, PayU will let you know through an email, you can change the documents clicking on the edit button.\nAfter the validation of the data, you will receive an email telling you we have successfully activated of your account.  Getting out of the test mode Once your account is active, you must uncheck the Test mode in your administrative module. This way you can make real transactions through your PayU account. Enter the Configuration tab, and click Account configuration.\n ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  Activate my personal …","ref":"/en/deprecated/merchant-panel/account-activation.html","title":"Account activation"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Completar registro de mi cuenta personal Para completar el registro de tu cuenta personal solo debes seguir estos simples pasos:\n Debes ingresar a tu Módulo Administrativo haciendo clic en la pestaña Completa tu registro.  Con el fin de conocer más sobre tu actividad económica te pediremos información sobre tus ventas.  Podrás inscribir la cuenta bancaria en la que realizaremos la transferencia de dinero de tus ventas.  Nota Si la cuenta bancaria no pertenece al país en donde creaste tu cuenta PayU se desplegará un menú diferente.  Deberás adjuntar las imágenes de los documentos requeridos, los formatos soportados son: .txt .png .tiff .jpg .pdf o .doc. Los datos más importantes para completar tu registro son:   Una copia de tu identificación. Una copia del extracto bancario más reciente. (en Colombia debes tener un certificado bancario en donde conste que la cuenta se encuentra a tu nombre)  Recibirás un correo electrónico confirmándote que has enviado los documentos, adicionalmente te informaremos en cuanto tiempo te daremos una respuesta del trámite.  Si es necesario que realices una corrección en tus documentos, te informaremos a través de un correo electrónico. Podrás cargar nuevamente el documento solicitado haciendo clic en la opción editar.\nDespués de que los datos sean validados recibirás un correo indicándote que has completado el registro de tu cuenta exitosamente.  Completar registro de mi cuenta empresarial Para completar el registro de tu cuenta empresarial debes seguir unos simples pasos\n Debes ingresar a tu Módulo Administrativo haciendo clic en la pestaña Completa tu registro.  Con el fin de conocer más sobre tu actividad económica te pediremos información sobre tus ventas.  Podrás inscribir la cuenta bancaria en la que realizaremos la transferencia de dinero de tus ventas.  Nota Si la cuenta bancaria no pertenece al país en donde creaste tu cuenta PayU se desplegará un menú diferente.  Deberás adjuntar las imágenes de los documentos requeridos, los formatos soportados son: .txt .png .tiff .jpg .pdf o .doc  Recibirás un correo electrónico confirmándote que has enviado los documentos, adicionalmente te informaremos en cuanto tiempo te daremos una respuesta del trámite.  Si es necesario que realices una corrección en tus documentos, te informaremos a través de un correo electrónico. Podrás cargar nuevamente el documento solicitado haciendo clic en la opción editar.\nDespués de que los datos sean validados recibirás un correo indicándote que tu cuenta ha sido activada exitosamente.  ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Completar registro de …","ref":"/es/deprecated/merchant-panel/account-activation.html","title":"Completar tu registro"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  You can identify your accounts with the Account Id which is found next to the country\u0026rsquo;s image.\nYou can also consult the general balance, which is comprised of:\n Total balance: The total funds received from your sales, after deducting the commission of PayU. Reserve balance: For security reasons, all PayU accounts temporarily reserve a part of the balance as collateral. During this time, the money cannot be transferred to your bank account. This percentage is determined by your business activity and the judgment of your account representative. If you want to see the percentage of reserve balance applied to your account, please write to sac@payulatam.com. Available credit: The money you can transfer to your bank account. It consists of the available credit minus the reserve balance.  Movements This option allows you to perform a query of the movements of your PayU accounts. For example, you can view the credit of your sales, discounts for PayU commissions, or the transfers you have made.\n You can access this feature from the Accounts menu by clicking on the Movement option.  You can define a range of dates (start and end) for your query, as well as the output format, which can be HTML (to show the outcome on within the PayU module), CSV (Excel).  When you run the query, you will see a summary, where the currency is indicated, the total balance, and the reserve balance of the account. It also shows all movements of sales, commissions, taxes, balance releases, reversals in detail and other information that is associated with the accessed account.  Statement This option allows you to generate a statement with all transactions made in a chosen month. The statement shows the summary of the account, with debits and credits made during the month, and information of the available balance.\n You can access this feature in the Accounts menu by clicking on the Statement option.  You can download the file with the account information in PDF format. You will also find the Download and Print option at the bottom-left of the statement.  ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  You can identify …","ref":"/en/deprecated/merchant-panel/checking-balance.html","title":"Checking balance"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Podrás identificar tus cuentas a través de las Cuenta id que podrás encontrar a lado de la imagen del país.\nTambién podrás consultar el saldo general que está compuesto por:\n Saldo total: Es el total del dinero recibido por tus ventas, después de descontar la comisión de PayU. Saldo de reserva: Por razones de seguridad todas las cuentas PayU reservan temporalmente parte de tu dinero como garantía, durante este tiempo el dinero no puede ser transferido a tus cuentas bancarias, este porcentaje es asignado de acuerdo a tu actividad económica. Si deseas consultar el porcentaje de saldo de reserva que es aplicado a tus cuentas debes escribir al correo a sac@payulatam.com. Saldo disponible: Es el dinero que puedes transferir a tu cuenta bancaria. Está compuesto por el Saldo total menos el Saldo de reserva.  Movimientos Puedes acceder desde el menú Cuentas haciendo clic sobre la opción Movimientos.\n Puedes acceder desde el menú Cuentas haciendo clic sobre la opción Movimientos.  Podrás definir un rango de fechas (inicial y final) para realizar la consulta, además de un formato de salida, el cual puede ser HTML (para mostrar el resultado en pantalla) o Excel.  Al ejecutar la consulta, podrás ver un resumen en donde se indica la moneda, el saldo total y el saldo de reserva de la cuenta, además de mostrar de forma detallada todos los movimientos de ventas, comisiones, impuestos, liberaciones de saldo, reversiones, y demás información que está asociada a la cuenta consultada.  Extracto Esta opción te permite generar el extracto con todas las transacciones realizadas en un determinado mes. El extracto muestra el resumen de la cuenta, con los créditos y débitos que fueron efectuados y la información de los saldos disponibles.\n Puedes acceder desde el menú Cuentas haciendo clic sobre la opción Extracto.  Podrás descargar el archivo con los datos de la cuenta en formato PDF. Encontrarás la opción descargar o imprimir colocando tu mouse en la parte superior izquierda del extracto.  ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Podrás identificar tus …","ref":"/es/deprecated/merchant-panel/checking-balance.html","title":"Consultar saldos"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Datos Bancarios En esta sección puedes verificar o editar tus datos bancarios. Al abrir tu cuenta en PayU, automáticamente tienes asociada una cuenta bancaria principal que registrarte al momento de iniciar tu cuenta virtual PayU y a la cual se realizan la mayoría de las transferencias.\n Puedes acceder desde el menú Transferencias haciendo clic sobre la opción Datos bancarios, donde encontrarás los datos de tu cuenta bancaria principal. Si deseas cambiar esta cuenta, puedes editar los datos y adjuntar un soporte que acredite que la cuenta bancaria esta a nombre de la misma persona de la cuenta PayU.  na vez registres los datos de la nueva cuenta bancaria principal, el equipo de PayU validará los datos. Mientras se realiza este proceso, podrás realizar transferencias a tu cuenta bancaria anterior y el icono  indicará que aún se está validando la nueva cuenta. Cuando el icono se vuelva color verde , significa que la cuenta ha sido verificada y ya podrás hacer tus transferencias a la nueva cuenta principal.  Registro de cuentas bancarias de terceros Please Note  Disponible por ahora, solo para cuentas PayU de Colombia. La opción de Gestión de Terceros solo se habilitará una vez hayas solicitado a Servicio al cliente la activación de esta herramienta, ya que debes aceptar nuevos términos y condiciones antes de disponer de sus funciones.   Esta funcionalidad te permite gestionar (crear, editar y eliminar) los datos bancarios de terceros, por ejemplo, proveedores, asociados o cuentas bancarias a nombre del titular de la cuenta PayU.\n Puedes acceder desde el menú Transferencias haciendo clic sobre la opción Gestión de Terceros.  Para registrar otra cuenta bancaria, puedes hacer clic en la opción Registrar Tercero, diligenciar la información solicitada y finalmente hacer clic en el botón Registrar.  Podrás registrar un máximo de 5 cuentas. Si deseas editar o borrar alguna cuenta previamente registrada, podrás hacer clic sobre los iconos  o  respectivamente.  Transferir dinero  Para realizar transferencias de dinero puedes acceder desde el menú Transferencias haciendo clic sobre la opción Transferencia.  Nota Si tu cuenta es de Brasil\nSi tu cuenta PayU es de Brasil, pero deseas realizar transferencias a bancos en otros países, deberás seleccionar la cuenta y un rango de fechas. El sistema calculará el saldo que se puede transferir a la cuenta bancaria de acuerdo a las transacciones realizadas en ese período de tiempo.  Programar transferencias Te permite generar transferencias automáticas semanales, mensuales o con la periodicidad que necesites. Puedes acceder desde el menú Transferencias haciendo clic sobre la opción Prog. de transferencias.\n Diligencia el formulario con los datos solicitados y haz clic en “Programar Transferencia”; podrás editar o borrar las transferencias previamente definidas con los iconos  y .  Consultar el estado de una transferencia  Consulta el estado de tus transferencias ingresando al menú Transferencias haciendo clic sobre la opción Estado de transferencias. Podrás realizar el filtro de la búsqueda por cuenta, fecha de realización y el estado de la transferencia.  ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Datos Bancarios En esta …","ref":"/es/deprecated/merchant-panel/transfers-old.html","title":"Transferencias"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  Bank Data In this section you can verify and edit your bank details. Your main bank account will be automatically linked to your PayU account upon registration. This is the account that will receive most of your transfers.\n Choose this option by clicking on Bank Data in the Transfer menu where you will find main bank account details. You can change this bank account, edit details and attach a supporting document confirming this account is registered under the same person that holds the PayU account.  Once you have registered new bank details, PayU will validate the information. While this process is taking place you can still make transfers to your previous bank account. This icon  indicates that your new account is still being validated. A green icon  indicates that your new account has been verified and you will be able to make transfers to the new main account.  Registration of Third Party Bank Accounts Please Note  Currently, only available to PayU accounts registered in Colombia The option Manage Third Parties is only available by request from Customer Service. This function requires your agreement to further terms and conditions.   This function enables you to manage (create, edit and delete) the details of third party bank accounts, for example: suppliers, associates or other bank accounts registered to the PayU account holder.\n Choose this option by clicking on Manage Third Parties in the Transfer menu.  In order to register another bank account, click on the option Register Third Party. Complete the required fields and click on the Register button.  You are able register up to 5 accounts. If you would like to edit or remove a registered account you can do this using the icons  or  respectively.  Transfer Money  In order to make a transfer select Transfers from the Transfer menu.  Note If your account is registered in Brazil: If your PayU account was registered in Brazil and you wish to transfer funds to banks in other countries, you must select the appropriate account and date range. Our system will calculate the balance that can be transferred based on the transactions made during this timeframe.  Schedule Transfers You can schedule automatic transfers, either weekly, monthly, or any regular interval you need. Choose this option by clicking on the Schedule Transfer option in the Transfers menu.\n Complete the fields with the required information and click Schedule Transfer. You can edit or delete previously scheduled transfers with the icons  or .  Check the status of a Transfer  Choose this function by clicking on the Transfer Status option in the Transfers menu. You can filter the search by account, date of completion, and transfer status.  ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  Bank Data In this …","ref":"/en/deprecated/merchant-panel/transfers-old.html","title":"Transfers"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Reportes de órdenes En este reporte podrás ver la información general de las ventas realizadas a través de tu cuenta PayU y conocer el estado de cada una de ellas (si están en proceso, fueron pagadas o reembolsadas). Una orden puede tener asociadas varias transacciones, PayU almacena los intentos de pago relacionados a una orden; por ejemplo si vendes unos zapatos y tu cliente intenta pagar con una tarjeta de crédito VISA que no es válida, tu cliente podrá realizar el pago nuevamente con una tarjeta de crédito MasterCard, cada intento de pago se registrará dentro de la orden como una transacción diferente.\n Puedes acceder desde el menú Reportes haciendo clic sobre la opción Órdenes.  Puedes realizar un filtro de este reporte por:   Rango de fechas: Te permite definir el rango de fechas entre los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses. Estado: Te permite seleccionar el estado de las órdenes que deseas consultar.   Estados de la orden  Iniciada: Estado inicial con el que se crea una orden, ya sea porque el pagador aún no ha seleccionado un medio de pago o porque se trata de una reserva. En progreso: Aún se espera el pago de la orden (estado común en pago con efectivo ya que requiere que el pagador consigne el dinero en la entidad financiera). Capturada: Orden que ha sido pagada. Cancelada: Orden que fue cancelada por decisión del pagador o porque el tiempo de pago expiró. Declinada: El proceso ha finalizado, ya sea por rechazo del módulo antifraude o de la entidad bancaria. Reembolsada: Se ha realizado la devolución del dinero proveniente de una venta.    Tipos de transacción: Te permite elegir el tipo de transacción relacionada a una orden. Una orden puede tener diferentes tipos de transacciones asociadas.   Tipos de transacción  Autorización: Transacción autorizada. Autorización y Captura: Transacción autorizada y pagada. Captura: Transacción de pago. Cancelación: Transacción cancelada antes de realizar el movimiento financiero. Anulación: Transacción en la que ya se realizó el movimiento financiero y se requiere una cancelación (previa a reembolso). Reembolso: Devolución del dinero.    Medio de pago: Despliega cada una de las opciones en las que tus clientes pueden realizar un pago, ya sea por franquicias como VISA o Mastercard, o por medios de pagos en efectivo como Baloto, OXXO y BCP; o por transferencia bancaria. Formato: Te permite mostrar el resultado de la consulta en pantalla al elegir el formato HTML, o exportar el resultado a un archivo Excel.  Nota Puedes consultar datos relacionados a la orden como el identificador, la referencia de venta o e-mail del pagador en la opción de búsqueda avanzada.  El resultado de la consulta es el conjunto de órdenes que cumplen las condiciones definidas en los filtros del reporte, mostrando información puntual como el Id de la orden, el número de referencia de la venta y el valor de la transacción entre otros.  En caso de que desees ampliar la información puedes hacer clic sobre una de las órdenes; el sistema mostrará una pantalla con información detallada, incluyendo las transacciones asociadas.  Reporte de transacciones A partir de este reporte podrás consultar todas las transacciones relacionadas a un proceso de pago y la orden a la que pertenecen. Obteniendo información más específica sobre intentos de pago de una orden, reversiones realizadas, datos del pagador etc.\nNota En algunos casos los datos del comprador y del pagador pueden diferir ya que la persona que ordena la compra a través de la página web no es la misma que realiza el pago.   Puedes acceder desde el menú Reportes haciendo clic sobre la opción Transacciones.  Podrás realizar la consulta filtrando por:   Cuenta: En caso de que tengas varias cuentas, te permite seleccionar con cual deseas realizar la consulta de transacciones. Rango de fechas: Te permite definir el rango de fechas en los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses entre las fechas ingresadas. Estado: Permite que selecciones el estado de las transacciones que deseas consultar.   Estados de la transacción  Aprobada: El resultado de la transacción fue satisfactorio. Declinada: La transacción fue cancelada. Error: Error de procesamiento de la transacción. Pendiente: Pendiente por respuesta de la transacción. Expirada: El tiempo de espera de la respuesta en la transacción ha terminado.    Código de respuesta: Despliega un listado de los posibles códigos de respuesta que puede tener una transacción y te permite filtrar la consulta por un código específico. Tipo de transacción: Puedes elegir el tipo de transacción relacionada a una orden.   Tipos de transacción  Autorización: Transacción autorizada. Autorización y Captura: Transacción autorizada y pagada. Captura: Transacción de pago. Cancelación: Transacción cancelada antes de realizar el movimiento financiero. Anulación: Transacción en la que ya se realizó el movimiento financiero y se requiere una cancelación.(previa a reembolso) Reembolso: Devolución del dinero.    País: Te permite consultar el país desde el cual se generó la transacción de venta. Medio de pago: Despliega cada una de las posibles opciones en que tus clientes pueden realizar un pago, ya sea por franquicias como VISA o Mastercard, o por medios de pagos en efectivo como como Baloto, OXXO y BCP o por transferencia bancaria. Formato: Permite mostrar el resultado de la consulta en pantalla al elegir el formato HTML o exportar el resultado a un archivo Excel.  El resultado de la consulta es el conjunto de transacciones que cumplen las condiciones definidas en los filtros del reporte, mostrando información como el ID de la orden al cual se encuentra relacionada una transacción, la fecha en que se llevó a cabo, el Id y el valor entre otros.  Reporte gráfico Esta opción te permite generar gráficos con la información de las ventas o las transacciones generadas en un periodo de tiempo específico.\n Puedes acceder desde el menú Reportes haciendo clic sobre la opción Reporte gráfico.  El reporte te permite filtrar por:   Línea de tiempo: Te permite realizar la consulta en varios tipos de rango de tiempos, permitiéndote ver la información por días, semanas o meses. Rango de fechas: Te permite definir el rango de fechas en los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses.  Estado: Puedes seleccionar el estado de las transacciones que deseas consultar.   Estados de la transacción  Aprobada: El resultado de la transacción fue satisfactorio. Declinada: La transacción fue cancelada. Error: Error de procesamiento de la transacción. Pendiente: Pendiente por respuesta de la transacción. Expirada: El tiempo de espera de la respuesta en la transacción ha terminado.    País: Te permite realizar la consulta de transacciones según el país en el cual se genera la transacción.  El resultado de la consulta puede ser visualizado por medio de un gráfico de líneas o por un gráfico de columnas, que resumen el comportamiento de las transacciones según las condiciones definidas en el filtro.  Certificado de retenciones Si tu comercio es Colombiano y debes presentar certificado de retenciones para la declaración de renta, el módulo administrativo te permite generar de manera automática un documento con la información necesaria.\n Puedes acceder desde el menú Reportes haciendo clic sobre la opción Certificado de retenciones y realizar el filtro de acuerdo al período de tiempo y cuenta deseada.  El resultado de la consulta es un documento en formato PDF que contiene toda información requerida por la legislación colombiana para tu declaración.  Transferencias entre cuentas PayU Estos reportes te permiten consultar todas las operaciones de transferencia de saldo disponible que se han llevado a cabo desde y hacia tus cuentas PayU.\n Podrás consultar aquellas transferencias que se han realizado desde tus cuentas en el módulo de Transferencias realizadas.  Y de igual forma podrás consultar aquellas transferencias que se han realizado hacia tus cuentas en el módulo de Transferencias recibidas.\nEn ambos reportes puedes realizar la consulta del período de tiempo en que se llevó a cabo la operación, las cuentas involucradas y el valor de la transferencia.  Nota Si quieres realizar la consulta de transferencias a cuentas que no pertenezcan a tu comercio debes tener el número cuenta id, que identifica la cuenta PayU latam que deseas consultar en nuestro sistema.  El resultado de la consulta será el reporte consolidado de transferencias entre cuentas PayU que cumplan con los valores solicitados.  Modelos de recaudo en Brasil Si tienes una cuenta en Brasil que funcione a través del modelo de cuotas o del modelo de D+X días, en estos reportes podrás ver como las transacciones están siendo abonadas día a día, permitiéndote tener un mejor control del dinero proveniente de tus ventas en Brasil.\nModelo D+X días En este modelo tu comercio recibirá la totalidad del dinero de una venta una vez hayan transcurrido la cantidad de días que se definieron para tu cuenta.\nEjemplo: Si tú cuenta está configurada para abono de dinero a D+5 días, y tu cliente realiza una compra el día 1 de enero recibirás el abono de tu dinero el día 6 de enero.\nConsultar tus pagos recibidos  Podrás consultar tus pagos recibidos en el módulo de Reportes y haciendo clic sobre Pagos recibidos.  Según el modelo de acreditación y los parámetros que tengas configurados en tú cuenta el reporte te permite filtrar por:   Cuenta: Te permite seleccionar la cuenta con la cual se deseas realizar la consulta de pagos recibidos.  Modelo de acreditación: Te permite seleccionar entre los dos modelos disponibles de acreditación para realizar la consulta, que en este caso es D+X días.  Rango de fechas: Te permite definir el rango de fechas en los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses entre las fechas ingresadas.  Id de la orden: Te permite ingresar un número de orden específico para mirar si este ya fue acreditado a tu cuenta. Formato: Permite mostrar el resultado de la consulta en pantalla al elegir el formato HTML, o exportar el resultado a un archivo Excel.  El reporte mostrará la fecha en que se llevó a cabo la transacción de venta, la fecha en que fue acreditada en la cuenta, y los datos más importantes correspondientes a la transacción como lo son el ID de la orden al cual está relacionada la transacción, la referencia, el valor de la venta y el valor por concepto de intereses de la transacción.  Consultar tus pagos pendientes  Podrás consultar tus pagos en el módulo de Reportes y haciendo clic sobre Pagos pendientes.  El reporte permite filtrar por:   Cuenta: Permite seleccionar la cuenta con la cual deseas realizar la consulta de pagos pendientes.  Modelo de acreditación: Permite seleccionar entre los dos modelos disponibles de acreditación para realizar la consulta, en este caso D+X días.  Rango de fechas: Te permite definir el rango de fechas en los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses entre las fechas ingresadas.  Formato: Permite mostrar el resultado de la consulta en pantalla al elegir el formato HTML, o exportar el resultado a un archivo Excel.  El reporte mostrará la fecha en que se llevó a cabo la transacción de venta, la fecha en que será acreditada la venta, la cantidad de días faltantes, y los datos más importantes correspondientes a la transacción. Como el ID de la orden al cual está relacionada la transacción, la referencia, el valor de la venta y el valor por concepto de intereses de la transacción.  Modelo a cuotas Tu comercio recibirá el dinero de las ventas realizadas mes a mes de acuerdo a la cantidad de cuotas definidas por tu cliente al momento de la compra.\nEjemplo: Si tu cliente realiza una compra el 1 de enero diferida a 6 meses, a partir del día de la compra mes a mes será abonada la cantidad de dinero correspondiente a la cuota durante 6 meses.\nConsultar tus pagos recibidos  Podrás consultar tus pagos recibidos en el módulo de Reportes y haciendo clic sobre Pagos recibidos.  Según el modelo de acreditación y los parámetros que tengas configurados en tú cuenta el reporte te permite filtrar por:   CuentaÇ: Te permite seleccionar la cuenta con la cual se deseas realizar la consulta de pagos recibidos.  Modelo de acreditación: Te permite seleccionar entre los dos modelos disponibles de acreditación para realizar la consulta, que en este caso es D+X días.  Rango de fechas: Te permite definir el rango de fechas en los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses entre las fechas ingresadas.  Id de la orden: Te permite ingresar un número de orden específico para mirar si este ya fue acreditado a tu cuenta. Formato: Permite mostrar el resultado de la consulta en pantalla al elegir el formato HTML, o exportar el resultado a un archivo Excel.  El reporte mostrará la fecha en que se llevó a cabo la transacción, la fecha en que la última cuota fue acreditada a la cuenta, y la fecha en que la próxima cuota será acreditada, la cantidad de cuotas a la que fue diferida la compra y la cantidad de cuotas que ya han sido pagadas, además de los datos más importantes correspondientes a la transacción como lo son el ID de la orden al cual está relacionada la transacción, como lo son la referencia, el valor de la venta y el valor por concepto de intereses de la transacción.  Consultar tus pagos pendientes  Podrás consultar tus pagos en el módulo de Reportes y haciendo clic sobre Pagos pendientes.  El reporte permite filtrar por:   Cuenta: Permite seleccionar la cuenta con la cual deseas realizar la consulta de pagos pendientes  Modelo de acreditación: Permite seleccionar entre los dos modelos disponibles de acreditación para realizar la consulta, en este caso D+X días.  Rango de fechas: Te permite definir el rango de fechas en los cuales deseas realizar la consulta. El límite de la consulta es de 3 meses entre las fechas ingresadas.  Formato: Permite mostrar el resultado de la consulta en pantalla al elegir el formato HTML, o exportar el resultado a un archivo Excel.  El reporte mostrará la fecha en que se llevó a cabo la transacción de venta, la fecha en que será acreditada en la cuenta, la cantidad de días faltantes, y los datos más importantes correspondientes a la transacción. Como el ID de la orden al cual está relacionada la transacción, la referencia, el valor de la venta y el valor por concepto de intereses de la transacción.  Nota Si tu cuenta tiene fondo de reserva, el porcentaje de este será retenido durante el abono a tu cuenta PayU.  ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Reportes de órdenes En …","ref":"/es/deprecated/merchant-panel/reports-old.html","title":"Reportes"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  Orders report With these reports you can see the overview of the sales made through your PayU account and know the status of each of them (if they are in process, paid or refunded). An order can have several associated transactions. PayU stores payment attempts related to an order. For example if you sell your shoes to a client and he tries to pay with an invalid VISA credit card, he can then pay again with a MasterCard credit card. Each payment attempt is recorded in the order as a separate transaction.\n You can access this feature in the Reports menu by clicking on Orders.  You can filter this report by:   Range of dates: You can define the range of dates between which you want to generate the query. The query limit is 3 months. Status: Allows you to select the status of the orders you want to see.   Order status  Initiated: The initial status of the order. The payer has not selected a payment method or it is a reservation. In progress: The payment of the order has been selected but not completed (common state with cash payments because it requires the payer to deposit the money in the financial institution). Captured: The order was paid. Cancelled: The payer canceled the order, or the payment time expired. Declined: The process was not completed, either because of rejection by our anti-fraud module or the financial institution. Refunded: The funds from a sale were returned.    Transaction type: Allows you to choose the type of transaction related to an order. An order can have different types of transactions associated with it.   Transaction status  Authorization: Authorized transaction. Authorization and Capture: Authorized and paid transaction Capture: Payment transaction. Cancellation: Transaction canceled before financial movement Annulment: Transaction in which the financial movement has been already made and cancellation is required (before reimbursement). Reimbursement: Return of money.    Payment method: Displays each of the possible options in which your customers can make a payment, either by franchise (e.g VISA, MasterCard) or by cash payments (e.g. Baloto, OXXO, and BCP), or by bank transfer. Format: This shows you the query on the screen when you choose the HTML format or exports the results to a excel file.  Note In the advanced search option, you can check data related to the order including the identifier, the sales reference, or email of the payer.  The results of the query are displaying in a set of orders that match the conditions defined in the report’s filters. This will show detailed information such as the ID of the order, the reference number of the sale, and the value of the transaction, among others.  In case you want more information, you can click on one of the orders. The system will display a screen with detailed information, including associated transactions.  Transactions report This report will allow you to check all transactions related to a payment process and the order to which they belong. You can get detailed information about attempts to pay an order, reversals performed, payer data, etc.\nNote The data of the buyer and the payer may differ because the person placing the order through the website is not the same who makes the payment.   You can access this feature in the Reports menu by clicking on the Transactions option.  You can generate your query filter by:   Account: If you have multiple accounts, you can select which you want to query transactions. Date Ranges: You can define the date range in which you want to query. The query limit is 3 months between the specified dates. Status: Allows you to select the status of the transactions you want to check.   States of the transaction  Approved: The result of the transaction was successful Declined: The transaction was canceled. Error: Transaction processing error. Pending: Pending transaction response. Expired: The timeout of the transaction response has ended.    Response Code: Displays a list of possible response codes a transaction may have and allows you to filter the query with a specific code. Transaction type: You can choose the type of transaction related with an order.   Transaction types  Authorization: Authorized transaction Authorization and Capture: Authorized and paid transaction. Capture: Payment transaction. Refund: Return of funds.    Country: Lets you see the country from which the sales transaction was generated. Method of payment: Displays each of the possible options that your customers can make a payment, either by franchises (e.g. VISA or MasterCard) or by cash payments (e.g. Baloto, OXXO, or BCP) or by bank transfer. Format: You can display the result of the query in the PayU platform when choosing the HTML format, or export the results to a CSV file.  The result of the query is a set of transactions that meet the conditions defined in the report filters. This will include information such as the ID of the order to which a transaction is related, the date on which it took place, the Id, and the value, among others.  Graphic report This option allows you to generate graphs with information of sales or transactions processed over a period of time.\n You can access this feature in the Reports menu by clicking on the Graphic Report option.  The report allows you to filter by:   Timeline: Allows you to query various time ranges, allowing you to view reports by days, weeks, or months. Date Range: You can define the date range in which you want to query. The query limit is 3 months. Status: You can select the status of the transactions you want to query.   Status of the transaction  Approved: The result of the transaction was successful Declined: The transaction was canceled. Error: Transaction processing error. Pending: Pending transaction response. Expired: The timeout of the transaction response has ended.    Country: Allows you to search transactions according to the country where are generated.  The search results can be demonstrated using a line or column chart that summarizes the behavior of the transactions under the conditions defined in the filter.  Retentions certificate If your account is active for Colombian transactions and you must present the deductions certificate for reporting of your income tax, the administrative module allows you to generate a document with the necessary information.\n You can access this feature in the Reports menu by clicking on the Retentions Certificate and set the filter according to a time range and the account in Colombia with which the report will be created.  The exported file of the report is a PDF document that contains all the information required by Colombian law for income tax returns.  Transfer reports between PayU accounts This report allows you to view all the transfer operations of the available balance of your PayU accounts.\n You can check the transfers made from your accounts in the Reports module and by clicking on Transfers Made.  Similarly, you can check the transfers made to your accounts in the Reports module and by clicking on Transfers Received.\nIn both reports you can perform the query according to the period of time in which the operation was conducted, the accounts involved, and the value of the transfer.  Note If you want to consult transfers made to accounts that do not belong to your shop, you must have the Account ID, the number that identifies the PayU account in our system.  The result of these queries will be a consolidated report of the transfers between PayU accounts that meet the required values.  Accreditation models of accounts in brazil If you have an account in Brazil that operates with the Installments model or the Withdraw After X Days model, you can see in these reports the transactions paid every day, allowing you a better control of the money from your sales in Brazil.\nWithdraw at X days In this model your business will receive all the money from a sale once the number of days that were defined for your account have passed.\nExample: If your account is set for payment at D +5 days, and your customer makes a purchase on January 1st, you will receive the payment on January 6th.\nConsult your received payments  You can check your payments received in the Reports module by clicking on Received Payments.  According to the accreditation model and the parameters that you have configured in your account, the report allows you to filter by:   Account: Allows you to select the account with which you want to query payments received. Accreditation model: Allows you to select between the two available models of accreditation to perform the query, which in this case is D + X days. Date Range: You can define the date range in which you want to query. The query limit is 3 months between the entered dates. Order Id: Allows you to enter a specific order number to see if was credited in your account. Output format: Displays the result of the query on the screen when you choose the HTML format, or export the results to a CSV file.  The report will show the date on which the sale was conducted, the date it was credited to the account, and the most important data relating to the transaction such as the order Id to which the transaction relates, reference, value of the sale and value of interest of the transaction  Check your pending payments  You can check your payments in the Reports module and clicking on Pending Payments.  The report allows filtering by:   Account: Select the account from which you want to query outstanding payments. Accreditation model: Select between the two available accreditation models to perform the query, in this case D + X days. Date Range: You can define the date range in which you want to query. The query limit is 3 months between the entered dates. Output format: Displays the result of the query on the screen when you choose the HTML format, or export the results to an CSV file.  The report will show the date of the transaction, the date of accreditation of the sale, the remaining days, and the most important data relating to the transaction such as the Order ID related to the transaction, the reference, the value of the sale and value of interest of the transaction.  Installments model Your store will receive the money every month from the sales according to the number of installments defined by your customer at the time of purchase.\nExample: If your customer makes a purchase on January 1 deferred to 6 months, from the date of purchase the amount of money will be pay corresponding to the installments during 6 months.\nCheck your received payments  You can check your received payments in the Reports module and clicking on Paid Payments.  According to the accreditation model and the parameters that you have configured in your account, the report allows you to filter by:   Account: Allows you to select the account with which you want to query received payments. Accreditation model: Allows you to select between the two available accreditation models to perform the query, which in this case is by quotas. Date range: You can define the date range in which you want to query. The query limit is 3 months between the entered dates. Order Id: Allows you to enter a specific order number to see if was accredited in your account. Output format: Displays the result of the query within the PayU module when you choose the HTML format, or export the results to a CSV file.  The report will display the date on which the transaction took place, the date when the last payment was credited to the account, the date on which the next installment will be credited, the amount of fees to which the purchase was deferred, and the amount of fees that have been paid. Additionally, the report will show the most important data related to the transaction, such as the order Id to which the transaction relates, the value of the sale, and the value of interest on the transaction.  Check your pending payments  You can check your received payments in the form of Reports and clicking on Pending Payments.  The report allows filtering by:   Account: Select the account from which you want to search the pending payments. Accreditation model: You can define the date range in which you want to search. The query limit is 3 months between the entered dates Date range: You can define the date range in which you want to search. The query limit is 3 months between the entered dates. Output format: Displays the result of the search on the screen when you choose the HTML format, or export the results to an Excel file.  The report will show the date of the sale, the date on which the last installment was paid. The most important data relating to the transaction such as the Order ID to which the transaction relates, the reference, the amount of fees the purchase was deferred to, the amount of pending payments to be accredited, the value of the sale, and the interest value of the transaction.  Note If your account has a reserve fund, a percentage of this will be held during the credit to your PayU account.  ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  Orders report With …","ref":"/en/deprecated/merchant-panel/reports-old.html","title":"Reports"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  ¿Qué es un reembolso? Un reembolso se presenta cada vez que el comercio voluntariamente decide reintegrar el dinero de una compra al tarjetahabiente, por motivos como:\n El cliente no está a gusto con el producto y lo devuelve El comercio se queda sin stock y no puede entregar el producto o servicio a su cliente  ¿Cómo realizar el reembolso de una transacción? Para realizar la solicitud del reembolso de una transacción debes realizar las siguientes acciones. Recuerda que la transacción debe estar en estado “Aprobada” y no debe tener pendiente un proceso de disputa.\n Consultar la transacción que deseas que reembolsar:\nPara consultar una transacción debes ir en tu módulo administrativo al menú Reportes haciendo clic sobre la opción Transacciones y buscar la transacción específica de la cual deseas solicitar el reembolso del dinero correspondiente al valor de la transacción.  Realizar solicitud de reembolso:\nUna vez tengas identificada la transacción, debes seleccionarla para ver el detalle de la misma y si estás seguro de realizar la solicitud de reembolso debes dar clic al botón Reembolsar que se encuentra en la sección Detalle de la transacción.  Ingresar información de la solicitud de reembolso:\nUna vez indiques que deseas realizar una solicitud de reembolso de una transacción, se te solicitará una información adicional para poder radicarla, la información requerida es la siguiente: Código de reversión, Tipo de transacción (Reembolso o Reversión parcial), Monto de reversión* y Comentario.  Tener en cuenta * Reversiones parciales: Si el valor de la reversión parcial solicitada supera el valor total actual de la transacción padre no se te permitirá radicar una solicitud de reembolso parcial asociada a dicha transacción. Debes tener en cuenta que el valor actual de la transacción padre pudo haber sido afectado por otras solicitudes de reversiones parciales.\nLas Reversiones parciales sólo aplican para Brasil, Perú y Argentina.\n Confirmar solicitud de reembolso: Antes de registrar tu solicitud de reembolso se te mostrará la información de la transacción que seleccionaste junto con la información ingresada y se te solicitará que confirmes la radicación de tu solicitud a través de la opción Enviar. En caso contrario puedes desistir de la operación a través de la acción Cancelar.  ¿Cuáles son las posibles resultados una vez registres tu solicitud de reembolso? Una vez confirmaste la radicación de tu solicitud de reembolso el sistema dependiendo del caso puede emitir alguna de las siguientes respuestas:\nSolicitud de Reembolso aprobada Si tu solicitud de reembolso cumple con las condiciones requeridas verás el siguiente mensaje de confirmación.\nSolicitud de Reembolso pendiente de aprobación por parte del área encargada En este caso la solicitud de reembolso debe ser revisada y aprobada por el área encargada de la gestión de este tipo de solicitudes, por lo cual esta queda en estado pendiente y debes esperar que sea atendida o gestionada. Puedes consultar el estado de tu solicitud de reembolso desde tu Secure a través del módulo de Reportes y a través de la opción Reembolsos.\nTener en cuenta  Si el tipo de transacción es Reversión Parcial estas solicitudes quedarán en todos los casos en estado Pendiente. Las Reversiones parciales sólo aplican para Brasil, Perú y Argentina. El tiempo de respuesta estimado para la gestión de la solicitud de reembolso por parte del área encargada es de dos (2) días hábiles para todos los países (Argentina, Brasil, Chile, Colombia, México, Perú, Panamá). Los tiempos de reintegro del dinero a los compradores varían de acuerdo a cada país.   Solicitud de Reembolso Declinada Una solicitud de reembolso puede quedar declinada por algunos de los siguientes motivos:\n Ya existe una solicitud de reembolso:\nSi la transacción ya tiene asociada una solicitud de reembolso que se encuentre en estado pendiente, el sistema te indicará que tu solicitud fue declinada por tal motivo.   No tienes saldo disponible en tu cuenta:\nSi no tienes dentro del saldo disponible de tu cuenta mínimo el valor correspondiente al valor de la transacción o al valor de la solicitud de reembolso (En caso de reversiones parciales*) no se te permitirá registrar una solicitud de reembolso asociada a transacciones de dicha cuenta y por ende tu solicitud será declinada.   La transacción tiene pendiente una solicitud de disputa:\nSi la transacción tiene pendiente una Disputa, el sistema te indicará que tu solicitud fue declinada y no registrará tu solicitud de reembolso, en este caso puedes consultar su estado a través del módulo de disputas.  ¿Dónde puedes consultar el estado de tu solicitud de reembolso? Para conocer el estado de tus solicitudes de reembolso puedes acceder desde tu Secure al módulo de Reportes y a través de la opción Reembolsos consultar el estado de todas tus solicitudes de reembolso. Si deseas conocer el estado de una solicitud o solicitudes determinadas puedes aplicar los criterios o filtros de búsqueda para que realices búsquedas específicas.\n","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  ¿Qué es un reembolso? …","ref":"/es/deprecated/merchant-panel/refunds-old.html","title":"Reembolsos"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  What is a refund? A refund is made every time a business voluntarily decides to refund the money spent to the cardholder due to the following reasons:\n The client does not like the product and returns it. The business’ stock is depleted and it is not able to deliver the product to the client.  How to carry out a refund? To proceed with a transaction refund, the following steps must be completed. The transaction must be approved and free of any pending dispute process.\n Consult the transaction that you want to refund:\nTo verify a transaction, you must go to the administrative section on the Report menu, then select Transactions option and look for the specific operation to reimburse based on the money spent during the purchase.  Submit the request of refund:\nAfter identifying the transaction, you can expand it to see more details and be sure of continuing with the process. If in effect this is the right transaction, you have to click the Refund button located in the Transaction detail section.  Enter information related with the refund request:\nYou will be requested with the following additional information to fulfill it: Reversion code, type of transaction (refund or partial reversion), reversion amount* and comment.  Bear in mind * Partial reversal: if the amount regarding the requested partial reversal exceeds the total of the transaction, you will not be able to proceed with partial refund. You must also consider that the current transaction may be affected by other partial reversal requests.\nPartial reversals only apply to Brazil, Peru and Argentina.\n Confirmation of a refund request: Prior to submit your refund request, the information related to the transaction you previously selected will be shown jointly with the last provided data; in this sense, you will be requested to confirm the filling of such request by means of the Send option. On the contrary, you may discontinue the process by choosing Cancel.  What are the possible results after submitting a refund request? After confirming the filling of the refund request, the system, depending on the case, may issue one of the following answers:\nPassed refund request If your request is complying with all required conditions, you may see the following confirmation message.\nThe refund request awaits approval by the corresponding department In this case, the request must be reviewed and passed by the corresponding department in charge of this process, and it will await to be attended and processed. You may consult the status from your Secure account, and then go to the Report section, option: Refund.\nBear in mind  If the transaction if a partial reversal, the requests will stay in all cases as pending. Partial reversals only apply to Brazil, Peru and Argentina. The estimated time to answer your request by the department in charge of such area is two (2) working days for all countries (Argentina, Brazil, Chile, Colombia, Mexico, Peru, Panama). The time of refund to purchasers varies in all countries.   Rejection of refund request A refund request may be rejected due to the following:\n There is already a refund request:\nIf the transaction is already related to a previous refund request, which waits for its approval, the system will indicate that the request is rejected due to this reason.   There is not credit in your account:\nIf you do not have within the available balance of your account, the amount corresponding to the money of the transaction or to the value of the refund request (See the partial reversions*), you are not able to submit a request related to the transaction of said account; as a result, your request will be declined.   The transaction awaits a dispute request:\nIf the transaction awaits a dispute, the system will indicate that the request is rejected and will not submit it. In this case, you may consult the status in the dispute section.  Where can I get the information of the refund request status? To know in details the status of your request, you may use your Secure account and go to the Report section and in the Refund section, you will verify the status of all refund requests. If you want to know the status of a request or a specific one as well, you may apply criteria or search filters to look for said information.\n","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  What is a refund? A …","ref":"/en/deprecated/merchant-panel/refunds-old.html","title":"Refunds"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Nota Una vez que una transacción es parte de una disputa, el monto asociado pasa a formar parte del saldo congelado, por lo tanto no podrás realizar transferencias de dicho saldo a tu cuenta bancaria hasta tanto no se resuelva la disputa.\nSi deseas ver un demo de la herramienta y conocer más sobre el Módulo de disputas y cómo puede ayudarte a disminuir los contracargos te invitamos al visitar el video en nuestro canal el YouTube con las memorias del webinar sobre contracargos\nVer webinar\n ¿Qué es una disputa? Una disputa se inicia cuando un comprador desconoce ante el banco un cargo realizado a su tarjeta de crédito. Una vez notificado el banco, se inicia el proceso formal para determinar la validez de la compra efectuada.\nMotivos de disputa Existen varias razones que pueden llevar a un comprador a desconocer un cargo en su tarjeta de crédito. Los motivos por los que se inicia un proceso de disputa pueden variar. Algunos de los que se han identificado son los siguientes:\n Fraude: Las disputas se determinan como fraude cuando una persona no autorizada realizó compras con una tarjeta de crédito. Este tipo de disputa puede suceder si la tarjeta fue robada o extraviada. Desconocimiento de pago**_: La marca o el nombre del comercio que se refleja en el extracto de la tarjeta de crédito no es reconocida por el tarjetahabiente. _Producto no entregado*_: el tarjetahabiente indica que no ha recibido el producto o servicio objeto del cargo realizado a su tarjeta de crédito. Producto no aceptable: el tarjetahabiente alega no haber recibido el producto o servicio en las condiciones esperadas. Duplicado: el tarjetahabiente indica que el cargo realizado por la compra de un producto o servicio se aplicó más de una vez a su tarjeta de crédito. Monto no corresponde: El cargo realizado a la tarjeta de crédito no corresponde con el valor de la compra. No informado por la entidad: En muchas ocasiones el banco o la red procesadora inicia un proceso de disputa sin tener un motivo específico.  ¿Cómo funciona? 1. Notificación de una disputa Cuando PayU es notificado por parte del banco que se ha iniciado un proceso de disputa, automáticamente recibirás un email con la información de dicho proceso.\nEmail que te notifica el inicio de una disputa\n Email que pueden ver tus compradores\n  Igualmente enviamos un POST con toda la información de la disputa a cualquier URL que configures desde tu módulo administrativo. De esta manera puedes automatizar tus procesos de gestión de disputas para minimizar el riesgo de un posible contracargo.\nPuedes configurar la URL en donde realizaremos la notificación dentro del módulo administrativo haciendo click en el menú configuración en la opción configuración de cuentas, defines la url de notificación de disputas y habilitando la casilla de notificación.\nUna vez realices este proceso, recibirás automáticamente un POST con toda la información del proceso de disputa iniciado. Igualmente recibirás una notificación POST cada vez que el proceso de disputa sufra una actualización, de esta manera estarás enterado del avance y finalización de dicho proceso.\n2. Consultas a través del módulo administrativo Puedes consultar y gestionar tus procesos de disputa desde tu módulo administrativo. En el menú disputas.\n3. Proporciona evidencias Es importante que siempre respondas proporcionando evidencia para una disputa antes de la fecha límite estipulada por el banco. Una vez cumplida la fecha máxima no será posible cargar la evidencia correspondiente para una disputa.\nPara cargar evidencia que nos permita gestionar frente al banco o la red procesadora, debes hacer clic sobre una disputa, esto te llevará al detalle de la disputa. Allí encontrarás el botón cargar evidencia, selecciona el archivo que creas puede ser útil para pelear por la disputa y presiona el botón guardar.\nPara minimizar la probabilidad de generación de un contracargo puedes proporcionarnos las siguientes evidencias para una disputa:\n Comprobante de entrega del producto y/o servicio firmado por el tarjeta-habiente. Factura de Venta del producto o servicio. Carta de aceptación de pago firmada por el tarjeta-habiente anexando documento de identificación del mismo. Otros soportes que validen la compra.  Nota Debes fijarte que no se haya cumplido la fecha máxima de respuesta, en este caso no vas a poder cargar evidencia, las fechas máximas de respuesta por país son:\n   País Cantidad de días para enviar evidencias     Argentina 5 días hábiles   Brasil 5 días hábiles   Chile 5 días hábiles   Colombia 2 días hábiles   México 5 días calendario   Perú 2 días hábiles   Panamá 8 días hábiles     4. Decisión final sobre el estado de la disputa Una vez proporcionada la evidencia, enviamos los documentos al banco emisor o la red que procesó la transacción, de quien depende la resolución del caso. El caso de disputa puede resultar: ganado (sin contracargo), perdido (contracargo) o reembolso. En el caso de reembolsos, el comercio es quién hace la devolución al comprador y el banco no genera el contracargo. Cuando la entidad financiera comunica el resultado de la disputa, el caso se actualiza automáticamente en el módulo administrativo y PayU envía un POST a la URL configurada con la información del resultado final.\nEstados según el flujo de una disputa Cuando se notifica una disputa, se crea una entidad disputa para la transacción asociada.\nEl estado de la disputa cambia según el punto en que se encuentre dentro del flujo del proceso.\nEstados de una disputa:\n   Estado Descripción     Notificada Cuando se inicia un proceso de disputa, debes cargar evidencia para la disputa.   En revisión Cuando el comercio proporciona evidencia para una disputa desde el módulo administrativo y la disputa entra en revisión por parte de la entidad financiera.   Perdida La transacción es reversada desde la cuenta virtual del comercio y puede incurrir en un costo de gestión de contracargo.   Ganada: El proceso de disputa se resuelve a favor del comercio, no hay deducciones de ningún tipo.   Reembolsada Existen disputas que pueden ser reversadas ya que aún no ha sido facturado el monto en la tarjeta de crédito del tarjetahabiente. Se genera reversión de la transacción, pero no existe cobro por contracargo. Para resolver una disputa como reembolso debes solicitarlo a disputas@payulatam.com    Tips para gestionar tus disputas  Si cuentas con los datos del tarjetahabiente, la mejor forma para gestionar un proceso de disputa es contactándolo. Si el motivo de la disputa es simplemente desconocimiento, puedes pedirle al tarjetahabiente que hable con su banco para que retire la queja y se resuelva el proceso de disputa a tu favor, igualmente debes proporcionar cualquier evidencia que creas conveniente desde tu módulo administrativo. Es muy importante que no se haya cumplido la fecha máxima de respuesta o no podrás cargar ninguna evidencia, si no envías las evidencias a tiempo aumentarán las posibilidades de que se generen contracargos y se debite el dinero de tu cuenta PayU. Los archivos a cargar en la sección de evidencias no deben tener un peso superior a 10 MB. Puedes subir archivos tipo .JPG .PNG .GIF .TIFF .PDF .DOC o .PPT.   ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Nota Una vez que una …","ref":"/es/deprecated/merchant-panel/disputes-old.html","title":"Disputas"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  Note Once a transaction is part of a dispute, the associated amount becomes part of the frozen balance, therefore you cannot transfer funds from this balance to your bank account until the dispute is resolved.  What is a dispute? A dispute begins when a buyer does not acknowledge to the bank a charge made to his credit card. Once the bank is notified, the formal process begins to determine the validity of the purchase.\nMotives of dispute There are several reasons that can cause a purchaser to not acknowledge a charge on his credit card. The reasons for starting a dispute process may vary. Some of which have been identified are:\n Fraud: Disputes are classified as fraud when an unauthorized person made purchases with a credit card. This kind of dispute can happen if the card was lost or stolen. Not acknowledging payment: the brand or shop name which appears in the credit card statement is not recognized by the cardholder. Product not delivered: the cardholder states that he has not received the product or service covered by the charges made to his credit card. Product not acceptable: The cardholder claims not to have received the product or service under the expected conditions. Duplicate: The cardholder indicates that the charge made for the purchase of a product or service was applied more than once to his credit card. Amount does not match: The charge to the credit card does not match the value of the purchase. Not reported by the entity: On many occasions the bank or processing network initiates a dispute process without a specific reason.  How does it work? 1. Dispute notification When PayU is notified by the bank that a dispute process has been launched, you automatically will receive an email with the details of that process.\nEmail that you receive when the dispute begins\n Email that your buyer receives\n  We also send a POST with all the information of the dispute to any URL you may set on your administrative module. This way you can automate your dispute management processes to minimize the risk of a possible chargeback.\nYou can set the URL where we will make the notification in the administrative module by clicking on the settings menu in the account setup option, define the dispute notification url and enabling the notification box.\n2. Queries through the Administrative module You can view and manage your dispute processes from your administrative module, in the Dispute menu.\n3. Provide evidence It is important to always respond to a dispute by providing evidence before the deadline stipulated by the bank. Following completion of the deadline, it will not be possible to upload the corresponding evidence for a dispute.\nTo upload evidence that allows us to handle the difference with the bank or the processing network, you must click on the dispute, where you will see all the details of the process. You will find the Upload evidence button there, select the files you think can be useful to contest the dispute and press the save button.\nTo minimize the likelihood that a chargeback is generated, you can provide the following evidence for a dispute to us:\n Proof of delivery of the product and / or service signed by the cardholder. Bill of sale of the product or service. Payment acceptance letter signed by the cardholder, annexing ID card of the same. Other media which validate the purchase.  Note You must check that the response deadline has not been met, in this case you will not be able to upload evidence.\n   Country Days given to provide evidences     Argentina 5 work days   Brazil 5 work days   Chile 5 work days   Colombia 2 work days   Mexico 5 calendar days   Peru 2 work days   Panama 8 work days     4. Final decision on dispute status. Once the evidence is provided, we send the documents to the issuing bank or the network that processed the transaction, which oversees the resolution of the case. The case of dispute can be: won (without chargeback), lost (chargeback) or refund. In the case of refunds, the shop makes the return to the buyer and the bank does not create the chargeback. When the bank announces the dispute’s outcome, the case is automatically updated in the administrative module and PayU sends a POST to the configured URL with information of the final result.\nStates according to the dispute’s course When a dispute is reported, a dispute entity for the associated transaction is created.\nThe dispute status changes according to the point where it is within the course of the process.\nStates of a dispute:\n   State Description     Notified When a dispute process begins, you must upload the evidence for the dispute.   In review When the shop provides evidence for a dispute through the administrative module and the dispute comes under review by the bank.   Lost The transaction is reversed from the virtual shopping account and may incur in a chargeback management cost.   Won The dispute process is resolved in favor of the shop, there are no deductions of any kind.   Refunded This process occurs when the shop authorizes to reverse the operation in self-determination, this prevents the shop from having to pay a chargeback transaction and it is replaced by a refund. To resolve a dispute as refund you have to request it at disputas@payulatam.com    Tips for managing your disputes  If you have the cardholder’s data, the best way to manage a dispute process is contacting her. If the reason for the dispute is simple ignorance, you can ask the cardholder to call her bank to withdraw the complaint and so the dispute process is resolved in your favor, anyway you should provide any evidence you see fit from your administrative module. It is very important that the deadline for the answer is not over or you will not be able to upload any evidence, if you do not send the evidence in time, the chances that chargebacks are generated and the money in your PayU account is debited will increase. Files loaded in the evidence section should not be larger than 10MB. You can upload files such as .JPG .TIFF .GIF .PNG .PDF .DOC or .PPT.   ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  Note Once a …","ref":"/en/deprecated/merchant-panel/disputes-old.html","title":"Disputes"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Cambiar clave En esta sección podrás hacer el cambio de clave para el ingreso a tu módulo administrativo.\n Puedes acceder desde el menú Configuración, haciendo clic sobre la opción Cambiar clave.  Debes ingresar la clave actual e ingresar dos veces la nueva clave.  Información de contacto En esta sección podrás encontrar los datos de contacto con los cuales fue creada tu cuenta en PayU account. Esta información no puede ser modificada, por lo tanto, si necesitas cambiar alguno de los datos debes enviar la solicitud a sac@payulatam.com.\nPodrás ver la información de tus datos actuales ingresando al menú Configuración haciendo clic en la opción Información de contacto.\nDatos bancarios En esta sección encontrarás la información que debes ingresar para poder realizar la transferencia de dinero desde tu cuenta virtual PayU a tu cuenta bancaria.\n Podrás ver la información de tus datos actuales ingresando al menú Configuración haciendo clic en la opción Datos Bancarios.  Encontrarás la información bancaria necesaria para hacer la transferencia de dinero desde tu cuenta virtual PayU a tu cuenta bancaria, incluye: País del banco, banco, número de cuenta, código Swift o código ABA entre otros (códigos que asignan los bancos para hacer transferencias internacionales entre cuentas).  Información de ventas Esta pestaña te permite actualizar la información que describe tus ventas, (de esta información depende la asignación de tu fondo de reserva, el tipo de integración a realizar y los parámetros asignados a tu comercio ante el módulo antifraude).\n Podrás ver la información de tus datos actuales ingresando al menú Configuración, haciendo clic sobre la opción Información de ventas.  Podrás realizar los ajustes en la información de tus ventas manualmente. En caso de que quieras hacer ajustes en datos como Cuenta, Pagina web y ¿Qué vendes? deberás enviar un correo a sac@payulatam.com con tu solicitud.  Formato de tiempo y moneda En esta sección podrás cambiar la configuración de visualización de la información en tu módulo administrativo, y podrás cambiar el formato de fecha, la zona horaria de tu país y el formato de puntuación para los valores de la moneda.\nPodrás ver esta información ingresando al menú Configuración haciendo clic sobre la opción Formato de información.\n Formato hora: Con esta opción podrás cambiar la zona horaria del país en el que deseas visualizar la información de las transacciones.   Formato fecha: Aquí podrás cambiar el formato en que deseas visualizar la fecha en tu Módulo Administrativo, permitiéndote elegir una de 4 opciones.   Formato moneda: En esta opción podrás cambiar el formato de visualización de los valores de moneda que son presentados en tu módulo administrativo.  ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Cambiar clave En esta …","ref":"/es/deprecated/merchant-panel/update-my-data.html","title":"Actualizar mis datos"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  Change password In this section, you can change the password used to enter your administrative module.\n You can access this feature in the menu Configuration by clicking on the Change password option.  You must enter the current password and enter the new password twice.  Contact information In this section, you can view the contact data used to create your PayU account. For your security you cannot change some of this information. Therefore, should you need to change any of the data, please send a request to sac@payulatam.com.\nYou can see this information by accessing the Configuration menu by clicking on Contact information.\nBank data In this section you will find the information you need to login to make the money transfer from your virtual PayU account to your bank account.\n You can view the information of your current data by accessing the Settings menu and then clicking on Banking data.  You will find bank information that you must complete to be able to transfer money from your virtual PayU LATAM account to your bank account, including: Country of the bank, bank name, account type, agency, account number, SWIFT, or ABA code, among others.  Sales information This tab allows you to update the information that describes your sales, (the allocation of your reserve fund depends on this information, the type of integration to be performed, and the parameters assigned to your store in relation to the anti-fraud module).\n You can see this information by accessing the Settings, menu and then clicking on Sales Information.  You can adjust your sales information manually. If you want to make adjustments to data such as Account, Web Site, and What Do You Sell you must send an email request to sac@payulatam.com with your request.  Time and currency format In this section you can change the display settings of the information on your administrative module, and you can change the date format, time zone of your country and the scoring format for the currency values.\nYou can see this information by accessing the Settings menu, by clicking on the Information Format option.\n Time zone format: With this option you can change the time zone of the country in which you want to display the transaction’s information.   Date format: Here you can change the format in which you want to display the date in your Administrative Module, allowing you to choose one of 4 options.   Currency Format: In this option you can change the display format of the currency values that are shown in your administrative module.  ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  Change password In …","ref":"/en/deprecated/merchant-panel/update-my-data.html","title":"Update my data"},{"body":" Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Información técnica En esta sección encontrarás la información necesaria para realizar la integración técnica de tu página web con nuestra plataforma transaccional.\n Podrás ver esta información ingresando al menú Configuración, haciendo clic sobre la opción Información técnica.  Los siguientes son los datos técnicos que encontrarás:\nPodrás realizar en cambio de tu logo haciendo clic en el botón buscar imagen.  Configuración de cuentas En esta sección podrás configurar propiedades técnicas pertenecientes a cada cuenta activa como:\n La configuración de URLs para las páginas de Respuesta y Confirmación Habilitar las opciones de envío de correos al comprador y a tu comercio al momento de realizar una venta. Definir un número de referencia único para cada venta que realices a través de tu página web.  Podrás ver esta información ingresando al menú Configuración, haciendo clic sobre la opción Configuración Cuentas.\nEncontrarás las propiedades que puedes configurar:\n Seleccionar la cuenta: Debes elegir la cuenta para hacer la respectiva configuración, al elegirla se mostrará el país correspondiente a dicha cuenta. URL respuesta: Es la página a la cual será direccionado el comprador una vez finaliza la transacción en PayU, en esta página se mostrará el estado de la transacción. URL confirmación: Es la página a la cual PayU enviará la confirmación del pago a tu sistema con el fin de actualizar inventarios y bases de datos una vez la transacción llegue a su estado final. Esta página no es obligatoria. Email al comprador: Al habilitar esta opción se enviará desde PayU un correo al comprador, confirmando si el pago fue aprobado o rechazado. Email al vendedor: Al habilitar esta opción se enviará desde PayU un correo a tu comercio, confirmando si el pago fue aprobado o rechazado. Habilitar página de confirmación: Al habilitar esta opción se enviará la confirmación del pago a la página de confirmación configurada una vez la transacción llegue a su estado final. Validar referencia única: Al habilitar esta opción PayU validará que la referencia de cada pago enviado a nuestro sistema sea única. Si la casilla se encuentra desactivada, podrás enviar una misma referencia para todas tus ventas. Esta función es útil si se desea controlar temas como facturación, inventarios o para identificar las órdenes enviadas desde tu tienda a PayU. Transacción en modo de pruebas: Al habilitar esta opción las transacciones que se realicen, a través de tu sitio web o por medio de solicitud de pago, se marcarán como de prueba y el pago no será real. Es necesario deshabilitar esta casilla cuando quieras empezar a recibir pagos reales.  Salir del modo de pruebas Una vez tu cuenta sea activada podrás desmarcar la opción de Modo de pruebas en tu Módulo Administrativo, de esta forma podrás realizar transacciones reales a través de tu cuenta PayU. Ingresado en la pestaña Configuración opción Configuración cuentas.\n ","excerpt":"Nota Este artículo ha sido descontinuado y no se ofrece a comercios nuevos.  Información técnica En …","ref":"/es/deprecated/merchant-panel/integration-settings.html","title":"Configurar integración"},{"body":" Note This article has been deprecated and it is not offered for new commerces.  Technical information This section contains the necessary information to perform the technical integration of your website with our transaction platform.\n You can see this information by accessing the Configuration menu and clicking Technical Settings.  You will find the following technical data:\nYou will be able to charge your logo clicking on the search image button.  Account settings In this section, you can configure technical properties belonging to each active account as:\n URL settings for confirmation and response pages. Enable the option of sending emails to the buyer and to your store when a sale takes place. Define a unique reference number for each sale you make through your website.  You can see this information by accessing the Configuration, menu and clicking on Account Settings.\nYou will find the properties you can set:\n Choose the account: You must choose the account to activate the particular configuration. Choosing it will display the country which corresponds with that account. Response URL: The page to which the buyer will be direct once the transaction in PayU ends. This page will display the status of the transaction. Confirmation URL: The page to which PayU will send the payment confirmation to your system in order to update inventory and database once the transaction reaches its final state. This page is not mandatory. Email to the buyer: By enabling this option, PayU will send an email from to the buyer confirming if the payment was approved or rejected. Email to the seller: Enabling this option will send an email from PayU to your shop, confirming if the payment was approved or rejected. Sending confirmation page: Enabling this option will send the payment confirmation to the configured confirmation page once the transaction reaches its final state. Validate unique reference: Enabling this option will validate that each payment reference sent to our system is unique. If the checkbox is unmarked, you will be able to send the same reference for all your sales. This function is useful if you want to control subjects like billing, inventories or to identify the orders sent from your store to PayU. Transaction in test mode: When you enable this option, the transactions made through your website or through payment request, will be marked as a test and payment will not be real. You must disable this option when you want to start receiving actual payments.  ","excerpt":"Note This article has been deprecated and it is not offered for new commerces.  Technical …","ref":"/en/deprecated/merchant-panel/integration-settings.html","title":"Integration settings"},{"body":" Nota Los reportes en el Módulo PayU están limitados a 20 mil filas para visualización y descarga. Si necesitas tener reportes personalizados o mostrar más información, comunícate con tu representante de ventas.  ¿Qué es el Balance financiero? El Balance financiero te ayuda a identificar los movimientos (descuentos de comisiones, tarifas de transferencia, reversiones) de tu cuenta PayU. Este reporte muestra el resumen de la cuenta, con los débitos y abonos realizados durante el mes, y la información del saldo disponible.\nAdemás, el Balance financiero ayuda al área contable a conciliar todas las operaciones comerciales de comercio electrónico.\nPermisos requeridos Para tener acceso a este módulo, necesitas un perfil con el permiso following permissions enabled\n Movimientos \u0026gt; Reporte de Balance Movimientos \u0026gt; Descargar reporte CSV\nEste permiso debe estar habilitado para permitirle descargar el informe.  Consulta Perfiles y Permisos para más información.\nConsultar el reporte Ingresa a tu cuenta PayU. En el menú de la izquierda, expande el menú Transacciones y selecciona Balance financiero. De forma predeterminada, el reporte muestra la información de la operación * de los últimos 30 días desde la más reciente a la más antigua.\n*Limitado a 20 mil registros.\nLa sección de Balance financiero está divida en tres partes:\nSaldo General La primera parte es el saldo general donde puedes ver los fondos en tu cuenta PayU y un botón que te permite solicitar una transferencia a tu cuenta bancaria.\nEl Saldo general se compone de:\n Saldo disponible: el dinero disponible de tus ventas después de realizar los descuentos por tarifa PayU, impuestos, reembolsos o contracargos. Saldo congelado: los fondos que hacen parte de una disputa en proceso o un reembolso no aprobado solicitado por tu cliente. Saldo total: los fondos totales recibidos en tu cuenta PayU. Consiste del Saldo disponible más el Saldo congelado.  Gráfico de ventas realizadas En la segunda parte, puedes entender la distribución de costos (incluidos impuestos y costos relacionados con la transacción) y analizar los gráficos de ventas y circular que resumen toda esta información.\nLos gráficos muestran la información disponible en el rango de fechas seleccionado.\nEl gráfico circular proporciona la siguiente información:\n Ventas realizadas: es el valor total de tus ventas antes de impuestos y tarifa PayU, son tus ingresos durante el período consultado. Impuestos: son los cargos adicionales generados según tu régimen fiscal. Si tu régimen tributario es diferente, comunícate con sac@payu.com. Tarifa PayU: es el costo de procesamiento de PayU, incluido el porcentaje de ventas más la tarifa fija aplicada a tu cuenta.  Tabla del reporte En la última parte debajo de los gráficos, se encuentra una tabla con la información de crédito y débito de las últimas operaciones. Puedes ver el tipo de operación y el valor (crédito o débito) de cada fila.\nEl reporte tiene las siguientes columnas:\n   Columna Descripción     Operación ID y fecha de la operación.   Tipo de operación Información de la operación. Dependiendo de su tipo, la información que se muestra varía.\nHaz clic en para expandir los valores detallados de la operación en las columnas Débito y Crédito.\n   Crédito Monto acreditado a tu Cuenta.   Débito Monto debitado de tu Cuenta.    Nota Haz clic en el ícono junto al título Valor para unir las columnas débito y crédito; el valor resultado es débito menos el valor positivo de crédito.\nPor ejemplo, si el valor de la columna débito es $3.296,63 y el valor de la columna crédito es $950,00, el valor de la columna resultante luego de unirlas es $2.346,63.\n Filtrar el reporte Puedes utilizar la barra de búsqueda sobre el gráfico o el calendario para establecer filtros. Puedes filtrar por Tipo de operación, Id de venta o transferencia, Referencia*, o Método de pago*.\n* Estos filtros se muestran cuando el Tipo de operación seleccionado es Venta, Reversión o Contracargada.\nPara establecer un filtro, haz clic en el campo Filtre su búsqueda sobre el gráfico de de ventas realizadas.\nConfigura los valores de los filtros y haz clic en Buscar. Una vez hayas hecho clic, la tabla de filtros muestra las ventas que cumplen con los criterios seleccionados\nJunto con estos filtros, también puedes establecer un período de tiempo en el que el comprador realizó la compra utilizando el filtro de fechas en la esquina superior derecha.\nEl rango de fechas de este filtro es tres (3) meses antes de la fecha final. Si excedes este rango, el reporte muestra la información de tres (3) meses después de la fecha de inicio.\nPara ver la información de una fecha específica, configúrala tanto para la fecha de inicio como para la fecha fin.\nDescargar el reporte Para descargar el reporte, haz clic en el botón Descargar ubicado en la parte superior o inferior de la tabla del reporte.\nAparece una ventana emergente donde puedes seleccionar las opciones para generar el reporte*.\nNota * Si el formato del archivo no se ajusta a tus necesidades, comunícate con tu ejecutivo de ventas para conocer más sobre la opción de enviar archivos a través de SFTP y las plantillas que tenemos para este reporte.  El reporte se descarga automáticamente en formato de Excel (.csv). El nombre del reporte utiliza los siguientes formatos\n Opción CSV con lo que estás viendo en pantalla: [FechaDescargaEnMilisegundos]_statement_report_[AccountId].csv Opción Versión del antiguo Módulo Administrativo: [AccountId]_[FechaDescarga]_transactions.csv*  * fecha de descarga en formato dd-mm-yy-hh-mm-ss\nDescarga un ejemplo del archivo generado utilizando la opción CSV con lo que estás viendo en pantalla.  Descarga un ejemplo del archivo generado utilizando la opción Versión del antiguo Módulo Administrativo.   En el reporte descargado, puedes validar todos los créditos y débitos de tu cuenta y además, puedes conciliar las comisiones de PayU que aparecen en la factura recibida mensualmente.\nLas comisiones e impuestos de PayU aparecen en la factura\nPara conciliar la información con el [reporte de ventas] (/es/payu-module-documentation/reports/sales-report.html), puedes usar la variable ReferenceCode que aparece entre paréntesis en la transacción.\nEn el reporte generado encontrarás los siguientes conceptos.\n   Concepto Descripción     SALES Monto aprobado de la transacción.   POL_COMMISSION Comisión PayU: Porcentaje fijo establecido para el comercio + valor fijo establecido.   IVA_POL_COMMISSION Comisión de impuestos.   IVA_RETENTION Retención de IVA.*   RENTA_RETENTION Retención de Retefuente.*   ICA_RETENTION Retención de ICA.*   RETENTION SALES Reembolso de transacción.   RETENTION POL_COMMISSION Reembolso de la Comisión de PayU.   RETENTION IVA_POL_COMMISSION Reembolso del impuesto de la Comisión de PayU.   RETENTION IVA_RETENTION Reembolso de la retención del IVA.   RETENTION RENTA_RETENTION Reembolso de la retención de la Retefuente.   RETENTION ICA_RETENTION Reembolso de la retención de ICA.   PAYMENT_ORDER Transferencia del Saldo disponible a la cuenta bancaria registrada.   PAYMENT_ORDER_POL_COMMISSION Costo de transferencia.   IVA_PAYMENT_ORDER_POL_COMMISSION Impuesto de transferencia.   FREEZE_FUND Saldo congelado (reembolsos o disputas).   UNFREEZE_FUND Liberación de las cantidades congeladas.   CHARGEBACK Contracargo o disputa perdida.   DISCRETIONARY Movimiento discrecional o crédito adicional a la cuenta.    * Aplica solo a transacciones con tarjeta de crédito.\nNota El reporte generado es almacenado durante 90 días en la sección Mis reportes descargados.  ","excerpt":"Nota Los reportes en el Módulo PayU están limitados a 20 mil filas para visualización y descarga. Si …","ref":"/es/payu-module-documentation/reports/financial-statement.html","title":"Balance financiero"},{"body":" Note The reports displayed in the merchant panel are limited to 20 thousand rows for both displaying and downloading. If you need display more rows or columns in the report, contact your sales representative.  What is the Financial Statement? The Financial Statement helps you identify the movements (Commission discounts, transfer fees, reversions) of your PayU account. This report shows the summary of the account, with debits and credits made during the month, and information of the available balance.\nFurthermore, the Financial Statement helps the accounting area to reconcile all trade e-commerce operations.\nPermission required To have access to this module, you need to have a profile with the following permissions enabled\n Movements \u0026gt; Statement Movements \u0026gt; Download CSV report\nThis permission must be enabled to let you download the report.  Refer to Profiles and Permissions for more information.\nConsult the report Log into your PayU account. In the left menu, expand the Transactions menu and select Financial Statement. By default, the report shows the operation information* of the last 30 days, from the most recent to the oldest.\n*Limited to top 20 thousand records.\nThe Statements Balance section is divided in three parts as follows:\nGeneral Balance The first part is the general balance where you can see the funds in your PayU account and a button to let you request a transfer to your bank account.\nThe general balance, which is comprised of:\n Available balance: is the money received from your sales, after deducting the PayU commission, taxes, refunds or chargebacks. the money you can transfer to your bank account. Frozen balance: the funds that are part of a dispute in process or an unapproved refund requested by your customers. Total balance: the total funds received in your PayU account. It consists of the Available balance plus the Frozen balance.  Sales made chart In the second part, you can understand the distribution of costs (including taxes and transaction related costs), and analyze a sales chart and a pie chart that summarizes all this information.\nThe charts shows the information available in the date frame selected.\nThe pie chart provides the following information:\n Sales Made: total value of your sales before taxes and PayU fee, your income during the consulted period. Taxes: additional charges generated according to your tax regime. If your tax regime is different, contact sac@payu.com. PayU Fee: PayU processing cost, including the sales percentage plus the flat rate applied to your account.  Report table In the last part below the charts, you find a table with the credit and debit information of the latest operations. You can see the operation type and the value (credit or debit) of each row.\nThe report has the following columns:\n   Column Description     Operation ID and date of the operation.   Type of Operation Information of the operation. Depending on its type, the information displayed varies.\nClick to expand the detailed values of the operation in the Debit and Credit columns.\n   Credit Amount credited to your Account.   Debit Amount debited from your Account.    Note Click next to Value label to merge debit and credit; the resultant value is debit minus the positive value of credit.\nFor example, if the debit column value is $3.296,63 and the credit column value is $950,00, the resulting column value after merging is $2.346,63.\n Filter the report You can use the search bar above the graph or the calendar to set filters. You can filter by Type of Operation, Sale or Transfer ID, Reference*, or Payment method type*.\n* These filters are displayed when the selected Type of Operation is Sale, Reversion, or Chargeback.\nTo set a filter, click the Filter your search field at the top of the sales made chart.\nConfigure the values for the filters and click Search. Once you click it, the filter table shows the operations that meet the selected criteria.\nAlong with these filters, you can also set a time frame when the buyer performed the sale using the dates filter at the top right corner.\nThe date range of this filter is three (3) months before the end date. If you exceed this range, The report displays the information of three (3) months after the start date.\nTo see the information of a given date, set it for both start and end date.\nDownload the report To download the report, click the Download button located at the top or at the bottom of the report table.\nA pop up window appear where you can select the options to generate the report*.\nNote * If the file format does not meet the your needs, contact your sales executive to know more about the option to send files through SFTP and the templates that we have for this report.  The report is automatically downloaded in an Excel (.csv) format. The name of the report uses the following formats:\n CSV with what you are seeing on the screen option: [DownloadDateInMillis]_statement_report_[AccountId].csv Balance from previous secure option: [AccountId]_[DownloadDate]_transactions.csv*  * Download date in format dd-mm-yy-hh-mm-ss\nDownload an example of the generated file using the CSV with what you are seeing on the screen option.  Download an example of the generated file using the Balance from previous secure option.   In the downloaded report, you can validate all the credits and debits of your account and also, you can reconcile the commissions of PayU that appear in the invoice received monthly.\nPayU commissions and taxes appear in the invoice\nTo reconcile the information with the sales report, you can use the ReferenceCode variable which appears in brackets in the transaction.\nIn the generated report you find the following concepts.\n   Concept Description     SALES Approved amount of the transaction.   POL_COMMISSION PayU commission: Fixed percentage established for trade + established fixed value.   IVA_POL_COMMISSION Tax commission.   IVA_RETENTION IVA retention.*   RENTA_RETENTION Retefuente retention.*   ICA_RETENTION ICA retention.*   RETENTION SALES Transaction refund.   RETENTION POL_COMMISSION Refund of the PayU Commission.   RETENTION IVA_POL_COMMISSION Refund of the PayU Commission tax.   RETENTION IVA_RETENTION Refund of the IVA retention.   RETENTION RENTA_RETENTION Refund of the Retefuente retention.   RETENTION ICA_RETENTION Refund of the ICA retention.   PAYMENT_ORDER Transfer of the available Balance to the registered bank account.   PAYMENT_ORDER_POL_COMMISSION Transfer cost.   IVA_PAYMENT_ORDER_POL_COMMISSION Transfer tax.   FREEZE_FUND Frozen balance (refunds or disputes).   UNFREEZE_FUND Release of the frozen amounts.   CHARGEBACK Chargeback or lost dispute.   DISCRETIONARY Discretionary movement or additional credit to the account.    * Applies only to transactions with credit card.\nNote The generated report is stored during 90 days in the My downloaded reports section.  ","excerpt":"Note The reports displayed in the merchant panel are limited to 20 thousand rows for both displaying …","ref":"/en/payu-module-documentation/reports/financial-statement.html","title":"Financial Statement"},{"body":"Prerrequisitos Antes de empezar a explicar cómo está organizado el modulo PayU, necesitas lo siguiente:\n Tener un usuario en el módulo PayU. Aprende a crear uno aquí. Haber leído y entendido los conceptos detrás del Módulo PayU.  Aplicación web del Módulo PayU El módulo PayU está dividido en cuatro grupos principales:\n Opciones de cuenta. Configuraciones y opciones de usuario. Panel principal. Pie de página.  Nota Las opciones mostradas en este artículo dependen del perfil que tengas para acceder a cada cuenta.  1. Opciones de cuenta Este panel tiene las opciones requeridas para manejar las cuentas asociadas al comercio actual. En este panel encuentras las siguientes opciones:\n    Opción Subopción Disponible en Descripción     Merchant ID   Número de identificación de tu comercio en el sistema de PayU. Este identificador es requerido cuando utilizas Integraciones.   Cuenta Información de la cuenta  Muestra en nombre e identificador de la cuenta seleccionada.\nEsta opción también le permite cambiar la cuenta y realizar operaciones relacionadas. Haz clic en el simbolo ▾ para encontrar estas opciones o cambiar la cuenta.\n    Datos de mi negocio  Muestra la ubicación y la información de contacto principal de su negocio. Además, esta opción muestra las personas asociadas con su negocio.    Datos de ventas  Muestra la información de cómo realizas tus ventas, qué vendes, el logo de tu tienda, información de entrega, cómo ofreces tus productos o servicios y cómo tus clientes pueden contactarte.    Datos bancarios  Muestra la cuenta bancaria y el banco intermediario donde desea transferir los fondos recaudados para esta cuenta.    Cuentas creadas  Muestra la lista de cuentas disponibles en su comercio.   Saldo disponible   Muestra el saldo disponible en la cuenta seleccionada.   Inicio   Muestra la página de bienvenida del módulo PayU. Para más información, consulta la página de Inicio.   Transacciones Reporte de ventas  Revisa el detalle de los pagos recibidos, incluyendo métodos de pago más utilizados y clientes frecuentes. Para más información, consulta Reporte de ventas.    Disputas  Gestiona el proceso de disputas generadas en tu cuenta PayU. Para más información, consulta Disputas.    Balance financiero  Te permite entender el flujo de dinero de tu cuenta, los cargos aplicados, las tarifas relacionadas y los impuestos. Para más información, consulta Balance financiero.    Certificado de Retenciones  Descarga tu Certificado de Retenciones de acuerdo con el periodo de tiempo seleccionado. Para más información, consulta Certificado de Retenciones.    Reporte de operaciones  Descarga los reportes de operaciones sugeridos por la CNBV de acuerdo con un mes seleccionado. Para más información, consulta Reporte de operaciones.   Transferencias Transferencias  Te permite transferir los fondos recolectados en tu cuenta PayU a tu cuenta bancaria. Para más información, consulta Transferencias.    Programar transferencia  Te permite crear transferencias diarias, semanales o mensuales. Además, puedes configurar transferencias personalizadas. Para más información, consulta Programar transferencias.    Transferencias diarias  Como PayU en Brasil no es una institución de pago, los fondos recaudados en tu cuenta PayU se transfieren a tu cuenta bancaria diariamente. A través de este reporte, puedes conocer el estado de las transferencias diarias.\nEste reporte solo está disponible para cuentas en Brasil y tiene las mismas columnas y opciones que el reporte Transferencias.    Editar datos bancarios  Te permite solicitar el cambio de tu cuenta bancaria y el banco intermediario donde vas a transferir los fondos recolectados en esta cuenta. Para más información, consulta Actualizar mi información   Cobra con PayU Cobra en internet  Te permite crear solicitudes de pago para que puedas cobrarle a tus clientes sin tener una página Web. Para más información, consulta Solicitud de pago    Cobros en efectivo  Te permite generar cupones de pago o tarjetas de cobranza* con la información necesaria para permitirle a tus clientes hacer pagos en efecto las veces que lo requieran en los puntos de pago disponibles. Para más información, consulta Cupones de pago.\n*Las tarjetas de cobranza solo están disponibles en Argentina.    Mis herramientas  Te permite encontrar y administrar la información de los Links de pago (Solicitud de pago) y Cupones de pagoCupones de pago* que hayas creado en tu cuenta.\n*Cupones de pago solo están disponibles en Argentina y Colombia.    2. Configuraciones y opciones de usuario Este panel tiene las opciones requeridas para administrar tu comercio y tu usuario.\nConfiguraciones del comercio Esta opción te permite administrar usuarios, permisos, perfiles y la configuración de tu comercio. Al hacer clic en el botón Configuración, encuentras las siguientes opciones:\n    Opción Disponible en Descripción     Gestión de usuarios  Te permite otorgar acceso a los miembros de tu equipo para que puedan solicitar pagos en línea o validar información de los pagos. Para más información, consulta Gestión de usuarios.   Perfiles y permisos  Te permite create custom profiles with specific permissions.\nEn esta sección, puedes consultar los permisos predeterminados incluidos en el Módulo PayU. Para más información, consulta Gestión de perfiles y permisos.   Configuración técnica  En esta opción, puedes encontrar las variables requeridas para integrar PayU con tu página Web. Además, puedes configurar notificaciones de pagos procesados y Disputas. Para más información, consulta Configuración técnica.    Configuraciones del usuario Esta opción te permite administrar tu perfil. En la vista principal de esta opción, encuentras tu correo electrónico, tu perfil actual en el módulo PayU (para la cuenta actual), y el account Id; haz clic en el símbolo ▾ para mostrar las configuraciones de usuario disponibles.\n    Opción Descripción     Cambiar comercio Esta opción está disponible cuando tu usuario está enrolado a más de un comercio.   Mi perfil En esta opción, puedes configurar tus preferencias y actualizar tu contraseña.   Cerrar Sesión Esta opción cierra la sesión del usuario activo.    3. Panel principal Este panel panel carga la opción seleccionada en el panel de la izquierda o en la opción de la parte superior. La página Inicio está seleccionada por defecto, por lo que se carga tan pronto inicias sesión en el módulo PayU.\nPara configurar una opción para que see muestre por defecto, haz clic en el menú de los tres puntos en la esquina superior derecha y selecciona Definir como página principal.\nPágina de Inicio La página de inicio es el punto de partida del Módulo PayU. Muestra los atajos para realizar ventas en línea, saber el estado de tud ventas, controlar tus finanzas, transferir fondos, aprender sobre comercio electrónico y dejarnos comentarios.\nEn esta página, puedes también tomar un tour utilizando el botón de Tour Virtual. Este botón te lleva a través de las opciones principales para administrar tu cuenta.\nNota Lagunas opciones del tour están atadas a los permisos configurados a tu usuario.  4. Pie de página El pie de página muestra el número de teléfono para contactarnos y el enlace para leer los terminos y condiciones de acuerdo con el país de procesamiento.\nLos siguientes son los números y hora de contacto:\n (+5411) 598 42132 \u0026gt; Lun - Vie 09:00 - 22:00 (UTC -3:00) (+5511) 4130 5311 \u0026gt; Lun - Vie 09h a 18h / Sab 09h a 15h - Zona horaria de Brasilia (UTC -3:00) (+562) 258-13949 \u0026gt; Lun - Vie 8:00 - 21:00 Hora chilena (+57) 601 654 0721 \u0026gt; Lun - Vie 7:00 - 20:00 Hora colombiana (UTC -5:00) (+5255) 474 11439 \u0026gt; Lun - Vie 7:00 - 20:00 Hora CDMX (+507) 836 5577 \u0026gt; Lun - Vie 7:00 - 20:00 Hora colombiana (UTC -5:00) (+511) 708 5381 \u0026gt; Lun - Vie 7:00 - 20:00 Hora peruana (UTC -5:00)  ","excerpt":"Prerrequisitos Antes de empezar a explicar cómo está organizado el modulo PayU, necesitas lo …","ref":"/es/payu-module-documentation/getting-started/understanding-the-payu-module.html","title":"Conociendo el Módulo PayU"},{"body":"Prerequisites Before moving on with the explanation of how the PayU module is organized, you need the following:\n Have a user in PayU module. Learn how to create one here. Have read and understand the concepts behind the PayU Module.  PayU Module web application PayU module is divided in four main groups:\n Account options. Settings and user options. Main panel. Footer.  Note The options displayed in this article depends on the profile you have to access each account.  1. Account options This panel has the options required to manage the accounts associated to the current merchant. In this panel you find the following options:\n    Option Sub option Available in Description     Merchant ID   ID number of your merchant in PayU’s system. This ID is required when you want to use Integrations.   Account Account information  Displays the name and ID of the selected account.\nThis option also lets you to change the account and perform operations related to it. Click the ▾ symbol to find these options or switch the account.\n    My business information  Shows the location, main contact information of your business. Also, this option shows the people associated with your business.    Your sales information  Shows the information of how you make your sales, what you sell, the logo of your shop, delivery information, how you offer your products or services and how your clients can contact you.    Bank information  Shows the bank account and the Intermediary bank where you want to transfers the funds collected for this account.    Accounts created  Shows the list of account available in your merchant.   Balance available   Displays the balance available in the selected account.   Home   Displays the welcome page of the PayU module. For more information, refer to Home page.   Transactions Sales report  Review the details of payments received, including the most used payment methods and frequent clients. For more information, refer to Sales report.    Disputes  Manage the dispute processes generated in your PayU account. For more information, refer to Disputes.    Financial Statement  Allows you to understand the money flow in your account, the applied charges and the related fees and taxes. For more information, refer to Financial Statement.    Withholding certificate  Download your Withholding Certificate according to the requested period of time. For more information, refer to Withholding Certificate.    Operation reports  Download the Operation reports suggested by the CNBV according to a given month. For more information, refer to Operation reports.   Transfers Transfers  Allows you to send the funds collected in your PayU account to your Bank account. For more information, refer to Transfers.    Schedule Transfers  Allows you create transfer on a daily, weekly, monthly basis. Furthermore, you can configure custom transfers as you need. For more information, refer to Schedule transfers.    Daily Payouts  As PayU in Brazil is not a not a payment institution, the funds collected in your account are transferred to your bank account on a daily basis. Through this report, you can know the status of the daily transfers.\nThis report is only available for accounts in Brazil and it has the same columns and options of the Transfers report.    Edit bank information  Allows you to request the change of the bank account and the Intermediary bank where you want to transfers the funds collected for this account. For more information, refer to Update my information   Sell with PayU Sell on the internet  Allows you to create payment requests so you can charge to your customers without having a website. For more information, refer to Payment request    Cash charges  Allows you to generate payment coupons or collection cards* with the necessary information to let your clients make cash payments as many times as they need in the available payment points. For more information, refer to Payment coupons.\n*Collection cards are only available in Argentina.    My tools  Allows you find and manage the information of Payment links (Payment request) and Payment Coupons* you have created in your account.\n*Payment coupons are only available in Argentina and Colombia.    2. Settings and user options. This panel has the options required to manage your merchant and your user.\nMerchant settings This option allows you to manage users, permissions, profiles and the technical configuration of your merchant. By clicking the Settings button, you can find the following options:\n    Option Available in Description     User management  Allows you to grant access to your team members so they can collect payments online or check information about your payments. For more information, refer to User management.   Permissions and profiles  Allows you to create custom profiles with specific permissions.\nIn this section, you can also query the default permission included in the PayU Module. For more information, refer to Profile and permission management.   Technical configuration  In this option, you can find the variables required to integrate PayU with your Web page. Furthermore, you can configure the notifications of processed payments and Disputes. For more information, refer to Technical configuration.    User settings This option allows you to manage your profile. In the main view of this option, you find your e-mail, your current profile in the PayU module (for the current account), and the account Id; click the ▾ symbol to display the available user settings.\n    Option Description     Change merchant This option is available when your user is enrolled to more than one merchant.   My profile In this option, you can configure your preferences and update your password as desired.   Sign off This option closes the session of the active user.    3. Main panel This panel loads the selected option either in the left panel or in the option at the top. The Home page is selected by default, so it loads as soon as you log in the PayU module.\nTo set an option as displayed by default, click the three dot menu at the top right of the panel and select Set as main page.\nHome page The home page is starting point of the PayU Module. It shows the shortcuts to perform sales on-line, know your sales status, control your finances, transfers funds, learn about e-commerce and leave us comments.\nIn this page, you can also take a tour using the Virtual tour button. This button takes your through the main options to manage your account.\nNote Some options are attached to the permissions configured to your user.  4. Footer The footer provides the phone number to contact us and the link to the terms and conditions according to the processing country.\nThe following are the phone numbers and contact time:\n (+5411) 598 42132 \u0026gt; Mon - Fri 09:00 - 22:00 (UTC -3:00) (+5511) 4130 5311 \u0026gt; Mon - Fri 09h to 18h / Sat 09h to 15h - Brasilia Time Zone (UTC -3:00) (+562) 258-13949 \u0026gt; Mon - Fri 8:00 - 21:00 Chilean time (+57) 601 654 0721 \u0026gt; Mon - Fri 7:00 - 20:00 Colombian time (UTC -5:00) (+5255) 474 11439 \u0026gt; Mon - Fri 7:00 - 20:00 CDMX time (+507) 836 5577 \u0026gt; Mon - Fri 7:00 - 20:00 Colombian time (UTC -5:00) (+511) 708 5381 \u0026gt; Mon - Fri 7:00 - 20:00 Peruvian time (UTC -5:00)  ","excerpt":"Prerequisites Before moving on with the explanation of how the PayU module is organized, you need …","ref":"/en/payu-module-documentation/getting-started/understanding-the-payu-module.html","title":"Getting to know the PayU module"},{"body":"Prerequisites  You need an active account in PayU Latam. Having installed Drupal Commerce Kickstart 7.xx. Having the PayU\u0026rsquo;s Drupal plugin downloaded and stored in an accessible location. Click here to download it. Having access to the Drupal installation folder. Having access to the Drupal backend.  Installation The process to install the plugin in the Drupal server only requires to unzip the plugin in path \\sites\\all\\modules. The unzipped folder has the following structure:\nConfiguration  Log in to the Drupal\u0026rsquo;s administration panel. Open the Site settings menu and click Modules option inside the Advanced settings section.  Locate and activate the module Payment Payulatam. You can use the search filter to find it easier.\nOnce finish, click Save configuration.  Back in the Drupal\u0026rsquo;s administration panel. Open the Store settings menu and click Payment methods.\nFind Payment gateway PayuLatam in the Disabled payment method rules list and click enable.  If the activation was successful, Drupal shows the following message\nNow, click edit link in the recently enabled method.\nThen, locate the Actions section and click edit next to the action Enable payment method: PayuLatam. Here, configure the plugin using your PayU account.   API KEY: Unique key of your commerce, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; API Key). Merchant Id: ID of your commerce in PayU Latam. Account Id: ID of the PayU account according to the country where you want to sell. Test Enabled: Set No if you want to process in the Production environment. Otherwise, set Yes.  Leave the other fields with their pre-configured values.\nNote For testing purposes, you can use the Merchant ID, APIKey, and Account ID available in Test Your Solution.\nOnce you are in the credit card payment form, and ensuring that you have the message at the top of the gateway Transaction in test mode, you must:\n Enter the text APPROVED in the Full Name field if you want the transaction to be approved, REJECTED if you want it to be rejected or PENDING if you want it to be pending. You must enter a valid card number in the Card Number field according to the selected franchise. For this, you can use an online credit card generator. All other fields can be random.   At this point, your customers can pay with PayU Latam when they do the checkout in the Drupal\u0026rsquo;s shopping cart.\n","excerpt":"Prerequisites  You need an active account in PayU Latam. Having installed Drupal Commerce Kickstart …","ref":"/en/docs/tools/shopping-cart-plugins/drupal.html","title":"Drupal"},{"body":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Tener instalado Drupal Commerce Kickstart 7.xx. Haber descargado el plugin de Drupal de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí para descargarlo. Tener acceso a la carpeta de instalación de Drupal. Tener acceso al backend de Drupal.  Instalación El proceso de instalación para instalar el plugin en el servidor de Drupa solo requiere descomprimir el plugin en la ruta \\sites\\all\\modules. La carpeta descomprimida tiene la siguiente estructura:\nConfiguración  Ingresa al panel de administración de Drupal. Abre el menú Site settings y haz clic en la opción Modules dentro de la sección Advanced settings.  Localiza y activa el módulo Payment Payulatam. Puedes utilizar la búsqueda para encontrarlo más fácil.\nCuando termines, haz clic en Save configuration.  De vuelta en el panel de administración de Drupal. Abre el menú Store settings y haz clic en Payment methods.\nBusca Payment gateway PayuLatam en la lista Disabled payment method rules y haz clic en enable.  Si la activación fue exitosa, Drupal muestra el siguiente mensaje\nAhora, haz clic en el enlace edit en el método recientemente activado.\nLuego, localiza la sección Actions y haz clic en edit junto a la acción Enable payment method: PayuLatam. Aquí, configura el plugin utilizando tu cuenta de PayU.   API KEY: Llave única de tu comercio, puedes obtener esta información en tu Módulo PayU (Configuración \u0026gt; Configuración técnica \u0026gt; API Key). Merchant Id: Identificador de tu comercio en PayU Latam. Account Id: Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender. Test Enabled: Asigna No si quieres procesar el el ambiente de producción. Si no, asigna Yes.  Deja los demás campos con su valor predeterminado.\nNota Para pruebas, puedes utilizar los valores de Merchant ID, APIKey y Account ID disponibles en Probar tu solución.\nUna vez estén en el formulario de pago con tarjeta de crédito y asegurandote de que en la parte superior de la pasarela se muestre el mensaje Transacción en modo de prueba, debes:\n Ingresar el texto APPROVED en el campo Nombre completo si quieres que la transacción sea aprobada, REJECTED si quieres que la transacción sea rechazada o PENDING si quieres que la transacción quede pendiente. Para el número de la tarjeta, utiliza un número válido que corresponda a la franquicia seleccionada. Puedes utilizar un generador en línea de tarjetas de crédito. Los demás campos pueden ser aleatorios.   En este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de Drupal.\n","excerpt":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Tener instalado Drupal Commerce Kickstart …","ref":"/es/docs/tools/shopping-cart-plugins/drupal.html","title":"Drupal"},{"body":"To integrate with Payments SDK Chile, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments SDK includes the following methods:\n Submit transaction with credit cards Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Chile, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Transactions with credit card using two-step flows are available under demand. Contact your Sales representative for more information.  Considerations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Chile. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization SDK. Transactions in CHILEAN PESOS with decimal amounts are not allowed. Two-step flows are not supported for international credit cards. Transactions with credit card using two-step flows are available under demand and for single installment payments. Contact your Sales representative for more information. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512325\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CL, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 7 days. After this time, the transaction is auto-voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction. Captures are only allowed for transactions in one installment.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400468293\u0026#34;); // Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;ad6940f1-cf8b-474a-a69d-00382084d16c\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400468293\u0026#34;, // Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;ad6940f1-cf8b-474a-a69d-00382084d16c\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512325\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4037997623271984\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2030/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4037997623271984\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2030/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CL, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    ### Considerations * The parameter `EXPIRATION_DATE` is not mandatory. If you don't send this parameter, its default value is seven days after the current date at 12:00 pm.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. * You must set a response URL in the parameter `NETWORK_CALLBACK_URL` in the request; this URL redirects the user back to your page after they finish the online payment procedure. * You must redirect the payer to the Klap webpage (fka as Multicaja) to let them perform the cash payment. This URL is found in the `BANK_URL` parameter in the response. ### Method call The following are the bodies of the request and response of this payment method. Mapparameters = new HashMap(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \"512325\"); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \"\"+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \"payment test\"); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \"Language.es\"); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \"\"+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \"\"+Currency.CLP.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \"1\"); // Enter the buyer's name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \"First name and second buyer name\"); // Enter the buyer's e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \"buyer_test@test.com\"); // Enter the buyer's contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \"7563126\"); // Enter the buyer's contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \"123456789\"); // Enter the buyer's address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \"Autopista Del Sol, 0 - Km.43 Costado Sur\"); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \"5555487\"); parameters.put(PayU.PARAMETERS.BUYER_CITY, \"RM\"); parameters.put(PayU.PARAMETERS.BUYER_STATE, \"Talagante\"); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \"CL\"); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \"000000\"); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \"7563126\"); // -- Payer -- // Enter the payer's ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \"1\"); // Enter the payer's name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \"First name and second payer name\"); // Enter the payer's e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \"payer_test@test.com\"); // Enter the payer's contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \"7563126\"); // Enter the payer's contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \"5415668464654\"); // Enter the payer's address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \"Autopista Del Sol, 0 - Km.43 Costado Sur\"); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \"5555487\"); parameters.put(PayU.PARAMETERS.PAYER_CITY, \"RM\"); parameters.put(PayU.PARAMETERS.PAYER_STATE, \"Talagante\"); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \"CL\"); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \"000000\"); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \"7563126\"); // Enter the network callback URL here. parameters.put(PayU.PARAMETERS.NETWORK_CALLBACK_URL, \"1\"); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \"MULTICAJA\"); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \"2021-07-01T20:00:00\"); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \"127.0.0.1\"); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); ## Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method. ### Considerations * If you don't send the `RESPONSE_URL` parameter in the extra parameters, the API took the value from the _**Response URL**_ variable in your PayU Module (_**Settings**_  _**Technical configuration**_). * When you process bank transfer payment, you must redirect the customer to the URL found in the `URL_PAYMENT_REDIRECT` extra parameter concatenated with the `TRANSBANK_DIRECT_TOKEN` extra parameter as follows: `URL_PAYMENT_REDIRECT?token_ws=TRANSBANK_DIRECT_TOKEN`. * If the payment request is successful, the transaction has state `PENDING` and responseCode `PENDING_PAYMENT_IN_ENTITY`; this is because the payer is redirected to the selected bank to complete the payment. * The response page must have the following variables: | Variable | Description | |-------------------|---------------------------------------------------------------| | transactionState | State of the transaction. | | reference_pol | Reference code to identify a transaction in PayU. | | TX_VALUE | Transaction amount. | | authorizationCode | Authorization code of the transaction. | | processingDate | Transaction date. | | cc_number | Visible number of the card used in the transaction. | The variables above are sent via GET. ### Method call The following are the bodies of the request and response of this payment method. -- Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Chile, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/en/docs/integrations/sdk-integration/payments-sdk-chile.html","title":"Payments SDK - Chile"},{"body":"Para integrarte con el SDK de Pagos de Chile, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de pagos incluye los siguientes métodos:\n Enviar transacciones con tarjeta de crédito Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar el SDK de Consultas.  Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito. Para Chile, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nNota Las transacciones con tarjeta de crédito utilizando flujos de dos pasos está disponibles bajo demanda. Contacta a tu representante de ventas para más información.  Consideraciones  Envía un método de pago válido de tarjeta de crédito, mira los métodos de pago disponibles para Chile. Para pagos con tókenes de tarjeta de crédito, asigna los parámetros TOKEN_ID y CREDIT_CARD_SECURITY_CODE (si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el SDK de Tokenización. No se permiten transacciones en PESOS CHILENOS con decimales. Two-step flows are not supported for international credit cards. Las transacciones con tarjeta de crédito utilizando flujos de dos pasos está disponibles bajo demanda y para pagos en una cuota. Contacta a tu representante de ventas para más información Por defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas. Luego de que se te active esta funcionalidad, asigna el parámetro PROCESS_WITHOUT_CVV2 con true y elimina el parámetro CREDIT_CARD_SECURITY_CODE.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512325\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;777\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorization(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;777\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CL, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorization($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de 7 días. Despues de este tiempo, la transacción es anulada automáticamente. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada. Solo se permite capturar transacciones en una cuota.  Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400468293\u0026#34;); // Ingresa aquí el identificador de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;ad6940f1-cf8b-474a-a69d-00382084d16c\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Petición de Captura TransactionResponse response = PayUPayments.doCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el identificador de la cuenta. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512327\u0026#34;, // Ingresa aquí el identificador de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400468293\u0026#34;, // Ingresa aquí el identificador de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;ad6940f1-cf8b-474a-a69d-00382084d16c\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512325\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;RM\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Talagante\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CL\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4037997623271984\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2030/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Autopista Del Sol, 0 - Km.43 Costado Sur\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;RM\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Talagante\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CL\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4037997623271984\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2030/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CL, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    ### Consideraciones * El parámetro `EXPIRATION_DATE` no es obligatorio. Si no envías este parámetro, su valor por defecto es siete días after the current date at 12:00 pm.\nIf you send a date later than the default number of días, PayU will ignore this value and the expiration will be set as default. * You must set a response URL in the parameter `NETWORK_CALLBACK_URL` in the request; this URL redirects the user back to your page after they finish the online payment procedure. * You must redirect the payer to the Klap webpage (fka as Multicaja) to let them perform the cash payment. This URL is found in the `BANK_URL` parameter in the response. ### Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación. Mapparameters = new HashMap(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \"512325\"); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \"\"+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \"payment test\"); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \"Language.es\"); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \"\"+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \"\"+Currency.CLP.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \"1\"); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \"First name and second buyer name\"); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \"buyer_test@test.com\"); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \"7563126\"); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \"123456789\"); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \"Autopista Del Sol, 0 - Km.43 Costado Sur\"); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \"5555487\"); parameters.put(PayU.PARAMETERS.BUYER_CITY, \"RM\"); parameters.put(PayU.PARAMETERS.BUYER_STATE, \"Talagante\"); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \"CL\"); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \"000000\"); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \"7563126\"); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \"1\"); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \"First name and second payer name\"); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \"payer_test@test.com\"); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \"7563126\"); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \"5415668464654\"); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \"Autopista Del Sol, 0 - Km.43 Costado Sur\"); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \"5555487\"); parameters.put(PayU.PARAMETERS.PAYER_CITY, \"RM\"); parameters.put(PayU.PARAMETERS.PAYER_STATE, \"Talagante\"); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \"CL\"); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \"000000\"); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \"7563126\"); // Enter the network callback URL here. parameters.put(PayU.PARAMETERS.NETWORK_CALLBACK_URL, \"1\"); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CL.name()); // Ingresa aquí el nombre del método de pago en efectivo. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \"MULTICAJA\"); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \"2021-07-01T20:00:00\"); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \"127.0.0.1\"); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); ## Enviar transacciones con transferencia bancaria {#submit-transaction-with-bank-transfer} This method lets you process the bank transfer payments of your customers. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method. ### Consideraciones * If you don't send the `RESPONSE_URL` parameter in the extra parameters, the API took the value from the _**Response URL**_ variable in your PayU Module (_**Settings**_  _**Technical configuration**_). * When you process bank transfer payment, you must redirect the customer to the URL found in the `URL_PAYMENT_REDIRECT` extra parameter concatenated with the `TRANSBANK_DIRECT_TOKEN` extra parameter as follows: `URL_PAYMENT_REDIRECT?token_ws=TRANSBANK_DIRECT_TOKEN`. * If the payment request is successful, the transaction has state `PENDING` and responseCode `PENDING_PAYMENT_IN_ENTITY`; this is because the payer is redirected to the selected bank to complete the payment. * The response page must have the following variables: | Variable | Descripción | |-------------------|---------------------------------------------------------------| | transactionState | State of the transaction. | | reference_pol | Reference code to identify a transaction in PayU. | | TX_VALUE | Transaction amount. | | authorizationCode | Autorización code of the transaction. | | processingDate | Transaction date. | | cc_number | Visible number of the card used in the transaction. | The variables above are sent via GET. ### Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación. -- Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"Para integrarte con el SDK de Pagos de Chile, apunta tus peticiones a las siguientes URLs:\n Java PHP …","ref":"/es/docs/integrations/sdk-integration/payments-sdk-chile.html","title":"SDK de Pagos - Chile"},{"body":"Para integrate con el API de Consultas, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Producción: https://api.payulatam.com/reports-api/4.0/service.cgi   Métodos disponibles El API de Consultas incluye los siguientes métodos:\n Consultar por Identificador de la orden Consultar por Identificador de la transacción Consultar por Identificador de la referencia Ping  Consultar por Identificador de la orden Order Id es un valor generado por PayU para identificar todas las transacciones generadas en una solicitud de pago realizada por tu cliente. Puedes utilizar el comando ORDER_DETAIL para consultar el estado de una orden por su identificador.\nLos siguientes son los cuerpos de la petición y la respuesta para esta operación.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;ORDER_DETAIL\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;orderId\u0026#34;: 857695047 } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: { \u0026#34;id\u0026#34;: 857695047, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;status\u0026#34;: \u0026#34;CAPTURED\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-05-03T18:01:10.946Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description Documentation\u0026#34;, \u0026#34;airlineCode\u0026#34;: null, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payulatam.com/confirmation\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 100\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Medellin\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Antioquia\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;buyerAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 100\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Medellin\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Antioquia\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;cnpj\u0026#34;: null }, \u0026#34;antifraudMerchantId\u0026#34;: null, \u0026#34;isTest\u0026#34;: true, \u0026#34;transactions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026#34;, \u0026#34;order\u0026#34;: null, \u0026#34;creditCard\u0026#34;: { \u0026#34;maskedNumber\u0026#34;: \u0026#34;547130******0003\u0026#34;, \u0026#34;issuerBank\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;cardType\u0026#34;: null }, \u0026#34;bankAccount\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;source\u0026#34;: null, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1620064792953, \u0026#34;extraParameters\u0026#34;: null }, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 93\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogota\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogota DC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;dniType\u0026#34;: null }, \u0026#34;termsAndConditionId\u0026#34;: 202, \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_TOTAL_AMOUNT\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;CURRENT_TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;MIN_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PRICING_PROFILE_GROUP_ID\u0026#34;: \u0026#34;MG-PRICING_2_341559\u0026#34;, \u0026#34;MAX_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PERCENT_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MAX_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MERCHANT_PROFILE_ID\u0026#34;: \u0026#34;MG-PRICING_1_51803\u0026#34;, \u0026#34;MIN_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; } } ], \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;creationDate\u0026#34;: 1620064873257, \u0026#34;isCreatedUsingStandardIntegrationParams\u0026#34;: null, \u0026#34;merchantId\u0026#34;: 508029, \u0026#34;processedTransactionId\u0026#34;: \u0026#34;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026#34;, \u0026#34;orderSignature\u0026#34;: \u0026#34;49f80210a72e9b7cafe9001338450bbb\u0026#34; } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;ORDER_DETAIL\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;orderId\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.Entero\u0026#34;\u0026gt;2637540\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;order\u0026#34;\u0026gt; \u0026lt;id\u0026gt;857695047\u0026lt;/id\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;status\u0026gt;CAPTURED\u0026lt;/status\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-05-03T18:01:10.946Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description Documentation\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payulatam.com/confirmation\u0026lt;/notifyUrl\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;calle 100\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Medellin\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Antioquia\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;buyerAddress\u0026gt; \u0026lt;street1\u0026gt;calle 100\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Medellin\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Antioquia\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/buyerAddress\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;id\u0026gt;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026lt;/id\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;maskedNumber\u0026gt;547130******0003\u0026lt;/maskedNumber\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-05-03T12:59:52\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;calle 93\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;125544\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogota\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogota DC\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;termsAndConditionId\u0026gt;202\u0026lt;/termsAndConditionId\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_TOTAL_AMOUNT\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CURRENT_TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PRICING_PROFILE_GROUP_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_2_341559\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PERCENT_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MERCHANT_PROFILE_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_1_51803\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;/transactions\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;creationDate\u0026gt;2021-05-03T13:01:13\u0026lt;/creationDate\u0026gt; \u0026lt;merchantId\u0026gt;508029\u0026lt;/merchantId\u0026gt; \u0026lt;processedTransactionId\u0026gt;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026lt;/processedTransactionId\u0026gt; \u0026lt;orderSignature\u0026gt;49f80210a72e9b7cafe9001338450bbb\u0026lt;/orderSignature\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Consultar por Identificador de la transacción Transaction Id es un valor generado por PayU para identificar una transaccion generada para una orden. Puedes utilizar el comando TRANSACTION_RESPONSE_DETAIL para consultar la información de una transacción.\nLos siguientes son los cuerpos de la petición y la respuesta para esta operación.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;TRANSACTION_RESPONSE_DETAIL\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;transactionId\u0026#34;: \u0026#34;546e0fe9-8076-46b5-9f73-622c5a12f5cb\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1620069958670, \u0026#34;extraParameters\u0026#34;: null } } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;TRANSACTION_RESPONSE_DETAIL\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;transactionId\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.String\u0026#34;\u0026gt;546e0fe9-8076-46b5-9f73-622c5a12f5cb\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;transactionResponse\u0026#34;\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-05-03T14:25:58\u0026lt;/operationDate\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Consultar por Identificador de la referencia Reference Id es un valor generado por tu comercio para identificar una orden. Puedes utilizar el comando ORDER_DETAIL_BY_REFERENCE_CODE para consultar el estado de una order por tu propio identificador (Referencia). Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;ORDER_DETAIL_BY_REFERENCE_CODE\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;referenceCode\u0026#34;: \u0026#34;HP14015317573744\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: [ { \u0026#34;id\u0026#34;: 844427581, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;status\u0026#34;: \u0026#34;CAPTURED\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;HP14015317573744\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;9518567a-0da7-44f9-b4d5-f8b8ac8d96d4\u0026#34;, \u0026#34;airlineCode\u0026#34;: null, \u0026#34;language\u0026#34;: \u0026#34;pt\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://api-pay-aff.vulcano.rocks/hotpay-notification-server/api/v1/payu/notification\u0026#34;, \u0026#34;shippingAddress\u0026#34;: null, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;0c970b19-3fbf-362c-b64b-c2c6ece8d01a\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: null, \u0026#34;buyerAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;ae QOprITzE\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;448\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;BH\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MG\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;27519777\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;dniNumber\u0026#34;: \u0026#34;1111\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;61609024311\u0026#34; }, \u0026#34;antifraudMerchantId\u0026#34;: null, \u0026#34;isTest\u0026#34;: true, \u0026#34;transactions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026#34;, \u0026#34;order\u0026#34;: null, \u0026#34;creditCard\u0026#34;: { \u0026#34;maskedNumber\u0026#34;: \u0026#34;411111******1111\u0026#34;, \u0026#34;issuerBank\u0026#34;: \u0026#34;THE CHASE MANHATTAN BANK\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;cardType\u0026#34;: null }, \u0026#34;bankAccount\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;source\u0026#34;: null, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1531757342757, \u0026#34;extraParameters\u0026#34;: null }, \u0026#34;deviceSessionId\u0026#34;: null, \u0026#34;ipAddress\u0026#34;: \u0026#34;10.100.1.30\u0026#34;, \u0026#34;cookie\u0026#34;: null, \u0026#34;userAgent\u0026#34;: \u0026#34;Apache-HttpClient/4.3.1 (java 1.5)\u0026#34;, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;c48c9d72c2344173a8a66ad157f1415e@payutest.com\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;ae QOprITzE\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;448\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;BH\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MG\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;27519777\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;emailAddress\u0026#34;: \u0026#34;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: null, \u0026#34;dniNumber\u0026#34;: \u0026#34;1111\u0026#34;, \u0026#34;dniType\u0026#34;: null }, \u0026#34;termsAndConditionId\u0026#34;: 202, \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 119.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_TOTAL_AMOUNT\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;CURRENT_TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.65, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_TOTAL_INCOME_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 52921.05, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.35, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 45883.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;MIN_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PRICING_PROFILE_GROUP_ID\u0026#34;: \u0026#34;MG-PRICING_2_341559\u0026#34;, \u0026#34;MAX_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PERCENT_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MAX_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MERCHANT_PROFILE_ID\u0026#34;: \u0026#34;MG-PRICING_1_51803\u0026#34;, \u0026#34;MIN_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: \u0026#34;1\u0026#34; } } ], \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 119.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.65, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.35, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 45883.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;creationDate\u0026#34;: 1531757337149, \u0026#34;isCreatedUsingStandardIntegrationParams\u0026#34;: null, \u0026#34;merchantId\u0026#34;: 508029, \u0026#34;processedTransactionId\u0026#34;: \u0026#34;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026#34;, \u0026#34;orderSignature\u0026#34;: \u0026#34;bbd718c869298251a91329b673c5abfa\u0026#34; } ] } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;ORDER_DETAIL_BY_REFERENCE_CODE\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;referenceCode\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.String\u0026#34;\u0026gt;HP14015317573744\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;844427581\u0026lt;/id\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;status\u0026gt;CAPTURED\u0026lt;/status\u0026gt; \u0026lt;referenceCode\u0026gt;HP14015317573744\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;9518567a-0da7-44f9-b4d5-f8b8ac8d96d4\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;pt\u0026lt;/language\u0026gt; \u0026lt;notifyUrl\u0026gt;http://api-pay-aff.vulcano.rocks/hotpay-notification-server/api/v1/payu/notification\u0026lt;/notifyUrl\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;0c970b19-3fbf-362c-b64b-c2c6ece8d01a\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;APPROVED\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026lt;/emailAddress\u0026gt; \u0026lt;buyerAddress\u0026gt; \u0026lt;street1\u0026gt;ae QOprITzE\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;448\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;BH\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;MG\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;27519777\u0026lt;/postalCode\u0026gt; \u0026lt;/buyerAddress\u0026gt; \u0026lt;dniNumber\u0026gt;1111\u0026lt;/dniNumber\u0026gt; \u0026lt;CNPJ\u0026gt;61609024311\u0026lt;/CNPJ\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;id\u0026gt;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026lt;/id\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;maskedNumber\u0026gt;411111******1111\u0026lt;/maskedNumber\u0026gt; \u0026lt;issuerBank\u0026gt;THE CHASE MANHATTAN BANK\u0026lt;/issuerBank\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2018-07-16T11:09:02\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;ipAddress\u0026gt;10.100.1.30\u0026lt;/ipAddress\u0026gt; \u0026lt;userAgent\u0026gt;Apache-HttpClient/4.3.1 (java 1.5)\u0026lt;/userAgent\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;c48c9d72c2344173a8a66ad157f1415e@payutest.com\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;APPROVED\u0026lt;/fullName\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;ae QOprITzE\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;448\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;BH\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;MG\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;27519777\u0026lt;/postalCode\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;emailAddress\u0026gt;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026lt;/emailAddress\u0026gt; \u0026lt;dniNumber\u0026gt;1111\u0026lt;/dniNumber\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;termsAndConditionId\u0026gt;202\u0026lt;/termsAndConditionId\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;119.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_TOTAL_AMOUNT\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CURRENT_TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.65\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_TOTAL_INCOME_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;52921.05\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.35\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45883.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PRICING_PROFILE_GROUP_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_2_341559\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PERCENT_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MERCHANT_PROFILE_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_1_51803\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;/transactions\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;119.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.65\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.35\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45883.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;creationDate\u0026gt;2018-07-16T11:08:57\u0026lt;/creationDate\u0026gt; \u0026lt;merchantId\u0026gt;508029\u0026lt;/merchantId\u0026gt; \u0026lt;processedTransactionId\u0026gt;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026lt;/processedTransactionId\u0026gt; \u0026lt;orderSignature\u0026gt;bbd718c869298251a91329b673c5abfa\u0026lt;/orderSignature\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Ping El método PING te permite verificar la conexión con nuestra plataforma. Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: \u0026#34;ping\u0026#34; } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;string\u0026#34;\u0026gt;ping\u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    ","excerpt":"Para integrate con el API de Consultas, apunta tus peticiones a las siguientes URLs de acuerdo con …","ref":"/es/docs/integrations/api-integration/queries-api.html","title":"API de Consultas"},{"body":"To integrate with Queries API, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Production: https://api.payulatam.com/reports-api/4.0/service.cgi   Available methods Queries API includes the following methods:\n Query by Order Id Query by Transaction Id Query by Reference Id Ping  Query by Order Id Order Id is a value generated by PayU to identify all the transactions generated for a payment request performed by your customer. You can use the ORDER_DETAIL command to consult the status of an Order by its identifier.\nThe following are the request and response examples for this operation.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;ORDER_DETAIL\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;orderId\u0026#34;: 857695047 } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: { \u0026#34;id\u0026#34;: 857695047, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;status\u0026#34;: \u0026#34;CAPTURED\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;PRODUCT_TEST_2021-05-03T18:01:10.946Z\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment test description Documentation\u0026#34;, \u0026#34;airlineCode\u0026#34;: null, \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://www.payulatam.com/confirmation\u0026#34;, \u0026#34;shippingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 100\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Medellin\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Antioquia\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;0000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second buyer name\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;buyer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;buyerAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 100\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;5555487\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Medellin\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Antioquia\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;dniNumber\u0026#34;: \u0026#34;123456789\u0026#34;, \u0026#34;cnpj\u0026#34;: null }, \u0026#34;antifraudMerchantId\u0026#34;: null, \u0026#34;isTest\u0026#34;: true, \u0026#34;transactions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026#34;, \u0026#34;order\u0026#34;: null, \u0026#34;creditCard\u0026#34;: { \u0026#34;maskedNumber\u0026#34;: \u0026#34;547130******0003\u0026#34;, \u0026#34;issuerBank\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;cardType\u0026#34;: null }, \u0026#34;bankAccount\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;source\u0026#34;: null, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1620064792953, \u0026#34;extraParameters\u0026#34;: null }, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;First name and second payer name\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;calle 93\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;125544\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Bogota\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Bogota DC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;000000\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;7563126\u0026#34; }, \u0026#34;emailAddress\u0026#34;: \u0026#34;payer_test@test.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: \u0026#34;7563126\u0026#34;, \u0026#34;dniNumber\u0026#34;: \u0026#34;5415668464654\u0026#34;, \u0026#34;dniType\u0026#34;: null }, \u0026#34;termsAndConditionId\u0026#34;: 202, \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_TOTAL_AMOUNT\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;CURRENT_TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;MIN_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;BANK_REFERENCED_CODE\u0026#34;: \u0026#34;CREDIT\u0026#34;, \u0026#34;PRICING_PROFILE_GROUP_ID\u0026#34;: \u0026#34;MG-PRICING_2_341559\u0026#34;, \u0026#34;MAX_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PERCENT_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MAX_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MERCHANT_PROFILE_ID\u0026#34;: \u0026#34;MG-PRICING_1_51803\u0026#34;, \u0026#34;MIN_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;PAYMENT_WAY_ID\u0026#34;: \u0026#34;4\u0026#34; } } ], \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 50000.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;creationDate\u0026#34;: 1620064873257, \u0026#34;isCreatedUsingStandardIntegrationParams\u0026#34;: null, \u0026#34;merchantId\u0026#34;: 508029, \u0026#34;processedTransactionId\u0026#34;: \u0026#34;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026#34;, \u0026#34;orderSignature\u0026#34;: \u0026#34;49f80210a72e9b7cafe9001338450bbb\u0026#34; } } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;ORDER_DETAIL\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;orderId\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.Integer\u0026#34;\u0026gt;2637540\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;order\u0026#34;\u0026gt; \u0026lt;id\u0026gt;857695047\u0026lt;/id\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;status\u0026gt;CAPTURED\u0026lt;/status\u0026gt; \u0026lt;referenceCode\u0026gt;PRODUCT_TEST_2021-05-03T18:01:10.946Z\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;Payment test description Documentation\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;notifyUrl\u0026gt;http://www.payulatam.com/confirmation\u0026lt;/notifyUrl\u0026gt; \u0026lt;shippingAddress\u0026gt; \u0026lt;street1\u0026gt;calle 100\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Medellin\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Antioquia\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;0000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/shippingAddress\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;1\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second buyer name\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;buyer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;buyerAddress\u0026gt; \u0026lt;street1\u0026gt;calle 100\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;5555487\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Medellin\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Antioquia\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/buyerAddress\u0026gt; \u0026lt;dniNumber\u0026gt;123456789\u0026lt;/dniNumber\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;id\u0026gt;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026lt;/id\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;maskedNumber\u0026gt;547130******0003\u0026lt;/maskedNumber\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2021-05-03T12:59:52\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;1\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;First name and second payer name\u0026lt;/fullName\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;calle 93\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;125544\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;Bogota\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;Bogota DC\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;000000\u0026lt;/postalCode\u0026gt; \u0026lt;phone\u0026gt;7563126\u0026lt;/phone\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;emailAddress\u0026gt;payer_test@test.com\u0026lt;/emailAddress\u0026gt; \u0026lt;contactPhone\u0026gt;7563126\u0026lt;/contactPhone\u0026gt; \u0026lt;dniNumber\u0026gt;5415668464654\u0026lt;/dniNumber\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;termsAndConditionId\u0026gt;202\u0026lt;/termsAndConditionId\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_TOTAL_AMOUNT\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CURRENT_TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;BANK_REFERENCED_CODE\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;CREDIT\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PRICING_PROFILE_GROUP_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_2_341559\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PERCENT_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MERCHANT_PROFILE_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_1_51803\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PAYMENT_WAY_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;4\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;/transactions\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;50000.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;creationDate\u0026gt;2021-05-03T13:01:13\u0026lt;/creationDate\u0026gt; \u0026lt;merchantId\u0026gt;508029\u0026lt;/merchantId\u0026gt; \u0026lt;processedTransactionId\u0026gt;5fde3c2c-540d-4579-96f7-2a4b8c65a951\u0026lt;/processedTransactionId\u0026gt; \u0026lt;orderSignature\u0026gt;49f80210a72e9b7cafe9001338450bbb\u0026lt;/orderSignature\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Query by Transaction Id Transaction Id is a value generated by PayU to identify one transaction generated for an order. You can use the TRANSACTION_RESPONSE_DETAIL command to consult the information of a given transaction.\nThe following are the request and response examples for this operation.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;TRANSACTION_RESPONSE_DETAIL\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;transactionId\u0026#34;: \u0026#34;546e0fe9-8076-46b5-9f73-622c5a12f5cb\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;000\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;77821\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;170921\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;Aprobado y completado con exito\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1620069958670, \u0026#34;extraParameters\u0026#34;: null } } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;TRANSACTION_RESPONSE_DETAIL\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;transactionId\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.String\u0026#34;\u0026gt;546e0fe9-8076-46b5-9f73-622c5a12f5cb\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;transactionResponse\u0026#34;\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;000\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;77821\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;170921\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;Aprobado y completado con exito\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-05-03T14:25:58\u0026lt;/operationDate\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Query by Reference Id Reference Id is a value generated by your commerce to identify an order. You can use the ORDER_DETAIL_BY_REFERENCE_CODE to consult the status of an Order by your own order identifier (reference). The following are the request and response examples for this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;ORDER_DETAIL_BY_REFERENCE_CODE\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;details\u0026#34;: { \u0026#34;referenceCode\u0026#34;: \u0026#34;HP14015317573744\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: [ { \u0026#34;id\u0026#34;: 844427581, \u0026#34;accountId\u0026#34;: 512321, \u0026#34;status\u0026#34;: \u0026#34;CAPTURED\u0026#34;, \u0026#34;referenceCode\u0026#34;: \u0026#34;HP14015317573744\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;9518567a-0da7-44f9-b4d5-f8b8ac8d96d4\u0026#34;, \u0026#34;airlineCode\u0026#34;: null, \u0026#34;language\u0026#34;: \u0026#34;pt\u0026#34;, \u0026#34;notifyUrl\u0026#34;: \u0026#34;http://api-pay-aff.vulcano.rocks/hotpay-notification-server/api/v1/payu/notification\u0026#34;, \u0026#34;shippingAddress\u0026#34;: null, \u0026#34;buyer\u0026#34;: { \u0026#34;merchantBuyerId\u0026#34;: \u0026#34;0c970b19-3fbf-362c-b64b-c2c6ece8d01a\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;emailAddress\u0026#34;: \u0026#34;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: null, \u0026#34;buyerAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;ae QOprITzE\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;448\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;BH\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MG\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;27519777\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;dniNumber\u0026#34;: \u0026#34;1111\u0026#34;, \u0026#34;cnpj\u0026#34;: \u0026#34;61609024311\u0026#34; }, \u0026#34;antifraudMerchantId\u0026#34;: null, \u0026#34;isTest\u0026#34;: true, \u0026#34;transactions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026#34;, \u0026#34;order\u0026#34;: null, \u0026#34;creditCard\u0026#34;: { \u0026#34;maskedNumber\u0026#34;: \u0026#34;411111******1111\u0026#34;, \u0026#34;issuerBank\u0026#34;: \u0026#34;THE CHASE MANHATTAN BANK\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;cardType\u0026#34;: null }, \u0026#34;bankAccount\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;source\u0026#34;: null, \u0026#34;paymentCountry\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;00000000\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: null, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1531757342757, \u0026#34;extraParameters\u0026#34;: null }, \u0026#34;deviceSessionId\u0026#34;: null, \u0026#34;ipAddress\u0026#34;: \u0026#34;10.100.1.30\u0026#34;, \u0026#34;cookie\u0026#34;: null, \u0026#34;userAgent\u0026#34;: \u0026#34;Apache-HttpClient/4.3.1 (java 1.5)\u0026#34;, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;payer\u0026#34;: { \u0026#34;merchantPayerId\u0026#34;: \u0026#34;c48c9d72c2344173a8a66ad157f1415e@payutest.com\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;billingAddress\u0026#34;: { \u0026#34;street1\u0026#34;: \u0026#34;ae QOprITzE\u0026#34;, \u0026#34;street2\u0026#34;: \u0026#34;448\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;BH\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;MG\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;postalCode\u0026#34;: \u0026#34;27519777\u0026#34;, \u0026#34;phone\u0026#34;: null }, \u0026#34;emailAddress\u0026#34;: \u0026#34;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026#34;, \u0026#34;contactPhone\u0026#34;: null, \u0026#34;dniNumber\u0026#34;: \u0026#34;1111\u0026#34;, \u0026#34;dniType\u0026#34;: null }, \u0026#34;termsAndConditionId\u0026#34;: 202, \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 119.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_TOTAL_AMOUNT\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;CURRENT_TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.65, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_TOTAL_INCOME_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 52921.05, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.35, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 45883.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;MIN_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PRICING_PROFILE_GROUP_ID\u0026#34;: \u0026#34;MG-PRICING_2_341559\u0026#34;, \u0026#34;MAX_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;PERCENT_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MAX_SHIPPING_PAYER\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MERCHANT_PROFILE_ID\u0026#34;: \u0026#34;MG-PRICING_1_51803\u0026#34;, \u0026#34;MIN_SHIPPING_MERCHANT\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: \u0026#34;1\u0026#34; } } ], \u0026#34;additionalValues\u0026#34;: { \u0026#34;PM_PAYER_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 119.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;COMMISSION_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_NETWORK_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX\u0026#34;: { \u0026#34;value\u0026#34;: 8717.65, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;DP_MERCHANT_INTEREST_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PAYER_PRICING_VALUES\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;TX_TAX_RETURN_BASE\u0026#34;: { \u0026#34;value\u0026#34;: 45882.35, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_PURCHASE_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 45883.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_ADDITIONAL_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 0.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; }, \u0026#34;PM_VALUE\u0026#34;: { \u0026#34;value\u0026#34;: 54600.00, \u0026#34;currency\u0026#34;: \u0026#34;COP\u0026#34; } }, \u0026#34;creationDate\u0026#34;: 1531757337149, \u0026#34;isCreatedUsingStandardIntegrationParams\u0026#34;: null, \u0026#34;merchantId\u0026#34;: 508029, \u0026#34;processedTransactionId\u0026#34;: \u0026#34;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026#34;, \u0026#34;orderSignature\u0026#34;: \u0026#34;bbd718c869298251a91329b673c5abfa\u0026#34; } ] } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;ORDER_DETAIL_BY_REFERENCE_CODE\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;details class=\u0026#34;java.util.HashMap\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;referenceCode\u0026lt;/string\u0026gt; \u0026lt;object class=\u0026#34;java.lang.String\u0026#34;\u0026gt;HP14015317573744\u0026lt;/object\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;844427581\u0026lt;/id\u0026gt; \u0026lt;accountId\u0026gt;512321\u0026lt;/accountId\u0026gt; \u0026lt;status\u0026gt;CAPTURED\u0026lt;/status\u0026gt; \u0026lt;referenceCode\u0026gt;HP14015317573744\u0026lt;/referenceCode\u0026gt; \u0026lt;description\u0026gt;9518567a-0da7-44f9-b4d5-f8b8ac8d96d4\u0026lt;/description\u0026gt; \u0026lt;language\u0026gt;pt\u0026lt;/language\u0026gt; \u0026lt;notifyUrl\u0026gt;http://api-pay-aff.vulcano.rocks/hotpay-notification-server/api/v1/payu/notification\u0026lt;/notifyUrl\u0026gt; \u0026lt;buyer\u0026gt; \u0026lt;merchantBuyerId\u0026gt;0c970b19-3fbf-362c-b64b-c2c6ece8d01a\u0026lt;/merchantBuyerId\u0026gt; \u0026lt;fullName\u0026gt;APPROVED\u0026lt;/fullName\u0026gt; \u0026lt;emailAddress\u0026gt;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026lt;/emailAddress\u0026gt; \u0026lt;buyerAddress\u0026gt; \u0026lt;street1\u0026gt;ae QOprITzE\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;448\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;BH\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;MG\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;27519777\u0026lt;/postalCode\u0026gt; \u0026lt;/buyerAddress\u0026gt; \u0026lt;dniNumber\u0026gt;1111\u0026lt;/dniNumber\u0026gt; \u0026lt;CNPJ\u0026gt;61609024311\u0026lt;/CNPJ\u0026gt; \u0026lt;/buyer\u0026gt; \u0026lt;isTest\u0026gt;true\u0026lt;/isTest\u0026gt; \u0026lt;transactions\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;id\u0026gt;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026lt;/id\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;maskedNumber\u0026gt;411111******1111\u0026lt;/maskedNumber\u0026gt; \u0026lt;issuerBank\u0026gt;THE CHASE MANHATTAN BANK\u0026lt;/issuerBank\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;CO\u0026lt;/paymentCountry\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;trazabilityCode\u0026gt;00000000\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;00000000\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;operationDate\u0026gt;2018-07-16T11:09:02\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;ipAddress\u0026gt;10.100.1.30\u0026lt;/ipAddress\u0026gt; \u0026lt;userAgent\u0026gt;Apache-HttpClient/4.3.1 (java 1.5)\u0026lt;/userAgent\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;merchantPayerId\u0026gt;c48c9d72c2344173a8a66ad157f1415e@payutest.com\u0026lt;/merchantPayerId\u0026gt; \u0026lt;fullName\u0026gt;APPROVED\u0026lt;/fullName\u0026gt; \u0026lt;billingAddress\u0026gt; \u0026lt;street1\u0026gt;ae QOprITzE\u0026lt;/street1\u0026gt; \u0026lt;street2\u0026gt;448\u0026lt;/street2\u0026gt; \u0026lt;city\u0026gt;BH\u0026lt;/city\u0026gt; \u0026lt;state\u0026gt;MG\u0026lt;/state\u0026gt; \u0026lt;country\u0026gt;CO\u0026lt;/country\u0026gt; \u0026lt;postalCode\u0026gt;27519777\u0026lt;/postalCode\u0026gt; \u0026lt;/billingAddress\u0026gt; \u0026lt;emailAddress\u0026gt;e26a8f06-64ef-49aa-8897-29df2f664017@usetheforce.com\u0026lt;/emailAddress\u0026gt; \u0026lt;dniNumber\u0026gt;1111\u0026lt;/dniNumber\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;termsAndConditionId\u0026gt;202\u0026lt;/termsAndConditionId\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;119.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_TOTAL_AMOUNT\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;CURRENT_TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.65\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_TOTAL_INCOME_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;52921.05\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.35\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45883.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PRICING_PROFILE_GROUP_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_2_341559\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PERCENT_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MAX_SHIPPING_PAYER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MERCHANT_PROFILE_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;MG-PRICING_1_51803\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;MIN_SHIPPING_MERCHANT\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;0\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;1\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;/transactions\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;119.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;COMMISSION_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_NETWORK_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;8717.65\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;DP_MERCHANT_INTEREST_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PAYER_PRICING_VALUES\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_TAX_RETURN_BASE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45882.35\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_PURCHASE_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;45883.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_ADDITIONAL_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;0.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PM_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;54600.00\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;COP\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;creationDate\u0026gt;2018-07-16T11:08:57\u0026lt;/creationDate\u0026gt; \u0026lt;merchantId\u0026gt;508029\u0026lt;/merchantId\u0026gt; \u0026lt;processedTransactionId\u0026gt;76b724ee-f8e3-4228-84ca-d9e0a9d5d2b7\u0026lt;/processedTransactionId\u0026gt; \u0026lt;orderSignature\u0026gt;bbd718c869298251a91329b673c5abfa\u0026lt;/orderSignature\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    Ping The PING method lets you verify the connection to our platform. The following are the request and response examples for this method.\n JSON XML   Request example:\n{ \u0026#34;test\u0026#34;: false, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PING\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; } } \nResponse example:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;result\u0026#34;: { \u0026#34;payload\u0026#34;: \u0026#34;ping\u0026#34; } }   Request example:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;en\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PING\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse example:\n\u0026lt;reportingResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;result\u0026gt; \u0026lt;payload class=\u0026#34;string\u0026#34;\u0026gt;ping\u0026lt;/payload\u0026gt; \u0026lt;/result\u0026gt; \u0026lt;/reportingResponse\u0026gt;    ","excerpt":"To integrate with Queries API, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/queries-api.html","title":"Queries API"},{"body":"La siguiente sección muestra los métodos de pago disponibles por país y brinda algunas consideraciones. Consulta la columna Parámetro paymentMethod para saber el valor que se enviar como Medio de Pago cuando utilices la integración API o SDK.\nArgentina      Medio de Pago Parámetro paymentMethod Tipo Comentarios      American Express AMEX Tarjetas de Crédito     Argencard ARGENCARD Tarjetas de Crédito     Cabal CABAL Tarjetas de Crédito     Cencosud CENCOSUD Tarjetas de Crédito     Cobro Express COBRO_EXPRESS Efectivo     Diners DINERS Tarjetas de Crédito     Mastercard MASTERCARD Tarjetas de Crédito Tarjetas soportadas: CRM Falabella, Nativa, Cordial, Cordobesa y Nexo.    Naranja NARANJA Tarjetas de Crédito     PAGOFACIL PAGOFACIL Efectivo     RAPIPAGO RAPIPAGO Efectivo     Shopping SHOPPING Tarjetas de Crédito     VISA VISA Tarjetas de Crédito Tarjetas soportadas: Shopping, Nativa, Credimas y Nevada.    VISA VISA_DEBIT Tarjetas Débito     Brasil      Medio de Pago Parámetro paymentMethod Tipo Comentarios      American Express AMEX Tarjetas de Crédito     Boleto Bancario BOLETO_BANCARIO Efectivo No concilia en fines de semana ni festivos    Diners DINERS Tarjetas de Crédito     Elo ELO Tarjetas de Crédito     Hipercard HIPERCARD Tarjetas de Crédito     TEF Itaú ITAU Transferencia Bancaria Solo disponible para cuentas Itaú.    Mastercard MASTERCARD Tarjetas de Crédito     VISA VISA Tarjetas de Crédito     Chile      Medio de Pago Parámetro paymentMethod Tipo Comentarios      American Express AMEX Tarjetas de Crédito     Diners DINERS Tarjetas de Crédito     Mastercard MASTERCARD Tarjetas de Crédito     Mastercard MASTERCARD_DEBIT Tarjetas Débito     Klap (Antes Multicaja) MULTICAJA Efectivo     Redcompra TRANSBANK_DEBIT Tarjetas Débito y prepago     VISA VISA Tarjetas de Crédito     VISA VISA_DEBIT Tarjetas Débito     Colombia PayU en Colombia te permite integrar con la mayoría de los métodos de pago en efectivo del país. Además, soportamos Codensa y Falabella.\n     Medio de Pago Parámetro paymentMethod Tipo Comentarios      American Express AMEX Tarjetas de Crédito     Baloto BALOTO Efectivo     Banco de Bogotá BANK_REFERENCED Referencia Bancaria     Bancolombia BANK_REFERENCED Referencia Bancaria     Codensa CODENSA Tarjetas de Crédito     Davivienda BANK_REFERENCED Referencia Bancaria     Diners DINERS Tarjetas de Crédito     Efecty EFECTY Efectivo     Mastercard MASTERCARD Tarjetas de Crédito     PSE PSE Transferencia Bancaria PSE le permite a tus clientes pagar utilizando Nequi y Daviplata.    Su Red OTHERS_CASH Efectivo Oficinas de pago: PagaTodo, Gana Gana, Gana, Acertemos, Apuestas Cúcuta 75, Su Chance, La Perla, Apuestas Unidas, JER.    VISA VISA Tarjetas de Crédito     México En México, soportamos tanto Meses sin Intereses y Promociones, consulte este artículo para más información.\n     Medio de Pago Parámetro paymentMethod Tipo Comentarios      American Express AMEX Tarjetas de Crédito     BBVA Bancomer BANK_REFERENCED Referencia Bancaria     Farmacias Benavides OTHERS_CASH_MX Efectivo     Farmacias del Ahorro OTHERS_CASH_MX Efectivo     Mastercard MASTERCARD Tarjetas de Crédito     Mastercard MASTERCARD_DEBIT Tarjetas Débito     Oxxo OXXO Efectivo     Seven Eleven SEVEN_ELEVEN Efectivo     SPEI SPEI Transferencia Bancaria     VISA VISA Tarjetas de Crédito     VISA VISA_DEBIT Tarjetas Débito     Panamá      Medio de Pago Parámetro paymentMethod Tipo Comentarios      Mastercard MASTERCARD Tarjetas de Crédito     VISA VISA Tarjetas de Crédito     Perú      Medio de Pago Parámetro paymentMethod Tipo Comentarios      American Express AMEX Tarjetas de Crédito     Diners DINERS Tarjetas de Crédito     Mastercard MASTERCARD Tarjetas de Crédito     Mastercard MASTERCARD_DEBIT Tarjetas Débito     PAGOEFECTIVO PAGOEFECTIVO Efectivo     VISA VISA Tarjetas de Crédito     VISA VISA_DEBIT Tarjetas Débito     ","excerpt":"La siguiente sección muestra los métodos de pago disponibles por país y brinda algunas …","ref":"/es/docs/getting-started/select-your-payment-method.html","title":"Seleccionar tu medio de Pago"},{"body":"The following section shows the payment methods supported per country and provides some considerations. Refer to the paymentMethod parameter column to know the value to be sent as Payment Method while using API or SDK integrations.\nArgentina      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Argencard ARGENCARD Credit Cards     Cabal CABAL Credit Cards     Cencosud CENCOSUD Credit Cards     Cobro Express COBRO_EXPRESS Cash     Diners DINERS Credit Cards     Mastercard MASTERCARD Credit Cards Supported cards: CRM Falabella, Nativa, Cordial, Cordobesa, and Nexo.    Naranja NARANJA Credit Cards     PAGOFACIL PAGOFACIL Cash     RAPIPAGO RAPIPAGO Cash     Shopping SHOPPING Credit Cards     VISA VISA Credit Cards Supported cards: Shopping, Nativa, Credimas, and Nevada.    VISA VISA_DEBIT Debit Cards     Brazil      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Boleto Bancario BOLETO_BANCARIO Cash Does not conciliate at weekends or holidays    Diners DINERS Credit Cards     Elo ELO Credit Cards     Hipercard HIPERCARD Credit Cards     TEF Itaú ITAU Bank Transfer Only available for Itaú accounts.    Mastercard MASTERCARD Credit Cards     VISA VISA Credit Cards     Chile      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Diners DINERS Credit Cards     Mastercard MASTERCARD Credit Cards     Mastercard MASTERCARD_DEBIT Debit Cards     Klap (FKA Multicaja) MULTICAJA Cash     Redcompra TRANSBANK_DEBIT Debit and Prepaid Cards     VISA VISA Credit Cards     VISA VISA_DEBIT Debit Cards     Colombia PayU in Colombia allows you to integrate with most of the cash payments methods in Colombia. Furthermore, we support Codensa and Falabella.\n     Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Baloto BALOTO Cash     Banco de Bogotá BANK_REFERENCED Bank Reference     Bancolombia BANK_REFERENCED Bank Reference     Codensa CODENSA Credit Cards     Davivienda BANK_REFERENCED Bank Reference     Diners DINERS Credit Cards     Efecty EFECTY Cash     Mastercard MASTERCARD Credit Cards     PSE PSE Bank Transfer PSE lets your customers pay using Nequi and Daviplata.    Su Red OTHERS_CASH Cash Payment offices: PagaTodo, Gana Gana, Gana, Acertemos, Apuestas Cúcuta 75, Su Chance, La Perla, Apuestas Unidas, JER.    VISA VISA Credit Cards     Mexico For Mexico, we support both MSI, and Installments and Promotions, refer to this article for more information.\n     Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     BBVA Bancomer BANK_REFERENCED Bank Reference     Farmacias Benavides OTHERS_CASH_MX Cash     Farmacias del Ahorro OTHERS_CASH_MX Cash     Mastercard MASTERCARD Credit Cards     Mastercard MASTERCARD_DEBIT Debit Cards     Oxxo OXXO Cash     Seven Eleven SEVEN_ELEVEN Cash     SPEI SPEI Bank Transfer     VISA VISA Credit Cards     VISA VISA_DEBIT Debit Cards     Panama      Payment Method paymentMethod parameter Type Comments      Mastercard MASTERCARD Credit Cards     VISA VISA Credit Cards     Peru      Payment Method paymentMethod parameter Type Comments      American Express AMEX Credit Cards     Diners DINERS Credit Cards     Mastercard MASTERCARD Credit Cards     Mastercard MASTERCARD_DEBIT Debit Cards     PAGOEFECTIVO PAGOEFECTIVO Cash     VISA VISA Credit Cards     VISA VISA_DEBIT Debit Cards     ","excerpt":"The following section shows the payment methods supported per country and provides some …","ref":"/en/docs/getting-started/select-your-payment-method.html","title":"Select Your Payment Method"},{"body":"Soluciones preintegradas Algunas soluciones comerciales de tiendas virtuales, ya están integradas con PayU. Solo tienes que activar la opción PayU como tu plataforma de pagos.\nSoluciones disponibles:\n        Plugins para módulos Si utilizas un carrito de compras open source, descarga y utiliza los plugins que hemos desarrollado para facilitar tu proceso de integración con el sistema de pagos.\nPlugins disponibles:\n        Archivos de plugins Encuentra la última versión del plugin requerido en ls siguiente tabla\n   Carrito de compra Plugin Consideraciones      Descargar Disponible para las versiones de la 1.7.x a 1.9.x.    Descargar Necesitas Drupal Commerce Kickstart 7.xx    VirtueMart v2+\nDescargarVirtueMart v3.0.6\nDescargar Necesitas Joomla 2.5 con MySQL 5.1 o superior.Necesitas Joomla versiones 3.3.6, 2.5.28 o 2.5.27.    Descargar Necesitas:\nWordPress 3.8 o superior.WooCommerce versión 2.0 o superior instalado en el sitio WordPress.    Descargar Disponible para la versión 2.3.    Versión 1.5.5.1 o 1.5.6.4\nDescargarVersión 2.0.x.x a 2.1.x.x\nDescargar     ","excerpt":"Soluciones preintegradas Algunas soluciones comerciales de tiendas virtuales, ya están integradas …","ref":"/es/docs/tools/shopping-cart-plugins.html","title":"Plugins para Carritos de compra"},{"body":"Pre-integrated solutions Some online stores are already integrated with PayU. You just need to activate the PayU option as your payment platform.\nAvailable solutions:\n        Note Some of the links above may appear in Spanish.  Plugins for modules If you use an open source shopping cart, download and use the plugins we developed to ease your integration process with its payment system.\nAvailable plugins:\n        Plugin files Find the latest version of the plugin in the following table\n   Shopping cart Plugin Considerations      Download Available for versions from 1.7.x to 1.9.x.    Download You need Drupal Commerce Kickstart 7.xx    VirtueMart v2+\nDownloadVirtueMart v3.0.6\nDownload You need Joomla 2.5 with MySQL 5.1 or higher.You need Joomla versions 3.3.6, 2.5.28, or 2.5.27.    Download You need:\nWordPress 3.8 or higher.WooCommerce version 2.0 or higher installed on the WordPress site.    Download Available for version 2.3.    Version 1.5.5.1 or 1.5.6.4\nDownloadVersion 2.0.x.x to 2.1.x.x\nDownload     ","excerpt":"Pre-integrated solutions Some online stores are already integrated with PayU. You just need to …","ref":"/en/docs/tools/shopping-cart-plugins.html","title":"Shopping Cart Plugins"},{"body":"","excerpt":"","ref":"/es/docs/tools.html","title":"Herramientas"},{"body":"","excerpt":"","ref":"/en/docs/tools.html","title":"Tools"},{"body":"      The confirmation page lets you update the databases in your system; hence, this page should not include HTML code as it\u0026rsquo;s not visible to the buyer. This page is optional; when a transaction is complete (i.e., when approved, rejected, or when canceled) our platform sends the variables via the HTTP POST method.\nIn the confirmation page, you must capture the data you want to store in the database. This capture depends on the programming language you use.\nConsiderations  If your site is restricted with basic access authentication or similar, disable it for the confirmation URL. The IP associated with the confirmation URL should be public; do not use URL accessible from intranet or localhost. If you\u0026rsquo;re using HTTPS, you must have a valid certificate. The format of your confirmation page must be x-www-form-urlencoded. Do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA on your confirmation page. PayU assumes that the confirmation page is reported correctly when receives the HTTP 200 code; otherwise, PayU makes a maximum of nine (9) attempts to send the confirmation page to your system. If after these attempts, HTTP 200 code is not received, PayU sends an e-mail alert. PayU reports the confirmation page once the transaction has a final status for example, when approved, rejected or expired. If a transaction is in progress (waiting for payment or analysis), PayU does not report until the transaction has a final status.  Variables sent with the confirmation page  Variables in the confirmation page     Field Type Size Description     merchant_id Numeric 12 Merchant’s ID number in PayU’s system, you find this number in the account creation mail.   state_pol Alphanumeric 32 Indicates the status of the transaction in the system.\nSee the transaction status in the given column.   risk Decimal (#.00) — Risk associated with the transaction. Values between 0 and 1.\nThe higher value, the greater the risk.\nFormat ###.00.   response_code_pol Alphanumeric 255 PayU’s response code.\nSee the response codes in the given column.   reference_sale Alphanumeric 255 Reference of the sale or order. It must be unique for each transaction that is sent to the system.   reference_pol Alphanumeric 255 The reference or transaction number generated by PayU.   sign Alphanumeric 255 Digital signature created for each of one the transactions.   extra1 Alphanumeric 255 Additional field to send information about the purchase.   extra2 Alphanumeric 255 Additional field to send information about the purchase.   payment_method Numeric — The internal identifier of the payment method used.\nSee the codes of the payment methods.   payment_method_type Numeric — The payment method type used for the payment.   installments_number Numeric — Number of installments in which the credit card payment was deferred.   value Numeric 14,2 Total amount of the transaction. It can contain two decimal digits. For example, 10000.00 or 10000   tax Numeric 14,2 VAT value of the transaction, if VAT zero is sent the system will automatically apply the 19%. It can contain two decimal digits. For example: 19000.00. In case you have no VAT you should fill out 0.   additional_value Numeric 14,2 Non commissionaire Additional Value.   transaction_date Date(YYYY-MM-DD HH:mm:ss) — The date the transaction was made.   currency Alphanumeric 3 The currency in which the payment is made.\nSee the accepted currencies.   email_buyer Alphanumeric 255 Field that contains the buyer’s e-mail address to notify the transaction’s result. It\u0026rsquo;s recommended to validate it when the data is taken from a form.   cus Alphanumeric 64 The cus (unique tracking code) is the payment’s reference within the Bank, it applies only to payments with PSE   pse_bank Alphanumeric 255 The name of the bank, applies only to payments with PSE.   test Boolean (true, false) — Variable to identify whether the operation was a test.   description Alphanumeric 255 Description of the sale.   billing_address Alphanumeric 255 The billing address   shipping_address Alphanumeric 50 The delivery address for the merchandise.   phone Alphanumeric 20 The buyer’s residence phone.   office_phone Alphanumeric 20 The buyer’s daytime phone.   account_number_ach Alphanumeric 36 The transaction’s identifier.   account_type_ach Alphanumeric 36 The transaction’s identifier.   administrative_fee Decimal (#.00) — Value of the administrative fee   administrative_fee_base Decimal (#.00) — Base value of the administrative fee   administrative_fee_tax Decimal (#.00) — Tax value of the administrative fee   airline_code Alphanumeric 4 Airline code   attempts Numeric — Number of attempts of sending the confirmation.   authorization_code Alphanumeric 12 Sale’s authorization code   bank_id Alphanumeric 255 Bank identifier   billing_city Alphanumeric 255 The billing city.   billing_country Alphanumeric 2 The ISO code of the country associated with the billing address.   commision_pol Decimal (#.00) — Value of the commission.   commision_pol_currency Alphanumeric 3 Currency of the commission   customer_number Numeric — Customer number.   date Date (YYYY-MM-DD HH:mm:ss) — Date of the operation.   error_code_bank Alphanumeric 255 Error code of the bank.   error_message_bank Alphanumeric 255 Error message of the bank   exchange_rate Decimal (#.00) — Value of the exchange rate.   ip Alphanumeric 39 The IP address from which the transaction was made.   nickname_buyer Alphanumeric 150 Short name of the buyer.   nickname_seller Alphanumeric 150 Short name of the seller.   payment_method_id Numeric — Identifier of payment methods.\nSee the codes of the payment methods.   payment_request_state Alphanumeric 32 Status of the payment request.   pse_reference1 Alphanumeric 255 Reference no. 1 for PSE payments.   pse_reference2 Alphanumeric 255 Reference no. 2 for PSE payments.   pse_reference3 Alphanumeric 255 Reference no. 3 for PSE payments.   response_message_pol Alphanumeric 255 PayU’s response message.\nSee the response messages in the given column.   shipping_city Alphanumeric 50 The city where the merchandise is delivered.   shipping_country Alphanumeric 2 The ISO code associated with the country where the merchandise is delivered.   transaction_bank_id Alphanumeric 255 ID of the transaction in the bank\u0026rsquo;s system.   transaction_id Alphanumeric 36 Transaction identifier.   payment_method_name Alfa Numeric 255 Payment method used in the payment, for example VISA.     POST example send to the confirmation page The following is a basic example of the variables sent to the confirmation page via POST:\nresponse_code_pol=5 phone= additional_value=0.00 test=1 transaction_date=2015-05-27 13:07:35 cc_number=************0004 cc_holder=test_buyer error_code_bank= billing_country=CO bank_referenced_name= description=test_payu_01 administrative_fee_tax=0.00 value=100.00 administrative_fee=0.00 payment_method_type=2 office_phone= email_buyer=test@payulatam.com response_message_pol=ENTITY_DECLINED error_message_bank= shipping_city= transaction_id=f5e668f1-7ecc-4b83-a4d1-0aaa68260862 sign=e1b0939bbdc99ea84387bee9b90e4f5c tax=0.00 payment_method=10 billing_address=cll 93 payment_method_name=VISA pse_bank= state_pol=6 date=2015.05.27 01:07:35 nickname_buyer= reference_pol=7069375 currency=USD risk=1.0 shipping_address= bank_id=10 payment_request_state=R customer_number= administrative_fee_base=0.00 attempts=1 merchant_id=508029 exchange_rate=2541.15 shipping_country= installments_number=1 franchise=VISA payment_method_id=2 extra1= extra2= antifraudMerchantId= extra3= nickname_seller= ip=190.242.116.98 airline_code= billing_city=Bogota pse_reference1= reference_sale=2015-05-27 13:04:37 pse_reference3= pse_reference2= Signature validation The signature validation allows you to check the data integrity, you must generate the signature with the information you find in the confirmation page and compare it with the information from the signature parameter.\nTo validate the signature in the confirmation page, you should consider:\n If the second decimal is zero, the new_value to generate the signature must have one decimal. Example (150.00 -\u0026gt; 150.0). If the second decimal is not zero, the new_value to generate the signature must keep the same two decimals. Example (150.26 -\u0026gt; 150.26). Get the parameters to generate the signature (merchant_id, reference_sale, value, currency, and state_pol) from the confirmation page, do not get them from your database. You must store your ApiKey safely. Create the signature as follows:  \u0026#34;ApiKey~merchant_id~reference_sale~new_value~currency~state_pol\u0026#34; \nExample\nWith one decimal\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters obtained from the confirmation page - merchant_id = 508029 - reference_sale = TestPayU04 - value = 150.00 - currency = USD - state_pol = 6 The signature is generated in the following way: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.0~USD~6) = b607a2c2fa100e0947b206d41864fb86 sign = b607a2c2fa100e0947b206d41864fb86 With two decimals\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parameters obtained from the confirmation page: - merchant_id = 508029 - reference_sale = TestPayU05 - value = 150.26 - currency = USD - state_pol = 4 The signature is generated in the following way: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU05~150.26~USD~4) = 1d95778a651e11a0ab93c2169a519cd6 sign = 1d95778a651e11a0ab93c2169a519cd6 Compare your signature   Algorithm: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ~ 4 (Approved) 6 (Declined) 5 (Expired)  ) Result:\u0026nbsp;      This calculator lets you generate the signature using any of the available encryption methods.\nPayment retries When a transaction is rejected, the payer has the option to retry the payment using the same payment method or another. Keep in mind that for each attempt, PayU makes the call to the confirmation page with the corresponding transaction status.\nEach of these calls are made with the same payment reference (reference_sale), the same order identifier (reference_pol) but with different transaction identifier (transaction_id). Therefore, you can receive several calls to the confirmation page for the same sale.\nBelow, you find an example of a rejected attempt and its approved retry:\nreference_sale=2015-05-27 13:04:37 reference_pol=7069375 transaction_id=f5e668f1-7ecc-4b83-a4d1-0aaa68260862 state_pol=6 reference_sale=2015-05-27 13:04:37 reference_pol=7069375 transaction_id=01cfdce8-68d5-4a4c-aabf-d89370a0b92f state_pol=4 Note that if one of those calls to the confirmation page indicates that a payment reference (reference_sale) was approved, you can be certain that you will not receive any report to the same reference.\n","excerpt":"The confirmation page lets you update the databases in your system; hence, this page should not …","ref":"/en/docs/integrations/webcheckout-integration/confirmation-page.html","title":"Confirmation Page"},{"body":"      La página de confirmación te permite actualizar las bases de datos de tu sistema; por lo tanto, no debe incluir código HTML ya que no es visible al comprador. Esta página es opcional; cuando se completa una transacción (por ejemplo, cuando se aprueba, se rechaza o cuando se cancela) nuestra plataforma envía las variables a través del método HTTP POST.\nEn la página de confirmación, debes capturar los datos que desear guardar en la base de datos. Esta captura depende del lenguaje de programación que utilizas.\nConsideraciones  Si tienes restringido el sitio con basic access authentication o similar, desactívalo para la URL de confirmación. La IP asociada con la URL de confirmación debe ser pública; no utilice URL que se accedan por intranet o localhost. Si utilizas HTTPS, debes tener un certificado válido. El formato de tu página de confirmación debe ser x-www-form-urlencoded. No utilices certificados de seguridad de curva elíptica o aquellos que cuenten con la suite de encriptación TLS_ECDHE_ECDSA_WITH_RC4_128_SHA en tu página de confirmación. PayU asume que la página de confirmación es reportada correctamente cuando recibe el código HTTP 200; en caso contrario, PayU realiza un máximo de nueve (9) intentos de enviar la página de confirmación a tu sistema. Si luego de estos intentos no se recibe el código HTTP 200, PayU envía una alerta por correo electrónico. PayU reporta la página de confirmación una vez la transacción tenga un estado final, ed decir, cuando se aprueba, se rechaza o se vence. Si una transacción está en proceso (esperando pago o análisis), PayU no reporta hasta que la transacción tenga un estado final.  Variables enviadas con la página de confirmación  Variables en la página de confirmación     Campo Tipo Tamaño Descripción     merchant_id Numeric 12 Identificador de tu tienda en el sistema de PayU, puedes encontrar este número en el correo de creación de tu cuenta.   state_pol Alphanumeric 32 Indica el estado de la transacción en el sistema.\nVer los estados de la transacción en la columna respectiva.   risk Decimal (#.00) — Riesgo asociado con la transacción. Los posibles valores están entre 0 y 1.\nEntre mayor sea el valor, mayor es el riesgo.\nFormato ###.00.   response_code_pol Alfanumérico 255 Código de repuesta de PayU.\nVer los códigos de respuesta en la columna respectiva.   reference_sale Alphanumeric 255 Referencia de la venta o la orden. Debe ser única por cada transacción enviada al sistema.   reference_pol Alphanumeric 255 Referencia o número de transacción generado por PayU.   sign Alphanumeric 255 Firma digital creada por cada transacción.   extra1 Alphanumeric 255 Campo adicional para enviar información relacionada con la compra.   extra2 Alphanumeric 255 Campo adicional para enviar información relacionada con la compra.   payment_method Numérico — Identificador interno utilizado por los métodos de pago.\nVer los códigos de los métodos de pago.   payment_method_type Numérico — Método de pago utilizado.   installments_number Numérico — Número de cuotas en las cuales se difirió el pago con tarjeta crédito.   value Numérico 14,2 Valor total de la transacción. Puede contener dos dígitos decimales. Por ejemplo 10000.00 o 10000.   tax Numérico 14,2 Valor del IVA de la transacción, si no se envió IVA, el sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales. Por ejemplo 19000.00. En caso de que no tenga IVA, debe enviarse 0.   additional_value Numérico 14,2 Valor Adicional no comisionable.   transaction_date Fecha (AAAA-MM-DD HH:mm:ss) — Fecha en la que se realizó la transacción.   currency Alfanumérico 3 Moneda respectiva en la que se hace el pago.\nVer las monedas aceptadas.   email_buyer Alfanumérico 255 Campo que contiene el correo electrónico del comprador para notificar el resultado de la transacción. Se recomienda validarlo cuando se toma este valor del formulario.   cus Alfanumérico 64 El CUS (Código Único de Seguimiento) es la referencia de pago dentro del banco, aplica solo para pagos con PSE.   pse_bank Alfanumérico 255 Nombre del banco, aplica solo para pagos con PSE.   test Booleano (true, false) — Variable para identificar si la operación fue en modo pruebas.   description Alfanumérico 255 Descripción de al venta.   billing_address Alfanumérico 255 Dirección de facturación.   shipping_address Alfanumérico 50 Dirección de la mercancía.   phone Alfanumérico 20 Teléfono de residencia del comprador.   office_phone Alfanumérico 20 Teléfono diurno del comprador.   account_number_ach Alfanumérico 36 Identificador de la transacción.   account_type_ach Alfanumérico 36 Tipo de la transacción.   administrative_fee Decimal (#.00) — Valor de la tarifa administrativa.   administrative_fee_base Decimal (#.00) — Valor base de la tarifa administrativa.   administrative_fee_tax Decimal (#.00) — Valor del impuesto de la tarifa administrativa.   airline_code Alfanumérico 4 Código de la aerolínea.   attempts Numérico — Número de intentos de enviar la confirmación.   authorization_code Alfanumérico 12 Código de autorización de la venta.   bank_id Alfanumérico 255 Identificador del banco.   billing_city Alfanumérico 255 Ciudad de facturación.   billing_country Alfanumérico 2 Código ISO del país asociado a la dirección de facturación.   commision_pol Decimal (#.00) — Valor de la comisión.   commision_pol_currency Alfanumérico 3 Moneda de la comisión.   customer_number Numérico — Número personalizado.   date Fecha (AAAA-MM-DD HH:mm:ss) — Fecha de la operación.   error_code_bank Alfanumérico 255 Código de error del banco.   error_message_bank Alfanumérico 255 Mensaje de error del banco.   exchange_rate Decimal (#.00) — Valor de la tasa de cambio.   ip Alfanumérico 39 Dirección IP desde donde se realizó la transacción.   nickname_buyer Alfanumérico 150 Nombre corto del comprador.   nickname_seller Alfanumérico 150 Nombre corto del vendedor.   payment_method_id Numérico — Identificador del método de pago.\nVer los códigos de los métodos de pago.   payment_request_state Alfanumérico 32 Estado de la solicitud de pago.   pseReference1 Alfanumérico 255 Referencia no. 1 para pagos PSE.   pseReference2 Alfanumérico 255 Referencia no. 2 para pagos PSE.   pseReference3 Alfanumérico 255 Referencia no. 3 para pagos PSE.   response_message_pol Alfanumérico 255 Mensaje de respuesta de PayU.\nVer los mensajes de respuesta en la columna correspondiente.   shipping_city Alfanumérico 50 Ciudad donde se entrega la mercancía.   shipping_country Alfanumérico 2 Código ISO del país donde se entrega la mercancía.   transaction_bank_id Alfanumérico 255 Identificador de la transacción en el sistema del banco.   transaction_id Alfanumérico 36 Identificador de la transacción.   payment_method_name Alfa Numérico 255 Método de pago utilizado, por ejemplo VISA.     Ejemplo POST enviado a página de confirmación El siguiente es un ejemplo básico de las variables enviadas a la página de confirmación vía POST:\nresponse_code_pol=5 phone= additional_value=0.00 test=1 transaction_date=2015-05-27 13:07:35 cc_number=************0004 cc_holder=test_buyer error_code_bank= billing_country=CO bank_referenced_name= description=test_payu_01 administrative_fee_tax=0.00 value=100.00 administrative_fee=0.00 payment_method_type=2 office_phone= email_buyer=test@payulatam.com response_message_pol=ENTITY_DECLINED error_message_bank= shipping_city= transaction_id=f5e668f1-7ecc-4b83-a4d1-0aaa68260862 sign=e1b0939bbdc99ea84387bee9b90e4f5c tax=0.00 payment_method=10 billing_address=cll 93 payment_method_name=VISA pse_bank= state_pol=6 date=2015.05.27 01:07:35 nickname_buyer= reference_pol=7069375 currency=USD risk=1.0 shipping_address= bank_id=10 payment_request_state=R customer_number= administrative_fee_base=0.00 attempts=1 merchant_id=508029 exchange_rate=2541.15 shipping_country= installments_number=1 franchise=VISA payment_method_id=2 extra1= extra2= antifraudMerchantId= extra3= nickname_seller= ip=190.242.116.98 airline_code= billing_city=Bogota pse_reference1= reference_sale=2015-05-27 13:04:37 pse_reference3= pse_reference2= Validación de la firma La validación de la firma te permite comprobar la integridad de los datos, debes generar la firma con los datos que encuentras en la página de confirmación y compararla con la información del parámetro signature.\nPara validar la firma en la página de respuesta debes tener en cuenta:\n Si el segundo decimal es cero, el valor de new_value para generar la firma debe tener un decimal. Ejemplo (150.00 -\u0026gt; 150.0). Si el segundo decimal no es cero, el valor de new_value para generar la firma debe mantener los dos decimales. Ejemplo (150.26 -\u0026gt; 150.26). Obten los parámetros para generar la firma (merchantId, referenceCode, TX_VALUE, currency y transactionState) de la página de respuesta, no de la base de datos. Debes guardar tu ApiKey de forma segura. Crea la firma así:  \u0026#34;ApiKey~merchant_id~reference_sale~new_value~currency~state_pol\u0026#34; \nEjemplo\nCon un decimal\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parámetros obtenidos de la página de confirmación - merchant_id = 508029 - reference_sale = TestPayU04 - value = 150.00 - currency = USD - state_pol = 6 La firma se genera de la siguiente manera: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU04~150.0~USD~6) = b607a2c2fa100e0947b206d41864fb86 sign = b607a2c2fa100e0947b206d41864fb86 Con dos decimales\nYour apiKey: 4Vj8eK4rloUd272L48hsrarnUA Parámetros obtenidos de la página de confirmación: - merchant_id = 508029 - reference_sale = TestPayU05 - value = 150.26 - currency = USD - state_pol = 4 La firma se genera de la siguiente manera: MD5(4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU05~150.26~USD~4) = 1d95778a651e11a0ab93c2169a519cd6 sign = 1d95778a651e11a0ab93c2169a519cd6 Compara tu firma   Algoritmo: \u0026nbsp; MD5 SHA1 SHA256  \u0026nbsp;( ~ ~ ~ ~ USD COP MXN ARS PEN BRL CLP  ~ 4 (Aprobada) 6 (Rechazada) 5 (Expirada)  ) Result:\u0026nbsp;      Esta calculadora te permite generar la firma utilizando alguno de los métodos de cifrado disponibles.\nReintentos de pago Cuando se rechaza una transacción, el pagador tiene la opción de reintentar el pago utilizando el mismo u otro método de pago. Ten en cuenta que por cada intento, PayU hace el llamado de la página de confirmación con su estado de transacción correspondiente.\nCada uno de estos llamados se hacen con la misma referencia de pago (reference_sale), el mismo identificador de la orden (reference_pol) pero diferente identificador de transacción (transaction_id). Por lo tanto, puedes recibir varios llamados a la página de confirmación para la misma venta.\nA continuación, encontrarás un ejemplo e un intento rechazado y su reintento aprobado:\nreference_sale=2015-05-27 13:04:37 reference_pol=7069375 transaction_id=f5e668f1-7ecc-4b83-a4d1-0aaa68260862 state_pol=6 reference_sale=2015-05-27 13:04:37 reference_pol=7069375 transaction_id=01cfdce8-68d5-4a4c-aabf-d89370a0b92f state_pol=4 Observa que si uno de los llamados a la página de confirmación indica que una referencia de pago (reference_sale) fue aprobada, puedes estar seguro de que no recibirás ningún reporte a la misma referencia.\n","excerpt":"La página de confirmación te permite actualizar las bases de datos de tu sistema; por lo tanto, no …","ref":"/es/docs/integrations/webcheckout-integration/confirmation-page.html","title":"Página de confirmación"},{"body":"Para utilizar la funcionalidad de Tokenización, necesitas habilitarlo en tu cuenta de PayU. Para esto, contacta a tu representante de ventas:\n comercios.ar@payu.com comercios.br@payu.com comercios.cl@payu.com comercios.co@payu.com    comercios.mx@payu.com comercios.pa@payu.com comercios.pe@payu.com    ¿Cómo funciona la Tokenización? Tokenización incluye dos procesos separados:\nGenerar token El primer proceso te permite guardar la información de una tarjeta de crédito. Esta información es transformada en un token para que lo puedas utilizar luego.\nRealizar cobros Luego de que tengas la información de una tarjeta de crédito almacenada en un token, puedes utilizarla para realizar pagos periódicos de acuerdo con tus necesidades y tu cliente no tiene que entregarte la información de su tarjeta de crédito cada vez que requieres un pago.\nAdemás, la funcionalidad de tokenización le permite almacenar, remover o cobrar varias tarjetas de crédito enviando un archivo codificado en Base64.\n¿Qué sigue? La integración con esta funcionalidad puede realizarse con cualquiera de nuestros tipos de integración:\n Para integración API, consulta este artículo Para integración SDK, consulta este artículo  ","excerpt":"Para utilizar la funcionalidad de Tokenización, necesitas habilitarlo en tu cuenta de PayU. Para …","ref":"/es/docs/services/tokenization.html","title":"Tokenización"},{"body":"To use the tokenization feature, you need to enable it in your PayU account. To do so, contact your sales representative:\n comercios.ar@payu.com comercios.br@payu.com comercios.cl@payu.com comercios.co@payu.com    comercios.mx@payu.com comercios.pa@payu.com comercios.pe@payu.com    How does Tokenization work? Tokenization includes two separated processes:\nGenerate token The first process lets you save the information of a credit card. This information is transformed into a token to let you use it later.\nMake charges After you have the information of a credit card stored in a token, you can use it to perform charges periodically according to your need and your customer does not have to provide the information of their credit cards whenever you require a payment.\nFurthermore, the tokenization feature lets you store, remove or charge several credit carts by sending an file coded in Base64.\nWhat\u0026rsquo;s next? The integration with this feature can be performed using one of our integration types:\n For API integrations, refer to this topic For SDK integrations, refer to this topic  ","excerpt":"To use the tokenization feature, you need to enable it in your PayU account. To do so, contact your …","ref":"/en/docs/services/tokenization.html","title":"Tokenization"},{"body":"De forma similar a cualquier integración API, puedes personalizar tu checkout de acuerdo con las necesidades de tu negocio y el cliente permanece en tu página web durante la compra y el procedimiento de pago. Para integrar esta opción, debes tener una cuenta de PayU empresarial y habilidades de programación avanzadas.\nAccede a múltiples métodos de pago (varía por país) incluyendo tarjetas de crédito, transferencias bancarias y pagos en efectivo.\nConfiguraciones iniciales PayU te permite integrarte con la pasarela de pagos transaccional, las herramientas de pago disponibles y las consultas desarrollando un cliente HTTPS para enviar la información de la transacción a través de SSL. Es muy importante que los datos sensibles de la transacción como el número de la tarjeta de crédito, la fecha de expiración de la misma y demás, no sean almacenados. Recomendamos que sigas las mejores prácticas de PCI DSS (Payment Card Industry Data Security Standard).\nJava Para integrate con el API, el SDK depende de la librería de Apache HttpClient que a su vez depende de las librerías HttpCore, CommonsLoggin y CommonsCodec.\nEn general, necesitas las siguientes librerías en tu classpath:\n HttpClient-4.4.1.jar HttpCore-4.4.4.jar Commons-loggin-1.1.1.jar Commons-codec-1.6.jar Commons-lang3-3.5.jar  Descargar el SDK Java 1.3.9\nAntes de realizar cualquier operación con el SDK, necesitas asignar algunos valores a la clase PayU, los cuales aplican a todas las operaciones SDK y deben ser configurados con tu información comercial. La siguiente tabla muestra los valores que necesitas configurar.\n   Nombre del parámetro Tamaño Tipo Obligatorio Descripción     language 2 Language Sí Idioma utilizado para mensajes de error en ell sistema y correos electrónicos enviados entre el comprado y el vendedor. Actualmente se soporta en en (inglés), es (español) y pt (portugués).   isTest  boolean Sí Asigna true si es una petición de prueba, Si no, asigna false. Dependiendo del tipo de transacción u operación, el valor de este campo puede afectar el comportamiento.   apiLogin Min:12 Max:32 String Sí Tu API Login. Cómo obtengo mi API Login   apiKey Min:6 Max:32 String Sí Tu API Key. Cómo obtengo mi API Key   merchantId  String No Identificador del comercio, es utilizado para generar las firmas para verificar las transacciones de pago. Este parámetro es obligatorio a menos que envíes la firma.   paymentsUrl Min:1 String No URL de lla página a donde vas a enviar las peticiones relacionadas a pagos. Por defecto, este parámetro toma la URL de producción.   reportsUrl Min:1 String No URL de lla página a donde vas a enviar las peticiones relacionadas a reportes. Por defecto, este parámetro toma la URL de producción.    Ejemplo\nPayU.apiKey = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Ingresa tu API key aquí PayU.apiLogin = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Ingresa tu API login aquí PayU.language = Language.en; // Ingresa aquí el idioma PayU.isTest = false; // asigna true si estás en modo pruebas LoggerUtil.setLogLevel(Level.ALL); // inclúyelo solo si quieres ver a traza del log completa. Si no, puedes removerlo. PayU.paymentsUrl = \u0026#34;https://api.payulatam.com/payments-api/\u0026#34;; // inclúyelo si quieres probar en un servidor de pagos específico y asigna su URL. PayU.reportsUrl = \u0026#34;https://api.payulatam.com/reports-api/\u0026#34;; // inclúyelo si quieres probar en un servidor de reportes específico y asigna su URL. \nPara la ejecución de cada una de las operaciones provistas por el SDK de PayU, debes enviar un Mapa de parámetros al método correspondiente como argumento, este contiene toda la información de la transacción a procesar.\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap \u0026lt;String, String\u0026gt;(); parameters.put(PayU.PARAMETERS.TRANSACTION_ID, transactionId); parameters.put(PayU.PARAMETERS.ORDER_ID, orderId.toString()); \nPara facilitar su uso, se proporcionan una serie de constantes en la interfaz PayU.PARAMETERS que contienen los nombres de los parámetros utilizados en los métodos del SDK.\nNota A partir de la versión 1.2.X, es necesario agregar el certificado del API de pagos de PayU (https://api.payulatam.com/payments-api/) en la carpeta de llaves de Java. Esta carpeta se encuentra en [Java-Installation-Folder]/jdk/jre/lib/security/cacerts.  PHP Para integrarte con el API, el SDK puede ser ejecutado en máquinas con PHP versión igual o superior a 5.2.1. Además, se necesitan las siguientes extensiones PHP en tu servidor:\n curl xml mbstring json  Descargar el SDK PHP 4.5.6\nPara tener acceso al las funcionalidades de SDK, necesitas incluir la clase PayU ubicada en [PayU-php-sdk-Path]/lib/PayU.php.\n\u0026lt;?php require_once \u0026#39;[PayU-php-sdk-Path]/lib/PayU.php\u0026#39;; ... ?\u0026gt;\nAntes de realizar cualquier operación con el SDK, necesitas asignar algunos valores a la clase PayU, los cuales aplican a todas las operaciones SDK y deben ser configurados con tu información comercial. La siguiente tabla muestra los valores que necesitas configurar.\n   Nombre del parámetro Tamaño Tipo Obligatorio Descripción     PayU::$language 2 Language Sí Idioma utilizado para mensajes de error en ell sistema y correos electrónicos enviados entre el comprado y el vendedor. Actualmente se soporta en en (inglés), es (español) and pt (portugués).   PayU::$isTest  boolean Sí Asigna true si es una petición de prueba, Si no, asigna false. Dependiendo del tipo de transacción u operación, el valor de este campo puede afectar el comportamiento.   PayU::$apiLogin Min:12 Max:32 String Sí Tu API Login. Cómo obtengo mi API Login   PayU::$apiKey Min:6 Max:32 String Sí Tu API Key. Cómo obtengo mi API Key   PayU::$merchantId  String No Identificador del comercio, es utilizado para generar las firmas para verificar las transacciones de pago. Este parámetro es obligatorio a menos que envíes la firma.    Ejemplo\n\u0026lt;?php PayU::$apiKey = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Ingresa tu llave API aquí PayU::$apiLogin = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Ingresa tu API login aquí PayU::$merchantId = \u0026#34;1\u0026#34;; // Enter your Merchant Id here PayU::$language = SupportedLanguages::ES; // Ingresa aquí el idioma PayU::$isTest = false; // asigna true si estás en modo pruebas ... ?\u0026gt;\nAdemás, necesitas configurar el API para redirigir tus peticiones utilizando la clase Environment:\n\u0026lt;?php // URL de pagos Environment::setPaymentsCustomUrl(\u0026#34;https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi\u0026#34;); // URL de reportes Environment::setReportsCustomUrl(\u0026#34;https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi\u0026#34;); ... ?\u0026gt;Consideraciones  Debes tener una cuenta activa de PayU. Debes instalar un certificado SSL válido en tu servidor y tu página web debe poder hacer conexiones SSL. Debido a esto, la máquina virtual debe contar con las extensiones de seguridad apropiadas. T* emporalmente NO utilices certificados de seguridad de curva elíptica o aquellos que cuenten con la suite de cifrado TLS_ECDHE_ECDSA_WITH_RC4_128_SHA en tus peticiones de pago. Debes tener lenguajes de servidor o CGI tales como Java, C#, VB, PHP, etc. Debes estar en capacidad de almacenar de forma segura tus credenciales de autenticación (API Key y API Login). Los mensajes deben ser codificados utilizando UTF-8. Las fechas deben utilizar el formato yyyy-MM-ddTHH:mm:ss, el formato de hora es 24 horas. Ejemplo: 2015-08-22T21:35:12. En condiciones normales la conexión garantiza tiempos de respuesta de tres segundos en promedio. Si hay una situación anormal, el tiempo máximo de respuesta será de un minuto. Te recomendamos que configures los timeouts cuando te conectes a PayU. Es importante validar la longitud y los números de tarjetas de crédito por franquicia junto con los códigos de seguridad.  Funcionalidades disponibles ","excerpt":"De forma similar a cualquier integración API, puedes personalizar tu checkout de acuerdo con las …","ref":"/es/docs/integrations/sdk-integration.html","title":"Integración SDK"},{"body":"Similar to any API integration, you can customize your checkout according to your shop\u0026rsquo;s needs and the customer stays on your site during the purchase and payment process. To integrate this option you must have a PayU Business account and advanced programming skills.\nAccess multiple payment methods (varies per country), including credit cards, bank transfers, and cash payments.\nInitial settings PayU allows you to integrate with the transactional gateway, available payment tools and Queries by developing a web site in Java or PHP. It is critical that sensitive transaction data such as credit card number, expiration date, are not stored. It is recommended to follow PCI DSS’ best practices (Payment Card Industry Data Security Standard).\nJava To integrate with the API, the SDK relies on the Apache\u0026rsquo;s library HttpClient which also relies on the libraries HttpCore, CommonsLoggin and CommonsCodec.\nIn general, you need the following libraries in your classpath:\n HttpClient-4.4.1.jar HttpCore-4.4.4.jar Commons-loggin-1.1.1.jar Commons-codec-1.6.jar Commons-lang3-3.5.jar  Download SDK Java 1.3.9\nBefore performing any operation with the SDK, you need to assign some values to the PayU class, which apply to all the SDK operations and must be configured with your commerce data. The following table shows the values you need to configure.\n   Parameter name Size Type Mandatory Description     language 2 Language Yes The language used for error messages in the system and in emails that are sent to the buyer and seller. It is currently supported in en (English), es (Spanish) and pt (Portuguese).   isTest  boolean Yes Assign true if it\u0026rsquo;s a test request. Otherwise, assign false. Depending on the type of transaction or operation, the behavior may vary depending on the value of this field.   apiLogin Min:12 Max:32 String Yes Your API Login. How do I get my API Login   apiKey Min:6 Max:32 String Yes Your API Key. How do I get my API Key   merchantId  String No The merchant identifier, it\u0026rsquo;s used to generate the signatures to verify payment transactions. This parameter is mandatory when you want to check the transaction, unless you send the signature.   paymentsUrl Min:1 String No The URL of the page to where you will send the requests related to payments. By default, this parameter takes the production URL.   reportsUrl Min:1 String No The URL of the page to where you will send the requests related to the reports. By default, this parameter takes the production URL.    Example\nPayU.apiKey = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API key here PayU.apiLogin = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API Login here PayU.language = Language.en; // Enter the language here PayU.isTest = false; // assign true if you are in test mode LoggerUtil.setLogLevel(Level.ALL); // Include it only if you want to see the full log trace. Otherwise, you can remove it. PayU.paymentsUrl = \u0026#34;https://api.payulatam.com/payments-api/\u0026#34;; // Include it if you want to test in a specific payment server and assign its URL. PayU.reportsUrl = \u0026#34;https://api.payulatam.com/reports-api/\u0026#34;; // Include it if you want to test in a specific report server and assign its URL. \nTo execute the operations provided by the PayU\u0026rsquo;s SDK, you must send to the method a parameter map as an argument, this map has all the required information to process a transaction. Example:\nMap\u0026lt;String, String\u0026gt; parameters = new HashMap \u0026lt;String, String\u0026gt;(); parameters.put(PayU.PARAMETERS.TRANSACTION_ID, transactionId); parameters.put(PayU.PARAMETERS.ORDER_ID, orderId.toString()); \nTo ease the usage, you find a set of constants in the interface PayU.PARAMETERS, which contains the names of the parameters used in the SDK methods.\nNote From version 1.2.X, it is needed to add the certificate of the Payu\u0026rsquo;s Payments API(https://api.payulatam.com/payments-api/) in the Java key folder. This folder is located in path [Java-Installation-Folder]/jdk/jre/lib/security/cacerts.  PHP To integrate with the API, the SDK can be executed in machines with PHP version greater than or equals to 5.2.1. Furthermore, the following PHP extensions are required in your server:\n curl xml mbstring json  Download SDK PHP 4.5.6\nTo have access to the SDK features, you need to include the PayU class located in [PayU-php-sdk-Path]/lib/PayU.php.\n\u0026lt;?php require_once \u0026#39;[PayU-php-sdk-Path]/lib/PayU.php\u0026#39;; ... ?\u0026gt;\nBefore performing any operation with the SDK, you need to assign some values to the PayU class, which apply to all the SDK operations and must be configured with your commerce data. The following table shows the values you need to configure.\n   Parameter name Size Type Mandatory Description     PayU::$language 2 Language Yes The language used for error messages in the system and in emails that are sent to the buyer and seller. It is currently supported in en (English), es (Spanish) and pt (Portuguese).   PayU::$isTest  boolean Yes Assign true if it\u0026rsquo;s a test request. Otherwise, assign false. Depending on the type of transaction or operation, the behavior may vary depending on the value of this field.   PayU::$apiLogin Min:12 Max:32 String Yes Your API Login. How do I get my API Login   PayU::$apiKey Min:6 Max:32 String Yes Your API Key. How do I get my API Key   PayU::$merchantId  String No The merchant identifier, it\u0026rsquo;s used to generate the signatures to verify payment transactions. This parameter is mandatory when you want to check the transaction, unless you send the signature.    Example\n\u0026lt;?php PayU::$apiKey = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API key here PayU::$apiLogin = \u0026#34;xxxxxxxxxxxx\u0026#34;; // Enter your API Login here PayU::$merchantId = \u0026#34;1\u0026#34;; // Enter your Merchant Id here PayU::$language = SupportedLanguages::ES; // Enter the language here PayU::$isTest = false; // assign true if you are in test mode ... ?\u0026gt;\nFurthermore, you need to configure the API to redirect the requests using the Environment class:\n\u0026lt;?php // Payments URL Environment::setPaymentsCustomUrl(\u0026#34;https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi\u0026#34;); // Reports URL Environment::setReportsCustomUrl(\u0026#34;https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi\u0026#34;); ... ?\u0026gt;Considerations  You must have an active PayU account. You must install a valid SSL certificate in your server and your site must be able to make SSL connections. Due to this, the virtual machine must have appropriate security extensions. Temporarily, do not use security certificates elliptic curve or those who have the suite of encryption TLS_ECDHE_ECDSA_WITH_RC4_128_SHA in your payment requests. You must have CGI or server languages such as Java, C#, VB, PHP, etc. You must be able to store your authentication credentials (API Key and API Login) safely. The encoding for messages must be UTF-8. The dates must have format yyyy-MM-ddTHH:mm:ss, the time format is 24 hours. Example: 2015-08-22T21:35:12. Normally the connection guarantees response times of three seconds on average. If there is an unusual situation, the maximum response time is one minute. It is highly recommended that you set timeouts when you connect with PayU. It is important to validate the length and numbers of credit cards by franchise, together with the security codes.  Available features ","excerpt":"Similar to any API integration, you can customize your checkout according to your shop\u0026rsquo;s needs …","ref":"/en/docs/integrations/sdk-integration.html","title":"SDK Integration"},{"body":"Para transacciones en Colombia pagadas con tarjetas de crédito, las entidades financieras intermediarias realizan retenciones de Retención de renta, Retención de ICA y Retención de IVA. De acuerdo con esto, PayU entrega a los comercios un certificado con el total de las retenciones aplicadas durante un período mensual.\nNota Para tener acceso a este módulo, necesitas un perfil con el permiso Certificado de retenciones \u0026gt; Consultar retenciones activado.\nConsulta Perfiles y Permisos para más información.\n Generar el Certificado de Retenciones  Ingresa a tu cuenta PayU. En el menú de la izquierda, expande el menú Transacciones y selecciona Certificado de Retenciones.  Se abre el Certificado de Retenciones, selecciona la retención que deseas incluir en el certificado y el período gravable.  Haz clic en Descargar. El reporte se descarga automáticamente a tu equipo en formato PDF.\nEl siguiente es un ejemplo de este certificado.  ","excerpt":"Para transacciones en Colombia pagadas con tarjetas de crédito, las entidades financieras …","ref":"/es/payu-module-documentation/reports/withholding-certificate.html","title":"Certificado de Retenciones"},{"body":"For transactions in Colombia paid with credit cards, the intermediary financial entities make retentions of Rent Withholding, ICA Withholding, and IVA Withholding. According to this, PayU delivers for merchants, a certificate with the total of the withholdings applied during a monthly period.\nNote To have access to this module, you need to have a profile with the permission Colombian certificates \u0026gt; View withhodlings enabled.\nRefer to Profiles and Permissions for more information.\n Generate Withholding Certificate  Log into your PayU account. In the left menu, expand the Transactions menu and select Withholding certificate.  The Withholding Certificate opens, select the withholding you want to include in the certificate and the taxable period.  Click Download. The report is automatically downloaded to your computer in PDF format.\nThe following is an example of this certificate.  ","excerpt":"For transactions in Colombia paid with credit cards, the intermediary financial entities make …","ref":"/en/payu-module-documentation/reports/withholding-certificate.html","title":"Withholding Certificate"},{"body":"Nota Para conocer los términos introductorios sobre una disputa, consulte este artículo.  Permisos requeridos Para tener acceso a este módulo, necesitas un perfil con los siguientes permisos activos:\n Reportes \u0026gt; Reembolsos y disputas Reportes \u0026gt; Resolver disputas con compradores (gestionar contracargos)  Consulta Perfiles y Permisos para más información.\n¿Por qué es importante responder a una disputa?  El comercio puede generar desconfianza ante el cliente. Si no resuelves las disputas, PayU toma el monto de tu cuenta. El fondo de reserva podría ser mayor por zona de riesgo. Daña la puntuación del código PayU de cara a las redes de pago. La cantidad en disputa se congelará hasta que se resuelva la disputa.  Es importante responder siempre a una disputa presentando evidencias antes de la fecha máxima estipulada por el banco]. Luego de la fecha máxima, no puedes cargar evidencias de una disputa y el monto podría ser debitado de tu cuenta.\nPara obtener más información sobre los plazos definidos, consulta días máximos para presentar evidencias.\n¿Cómo resolver disputas? Una disputa comienza cuando un comprador no conoce un cargo realizado en su tarjeta de crédito. Una vez que se notifica al banco, comienza el proceso formal para determinar la validez de la compra.\nConsejo Si cuentas con los datos del tarjetahabiente, la mejor forma para gestionar un proceso de disputa es contactándolo. Si el motivo de la disputa es simplemente desconocimiento (el cliente no recuerda la compra o tu comercio), puedes pedirle que hable con su banco para que retire la solicitud y se resuelva el proceso de disputa a tu favor.    Cuando el banco nos notifica que se ha iniciado un proceso de disputa, se te notifica sobre este procceso. Para configurar el correo electrónico o la URL para recibir notificaciones de disputas, consulta Configuración técnica.\n  Ingresa a tu cuenta PayU. En el menú de la izquierda, expende el menú Transacciones y selecciona Disputas.\n  Se abre el módulo de Disputas, desplazate hacia abajo y ubica lla disputa que tines abierta. Si lo necesitas, puedes utilizar los filtros disponibles para encontrar una disputa en particular.  Aparecen los detalles de la orden a la derecha de la pantalla. Haz clic en Resolver disputa al final del panel.  En la ventana emergente, puedes encontrar los detalles sobre la razón por la que tu cliente solicitó el proceso de disputas y la fecha límite para presentar evidencias para resolverla. Haz clic en el enlace Adjuntar archivo para cargar la evidencia que tengas.  Nota Si aceptas que la disputa no es un error, puedes iniciar un procesos de Reembolso haciendo clic en Devolver dinero.  Sube los archivos de evidencia para resolver la disputa y haz clic en Guardar evidencia. Es obligatorio guardar la evidencia antes de enviarla a revisión.\nLos archivos cargados aquí no pueden ser superiores a 10MB y deben ser archivos PDF.  Cuando termines, haz clic en Enviar a revisión.\nAparece una ventana de confirmación informando que se ha enviado la evidencia.  En este punto, enviamos los documentos al banco emisor o a la red que procesó la transacción, quienes supervisan la resolución del caso.\nEl resultado de a disputa puede ser ganada (sin contracargos), perdida (contracargo) o reembolso. En el caso de reembolso, la tienda lo realiza y el banco no crea el contracargo. Consulta los estados de las disputas para saber todos sus posibles estados.  Nota Si tienes activada la Garantía Antifraude, cuando el contracargo es sujeto a ser cubierto por la garantía PayU asume los valores debitados de tu cuenta. En este caso, el estado de la disputa es Contracargo (perdida) Con garantía antifraude.  Cuando la entidad financiera comunica el resultado de la disputa, el caso se actualiza automáticamente en el Módulo PayU.\n","excerpt":"Nota Para conocer los términos introductorios sobre una disputa, consulte este artículo.  Permisos …","ref":"/es/payu-module-documentation/payu-operations/disputes-mp.html","title":"Disputas"},{"body":"Note For introductory terms about a dispute refer to this article.  Permission required To have access to this module, you need to have a profile with the following permission enabled:\n Reports \u0026gt; Refunds and disputes Reports \u0026gt; Resolve disputes with buyers (manage chargebacks)  Refer to Profiles and Permissions for more information.\nWhy is it important to reply to a Dispute?  The Merchant can generate mistrust with the client. If you don\u0026rsquo;t address the disputes, PayU takes the amount from your account. The reservation fund could be higher by the risk area. It damages the score of the PayU code facing the payment networks. The disputed amount will be frozen until the dispute is solved.  It is important to reply to a dispute by providing evidence before the deadline stipulated by the bank. After the deadline, it is not possible to upload the corresponding evidence for a dispute and the amount may be debited from your account.\nFor more information about the deadlines defined, refer to maximum days to provide evidence.\nHow to resolve disputes? A dispute begins when a buyer does not know a charge made to their credit card. Once the bank is notified, the formal process begins to determine the validity of the purchase.\nTip If you have the cardholder’s data, the best way to manage a dispute process is to contact them. If the reason for the dispute is just ignorance (the customer didn\u0026rsquo;t recall the purchase or your commerce), you can ask them to call their bank to withdraw the complaint and so the dispute process is resolved in your favor.    When we are notified by the bank that a dispute process has been launched, you are notified about that process. To configure the e-mail or the URL to receive dispute notifications, refer to Technical configurations.\n  Log into your PayU account. In the left menu, expand the Transactions menu and select Disputes.\n  The Disputes module opens, scroll down the page and locate the dispute you have opened. You can use the available filters to find your dispute if it is required.  The order details appear at the right of the screen. Click Resolve dispute at the end of the panel.  In the pop up window, you can find the details about why your customer request the dispute process and the dead line to provide evidence to resolve the dispute. Click the Attach file link to upload all the evidence you have.  Note If you accept that the dispute is not a mistake, you can start a Refund process by clicking Or refund this value.  Upload the evidence files to resolve the dispute and click Save evidence. It is mandatory to save the evidence first before send it to review. The files uploaded here should not be larger than 10MB and must be PDF files.  When finish, click Send for review.\nA confirmation window appears informing that the evidence has been send.  At this point, we send the documents to the issuing bank or the network that processed the transaction, from whom the resolution of the case depends.\nThe dispute case may result in won (no chargeback), Lost (chargeback) or refunded. In the case of refunds, the trade is who makes the return to the buyer and the bank does not generate the chargeback. Refer to dispute states to know all the states of a dispute.  Note If you have activated Anti-fraud Guarantee, when the chargeback is subject to be covered by the guarantee, PayU assumes the values debited from your account. In this case, the status of this dispute is Chargeback (Lost) With antifraud guarantee.  When the financial entity communicates the result of the dispute, the case is automatically updated in the PayU Module.\n","excerpt":"Note For introductory terms about a dispute refer to this article.  Permission required To have …","ref":"/en/payu-module-documentation/payu-operations/disputes-mp.html","title":"Disputes"},{"body":"","excerpt":"","ref":"/es/payu-module-documentation/payu-operations.html","title":"Operaciones de PayU"},{"body":"","excerpt":"","ref":"/en/payu-module-documentation/payu-operations.html","title":"PayU Operations"},{"body":"La funcionalidad de Tokenización está disponible bajo acuerdos comerciales personalizados. Para más información, contacta a tu representante de ventas.\nPara integrate con el API de Tokenización, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Métodos disponibles El API de Tokenización incluye métodos para registrar, eliminar y consultar tokens.\n Registro individual de tarjeta de crédito Registro masivo de tarjetas de crédito Eliminación individual de tarjeta de crédito Eliminación masiva de tarjetas de crédito Consulta de tókenes  Registro individual de tarjeta de crédito Utilizando esta funcionalidad, puedes registrar la información de la tarjeta de crédito de un cliente y obtener un token.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna CREATE_TOKEN. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   creditCardToken   Información de la tarjeta de crédito que será tokenizada. Sí   creditCardToken \u0026gt; payerId Alfanumérico  Identificador interno del tarjetahabiente. Sí   creditCardToken \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito. Sí   creditCardToken \u0026gt; identificationNumber Alfanumérico Max:20 Número de identificación del tarjetahabiente. Sí   creditCardToken \u0026gt; paymentMethod Alfanumérico 32 Selecciona un método de pago de Tarjeta de crédito valido. Ver los métodos de pago disponibles. Sí   creditCardToken \u0026gt; number Alfanumérico Min:13 Max:20 Número de la tarjeta de crédito. Sí   creditCardToken \u0026gt; expirationDate Alfanumérico 7 Fecha de expiración de la tarjeta de crédito. Formato YYYY/MM. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   creditCardToken   Información de la tarjeta de crédito tokenizada.   creditCardToken \u0026gt; creditCardTokenId Alfanumérico  Token generado con la información de la tarjeta de crédito.   creditCardToken \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente como se envió en la petición.   creditCardToken \u0026gt; payerId Alfanumérico  Identificador interno de tarjetahabiente como se envió en la petición.   creditCardToken \u0026gt; identificationNumber Alfanumérico Max:20 Número de identificación del tarjetahabiente como se envió en la petición.   creditCardToken \u0026gt; paymentMethod Alfanumérico 32 Franquicia de la tarjeta de crédito tokenizada como se envió en la petición.   creditCardToken \u0026gt; maskedNumber Alfanumérico Min:13 Max:20 Número enmascarado de la tarjeta de crédito. La máscara utilizada muestra los primeros seis dígitos y los últimos cuatro de la tarjeta de crédito.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;CREATE_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2025/01\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;05440005-9111-4d34-aa86-deeb91983d54\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: null, \u0026#34;maskedNumber\u0026#34;: \u0026#34;403799******1984\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;CREATE_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;number\u0026gt;4916332769997505\u0026lt;/number\u0026gt; \u0026lt;expirationDate\u0026gt;2024/01\u0026lt;/expirationDate\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCardTokenResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;maskedNumber\u0026gt;491633******7505\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenResponse\u0026gt;    Registro masivo de tarjetas de crédito Utilizando esta funcionalidad, puedes registrar la información de varias tarjetas de crédito almacenadas en un archivo .csv fy obtener un token por cada una.\nConsideraciones  Cada registro del archivo debe tener la siguiente estructura y orden separados por comas:  Identificador del pagador Full name Número de la tarjeta de crédito Fecha de expiración Franquicia Número de identificación   El archivo no debe tener encabezado. El archivo debe estar codificado utilizando UTF-8. Necesitas implementar una funcionalidad para codificar e contenido y enviar la cadena codificada en el parámetro contentFille. El archivo no puede tener más de 10.000 registros.\n  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna CREATE_BATCH_TOKENS. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   contentFile Alfanumérico  Cadena de caracteres codificada en Base 64 con la información de las tarjetas de crédito como se explicó anteriormente. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   id   Identificador del procedimiento.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;CREATE_BATCH_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;MDAxLE1hcnkgS2VsbGVyLDQwMjQwMDcxMzU0MTI2ODAsMjAyNC8wMSxWSVNBLDEyMzQ1NgowMDIsTWFyayBCcm93biw1MTA0ODQyNTA1ODE2MTcwLDIwMjMvMDUsTUFTVEVSQ0FSRCw3ODkwMTI=\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026#34; }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;CREATE_BATCH_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;MDAxLE1hcnkgS2VsbGVyLDQwMjQwMDcxMzU0MTI2ODAsMjAyNC8wMSxWSVNBLDEyMzQ1NgowMDIsTWFyayBCcm93biw1MTA0ODQyNTA1ODE2MTcwLDIwMjMvMDUsTUFTVEVSQ0FSRCw3ODkwMTI=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    Eliminación individual de tarjeta de crédito Utilizando esta funcionalidad, puedes eliminar un token previamente registrado.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna REMOVE_TOKEN. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   removeCreditCardToken   Información del token que se va a eliminar. Sí   removeCreditCardToken \u0026gt; payerId Alfanumérico  Identificador interno del tarjetahabiente. Sí   removeCreditCardToken \u0026gt; creditCardTokenId Alfanumérico  Token de la tarjeta de crédito a eliminar. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   creditCardToken   Information of the Token removed.   creditCardToken \u0026gt; creditCardTokenId Alfanumérico  Token de la tarjeta de crédito como se envió en la petición.   creditCardToken \u0026gt; name Alfanumérico Min:1 Max:255 Nombre del tarjetahabiente mostrado en la tarjeta de crédito.   creditCardToken \u0026gt; payerId Alfanumérico  Identificador interno del tarjetahabiente.   creditCardToken \u0026gt; identificationNumber Alfanumérico Max:20 Número de identificación del tarjetahabiente.   creditCardToken \u0026gt; paymentMethod Alfanumérico 32 Franquicia de la tarjeta de crédito tokenizada.   creditCardToken \u0026gt; maskedNumber Alfanumérico Min:13 Max:20 Número enmascarado de la tarjeta de crédito. La máscara utilizada muestra los primeros seis dígitos y los últimos cuatro de la tarjeta de crédito.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;REMOVE_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;removeCreditCardToken\u0026#34;: { \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: null, \u0026#34;maskedNumber\u0026#34;: \u0026#34;491633******7505\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;REMOVE_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;removeCreditCardToken\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt;4 \u0026lt;/removeCreditCardToken\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCardTokenResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;maskedNumber\u0026gt;491633******7505\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenResponse\u0026gt;    Eliminación masiva de tarjetas de crédito Using this feature, you can remove the tokens stored in a .csv file.\nConsideraciones  Cada registro del archivo debe tener la siguiente estructura y orden separados por comas:  Identificador del pagador Token.   El archivo no debe tener encabezado. El archivo debe estar codificado utilizando UTF-8. Necesitas implementar una funcionalidad para codificar e contenido y enviar la cadena codificada en el parámetro contentFille. El archivo no puede tener más de 10.000 registros.\n  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna REMOVE_BATCH_TOKENS. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   contentFile Alfanumérico  Cadena de caracteres codificada en Base 64 con la información de los tókenes que se van a eliminar. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   id   Identificador del procedimiento.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;REMOVE_BATCH_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;UGF5ZXJJZDEsYWQ4NGQ2NzEtYjZiOC00YjEyLWFkNTktZmYxZDJhNjQ0M2NhDQpQYXllcklkMiw0ZGYxNjMwYy03MDkyLTRhNjgtODE3MC0yYzI2YzZjOTUyMDg=\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;2562625d-9e4c-450a-b979-031feb033952\u0026#34; }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;REMOVE_BATCH_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;UGF5ZXJJZDEsYWQ4NGQ2NzEtYjZiOC00YjEyLWFkNTktZmYxZDJhNjQ0M2NhDQpQYXllcklkMiw0ZGYxNjMwYy03MDkyLTRhNjgtODE3MC0yYzI2YzZjOTUyMDg=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;2562625d-9e4c-450a-b979-031feb033952\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    Consulta de tókenes Utilizando esta funcionalidad, puedes obtener la información de las tarjetas de crédito tokenizadas, puedes consultar por número de token o por rango de fechas.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna GET_TOKENS. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   creditCardTokenInformation   Parámetros de la consulta. Sí   creditCardTokenInformation \u0026gt; creditCardTokenId Alfanumérico  Token de la tarjeta a consultar. Este parámetro es obligatorio cuando quieres consultar por ID del Token. No   creditCardTokenInformation \u0026gt; startDate Alfanumérico 23 Fecha inicial de la consultar cuando la quieres realizar por rango de fechas. Este parámetro es obligatorio cuando quieres consultar por rango de fechas.\nFormato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11. No   creditCardTokenInformation \u0026gt; endDate Alfanumérico 23 Fecha final de la consultar cuando la quieres realizar por rango de fechas. Este parámetro es obligatorio cuando quieres consultar por rango de fechas.\nFormato YYYY-MM-DDTHH:MM:SS, por ejemplo 2021-06-12T16:07:11. No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   creditCardTokenList   Information of the Tokenized credit cards.   creditCardTokenList \u0026gt; creditCardTokenId Alfanumérico  Token generated through the information of the credit card.   creditCardTokenList \u0026gt; name Alfanumérico Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card como se envió en la petición.   creditCardTokenList \u0026gt; payerId Alfanumérico  Identificador interno del tarjetahabiente como se envió en la petición.   creditCardTokenList \u0026gt; identificationNumber Alfanumérico Max:20 Número de identificación del tarjetahabiente como se envió en la petición.   creditCardTokenList \u0026gt; paymentMethod Alfanumérico 32 Franquicia de la tarjeta de crédito tokenizada como se envió en la petición.   creditCardTokenList \u0026gt; creationDate Alfanumérico 19 Fecha en la que se tokenizó la tarjeta de crédito.   creditCardTokenList \u0026gt; maskedNumber Alfanumérico Min:13 Max:20 Número enmascarado de la tarjeta de crédito. La máscara utilizada muestra los primeros seis dígitos y los últimos cuatro de la tarjeta de crédito.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método. El siguiente ejemplo consulta las tarjetas tokenizadas por rango de fechas, si deseas consultar por el identificador el token, envía el parámetro creditCardTokenInformation.creditCardTokenId.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;creditCardTokenInformation\u0026#34;: { \u0026#34;startDate\u0026#34;: \u0026#34;2021-06-23T12:00:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2021-06-25T12:00:00\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardTokenList\u0026#34;: [ { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;1adc6940-ee7e-48c2-bb96-7d784de74964\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;20263841\u0026#34;, \u0026#34;identificationNumber\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-23T13:36:36\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;377813*****0001\u0026#34;, \u0026#34;errorDescription\u0026#34;: null }, { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;3e5f0d77-0f93-421f-9432-99b6430e845e\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;158301\u0026#34;, \u0026#34;identificationNumber\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-23T19:03:41\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;errorDescription\u0026#34;: null }, { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;ead0a090-18dc-41ad-9431-ab342af854a2\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;LadyM\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;0sS01\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;1234567890\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-24T11:48:21\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;377813*****0001\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } ] }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;creditCardTokenInformation\u0026gt; \u0026lt;startDate\u0026gt;2021-06-23T12:00:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2021-06-25T12:00:00\u0026lt;/endDate\u0026gt; \u0026lt;/creditCardTokenInformation\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCardTokenListResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardTokenList\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;1adc6940-ee7e-48c2-bb96-7d784de74964\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;20263841\u0026lt;/payerId\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-23T13:36:36\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;377813*****0001\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;3e5f0d77-0f93-421f-9432-99b6430e845e\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;Juan Perez\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;158301\u0026lt;/payerId\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-23T19:03:41\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;424242******4242\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;ead0a090-18dc-41ad-9431-ab342af854a2\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;LadyM\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;0sS01\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;1234567890\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-24T11:48:21\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;377813*****0001\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenList\u0026gt; \u0026lt;/creditCardTokenListResponse\u0026gt;    Pagos utilizando tokenización Para pagos con tókenes de tarjeta de crédito, incluye el parámetro transaction.creditCardTokenId reemplazando la información de la tarjeta de crédito. El siguiente ejemplo muestra el cuerpo de la petición a alto nivel de un flujo de un paso, no se muestran los detalles de la petición.\nNota Para procesar sin CVV es necesario enviar el parámetro creditCard.processWithoutCvv2 como true en la petición del pago y quitar el parámetro creditCard.securityCode.\nPor defecto, el procesamiento de tarjetas de crédito sin código de seguridad no está activo. Si lo quieres activar, contacta a tu representante de ventas.   JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Información de la orden\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Información del pagador\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;creditCard\u0026#34;: { \u0026#34;securityCode\u0026#34;: \u0026#34;123\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parámetros de la petición\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Franquicia de la tarjeta\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;País de procesamiento\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Información de la orden --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- Información del pagador --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parámetros de la petición --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Franquicia de la tarjeta}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{País de procesamiento}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    Para detalles específicos sobre cómo realizar pagos, consulta el artículo correspondiente al país de procesamiento.\nArgentina\nBrasil\nChile\nColombia    México\nPanamá\nPerú    Múltiples pagos con Tokenización Utilizando esta funcionalidad, puedes realizar pagos utilizando varios tókenes almacenados en un archivo .csv.\nConsideraciones  Cada registro del archivo debe tener la siguiente estructura y orden separados por comas:  Account Id, identificador de tu cuenta PayU. Token de la tarjeta de crédito Código de seguridad de la tarjeta de crédito Número de cuotas Referencia de la venta Descripción de la venta Correo electrónico del comprador Código ISO de la moneda. Ver monedas aceptadas Valor total incluyendo los impuestos Valor base del reembolso Valor adicional Idioma utilizado en los correos enviados al comprador y al vendedor. Ver idiomas soportados   El archivo no debe tener encabezado. El archivo debe estar codificado utilizando UTF-8. Necesitas implementar una funcionalidad para codificar e contenido y enviar la cadena codificada en el parámetro contentFille. El archivo no puede tener más de 10.000 registros.\n  Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna PROCESS_BATCH_TRANSACTIONS_TOKEN. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   contentFile Alfanumérico  Cadena de caracteres codificada en Base 64 con la información de las tarjetas de crédito como se explicó anteriormente. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   id   Identificador del procedimiento.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PROCESS_BATCH_TRANSACTIONS_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;NTAwNTM4LGVhMDIwZTU5LWQ5NWEtNDk1ZC04OTAzLTM0ZTg0M2ZkN2ZlYywxMzIsMSxTYWxlLTA0LFN1YnNjcmlwdGlvbiBmZWUsdXNlcjFAbWFpbC5jb20sQ09QLDEwMDAwLDAsMCwwLGVzCjUwMDUzOCxlYWQwYTA5MC0xOGRjLTQxYWQtOTQzMS1hYjM0MmFmODU0YTIsMTM1LDEsU2FsZS0wNSxTdWJzY3JpcHRpb24gZmVlLHVzZXIyQG1haWwuY29tLENPUCwxMTAwMCwwLDAsMCxlcw==\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;51c72d88-f707-45ca-ad59-4508140833a7\u0026#34; }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PROCESS_BATCH_TRANSACTIONS_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;51c72d88-f707-45ca-ad59-4508140833a7\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;NTAwNTM4LGVhMDIwZTU5LWQ5NWEtNDk1ZC04OTAzLTM0ZTg0M2ZkN2ZlYywxMzIsMSxTYWxlLTA0LFN1YnNjcmlwdGlvbiBmZWUsdXNlcjFAbWFpbC5jb20sQ09QLDEwMDAwLDAsMCwwLGVzCjUwMDUzOCxlYWQwYTA5MC0xOGRjLTQxYWQtOTQzMS1hYjM0MmFmODU0YTIsMTM1LDEsU2FsZS0wNSxTdWJzY3JpcHRpb24gZmVlLHVzZXIyQG1haWwuY29tLENPUCwxMTAwMCwwLDAsMCxlcw=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    ","excerpt":"La funcionalidad de Tokenización está disponible bajo acuerdos comerciales personalizados. Para más …","ref":"/es/docs/integrations/api-integration/tokenization-api.html","title":"API de Tokenización"},{"body":"Tokenization feature is available under customized commercial agreements. For more information, contact your sales representative.\nTo integrate with Tokenization API, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   Available methods Tokenization API includes methods to register and remove tokens, and methods to query tokens.\n Individual credit card registration Massive credit card registration Individual token removal Massive token removal Query tokens  Individual credit card registration Using this feature, you can register the information of a customer\u0026rsquo;s credit card and get a token.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set CREATE_TOKEN. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   creditCardToken   Information of the credit card to be tokenized. Yes   creditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder. Yes   creditCardToken \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card. Yes   creditCardToken \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder. Yes   creditCardToken \u0026gt; paymentMethod Alphanumeric 32 Select a valid Credit card Payment Method. See the available Payment Methods. Yes   creditCardToken \u0026gt; number Alphanumeric Min:13 Max:20 Credit card number. Yes   creditCardToken \u0026gt; expirationDate Alphanumeric 7 Credit card expiration date. Format YYYY/MM. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   creditCardToken   Information of the Tokenized credit card.   creditCardToken \u0026gt; creditCardTokenId Alphanumeric  Token generated through the information of the credit card.   creditCardToken \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card as sent in the request.   creditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder as sent in the request.   creditCardToken \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder as sent in the request.   creditCardToken \u0026gt; paymentMethod Alphanumeric 32 Franchise of the tokenized credit card as sent in the request.   creditCardToken \u0026gt; maskedNumber Alphanumeric Min:13 Max:20 Masked credit card number. The masked used displays the first six digits and the last four digits of the credit card.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;CREATE_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: \u0026#34;4037997623271984\u0026#34;, \u0026#34;expirationDate\u0026#34;: \u0026#34;2025/01\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;05440005-9111-4d34-aa86-deeb91983d54\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: null, \u0026#34;maskedNumber\u0026#34;: \u0026#34;403799******1984\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;CREATE_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;number\u0026gt;4916332769997505\u0026lt;/number\u0026gt; \u0026lt;expirationDate\u0026gt;2024/01\u0026lt;/expirationDate\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;maskedNumber\u0026gt;491633******7505\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenResponse\u0026gt;    Massive credit card registration Using this feature, you can register the information of several credit cards stored in a .csv file and get a token per each card.\nConsiderations  Each record of the file must have the following structure and order separated by commas:  Payer ID Full name Credit card number Expiration date Franchise Identification number   The file must not have header. The file must be codifies using UTF-8. You need to implement a functionality to codify the content and send the codified string in the contentFile parameter. The file cannot have more than 10.000 records.\n  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set CREATE_BATCH_TOKENS. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   contentFile Alphanumeric  Codified string in Base64 with the information of the credit cards as explained before. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   id   Identification of the procedure.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;CREATE_BATCH_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;MDAxLE1hcnkgS2VsbGVyLDQwMjQwMDcxMzU0MTI2ODAsMjAyNC8wMSxWSVNBLDEyMzQ1NgowMDIsTWFyayBCcm93biw1MTA0ODQyNTA1ODE2MTcwLDIwMjMvMDUsTUFTVEVSQ0FSRCw3ODkwMTI=\u0026#34; } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026#34; }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;CREATE_BATCH_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;MDAxLE1hcnkgS2VsbGVyLDQwMjQwMDcxMzU0MTI2ODAsMjAyNC8wMSxWSVNBLDEyMzQ1NgowMDIsTWFyayBCcm93biw1MTA0ODQyNTA1ODE2MTcwLDIwMjMvMDUsTUFTVEVSQ0FSRCw3ODkwMTI=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    Individual token removal Using this feature, you can remove the token previously registered.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set REMOVE_TOKEN. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   removeCreditCardToken   Information of token to be removed. Yes   removeCreditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder. Yes   removeCreditCardToken \u0026gt; creditCardTokenId Alphanumeric  Token of the credit card to be removed. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   creditCardToken   Information of the Token removed.   creditCardToken \u0026gt; creditCardTokenId Alphanumeric  Token of the credit card as sent in the request.   creditCardToken \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card.   creditCardToken \u0026gt; payerId Alphanumeric  Internal id of the credit card holder.   creditCardToken \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder.   creditCardToken \u0026gt; paymentMethod Alphanumeric 32 Franchise of the tokenized credit card.   creditCardToken \u0026gt; maskedNumber Alphanumeric Min:13 Max:20 Masked credit card number. The masked used displays the first six digits and the last four digits of the credit card.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;REMOVE_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;removeCreditCardToken\u0026#34;: { \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardToken\u0026#34;: { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;32144457\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: null, \u0026#34;maskedNumber\u0026#34;: \u0026#34;491633******7505\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;REMOVE_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;removeCreditCardToken\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt;4 \u0026lt;/removeCreditCardToken\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;10\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;32144457\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;maskedNumber\u0026gt;491633******7505\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenResponse\u0026gt;    Massive token removal Using this feature, you can remove the tokens stored in a .csv file.\nConsiderations  Each record of the file must have the following structure and order separated by commas:  Payer ID Token.   The file must not have header. The file must be codifies using UTF-8. You need to implement a functionality to codify the content and send the codified string in the contentFile parameter. The file cannot have more than 10.000 records.\n  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set REMOVE_BATCH_TOKENS. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   contentFile Alphanumeric  Codified string in Base64 with the information of the tokens to be removed. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   id   Identification of the procedure.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;REMOVE_BATCH_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;UGF5ZXJJZDEsYWQ4NGQ2NzEtYjZiOC00YjEyLWFkNTktZmYxZDJhNjQ0M2NhDQpQYXllcklkMiw0ZGYxNjMwYy03MDkyLTRhNjgtODE3MC0yYzI2YzZjOTUyMDg=\u0026#34; } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;2562625d-9e4c-450a-b979-031feb033952\u0026#34; }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;REMOVE_BATCH_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;UGF5ZXJJZDEsYWQ4NGQ2NzEtYjZiOC00YjEyLWFkNTktZmYxZDJhNjQ0M2NhDQpQYXllcklkMiw0ZGYxNjMwYy03MDkyLTRhNjgtODE3MC0yYzI2YzZjOTUyMDg=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;2562625d-9e4c-450a-b979-031feb033952\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    Query tokens Using this feature, you can get the information of tokenized credit cards, you can perform the query by the token number or by a date range.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set GET_TOKENS. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   creditCardTokenInformation   Parameters of the query. Yes   creditCardTokenInformation \u0026gt; creditCardTokenId Alphanumeric  Token of the card to consult. This parameter is mandatory when you want to query by Token Id. No   creditCardTokenInformation \u0026gt; startDate Alphanumeric 23 Start date of the query when you want to query by date range. This parameter is mandatory when you want to query by date rage.\nFormat YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11. No   creditCardTokenInformation \u0026gt; endDate Alphanumeric 23 End date of the query when you want to query by date range. This parameter is mandatory when you want to query by date rage.\nFormat YYYY-MM-DDTHH:MM:SS, for example 2021-06-12T16:07:11. No      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   creditCardTokenList   Information of the Tokenized credit cards.   creditCardTokenList \u0026gt; creditCardTokenId Alphanumeric  Token generated through the information of the credit card.   creditCardTokenList \u0026gt; name Alphanumeric Min:1 Max:255 Holder\u0026rsquo;s name displayed in the credit card as sent in the request.   creditCardTokenList \u0026gt; payerId Alphanumeric  Internal id of the credit card holder as sent in the request.   creditCardTokenList \u0026gt; identificationNumber Alphanumeric Max:20 Identification number of the credit card holder as sent in the request.   creditCardTokenList \u0026gt; paymentMethod Alphanumeric 32 Franchise of the tokenized credit card as sent in the request.   creditCardTokenList \u0026gt; creationDate Alphanumeric 19 Date when the credit card was tokenized.   creditCardTokenList \u0026gt; maskedNumber Alphanumeric Min:13 Max:20 Masked credit card number. The masked used displays the first six digits and the last four digits of the credit card.     Api call The following are the bodies of the request and response of this method. The following example queries the tokenized cards by date range, if you want to query by using the token Id, just send the parameter creditCardTokenInformation.creditCardTokenId.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;GET_TOKENS\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;creditCardTokenInformation\u0026#34;: { \u0026#34;startDate\u0026#34;: \u0026#34;2021-06-23T12:00:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2021-06-25T12:00:00\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;creditCardTokenList\u0026#34;: [ { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;1adc6940-ee7e-48c2-bb96-7d784de74964\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;20263841\u0026#34;, \u0026#34;identificationNumber\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-23T13:36:36\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;377813*****0001\u0026#34;, \u0026#34;errorDescription\u0026#34;: null }, { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;3e5f0d77-0f93-421f-9432-99b6430e845e\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;158301\u0026#34;, \u0026#34;identificationNumber\u0026#34;: null, \u0026#34;paymentMethod\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-23T19:03:41\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;424242******4242\u0026#34;, \u0026#34;errorDescription\u0026#34;: null }, { \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;ead0a090-18dc-41ad-9431-ab342af854a2\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;LadyM\u0026#34;, \u0026#34;payerId\u0026#34;: \u0026#34;0sS01\u0026#34;, \u0026#34;identificationNumber\u0026#34;: \u0026#34;1234567890\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;number\u0026#34;: null, \u0026#34;expirationDate\u0026#34;: null, \u0026#34;creationDate\u0026#34;: \u0026#34;2021-06-24T11:48:21\u0026#34;, \u0026#34;maskedNumber\u0026#34;: \u0026#34;377813*****0001\u0026#34;, \u0026#34;errorDescription\u0026#34;: null } ] }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;GET_TOKENS\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;creditCardTokenInformation\u0026gt; \u0026lt;startDate\u0026gt;2021-06-23T12:00:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2021-06-25T12:00:00\u0026lt;/endDate\u0026gt; \u0026lt;/creditCardTokenInformation\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenListResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;creditCardTokenList\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;1adc6940-ee7e-48c2-bb96-7d784de74964\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;APPROVED\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;20263841\u0026lt;/payerId\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-23T13:36:36\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;377813*****0001\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;3e5f0d77-0f93-421f-9432-99b6430e845e\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;Juan Perez\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;158301\u0026lt;/payerId\u0026gt; \u0026lt;paymentMethod\u0026gt;VISA\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-23T19:03:41\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;424242******4242\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;creditCardToken\u0026gt; \u0026lt;creditCardTokenId\u0026gt;ead0a090-18dc-41ad-9431-ab342af854a2\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;name\u0026gt;LadyM\u0026lt;/name\u0026gt; \u0026lt;payerId\u0026gt;0sS01\u0026lt;/payerId\u0026gt; \u0026lt;identificationNumber\u0026gt;1234567890\u0026lt;/identificationNumber\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;creationDate\u0026gt;2021-06-24T11:48:21\u0026lt;/creationDate\u0026gt; \u0026lt;maskedNumber\u0026gt;377813*****0001\u0026lt;/maskedNumber\u0026gt; \u0026lt;/creditCardToken\u0026gt; \u0026lt;/creditCardTokenList\u0026gt; \u0026lt;/creditCardTokenListResponse\u0026gt;    Payments using Tokenization For payments with credit card tokens, include the parameter transaction.creditCardTokenId replacing the information of the credit card. The following example shows the body of the request in a high level for a one-step flow, the details of the request are not provided.\nNote To process without CVV is necessary to send the parameter creditCard.processWithoutCvv2 as true in the payment request and remove the parameter creditCard.securityCode.\nBy default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative.   JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;Information of the order\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;payer\u0026#34;: { \u0026#34;Information of the payer\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;creditCardTokenId\u0026#34;: \u0026#34;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026#34;, \u0026#34;creditCard\u0026#34;: { \u0026#34;securityCode\u0026#34;: \u0026#34;123\u0026#34; }, \u0026#34;extraParameters\u0026#34;: { \u0026#34;Extra parameters of the request\u0026#34;:\u0026#34;\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;AUTHORIZATION_AND_CAPTURE\u0026#34;, \u0026#34;paymentMethod\u0026#34;: \u0026#34;Card franchise\u0026#34;, \u0026#34;paymentCountry\u0026#34;: \u0026#34;Processing country\u0026#34;, \u0026#34;deviceSessionId\u0026#34;: \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, \u0026#34;ipAddress\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;cookie\u0026#34;: \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; }, \u0026#34;test\u0026#34;: true }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;!-- Information of the order --\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;payer\u0026gt; \u0026lt;!-- Information of the payer --\u0026gt; \u0026lt;/payer\u0026gt; \u0026lt;creditCardTokenId\u0026gt;46b7f03e-1b3b-4ce8-ad90-fe1a482f76c3\u0026lt;/creditCardTokenId\u0026gt; \u0026lt;creditCard\u0026gt; \u0026lt;securityCode\u0026gt;321\u0026lt;/securityCode\u0026gt; \u0026lt;/creditCard\u0026gt; \u0026lt;extraParameters\u0026gt; \u0026lt;!-- Extra parameters of the request --\u0026gt; \u0026lt;/extraParameters\u0026gt; \u0026lt;type\u0026gt;AUTHORIZATION_AND_CAPTURE\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;{Card franchise}\u0026lt;/paymentMethod\u0026gt; \u0026lt;paymentCountry\u0026gt;{Processing country}\u0026lt;/paymentCountry\u0026gt; \u0026lt;deviceSessionId\u0026gt;vghs6tvkcle931686k1900o6e1\u0026lt;/deviceSessionId\u0026gt; \u0026lt;ipAddress\u0026gt;127.0.0.1\u0026lt;/ipAddress\u0026gt; \u0026lt;cookie\u0026gt;pt1t38347bs6jc9ruv2ecpv7o2\u0026lt;/cookie\u0026gt; \u0026lt;userAgent\u0026gt;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026lt;/userAgent\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt;    For specific details about how to perform payments, refer to the respective article according to the processing country.\nArgentina\nBrazil\nChile\nColombia    Mexico\nPanama\nPeru    Multiple payments with tokenization Using this feature, you can perform payments using several tokens stored in a .csv file.\nConsiderations  Each record of the file must have the following structure and order separated by commas:  Account Id, identifier of your PayU account. Credit card token Credit card security code Number of installments Sale reference Sale description Buyer\u0026rsquo;s e-mail ISO code of the currency. See accepted currencies Total amount including taxes Base value of reimbursement Additional value Language used in emails sent to the buyer and the seller. See supported languages   The file must not have header. The file must be codifies using UTF-8. You need to implement a functionality to codify the content and send the codified string in the contentFile parameter. The file cannot have more than 10.000 records.\n  Variables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set PROCESS_BATCH_TRANSACTIONS_TOKEN. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   contentFile Alphanumeric  Codified string in Base64 with the information of the credit cards as explained before. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   id   Identification of the procedure.     Api call The following are the bodies of the request and response of this method.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;PROCESS_BATCH_TRANSACTIONS_TOKEN\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34; }, \u0026#34;contentFile\u0026#34;: \u0026#34;NTAwNTM4LGVhMDIwZTU5LWQ5NWEtNDk1ZC04OTAzLTM0ZTg0M2ZkN2ZlYywxMzIsMSxTYWxlLTA0LFN1YnNjcmlwdGlvbiBmZWUsdXNlcjFAbWFpbC5jb20sQ09QLDEwMDAwLDAsMCwwLGVzCjUwMDUzOCxlYWQwYTA5MC0xOGRjLTQxYWQtOTQzMS1hYjM0MmFmODU0YTIsMTM1LDEsU2FsZS0wNSxTdWJzY3JpcHRpb24gZmVlLHVzZXIyQG1haWwuY29tLENPUCwxMTAwMCwwLDAsMCxlcw==\u0026#34; } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;51c72d88-f707-45ca-ad59-4508140833a7\u0026#34; }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;PROCESS_BATCH_TRANSACTIONS_TOKEN\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;apiKey\u0026gt;51c72d88-f707-45ca-ad59-4508140833a7\u0026lt;/apiKey\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;contentFile\u0026gt;NTAwNTM4LGVhMDIwZTU5LWQ5NWEtNDk1ZC04OTAzLTM0ZTg0M2ZkN2ZlYywxMzIsMSxTYWxlLTA0LFN1YnNjcmlwdGlvbiBmZWUsdXNlcjFAbWFpbC5jb20sQ09QLDEwMDAwLDAsMCwwLGVzCjUwMDUzOCxlYWQwYTA5MC0xOGRjLTQxYWQtOTQzMS1hYjM0MmFmODU0YTIsMTM1LDEsU2FsZS0wNSxTdWJzY3JpcHRpb24gZmVlLHVzZXIyQG1haWwuY29tLENPUCwxMTAwMCwwLDAsMCxlcw=\u0026lt;/contentFile\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;creditCardTokenBatchResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;id\u0026gt;b721abbc-a9cf-44c6-99ba-91393de2b5d6\u0026lt;/id\u0026gt; \u0026lt;/creditCardTokenBatchResponse\u0026gt;    ","excerpt":"Tokenization feature is available under customized commercial agreements. For more information, …","ref":"/en/docs/integrations/api-integration/tokenization-api.html","title":"Tokenization API"},{"body":"Prerequisites  You need an active account in PayU Latam. For VirtueMart version 2 or higher:  Having the PayU\u0026rsquo;s VirtueMart plugin downloaded and stored in an accessible location. Click here to download it. Having VirtueMart version 2 or higher installed. Your VirtueMart website must be installed on Joomla!® 2.5 or higher with MySQL 5.1 or higher.   For VirtueMart version 3.0.6:  Having the PayU\u0026rsquo;s VirtueMart plugin downloaded and stored in an accessible location. Click here to download it. Having VirtueMart version 3.0.6 installed. Your VirtueMart website must be installed on Joomla!® versions 3.3.6, 2.5.28 or 2.5.27.    Plugin for VirtueMart 2 or higher Follow the next procedure to install and configure the plugin on your website.\nInstallation  Open the Joomla!® Administrator Console and select the Extension Manager option located in the Extension menu.  In the Upload Package File section, click Browse and locate the .zip file of the PayU plugin downloaded.  Once the installation procedure completes, a message appears to inform that the installation was successful.  Configuration  Expand the option Shop in the VirtueMart menu and select Payment methods. Then, click New at the top right of the screen.  In the Payment Method Information tab, set Payulatam as Payment Name and select PayuLatam in the Payment Method field.  Go to the Configuration tab and provide the information of your account and your API key.  Furthermore, provide the connection URL to the gateway and the configuration variables explained in the Configuration variables section.\nThe URLs for test and production environments are:\n Test: https://sandbox.gateway.payulatam.com/ppp-web-gateway Production: https://gateway.payulatam.com/ppp-web-gateway/  Finally, click Save or Save \u0026amp; Close button. At this point, your customers can pay with PayU Latam using the VirtueMart shopping cart.  Plugin for VirtueMart 3.0.6 Follow the next procedure to install and configure the plugin on your website.\nInstallation  Open the Joomla!® Administrator Console and select the option Extension Manager inside the Extensions menu.  In the Extension package file field, choose the previously downloaded .zip file.  Once the .zip file is loaded, click Upload \u0026amp; Install.  Once the installation procedure completes, a message appears to inform that the installation was successful.  Configuration  In the left menu, click Manage. Find and enable the PayuLatam plugin.  A message appears informing that you have enabled the plugin. Furthermore, the icon changes to a check mark.\nOpen the Components menu and expand the Virtuemart option. Then, select Payment Methods.  In the opened window, click New to create a payment method using the PayuLatam plugin.  In the Payment Method Information tab, set Payulatam as Payment Name and select PayuLatam in the Payment Method field.  Go to the Configuration tab and provide the information of your account and your API key.  Furthermore, provide the connection URL to the gateway and the configuration variables explained in the Configuration variables section.\nThe URLs for test and production environments are:\n Test: https://sandbox.gateway.payulatam.com/ppp-web-gateway Production: https://gateway.payulatam.com/ppp-web-gateway/  Finally, click Save or Save \u0026amp; Close button. At this point, your customers can pay with PayU Latam using the VirtueMart shopping cart.  Configuration variables Regardless of the VirtueMart version you use, set and configure the following variables in your plugin:\n   Field Value     Logo Logo displayed for the PayuLatam payment method.   Test URL Gateway URL for test: https://sandbox.gateway.payulatam.com/ppp-web-gateway.   Production URL Gateway URL for production: https://gateway.payulatam.com/ppp-web-gateway.   Test Mode Select Yes if you want to make transactions in the test environment. When you enable this option, VirtueMart uses the URL configured in the Test URL variable   Merchant ID ID of your commerce in PayU Latam.   Account ID ID of the PayU account according to the country where you want to sell.   API Key Unique key of your commerce, you can find this key in the PayU module.   Section ORDER STATUS PARAMS\nApproved TransactionsPending TransactionsDeclined Transactions Defines the order state in VirtueMart according to the transaction state returned by PayU. We suggest keeping the default states; nevertheless, you can configure them according to your business needs.   Currency Set USD. Also, you can configure the currency of the Account ID country.   Minimum Value / Maximum value The total value of an order must be within this range to activate the PayuLatam payment method.   Tax To use this option, configure the corresponding VirtueMart rule to the associated tax. For example, IVA for Colombia.    ","excerpt":"Prerequisites  You need an active account in PayU Latam. For VirtueMart version 2 or higher:  Having …","ref":"/en/docs/tools/shopping-cart-plugins/virtuemart.html","title":"VirtueMart"},{"body":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Para VirtueMart versión 2 o superior:  Haber descargado el plugin de VirtueMart de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí para descargarlo. Tener instalado VirtueMart versión 2 o superior. Tu página web de VirtueMart website debe estar instalada en Joomla!® 2.5 o superior con MySQL 5.1 o superior.   Para VirtueMart versión 3.0.6:  Haber descargado el plugin de VirtueMart de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí para descargarlo. Tener instalado VirtueMart versión 3.0.6. Tu página web de VirtueMart website debe estar instalada en Joomla!® versions 3.3.6, 2.5.28 o 2.5.27.    Plugin para VirtueMart 2 o superior Sigue este procedimiento para instalar y configurar el plugin en tu página web.\nInstalación  Ingresa a la Consola de Administrador de Joomla!® y selecciona la opción Extension Manager que se encuentra en el menú Extension.  En la sección Upload Package File, Haz clic en Browse y ubica el archivo .zip del plugin de Payu descargado.  Una vez termine el proceso de instalación, aparece un mensaje para informar que la instalación fue exitosa.  Configuración  Expande la opción Shop en el menú de VirtueMart y selecciona Payment methods. Luego, haz clic en New en la parte superior derecha de la pantalla.  En la pestaña Payment Method Information, Ingresa Payulatam como nombre (Payment Name) y selecciona PayuLatam en el campo Payment Method.  Ve a la pestaña Configuration e ingresa la información de tu cuenta y tu API key.  Además, ingresa la URL de conexión a la pasarela y las variables de configuración explicadas en la sección Variables de Configuración.\nLas URLs para los ambientes de pruebas y producción son:\n Pruebas: https://sandbox.gateway.payulatam.com/ppp-web-gateway Producción: https://gateway.payulatam.com/ppp-web-gateway/  Por último, Haz clic en el botón Save o Save \u0026amp; Close. En este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de VirtueMart.  Plugin para VirtueMart 3.0.6 Sigue este procedimiento para instalar y configurar el plugin en tu página web.\nInstalación  Ingresa a la Consola de Administrador de Joomla!® y selecciona la opción Extension Manager que se encuentra en el menú Extensions.  En el campo Extension package file, selecciona el archivo .zip previamente descargado.  Una vez se haya cargado el archivo .zip file is loaded, click Upload \u0026amp; Install.  Una vez termine el proceso de instalación, aparece un mensaje para informar que la instalación fue exitosa.  Configuración  En el menú de la izquierda, haz clic en Manage. Ubica y activa el plugin PayuLatam.  Aparece un mensaje informado que has activado el plugin. Además, el ícono cambia a una marca de verificación.\nAbre el menú de Components y expande la opción Virtuemart. Luego, selecciona Payment Methods.  En la ventana que se abre, haz clic en New para crear el método de pago utilizando el plugin PayuLatam.  En la pestaña Payment Method Information, Ingresa Payulatam como nombre (Payment Name) y selecciona PayuLatam en el campo Payment Method.  Ve a la pestaña Configuration e ingresa la información de tu cuenta y tu API key.  Además, ingresa la URL de conexión a la pasarela y las variables de configuración explicadas en la sección Variables de Configuración.\nLas URLs para los ambientes de pruebas y producción son:\n Pruebas: https://sandbox.gateway.payulatam.com/ppp-web-gateway Producción: https://gateway.payulatam.com/ppp-web-gateway/  Por último, Haz clic en el botón Save o Save \u0026amp; Close. En este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de VirtueMart.  Variables de Configuración Independiente de la versión de VirtueMart que utilices, configura las siguientes variables en tu plugin:\n   Campo Valor     Logo Logo mostrado para el método de pago PayuLatam.   Test URL URL de la pasarela para Pruebas: https://sandbox.gateway.payulatam.com/ppp-web-gateway.   Production URL URL de la pasarela para Producción: https://gateway.payulatam.com/ppp-web-gateway.   Test Mode Selecciona Yes si quieres hacer transacciones en el ambiente de pruebas. Cuando activas esta opción, VirtueMart utiliza la URL configurada en la variable Test URL.   Merchant ID Identificador de tu comercio en PayU Latam.   Account ID Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender.   API Key Llave única de tu comercio, puedes obtener esta información en tu Módulo PayU.   Sección ORDER STATUS PARAMS\nApproved TransactionsPending TransactionsDeclined Transactions Define el estado de la orden en VirtueMart de acuerdo con el estado de la transacción retornado por PayU. Sugerimos dejar los estados predeterminados; sin embargo, puedes configurarlos de acuerdo a tu necesidades.   Currency Configura USD. También, puedes configurar la moneda del país de tu Account ID.   Minimum Value / Maximum value El valor total de la orden debe estar en este rango para activar el método de pago PayuLatam.   Tax Para utilizar esta opción, configura la regla correspondiente de VirtueMart asociada al impuesto. Por ejemplo, el IVA en Colombia.    ","excerpt":"Prerrequisitos  Necesitas una cuenta activa en PayU Latam. Para VirtueMart versión 2 o superior: …","ref":"/es/docs/tools/shopping-cart-plugins/virtuemart.html","title":"VirtueMart"},{"body":"To integrate with Payments SDK Colombia, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments SDK includes the following methods:\n Submit transaction with credit card Submit transaction with cash or Bank reference Submit transaction with bank transfer Bank List - PSE Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit cards This method lets you process the payments performed by your customers using credit cards. For Colombia, you can perform one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Colombia. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE. For Crédito Fácil Codensa card, the number of installments supported are 1 to 12, 18, 24, 36 and 48. For Crédito Fácil Codensa card, the payer can choose any of the following document types for the variable PAYER_DNI_TYPE:     ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Client´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction, // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits. // Example 19000.00. In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Enter the value of the base value on which VAT (only valid for Colombia) is calculated. // In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction,  // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits.  // Example 19000.00. In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Enter the value of the base value on which VAT (only valid for Colombia) is calculated.  // In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4037997623271984\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2030/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash or Bank reference This method lets you process the payments of your customers in cash or using a Bank reference. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like the followings.\nPayments in cash Payments with Bank reference Considerations  Send a valid cash Payment Method in the request, see the available Payment Methods for Colombia. OTHERS_CASH method is not supported. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. For BALOTO and EFECTY, the confirmation of the payment takes 15 minutes. For BANK_REFERENCED, the confirmation is online. The minimum and maximum values for BALOTO and EFECTY are:  BALOTO \u0026gt; Min: $3.000 COP - Max: $1.000.000 COP EFECTY \u0026gt; Min: $20.000 COP - Max: $6.000.000 COP   The extra parameters have the following data related to the transaction:  EXPIRATION_DATE: maximum term for the payer to perform the payment REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. BANCO_BOGOTA_SERVICE_CODE: payment code for Banco de Bogotá. Available when using BANK_REFERENCED. BANK_REFERENCED_NAME: Reference name for Bancolombia. Available when using BANK_REFERENCED. BANCOLOMBIA_SERVICE_CODE: payment code for Bancolombia. Available when using BANK_REFERENCED.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction, // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits. // Example 19000.00. In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Enter the value of the base value on which VAT (only valid for Colombia) is calculated. // In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the cash payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;EFECTY\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction,  // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits.  // Example 19000.00. In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Enter the value of the base value on which VAT (only valid for Colombia) is calculated.  // In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the cash payment method name here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;EFECTY\u0026#34;, // Enter the payment due date \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. In Colombia, bank transfers are made through PSE, to perform an integration with this payment method, you need to follow these steps:\n  Query the available bank list to show them to the payer. To query the bank list, refer to this method.\n  Show the list of banks as displayed below:\n  When the payer selects a bank, you must send the parameter pseCode of the selection in the parameter PSE_FINANCIAL_INSTITUTION_CODE in the request.\nShow a list to let the payer choose whether they are a Natural or Legal person. Depending on what the payer choose, you must send the value in the parameter PAYER_PERSON_TYPE in the request. The list must be displayed as follows:  The selected value must be sent as follows:\n Java: PersonType.NATURAL.toString() (N) or PersonType.LEGAL.toString() (J). PHP: N or J.  Show a list to let the payer choose their identification type. You must send the ISO code of the value selected in the parameter PAYER_DOCUMENT_TYPE in the request. The list must be displayed as follows:  The list of available documents is:\n   ISO Description     CC Citizenship card.   CE Foreign citizenship card.   NIT Tax identification number (Companies).   TI Identity Card.   PP Passport.   IDC Client´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.   CEL When identified by the mobile line.   RC Birth certificate.   DE Foreign identification document.    You must send the payer identification number in the extra parameter PAYER_DNI in the request.  Considerations  If the payment request is successful, the transaction has state PENDING and responseCode PENDING_TRANSACTION_CONFIRMATION; this is because the payer is redirected to the selected bank to complete the payment; you must redirect the payer to the URL returned in the extra parameter BANK_URL. The URL returned in the extra parameter BANK_URL is configured in the PayU Module and must show the following information:\nParameters starting with $ symbol are sent via GET. You must add in the response page the options to retry the payment, finish the transaction and print the receipt. The status displayed in the response page can be any of the following:     polTransactionState polResponseCode State     4 1 Approved transaction   6 5 Failed transaction   6 4 Rejected transaction   12 or 14 9994 or 25 Pending transaction, please check if the debit was made in the bank.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction, // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits. // Example 19000.00. In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Enter the value of the base value on which VAT (only valid for Colombia) is calculated. // In case you don\u0026#39;t have IVA, set 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //-- Mandatory information for PSE – // Enter the bank PSE code here. parameters.put(PayU.PARAMETERS.PSE_FINANCIAL_INSTITUTION_CODE, \u0026#34;1007\u0026#34;); // Enter the person type here (Natural or legal). parameters.put(PayU.PARAMETERS.PAYER_PERSON_TYPE, PersonType.NATURAL.toString()); // or parameters.put(PayU.PARAMETERS.PAYER_PERSON_TYPE, PersonType.LEGAL.toString()); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the payer’s document type here. parameters.put(PayU.PARAMETERS.PAYER_DOCUMENT_TYPE, DocumentType.CC.toString()); // Enter the payment method name here. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PSE\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Response page to which the payer will be redirected. parameters.put(PayU.PARAMETERS.RESPONSE_URL, \u0026#34;http://www.test.com/response\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the bank URL \tString url = (String)extraParameters.get(\u0026#34;BANK_URL\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the value of the IVA (Value Added Tax only valid for Colombia) of the transaction,  // if no IVA is sent, the system applies 19% automatically. It can contain two decimal digits.  // Example 19000.00. In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Enter the value of the base value on which VAT (only valid for Colombia) is calculated.  // In case you don\u0026#39;t have IVA, set 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //-- Mandatory information for PSE –  // Enter the bank PSE code here. \tPayUParameters::PSE_FINANCIAL_INSTITUTION_CODE =\u0026gt; \u0026#34;1007\u0026#34;, // Enter the person type here (Natural or legal). \tPayUParameters::PAYER_PERSON_TYPE =\u0026gt; \u0026#34;N\u0026#34;, // or PayUParameters::PAYER_PERSON_TYPE =\u0026gt; \u0026#34;J\u0026#34;  // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;123456789\u0026#34;, // Enter the payer’s document type here. \tPayUParameters::PAYER_DOCUMENT_TYPE =\u0026gt; \u0026#34;CC\u0026#34;, // Enter the payment method name here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PSE\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE =\u0026gt; \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT =\u0026gt; \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, // Response page to which the payer will be redirected. \tPayUParameters::PARAMETERS.RESPONSE_URL =\u0026gt; \u0026#34;http://www.test.com/response\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_URL; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Bank List - PSE This method returns a list of the banks available for payments using PSE.\nMethod call The following are the examples of the request and response of this method.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the payment method name here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PSE\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); //Obtain the bank list List banks = PayUPayments.getPSEBanks(parameters); Iterator banks_iterator=banks.iterator(); while(banks_iterator.hasNext()){ Bank bank = (Bank) banks_iterator.next(); bank.getPseCode(); bank.getDescription(); }   // Enter the payment method name here $parameters = array( // Insert the payment method here. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PSE\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, ); $array=PayUPayments::getPSEBanks($parameters); $banks=$array-\u0026gt;banks; foreach ($banks as $bank) { $bank-\u0026gt;description; $bank-\u0026gt;pseCode; } }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Colombia, target the requests to the following URLs:\n Java PHP   // …","ref":"/en/docs/integrations/sdk-integration/payments-sdk-colombia.html","title":"Payments SDK - Colombia"},{"body":"Para integrarte con el SDK de Pagos de Colombia, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de pagos incluye los siguientes métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo o Referencia bancaria Enviar transacciones con transferencia bancaria Lista de bancos - PSE Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar el SDK de Consultas.  Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito. Para Colombia, puedes realizar flujos de un paso (Cobro). Para más información, consulta los flujos de pago.\nConsideraciones  Envía un método de pago válido de tarjeta de crédito, mira los métodos de pago disponibles para Colombia. Para pagos con tókenes de tarjeta de crédito, asigna los parámetros TOKEN_ID y CREDIT_CARD_SECURITY_CODE (si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el SDK de Tokenización. Por defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas. Luego de que se te active esta funcionalidad, asigna el parámetro PROCESS_WITHOUT_CVV2 con true y elimina el parámetro CREDIT_CARD_SECURITY_CODE. Para la tarjeta Crédito Fácil Codensa, el número de cuotas soportadas es 1 a 12, 18, 24, 36 y 48. Para la tarjeta Crédito Fácil Codensa, el pagador puede escoger uno de los siguientes tipos de documento en la variable PAYER_DNI_TYPE:     ISO Descripción     CC Cédula de ciudadanía.   CE Cédula de extranjería.   NIT Número de Identificación Tributaria (Empresas).   TI Tarjeta de identidad.   PP Pasaporte.   IDC Identificador único de cliente, para el caso de ID’s únicos de clientes/usuarios de servicios públicos.   CEL En caso de identificarse a través de la línea del móvil.   RC Registro civil de nacimiento.   DE Documento de identificación extranjero.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa el valor del IVA (Impuesto al valor agregado válido únicamente en Colombia) de la transacción, // Si no se envía IVA, ell sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales // Ejemplo 19000.00. En caso de ser exento de IVA, asigna 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Ingresa el valor base sobre el que se calcula el IVA (válido únicamente en Colombia). // En caso de ser exento de IVA, asigna 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de \u0026#34;Autorización y captura\u0026#34; TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa el valor del IVA (Impuesto al valor agregado válido únicamente en Colombia) de la transacción,  // Si no se envía IVA, ell sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales  // Ejemplo 19000.00. En caso de ser exento de IVA, asigna 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Ingresa el valor base sobre el que se calcula el IVA (válido únicamente en Colombia).  // En caso de ser exento de IVA, asigna 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4037997623271984\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2030/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones en efectivo o referencia bancaria Este método te permite procesar los pagos en efectivo o por referencia bancaria de tus clientes. Para integrarte con estas transacciones, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un recibo de pago como los siguientes.\nPagos en efectivo Pagos con Referencia bancaria Consideraciones  Envía un método de pago válido en efectivo o por referencia bancaria, mira los métodos de pago disponibles para Colombia. No está soportado el método OTHERS_CASH. El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto Para BALOTO y EFECTY, la confirmación de pago toma 15 minutos. Para BANK_REFERENCED, la confirmación es en línea. Los valores mínimos de máximos para pagos en BALOTO y EFECTY son:  BALOTO \u0026gt; Min: $3.000 COP - Max: $1.000.000 COP EFECTY \u0026gt; Min: $20.000 COP - Max: $6.000.000 COP   Los extra parámetros tienen los siguientes parámetros relacionados con la transacción:  EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago REFERENCE: referencia de pago interna generada por PayU. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF. BANCO_BOGOTA_SERVICE_CODE: código de pago para Banco de Bogotá. Disponible cuando utilices BANK_REFERENCED. BANK_REFERENCED_NAME: nombre de la referencia para Bancolombia. Disponible cuando utilices BANK_REFERENCED. BANCOLOMBIA_SERVICE_CODE: código de pago para Bancolombia. Disponible cuando utilices BANK_REFERENCED.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa el valor del IVA (Impuesto al valor agregado válido únicamente en Colombia) de la transacción, // Si no se envía IVA, ell sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales // Ejemplo 19000.00. En caso de ser exento de IVA, asigna 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Ingresa el valor base sobre el que se calcula el IVA (válido únicamente en Colombia). // En caso de ser exento de IVA, asigna 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el nombre del método de pago en efectivo. parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;EFECTY\u0026#34;); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa el valor del IVA (Impuesto al valor agregado válido únicamente en Colombia) de la transacción,  // Si no se envía IVA, ell sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales  // Ejemplo 19000.00. En caso de ser exento de IVA, asigna 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Ingresa el valor base sobre el que se calcula el IVA (válido únicamente en Colombia).  // En caso de ser exento de IVA, asigna 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el nombre del método de pago en efectivo \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;EFECTY\u0026#34;, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones con transferencia bancaria Este método te permite procesar los pagos realizados por tus clientes por medio de transferencia bancaria. En Colombia, las transferencias bancarias se hacen a través de PSE, para integrarte con este método de pago, necesitas crear un formulario de pago siguiendo estos pasos:\n  Consulta la lista de bancos disponibles para mostrarla al pagador. Para consultar la lista de bancos, consulta este método.\n  Muestra la lista de bancos tal y como se muestra a continuación:\n  Cuando el pagador seleccione un banco, debes enviar al parámetro pseCode seleccionado en el parámetro PSE_FINANCIAL_INSTITUTION_CODE de la petición.\nMuestra una lista para que el pagador escoja si es una persona Natural (N) o Jurídica (J). Dependiendo de lo que escoja, debes enviar el valor en el parámetro PAYER_PERSON_TYPE de la petición. La lista debe verse así:  El valor seleccionado debe enviarse así:\n Java: PersonType.NATURAL.toString() (N) o PersonType.LEGAL.toString() (J). PHP: N o J.  Muestra una lista para que el pagador escoja su tipo de identificación. Debes enviar el código ISO del valor seleccionado en el extra parámetro PAYER_DOCUMENT_TYPE de la petición. La lista debe verse así:  The list of available documents is:\nLa lista de documentos disponibles es:\n   ISO Descripción     CC Cédula de ciudadanía.   CE Cédula de extranjería.   NIT Número de Identificación Tributaria (Empresas).   TI Tarjeta de identidad.   PP Pasaporte.   IDC Identificador único de cliente, para el caso de ID’s únicos de clientes/usuarios de servicios públicos.   CEL En caso de identificarse a través de la línea del móvil.   RC Registro civil de nacimiento.   DE Documento de identificación extranjero.    Debes enviar el número de identificación del pagador en el parámetro PAYER_DNI de la petición.  Consideraciones  Si la solicitud de pago es exitosa, el estado de la transacción es pendiente (PENDING) y el responseCode es PENDING_TRANSACTION_CONFIRMATION; esto es debido a que el pagador es redirigido al naco seleccionado para completar el pago; debes redirigir al pagador a la URL retornada en el extra parámetro BANK_URL. La URL retornada en el extra parámetro BANK_URL se configura en el Modulo PayU y debe mostrar la siguiente información:\nLos parámetros que empiezan con el símbolo $ se envían vía GET. Debes agregar a la página de respuesta las opciones para reintentar el pago, finalizar la transacción e imprimir el recibo. Los estados mostrados en la página de respuesta pueden ser los siguientes:     polTransactionState polResponseCode Estado     4 1 Transacción aprobada   6 5 Transacción fallida   6 4 Transacción rechazada   12 o 14 9994 o 25 Transacción pendiente, por favor revisar si el débito fue realizado en el banco.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;65000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512321\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa el valor del IVA (Impuesto al valor agregado válido únicamente en Colombia) de la transacción, // Si no se envía IVA, ell sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales // Ejemplo 19000.00. En caso de ser exento de IVA, asigna 0. parameters.put(PayU.PARAMETERS.TAX_VALUE, \u0026#34;10378\u0026#34;); // Ingresa el valor base sobre el que se calcula el IVA (válido únicamente en Colombia). // En caso de ser exento de IVA, asigna 0. parameters.put(PayU.PARAMETERS.TAX_RETURN_BASE, \u0026#34;54622\u0026#34;); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.COP.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Cr 23 No. 53-50\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Bogotá\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Bogotá D.C\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;CO\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); //-- Información obligatoria para PSE – // Ingresa aquí el código PSE del banco. parameters.put(PayU.PARAMETERS.PSE_FINANCIAL_INSTITUTION_CODE, \u0026#34;1007\u0026#34;); // Ingresa aquí el tipo de persona (Natural o Jurídica). parameters.put(PayU.PARAMETERS.PAYER_PERSON_TYPE, PersonType.NATURAL.toString()); // o parameters.put(PayU.PARAMETERS.PAYER_PERSON_TYPE, PersonType.LEGAL.toString()); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí el tipo de documento del pagador. parameters.put(PayU.PARAMETERS.PAYER_DOCUMENT_TYPE, DocumentType.CC.toString()); // Ingresa aquí el nombre del método de pago parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PSE\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Página de respuesta a donde será redireccionado el pagador. parameters.put(PayU.PARAMETERS.RESPONSE_URL, \u0026#34;http://www.test.com/response\u0026#34;); // Petición de \u0026#34;Autorización y captura\u0026#34; TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del banco \tString url = (String)extraParameters.get(\u0026#34;BANK_URL\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;65000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512325\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa el valor del IVA (Impuesto al valor agregado válido únicamente en Colombia) de la transacción,  // Si no se envía IVA, ell sistema aplica el 19% automáticamente. Puede contener dos dígitos decimales  // Ejemplo 19000.00. En caso de ser exento de IVA, asigna 0.  PayUParameters::TAX_VALUE =\u0026gt; \u0026#34;10378\u0026#34;, // Ingresa el valor base sobre el que se calcula el IVA (válido únicamente en Colombia).  // En caso de ser exento de IVA, asigna 0.  PayUParameters::TAX_RETURN_BASE =\u0026gt; \u0026#34;54622\u0026#34;, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;COP\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Cr 23 No. 53-50\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;BOGOTÁ\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Bogotá D.C\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;CO\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, //-- Información obligatoria para PSE –  // Ingresa aquí el código PSE del banco. \tPayUParameters::PSE_FINANCIAL_INSTITUTION_CODE =\u0026gt; \u0026#34;1007\u0026#34;, // Ingresa aquí el tipo de persona (Natural o Jurídica). \tPayUParameters::PAYER_PERSON_TYPE =\u0026gt; \u0026#34;N\u0026#34;, // or PayUParameters::PAYER_PERSON_TYPE =\u0026gt; \u0026#34;J\u0026#34;  // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;123456789\u0026#34;, // Ingresa aquí el tipo de documento del pagador. \tPayUParameters::PAYER_DOCUMENT_TYPE =\u0026gt; \u0026#34;CC\u0026#34;, // Ingresa aquí el nombre del método de pago \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PSE\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE =\u0026gt; \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT =\u0026gt; \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;, // Página de respuesta a donde será redireccionado el pagador. \tPayUParameters::PARAMETERS.RESPONSE_URL =\u0026gt; \u0026#34;http://www.test.com/response\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_URL; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Lista de bancos - PSE Este método retorna la lista de bancos disponibles para realizar pagos utilizando PSE.\nLlamado del método Los siguientes son los ejemplos de la petición y la respuesta para este método.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el nombre del método de pago parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PSE\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.CO.name()); // Obten la lista de los bancos List banks = PayUPayments.getPSEBanks(parameters); Iterator banks_iterator=banks.iterator(); while(banks_iterator.hasNext()){ Bank bank = (Bank) banks_iterator.next(); bank.getPseCode(); bank.getDescription(); }   // Ingresa aquí el nombre del método de pago $parameters = array( // Ingresa aquí el nombre del método de pago. \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PSE\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::CO, ); $array=PayUPayments::getPSEBanks($parameters); $banks=$array-\u0026gt;banks; foreach ($banks as $bank) { $bank-\u0026gt;description; $bank-\u0026gt;pseCode; } }    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"Para integrarte con el SDK de Pagos de Colombia, apunta tus peticiones a las siguientes URLs:\n Java …","ref":"/es/docs/integrations/sdk-integration/payments-sdk-colombia.html","title":"SDK de Pagos - Colombia"},{"body":"Implementa PayU con el modelo agregador o gateway, utilizando los acuerdos financieros de PayU o los tuyos. Selecciona la integración que mejor se acople a tus necesidades:\nIntegración WebCheckout El WebCheckout de PayU Checkout es una integración que te permite cobrar a través del formulario web de PayU desde cualquier dispositivo de forma fácil, rápida y segura.  PayU administra el sistema de pagos Integración más fácil e igual de segura Como PayU maneja la plataforma de pagos, es más fácil obtener la certificación PCI DSS  Aprende más sobre la integración WebCheckout  Integración API o SDK A través de las integraciones API o SDK, puedes recibir pagos de forma segura desde cualquier lugar que desees, en tu propia página web o en tu aplicación móvil.  Diseña tu propio checkout y administra el sistema de pagos de tu sitio web. Disfruta de servicios adicionales seguros como el servicio de Tokenización de tarjetas de crédito.  Aprende más sobre la integración API Aprende más sobre la integración SDK     Cómo obtener las variables para la integración Independiente de la integración que escojas, puedes requerir alguna de las siguientes variables en la invocación de los métodos.\nAPI key y API Login   Ingresa a PayU.com y haz clic en la opción de log in en a parte superior de la página. O si lo prefieres, puedes ingresar a https://merchants.payulatam.com/.\n  Haz clic en Configuración y luego selecciona Configuración técnica.\n  En esta ventana, encontrarás tanto el API key como el API Login que permiten autenticar a tu comercio durante el proceso de integración.  Advertencia Ambas llaves con únicas por comercio en PayU, por lo tanto, debes mantener esta información asegurada y su uso o distribución se hace bajo tu responsabilidad.  Firma de autenticación La variable signature es utilizada para validar los pago realizados a través de la plataforma, asegurando su autenticidad. Esta variable es un valor tipo string encriptado utilizando el algoritmo MD5 o el SHA y tiene la siguiente estructura.\nApiKey~merchantId~referenceCode~tx_value~currency Construyamos la variable signature utilizando los siguientes valores de prueba:\n ApiKey: 4Vj8eK4rloUd272L48hsrarnUA merchantId: 508029 referenceCode: TestPayU tx_value: 3 currency: USD  La cadena es la concatenación de estos valores con el caracter virgulilla (~):\n4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU~3~USD Luego de aplicar el algoritmo MD5, el valor de la variable signature es:\nba9ffa71559580175585e45ce70b6c37 variable deviceSessionId La variable deviceSessionId es un código con la información del dispositivo donde se genera la transacción y provee un identificador único para el mismo. Esta variable no permite identificar atacantes.\n Para hace integración API o SDK, necesitas incluir el siguiente script en tu formulario de pago:  \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=${deviceSessionId}80200\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;iframe style=\u0026#34;width: 100px; height: 100px; border: 0; position: absolute; top: -5000px;\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=${deviceSessionId}80200\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; \nEs importante generar el deviceSessionId por cada transacción. Para generar el deviceSessionId obten el session_id de la cookie y concaténalo junto con la fecha y hora actual en milisegundos Then, encrypt the result using MD5.  Ejemplo en PHP\n$deviceSessionId = md5(session_id().microtime()) \nPor ejemplo, si el $deviceSessionId es d66f949f19b33e88c202b579cfc549b3, el script es:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=d66f949f19b33e88c202b579cfc549b380200\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;iframe style=\u0026#34;width: 100px; height: 100px; border: 0; position: absolute; top: -5000px;\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=d66f949f19b33e88c202b579cfc549b380200\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; \nPor último, debes enviar el $deviceSessionId en la variable correspondiente a tu integración:   Para API: transaction.deviceSessionId Para SDK JAVA: PayU.PARAMETERS.DEVICE_SESSION_ID Para SDK PHP: PayUParameters::DEVICE_SESSION_ID  ","excerpt":"Implementa PayU con el modelo agregador o gateway, utilizando los acuerdos financieros de PayU o los …","ref":"/es/docs/integrations.html","title":"Integraciones"},{"body":"Implement PayU with the aggregator model or gateway, using PayU’s financial agreements or your own. Select the integration that fits best with your needs:\nCheckout integration PayU Checkout is an integration that allows you to collect through a PayU web form from any device in a simple, fast and secure way.  PayU manages the payment system Easier integration, equally secure Since PayU manages the payment platform, it is easier to get PCI DSS certification  Learn more about WebCheckout integration  API or SDK integration Through API or SDK integrations, you can receive payments securely from anywhere you like, on your website or mobile app.  Design your checkout and manage the payment system of your website. Access to additional services such as Tokenization.  Learn more about API integration Learn more about SDK integration     How to get variables for integration Regardless of the integration selected, you may require any of the following variables in the request of the methods.\nAPI key and API Login   Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\n  Click Settings and then select Technical configuration.\n  In this window, you find both the API key and API Login which allows you to authenticate your commerce during the integration procedure.  Warning Both keys are unique per commerce in PayU, therefore, you must keep this information secured and their usage or disclosure is under your responsibility.  Authentication signature The variable signature is used to validate the payments performed through the platform, ensuring their authenticity. This variable is a string value encrypted using MD5 or SHA algorithms and follows this structure.\nApiKey~merchantId~referenceCode~tx_value~currency Let\u0026rsquo;s build a signature using the following test values:\n ApiKey: 4Vj8eK4rloUd272L48hsrarnUA merchantId: 508029 referenceCode: TestPayU tx_value: 3 currency: USD  The string is these values concatenated with the tilde character (~):\n4Vj8eK4rloUd272L48hsrarnUA~508029~TestPayU~3~USD After you apply the MD5 algorithm, the signature value is:\nba9ffa71559580175585e45ce70b6c37 deviceSessionId variable The deviceSessionId is a code with the information of the device where the transaction was generated and provides a unique identifier for the device. This variable lets us identify attackers.\n To perform either API or SDK integration, you need to include the following script in your payment form:  \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=${deviceSessionId}80200\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;iframe style=\u0026#34;width: 100px; height: 100px; border: 0; position: absolute; top: -5000px;\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=${deviceSessionId}80200\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; \nIt is important to generate the deviceSessionId per each transaction. To generate the deviceSessionId get the session_id of the cookie and concatenate it with the current timestamp along with the milliseconds. Then, encrypt the result using MD5.  Example in PHP\n$deviceSessionId = md5(session_id().microtime()) \nFor example, if the $deviceSessionId is d66f949f19b33e88c202b579cfc549b3, the script is as follows:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=d66f949f19b33e88c202b579cfc549b380200\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; \u0026lt;iframe style=\u0026#34;width: 100px; height: 100px; border: 0; position: absolute; top: -5000px;\u0026#34; src=\u0026#34;https://maf.pagosonline.net/ws/fp/tags.js?id=d66f949f19b33e88c202b579cfc549b380200\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/noscript\u0026gt; \nFinally, you must send the $deviceSessionId in the variable according to the integration selected:   For API: transaction.deviceSessionId For SDK JAVA: PayU.PARAMETERS.DEVICE_SESSION_ID For SDK PHP: PayUParameters::DEVICE_SESSION_ID  ","excerpt":"Implement PayU with the aggregator model or gateway, using PayU’s financial agreements or your own. …","ref":"/en/docs/integrations.html","title":"Integrations"},{"body":"El Módulo PayU es idea para negocios que necesitan:\n Tener control de sus inventarios y las ventas que realizan a través de PayU. Tener información actualizada de los movimientos financieros de su cuenta. Hacer solicitudes al equipo de soporte sobre los problemas en su cuenta.  Beneficios del Módulo PayU El Módulo PayU entrega los siguientes beneficios:\n Haz un seguimiento a tus ventas.\nEncuentra la información relevante de tus ventas, los métodos de pago más utilizados y las horas con mayor tasa transaccional. Conoce tus transacciones.\nPuedes consultar los movimientos en tus cuentas, generar balances y reportes. No necesitas una página web.\nPuedes utilizar las herramientas para recibir pagos incluso si no tienes una página web.  ¿Cómo acceder al Módulo PayU?  Ingresa a nuestra página web\nIngresa a www.payu.com, en la esquina superior derecha, encontrarás la opción para iniciar sesión. Para comercios en Colombia, esta opción se llama PayU Login.\nO si lo prefieres, puedes ir directamente a https://merchants.payulatam.com/.  Ingresa al Módulo PayU.\nIngresa tus credenciales y entra a tu cuenta. Aquí, puedes utilizar todas las opciones para administrar tu cuenta.  Para más información sobre cómo utilizar el Módulo de PayU, consulte esta sección.\n","excerpt":"El Módulo PayU es idea para negocios que necesitan:\n Tener control de sus inventarios y las ventas …","ref":"/es/docs/tools/payu-module.html","title":"Módulo PayU"},{"body":"PayU module is ideal for business that need to:\n Keep control of their stocks and sales performed through PayU. Be updated with the information of their financial movements of their account. Make requests to the support team about issues in their account.  Benefits of the PayU Module PayU module provides the following benefits:\n Keep track of your sales\nFind relevant information about your sales, the most used payment methods, and the hours with higher transaction rates. Know your transactions.\nYou can consult the movements in your accounts, generate statements and reports. You don\u0026rsquo;t need a Web page\nYou can use the tools to receive payments even if you don\u0026rsquo;t have a web page.  How to access the PayU module?  Log in our web page\nLog into www.payu.com, at the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.  Enter the PayU module.\nProvide your credentials and enter your account. Here, you can use all the available options to manage your account.  For more information about how to use the PayU Module, refer to this section.\n","excerpt":"PayU module is ideal for business that need to:\n Keep control of their stocks and sales performed …","ref":"/en/docs/tools/payu-module.html","title":"PayU Module"},{"body":"Si deseas hace pruebas con PayU, necesitas utilizar las siguientes credenciales en el request, dependiendo del país de tu cuenta:\n   Merchant ID API Login API Key Public Key accountId País     508029 pRRXKOl8ikMmt9u 4Vj8eK4rloUd272L48hsrarnUA PKaC6H4cEDJD919n705L544kSU 512322 Argentina   512327 Brasil   512325 Chile   512321 Colombia   512324 México   512326 Panamá   512323 Perú    El ambiente de pruebas no replica los datos de tu cuenta de producción.\nTarjetas de prueba Puedes utilizar las siguientes tarjetas de prueba:\n Argentina    Tarjeta Número     Tarjeta de Crédito AMEX 376414000000009   Tarjeta de Crédito ARGENCARD 5011050000000001   Tarjeta de Crédito CABAL 5896570000000008   Tarjeta de Crédito CENCOSUD 6034930000000005 - 5197670000000002   Tarjeta de Crédito DINERS 36481400000006   Tarjeta de Crédito MASTERCARD 5399090000000009   Tarjeta de Crédito NARANJA 5895620000000002   Tarjeta de Crédito SHOPPING 6034880000000051   Tarjeta de Crédito VISA 4850110000000000 - 4036820000000001   Tarjeta Débito VISA 4517730000000000      Brasil    Tarjeta Número     Tarjeta de Crédito AMEX 376611000000000   Tarjeta de Crédito DINERS 36213800000009   Tarjeta de Crédito ELO 5067310000000002   Tarjeta de Crédito HIPERCARD 6062825624254001   Tarjeta de Crédito MASTERCARD 5123740000000002   Tarjeta de Crédito VISA 4422120000000008 - 4984460000000008      Chile    Tarjeta Número     Tarjeta de Crédito AMEX 377825000000005   Tarjeta de Crédito DINERS 36525200000002   Tarjeta de Crédito MASTERCARD 5435630000000008   Tarjeta de Crédito VISA 4051885600446623 - 4938590000000017      Colombia    Tarjeta Número     Tarjeta de Crédito AMEX 377813000000001 - 377847626810864 - 376402004977124 - 376414000000009   Tarjeta de Crédito CODENSA 5907120000000009   Tarjeta de Crédito CRM 5282096712463427   Tarjeta de Crédito DAVIVIENDA 5247081012761500   Tarjeta de Crédito DINERS 36032400000007 - 36032404150519 - 36032440201896   Tarjeta de Crédito MASTERCARD 5471300000000003 - 5120697176068275   Tarjeta de Crédito NEQUI 4093551018099251   Tarjeta de Crédito VISA 4097440000000004 - 4037997623271984 - 4111111111111111   Tarjeta Débito VISA 4509420000000008      México    Tarjeta Número     Tarjeta de Crédito AMEX 376675000000005   Tarjeta de Crédito MASTERCARD 5579070000000003   Tarjeta Débito MASTERCARD 5256780000000007   Tarjeta de Crédito VISA 4268070000000002   Tarjeta Débito VISA 4415490000000004      Panamá    Tarjeta Número     Tarjeta de Crédito MASTERCARD 5455040000000005   Tarjeta de Crédito VISA 4723030000000005      Perú    Tarjeta Número     Tarjeta de Crédito AMEX 377753000000009   Tarjeta de Crédito DINERS 36239200000000   Tarjeta de Crédito MASTERCARD 5491610000000001   Tarjeta Débito MASTERCARD 5236930000000003   Tarjeta de Crédito VISA 4907840000000005 - 4634010000000005   Tarjeta Débito VISA 4557880000000004     Probar estados Cuando pruebas los Pagos, debes enviar en el request:\n Para obtener transacciones aprobadas:  Envía APPROVED en el nombre del tarjetahabiente. Envía 777 en el CVV de la tarjeta (para AMEX, utiliza 7777). El parámetro test y la descripción también definen el estado. Si no funciona con test asignado como false, cambia su valor a true. Envía el mes de la expiración de la tarjeta menor a 6 y el año debe ser 2023 o mayor. Ejemplo: 05/2025.   Para obtener transacciones declinadas:  Envía REJECTED en el nombre del tarjetahabiente. Envía 666 en el CVV de la tarjeta (para AMEX, utiliza 666). El parámetro test y la descripción también definen el estado. Si no funciona con test asignado como false, cambia su valor a true. Envía el mes de la expiración de la tarjeta mayor a 6 y el año debe ser 2023 o mayor. Ejemplo: 07/2027.   Para obtener transacciones pendientes:  Envía PENDING en el nombre del tarjetahabiente. Envía 777 en el CVV de la tarjeta (para AMEX, utiliza 7777). Envía el parámetro test como true. En la información del comprador y el pagador, asigna la dirección de correo electrónico manual-reviewhub@email.com.   Para el número de la tarjeta, utiliza un número válido que corresponda a la franquicia enviada en el request. Puedes utilizar un generador en línea de tarjetas de crédito o una de las correspondientes a tu país mencionadas anteriormente. Para probar transferencias bancarias por PSE (Disponible en Colombia) en el ambiente de Sandbox de PayU, consulta la Guía de pruebas PSE (PDF).  Importar la colección Haz clic en el siguiente botón para importar nuestra colección en Postman (puede que necesites refrescar la página si el botón no funciona). Ten en cuenta que creamos un ambiente cada vez que importas la colección.\n (function (p,o,s,t,m,a,n) { !p[s] \u0026\u0026 (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); }); !o.getElementById(s+t) \u0026\u0026 o.getElementsByTagName(\"head\")[0].appendChild(( (n = o.createElement(\"script\")), (n.id = s+t), (n.async = 1), (n.src = m), n )); }(window, document, \"_pm\", \"PostmanRunObject\", \"https://run.pstmn.io/button.js\"));  Luego de ejecutar la colección, necesitas configurar las variables de ambiente y los globales.\nConfigurar sus variables de ambiente Nuestra colección tiene un ambiente llamado PayU API Sandbox. Recomendamos que invoques el request del API de la colección únicamente en el ambiente de Sandbox.\nSi quieres cambiar las cuentas de prueba de PayU, configura las variables api_key, api_login, merchant_id y account-[country]. Puedes dejar las demás variables con sus valores por defecto.\nImportar los globals Los globales (Globals) son las variables que se necesitan para procesar las transacciones en nuestra pasarela de pagos como moneda (currency), valor de la transacción (transaction amount), página de confirmación (confirmation page), página de respuesta (response pages) y más.\nImporta los globales de la colección para configurar las valores enviados en el requests.\n  Descarga el archivo de globales aquí.\n  En la colección de Postman, haz clic en Import junto al nombre de tu workspace y busca el archivo json descargado recientemente.\n  Cuando termines, haz clic en Import.\n  Para cambiar el monto de la transacción, actualiza el valor de tx_value_[País] dependiendo del país donde quieras probar.\nEjecuta la colección en el orden correcto Ten en cuenta que el orden en el que ejecutes los requests es importante, debido a que algunos de los datos retornados por el request pueden ser utilizados en la siguiente invocación.\n","excerpt":"Si deseas hace pruebas con PayU, necesitas utilizar las siguientes credenciales en el request, …","ref":"/es/docs/getting-started/test-your-solution.html","title":"Probar tu solución"},{"body":"If you want to perform tests through PayU, you need to use the following credentials in the request, depending on the country of your account:\n   Merchant ID API Login API Key Public Key accountId Country     508029 pRRXKOl8ikMmt9u 4Vj8eK4rloUd272L48hsrarnUA PKaC6H4cEDJD919n705L544kSU 512322 Argentina   512327 Brazil   512325 Chile   512321 Colombia   512324 Mexico   512326 Panama   512323 Peru    The test environment does not replicate data from your production account.\nTest cards You can use the following cards for testing:\n Argentina    Card Number     AMEX Credit Card 376414000000009   ARGENCARD Credit Card 5011050000000001   CABAL Credit Card 5896570000000008   CENCOSUD Credit Card 6034930000000005 - 5197670000000002   DINERS Credit Card 36481400000006   MASTERCARD Credit Card 5399090000000009   NARANJA Credit Card 5895620000000002   SHOPPING Credit Card 6034880000000051   VISA Credit Card 4850110000000000 - 4036820000000001   VISA Debit Card 4517730000000000      Brazil    Card Number     AMEX Credit Card 376611000000000   DINERS Credit Card 36213800000009   ELO Credit Card 5067310000000002   HIPERCARD Credit Card 6062825624254001   MASTERCARD Credit Card 5123740000000002   VISA Credit Card 4422120000000008 - 4984460000000008      Chile    Card Number     AMEX Credit Card 377825000000005   DINERS Credit Card 36525200000002   MASTERCARD Credit Card 5435630000000008   VISA Credit Card 4051885600446623 - 4938590000000017      Colombia    Card Number     AMEX Credit Card 377813000000001 - 377847626810864 - 376402004977124 - 376414000000009   CODENSA Credit Card 5907120000000009   CRM Credit Card 5282096712463427   DAVIVIENDA Credit Card 5247081012761500   DINERS Credit Card 36032400000007 - 36032404150519 - 36032440201896   MASTERCARD Credit Card 5471300000000003 - 5120697176068275   NEQUI Credit Card 4093551018099251   VISA Credit Card 4097440000000004 - 4037997623271984 - 4111111111111111   VISA Debit Card 4509420000000008      Mexico    Card Number     AMEX Credit Card 376675000000005   MASTERCARD Credit Card 5579070000000003   MASTERCARD Debit Card 5256780000000007   VISA Credit Card 4268070000000002   VISA Debit Card 4415490000000004      Panama    Card Number     MASTERCARD Credit Card 5455040000000005   VISA Credit Card 4723030000000005      Peru    Card Number     AMEX Credit Card 377753000000009   DINERS Credit Card 36239200000000   MASTERCARD Credit Card 5491610000000001   MASTERCARD Debit Card 5236930000000003   VISA Credit Card 4907840000000005 - 4634010000000005   VISA Debit Card 4557880000000004     Testing status When testing Payments, you must send in the request:\n To get approved transactions:  Send APPROVED in the name of the cardholder. Send 777 in the CVV of the card (for AMEX, use 7777). The test parameter and the description also define the state. If it doesn\u0026rsquo;t work with test set as false, change its value to true. Send the month of the expiration date of the card less than 6 and the year must be 2023 or higher. Example: 05/2025.   To get declined transactions:  Send REJECTED in the name of the cardholder. Send 666 in the CVV of the card (for AMEX, use 6666). The test parameter and the description also define the state. If it doesn\u0026rsquo;t work with test set as false, change its value to true. Send the month of the expiration date of the card higher than 6 and the year must be 2023 or higher. Example: 07/2027.   To get pending transactions:  Send PENDING in the name of the cardholder. Send 777 in the CVV of the card (for AMEX, use 7777). Send the test parameter as true. In the buyer and payer information, set the email as manual-reviewhub@email.com.   For the card number you must enter a valid number, corresponding to the franchise sent in the request. You can use an online card generator for testing purposes or use one of the cards available for your country mentioned before. To test PSE bank transfers (Available in Colombia) in the PayU Sandbox environment, see the PSE Test Guide (PDF).  Importing the Collection Click the button below to import our collection in Postman (you may need to refresh the page if the button does not work for you). Note that we create a new environment each time you import the collection.\n (function (p,o,s,t,m,a,n) { !p[s] \u0026\u0026 (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); }); !o.getElementById(s+t) \u0026\u0026 o.getElementsByTagName(\"head\")[0].appendChild(( (n = o.createElement(\"script\")), (n.id = s+t), (n.async = 1), (n.src = m), n )); }(window, document, \"_pm\", \"PostmanRunObject\", \"https://run.pstmn.io/button.js\"));  After you run the collection, you need to set the environment variables and the globals.\nSetting your Environment Variables Our collection has one environment named PayU API Sandbox. We recommend you invoke the collection’s API requests in a Sandbox environment only.\nIf you want to change the PayU\u0026rsquo;s testing accounts, configure the api_key, api_login, merchant_id and account-[country] variables. You can leave all the other variables unchanged.\nImporting globals Globals are the variables required to process transactions in our Payment gateway such as currency, transaction amount, confirmation and response pages and more.\nImport the globals for the collection to configure the values sent to the requests.\n  Download the globals file here.\n  In the Postman collection, click Import next to your workspace name and locate the json file recently downloaded.\n  When finish, click Import.\n  To change the amount of a transaction, update the value for the tx_value_[Country] according to the country you want to test.\nRunning the Requests in the Correct Order Beware that the order in which you run the requests is important, since some of the data returned by one request may be used in the next invocation.\n","excerpt":"If you want to perform tests through PayU, you need to use the following credentials in the request, …","ref":"/en/docs/getting-started/test-your-solution.html","title":"Test Your Solution"},{"body":"The Operation Reports suggested by the National Banking and Securities Commission (CNBV) are monthly reports with a validity of three (3) months. That is, during the current month you can download the reports for the month immediately preceding and the two months prior to this.\nNote To have access to this module, you need to have a profile with the permission Operation reports \u0026gt; Consult operation reports enabled.\nRefer to Profiles and Permissions for more information.\n Download the reports Log into your PayU account. In the left menu, expand the Transactions menu and select Operation reports.\nSelect the month of the operations and the report types you want to generate. Then, click Download.\nAs mentioned before, you can only generate reports for the three earlier months.\nAs soon as the selected reports are generated, a zip folder is automatically downloaded with the reports in .xlsx format.\nThe following sections explain the reports you can generated along with their columns.\nNote If you don\u0026rsquo;t have transactions in the selected month, the reports downloaded are standard template filled with zeros.  Transaction charges This report can be generated for a given month and it has the following fields (in Spanish):\n    Field Description     A Monto Facturado Total Total value in pesos (MXN) of the trasnactions of the month.   B Número de pagos debidamente autorizados Number of authorized payments of the month.   C Tasa de descuento (%) The commission charged by the acquirer bank to the commerces for install Points of Sale (TPV - Terminal Punto de Venta) and provide the access to the network which enables the acceptance of payments with bank cards. Processing commission fixed and/or variable.   D Monto cargado por tasa de descuento The resultant value in pesos (MXN) after applying the percentage of the discount rate (Tasa de descuento). Namely, Column A × Column C .   E Cuotas por otros conceptos o penalizaciones Further charges in addition to the discount rate (Tasa de descuento).   F Monto total por servicios de recepción de pagos con tarjeta The result of sum the Column D and Column E, if applies.    Commissions for other concepts or penalties This a detailed report for Column C (Cuotas por otros conceptos o penalizaciones) in the Transaction Charges Report. This report can be generated for a given month and includes all the concepts in the month and the sum of each one.\nTPVs related charge To download this report, unselect the checkboxes Transaction charges and Commissions for other concepts or penalties. This report can be generated for a given month and it has the following fields (in Spanish):\n   Field Description      Uso de las terminales punto de venta Amount in pesos (MXN) charged to the customer for the use of the Point of Sale (TPV - Terminal Punto de Venta).    Mantenimiento de las terminales punto de venta* Amount charged to the client for the maintaining of the Point of Sale (TPV - Terminal Punto de Venta).    Uso de aplicaciones tecnológicas de recepción de Pagos con Tarjeta* Amount charged to the client for using the app.    Cuotas por incumplimiento en facturación mínima / penalizaciones* Amount charged to the client in case they incur in a breach or penalty for minimum invoicing    Total cargos relacionados a terminales punto de venta The result of the sum of all the concepts related to the Point of Sale (TPV - Terminal Punto de Venta).     *Specify the periodicity: monthly, annual, etc.\n","excerpt":"The Operation Reports suggested by the National Banking and Securities Commission (CNBV) are monthly …","ref":"/en/payu-module-documentation/reports/operation-reports.html","title":"Operation reports"},{"body":"Los reportes de operaciones sugeridos por la Comisión Nacional Bancaria y de Valores (CNBV) son reportes mensuales con una vigencia de tres (3) meses. Es decir, durante el mes en curso se podrá descargar los reportes del mes inmediatamente anterior y los dos meses anteriores a este.\nNota Para tener acceso a este módulo, necesitas un perfil con el permiso Operation reports \u0026gt; Consult operation reports activado.\nConsulta Perfiles y Permisos para más información.\n Descargar los reportes Ingresa a tu cuenta PayU. En el menú de la izquierda, expande el menú Transacciones y selecciona Reporte de operaciones.\nSelecciona el mes de las operaciones y los tipos de reportes que deseas generar y luego, haz clic en Descargar.\nComo se mencionó anteriormente, solo puedes generar reportes para los tres meses anteriores.\nTan pronto como se generan los reportes seleccionados, se descarga automáticamente una carpeta comprimida con los reportes en formato .xlsx.\nLas siguientes secciones explican los reportes que puedes generar junto con sus columnas.\nNote Si no tienes transacciones en el mes seleccionado, los reportes descargados corresponden a una plantilla estándar con valores en cero.  Cargos por transacciones Este reporte se puede generar para un mes determinado y tiene los siguientes campos:\n    Campo Descripción     A Monto Facturado Total Valor total en pesos (MXN) de las transacciones del mes.   B Número de pagos debidamente autorizados Número de pagos autorizados del mes.   C Tasa de descuento (%) La comisión que cobra el banco adquirente a los comercios por instalar Puntos de Venta (TPV) y brindar el acceso a la red que permite la aceptación de pagos con tarjetas bancarias. Comisión de tramitación fija y/o variable.   D Monto cargado por tasa de descuento El valor resultante en pesos (MXN) después de aplicar el porcentaje de la Tasa de descuento. Es decir, Columna A × Columna C.   E Cuotas por otros conceptos o penalizaciones Cargos adicionales además de la Tasa de descuento.   F Monto total por servicios de recepción de pagos con tarjeta El resultado de sumar la Columna D y la Columna E, si aplica.    Comisiones por otros conceptos o penalizaciones Este es un reporte detallado de la Columna C (Cuotas por otros conceptos o penalizaciones) en el Reporte de Cargos por transacciones. Este reporte se puede generar para un mes determinado e incluye todos los conceptos del mes y la suma de cada uno.\nCargos relacionados a las TPVs Para descargar este reporte, desmarca las casillas Cargos por transacciones y Comisiones por otros conceptos o penalizaciones. Este reporte se puede generar para un mes determinado y tiene los siguientes campos:\n   Campo Descripción      Uso de las terminales punto de venta Importe en pesos (MXN) cobrado al cliente por el uso del Terminal Punto de Venta (TPV).    Mantenimiento de las terminales punto de venta * Importe cobrado al cliente por el mantenimiento del Terminal Punto de Venta (TPV).    Uso de aplicaciones tecnológicas de recepción de Pagos con Tarjeta * Importe cobrado al cliente por usar la aplicación tecnológica.    Cuotas por incumplimiento en facturación mínima / penalizaciones * Importe que se cobra al cliente en caso de que incurra en algún incumplimiento o penalización por facturación mínima.    Total cargos relacionados a terminales punto de venta El resultado de la suma de todos los conceptos relacionados con el Terminal Punto de Venta (TPV).     *Especifica la periodicidad: mensual, anual, etc.\n","excerpt":"Los reportes de operaciones sugeridos por la Comisión Nacional Bancaria y de Valores (CNBV) son …","ref":"/es/payu-module-documentation/reports/operation-reports.html","title":"Reporte de operaciones"},{"body":"PayU proporciona un conjunto de reportes a los que puedes acceder desde el Módulo PayU con el fin de que tengas el control de las operaciones que realizas.\nNota Los reportes en el Módulo PayU están limitados a 20 mil filas para visualización y descarga. Si necesitas tener reportes personalizados o mostrar más información, comunícate con tu representante de ventas.  Mis reportes descargados Cuando descargas un reporte, los archivos generados se guardan en esta sección para que puedas descargarlos más tarde cuando los necesites. PayU mantiene los reportes almacenados aquí durante 90 días.\nNota Esta sección no almacena los certificados de retenciones colombianos.  Para abrir esta sección, ve a cualquiera de los reportes disponibles y haz clic en el botón Mis descargas ubicado en la parte superior e inferior de la tabla de reporte.\nAparece la sección Mis reportes descargados listando los últimos reporte generados en los últimos 90 días. Ten en cuenta que los registros más recientes puede que no estén listos aún, si generaste un reporte recientemente y no está en la tabla, intenta más tarde.\nPara descargar un reporte, utiliza el ícono de descarga .\nReportes disponibles PayU proporciona los siguientes reportes para monitorear tu cuenta.\n","excerpt":"PayU proporciona un conjunto de reportes a los que puedes acceder desde el Módulo PayU con el fin de …","ref":"/es/payu-module-documentation/reports.html","title":"Reportes"},{"body":"PayU provides a set of reports which can be accessible from the PayU Module to let you have control of the operations you perform with PayU.\nNote Reports in the PayU module are limited to 20 thousand rows for both displaying and downloading. If you need to have custom reports or display more information, contact your sales representative.  My downloaded reports When you download a report, the generated fils is saved in this section to let you download it later as you require. PayU keeps the reports stored here for 90 days.\nNote This section does not store the Colombian Withholding certificates.  To open this section, go to any of the available reports and click My downloads button located at the top and the bottom of the report table.\nThe My downloaded reports section appears listing the latest reports generated in the last 90 days. Take into account that newest download records may not be ready yet, if you requested a report recently and is not in the table, try again later.\nTo download a report, use the download icon .\nReports available PayU provides the following reports to monitor your account.\n","excerpt":"PayU provides a set of reports which can be accessible from the PayU Module to let you have control …","ref":"/en/payu-module-documentation/reports.html","title":"Reports"},{"body":"Estas secciones explican cómo integrarte utilizando Promociones o MSI (Solo disponible para México).\nPromociones Esta funcionalidad te permite consultar vía API, las promociones vigentes, sus características e información adicional que quieres presentarle a tus clientes.\nUna Promoción tiene el método de pago, los días de la semana en los que aplica, la lista de bancos y la fecha de inicio y final en la que aplica la promoción.\nAutenticación para Promociones Para promociones, necesitar autenticar y autorizar las peticiones recibidas por tu servidor, utilizando un mecanismo basado en HMAC. Para autenticarte, necesitas saber tu MerchantPublicKey, puedes obtener esta información en el Módulo PayU (Configuración \u0026gt; Configuración técnica \u0026gt; Llave pública).\nConfigurar la autenticación Debes incluir los encabezados Authorization y Date. El encabezado Authorization tiene esta estructura:\n\u0026#34;Hmac\u0026#34; + \u0026#34; \u0026#34; + MerchantPublicKey + \u0026#34;:\u0026#34; + Signature \nDonde Signature se crea así:\nSignature = Base64(HMAC-SHA256(MerchantApiKey,ContentToSign)) \nY ContentToSign corresponde a:\nHTTP-Verb + \u0026#34;\\n\u0026#34; + \u0026#34;\\n\u0026#34; + \u0026#34;\\n\u0026#34; + Date + \u0026#34;\\n\u0026#34; + URI  Nota Es obligatorio incluir tres saltos de línea (\\n) luego de HTTP-Verb  Los siguientes ejemplos muestran cómo crear el encabezado de Autenticación utilizando los siguientes valores de prueba:\nContentToSign:\nGET Fri, 28 Apr 2017 18:32:01 GMT /payments-api/rest/v4.9/pricing \nMerchantApiKey:\n4Vj8eK4rloUd272L48hsrarnUA \nMerchantPublicKey:\nPKaC6H4cEDJD919n705L544kSU \nEncripta el ContentToSign utilizando MerchantApiKey como frase de contraseña. Luego, concatena el resultado con el MerchantPublicKey como se explicó anteriormente, el resultado es:\nAuthorization\nHmac PKaC6H4cEDJD919n705L544kSU:sIxh54sANfKaxO0ugX6QwhPmZRS+TGy8gmdCwr3kjP0= \nPara evitar ataques de repetición, envía el encabezado Date siguiendo este formato:\nDate\nMon, 11 May 2015 21:14:41 GMT \nDebido a algunas restricciones en clientes REST, también puedes enviar el encabezado x-hmac-date para cumplir con requerimientos de seguridad, este encabezado sigue el mismo formato utilizado en Date:\nx-hmac-date\nMon, 11 May 2015 21:14:41 GMT Consultar la promociones disponibles Para consultar las promociones disponibles con el API de promociones, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: GET https://sandbox.api.payulatam.com/payments-api/rest/v4.9/pricing Producción: GET https://api.payulatam.com/payments-api/rest/v4.9/pricing   Como este es un servicio RESTful, recomendamos no validar el esquema. Si no validas el esquema, la integración so se verá afectada y solo necesitarás hacer ajustes menores para implementar nuevas funcionalidades cuando se actualice el Servicio Web.\nVariables para la petición y la respuesta  Petición (Request)     Parámetro Descripción Obligatorio     accountId Identifier of your account. Sí   currency Currency of your account No   amount Amount of the purchase Sí   paymentMethod Send this method if you want to filter the Promotions by Payment method. No      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     promotion \u0026gt; id Entero  Identificador de la promoción en la plataforma de PayU.   promotion \u0026gt; title String 50 Título de la promoción.   promotion \u0026gt; termsAndConditions String 250 Términos y condiciones que aplican a la promoción.   promotion \u0026gt; paymentMethod String  Nombre del método de pago disponible para la promoción.   promotion \u0026gt; subFranchise String  Nombre de la submarca/subfranquicia de un método de pago dado.   promotion \u0026gt; banks Lista  Lista de los bancos donde aplica la promoción.   promotion \u0026gt; iins Lista  Lista de los IIN/BINES de los bancos donde aplica la promoción.   promotion \u0026gt; days Lista  Lista de los días donde aplica la promoción.   promotion \u0026gt; startDate Fecha y hora  Fecha en la que empieza la promoción.   promotion \u0026gt; endDate Fecha y hora  Fecha en la que finaliza la promoción.   paymentMethodFee Lista  Descripción del costo asumido por el comercio de acuerdo con el método de pago.   paymentMethodFee \u0026gt; paymentMethodFeeDetail.paymentMethod String  Nombre del método de pago.   paymentMethodFeeDetail \u0026gt; pricingFees   Objeto que contiene todos los Pricing para un método de pago y cuota o un conjunto de cuotas (para el caso de países que tienen rango de cuotas).   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; installments String  Cuota(1) o un conjunto de cuotas (1 - 36, para el caso de países que tienen rango de cuotas).   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing   Contiene los valores de Pricing por defecto para la transacción.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail   Contiene los valores de intereses y comisiones que se aplicarán al pagador.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; commission Decimal  Total de comisiones a aplicar al pagador, incluye comisiones e impuestos sobre comisiones si aplica.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; interests Decimal  Total de intereses a aplicar al pagador, incluye intereses e impuestos sobre intereses si aplica.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; total Decimal  El total del valor a pagar por el pagador por concepto de comisiones e intereses.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; commission Merchant Detail  Total de comisiones a aplicar al comercio, incluye Comisiones e Impuestos sobre comisiones si aplica.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; interests Decimal  Total de intereses a aplicar al comercio, incluye intereses e Impuestos sobre intereses si aplica.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; total Decimal  Total del valor a pagar por el comercio por concepto de comisiones e intereses.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; totalValue Decimal  Total del pago, es el valor enviado por el comercio más las comisiones e intereses que correspondan al pagador.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; totalIncomeTransaction Decimal  Ingreso total de la transacción.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo   Información de la Tasa de interés efectiva anual (TEA) aplicada y el Costo financiero total (CFT).\nEsta información solo está disponible para Argentina.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo \u0026gt; cft Decimal  Costo financiero total.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo \u0026gt; tea Decimal  Tasa de interés efectiva anual aplicada.     Llamado del API Para consultar las promociones disponibles, envía la petición así:\nGET https://{env-api}.payulatam.com/payments-api/rest/v4.9/pricing?accountId={accountId}\u0026amp;currency={currency}\u0026amp;amount={amount}\u0026amp;paymentMethod={paymentMethod} \nEl valor de la variable {env-api} mostrado es sandbox.api para pruebas y api para producción. Además, el parámetro paymentMethod es opcional si quieres filtrar por un método de pago dado. Ejemplo:\nGET https://sandbox.api.payulatam.com/payments-api/rest/v4.9/pricing?accountId=512322\u0026amp;currency=ARS\u0026amp;amount=1000 \nEjemplo respuesta:\n JSON XML   { \u0026#34;amount\u0026#34;: { \u0026#34;value\u0026#34;: 1000.00, \u0026#34;tax\u0026#34;: 0, \u0026#34;purchaseValue\u0026#34;: 1000.00, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; }, \u0026#34;convertedAmount\u0026#34;: { \u0026#34;value\u0026#34;: 1000.00, \u0026#34;tax\u0026#34;: 0.00, \u0026#34;purchaseValue\u0026#34;: 1000.00, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; }, \u0026#34;promotions\u0026#34;: [ { \u0026#34;id\u0026#34;: 49, \u0026#34;title\u0026#34;: \u0026#34;Promotion_ID AMEX\u0026#34;, \u0026#34;termsAndConditions\u0026#34;: \u0026#34;SI\u0026#34;, \u0026#34;paymentMethodMain\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2018-08-16 18:48:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2090-08-16 18:48:00\u0026#34;, \u0026#34;days\u0026#34;: [ \u0026#34;MONDAY\u0026#34;, \u0026#34;TUESDAY\u0026#34;, \u0026#34;WEDNESDAY\u0026#34;, \u0026#34;THURSDAY\u0026#34;, \u0026#34;FRIDAY\u0026#34;, \u0026#34;SATURDAY\u0026#34;, \u0026#34;SUNDAY\u0026#34; ], \u0026#34;priority\u0026#34;: 10, \u0026#34;type\u0026#34;: \u0026#34;MSI\u0026#34; }, { \u0026#34;id\u0026#34;: 45, \u0026#34;title\u0026#34;: \u0026#34;Promotion Test - Master\u0026#34;, \u0026#34;termsAndConditions\u0026#34;: \u0026#34;Terminos y condiciones\u0026#34;, \u0026#34;paymentMethodMain\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2018-06-26 17:06:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2030-06-26 17:06:00\u0026#34;, \u0026#34;days\u0026#34;: [ \u0026#34;MONDAY\u0026#34;, \u0026#34;TUESDAY\u0026#34;, \u0026#34;WEDNESDAY\u0026#34;, \u0026#34;THURSDAY\u0026#34;, \u0026#34;FRIDAY\u0026#34;, \u0026#34;SATURDAY\u0026#34;, \u0026#34;SUNDAY\u0026#34; ], \u0026#34;priority\u0026#34;: 10, \u0026#34;type\u0026#34;: \u0026#34;MSI\u0026#34; } ], \u0026#34;paymentMethodFee\u0026#34;: [ { \u0026#34;paymentMethod\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;pricingFees\u0026#34;: [ { \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 171.29, \u0026#34;total\u0026#34;: 171.29 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1171.29, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;162%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;123.28%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 230.01, \u0026#34;total\u0026#34;: 230.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1230.01, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;107%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;83.97%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 340.05, \u0026#34;total\u0026#34;: 340.05 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1340.04, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;108%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;85.03%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 490.01, \u0026#34;total\u0026#34;: 490.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1490.02, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;119%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;93.68%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;18\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 641.38, \u0026#34;total\u0026#34;: 641.38 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1641.39, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;97%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;77.91%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;24\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 822.72, \u0026#34;total\u0026#34;: 822.72 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1822.72, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;90%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;72.47%\u0026#34; } } } ] }, { \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;pricingFees\u0026#34;: [ { \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } }, \u0026#34;promos\u0026#34;: [ { \u0026#34;id\u0026#34;: 49, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 1044.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 1044.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: -44.65, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } }, \u0026#34;priority\u0026#34;: 10 } ] }, { \u0026#34;installments\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 171.29, \u0026#34;total\u0026#34;: 171.29 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1171.29, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;162%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;123.28%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 230.01, \u0026#34;total\u0026#34;: 230.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1230.01, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;107%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;83.97%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 340.05, \u0026#34;total\u0026#34;: 340.05 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1340.04, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;108%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;85.03%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 490.01, \u0026#34;total\u0026#34;: 490.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1490.02, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;119%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;93.68%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;18\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 641.38, \u0026#34;total\u0026#34;: 641.38 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1641.39, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;97%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;77.91%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;24\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 822.72, \u0026#34;total\u0026#34;: 822.72 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1822.72, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;90%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;72.47%\u0026#34; } } } ] } ], \u0026#34;paymentTaxesDetails\u0026#34;: [], \u0026#34;taxesServiceFailed\u0026#34;: true }   \u0026lt;consultPriceListResponse xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34; xmlns:ns3=\u0026#34;http://wadl.dev.java.net/2009/02\u0026#34;\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;value\u0026gt;1000.00\u0026lt;/value\u0026gt; \u0026lt;tax\u0026gt;0\u0026lt;/tax\u0026gt; \u0026lt;purchaseValue\u0026gt;1000.00\u0026lt;/purchaseValue\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/amount\u0026gt; \u0026lt;convertedAmount\u0026gt; \u0026lt;value\u0026gt;1000.00\u0026lt;/value\u0026gt; \u0026lt;tax\u0026gt;0.00\u0026lt;/tax\u0026gt; \u0026lt;purchaseValue\u0026gt;1000.00\u0026lt;/purchaseValue\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/convertedAmount\u0026gt; \u0026lt;promotions\u0026gt; \u0026lt;promotion id=\u0026#34;49\u0026#34; title=\u0026#34;Promotion_ID AMEX\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;type\u0026gt;MSI\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;termsAndConditions\u0026gt;SI\u0026lt;/termsAndConditions\u0026gt; \u0026lt;startDate\u0026gt;2018-08-16 18:48:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2090-08-16 18:48:00\u0026lt;/endDate\u0026gt; \u0026lt;days\u0026gt; \u0026lt;day\u0026gt;MONDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;TUESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;WEDNESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;THURSDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;FRIDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SATURDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SUNDAY\u0026lt;/day\u0026gt; \u0026lt;/days\u0026gt; \u0026lt;/promotion\u0026gt; \u0026lt;promotion id=\u0026#34;45\u0026#34; title=\u0026#34;Promotion Test - Master\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;type\u0026gt;MSI\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;termsAndConditions\u0026gt;Terminos y condiciones\u0026lt;/termsAndConditions\u0026gt; \u0026lt;startDate\u0026gt;2018-06-26 17:06:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2030-06-26 17:06:00\u0026lt;/endDate\u0026gt; \u0026lt;days\u0026gt; \u0026lt;day\u0026gt;MONDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;TUESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;WEDNESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;THURSDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;FRIDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SATURDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SUNDAY\u0026lt;/day\u0026gt; \u0026lt;/days\u0026gt; \u0026lt;/promotion\u0026gt; \u0026lt;/promotions\u0026gt; \u0026lt;paymentMethodFee\u0026gt; \u0026lt;paymentMethodFeeDetail paymentMethod=\u0026#34;DINERS\u0026#34;\u0026gt; \u0026lt;pricingFees\u0026gt; \u0026lt;fee installments=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;171.29\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;171.29\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1171.29\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;162%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;123.28%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;230.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;230.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1230.01\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;107%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;83.97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;9\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;340.05\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;340.05\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1340.04\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;108%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;85.03%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;490.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;490.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1490.02\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;119%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;93.68%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;18\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;641.38\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;641.38\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1641.39\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;77.91%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;822.72\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;822.72\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1822.72\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;90%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;72.47%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;/pricingFees\u0026gt; \u0026lt;/paymentMethodFeeDetail\u0026gt; \u0026lt;paymentMethodFeeDetail paymentMethod=\u0026#34;AMEX\u0026#34;\u0026gt; \u0026lt;pricingFees\u0026gt; \u0026lt;fee installments=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;promos\u0026gt; \u0026lt;promo id=\u0026#34;49\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;1044.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;1044.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;-44.65\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/promo\u0026gt; \u0026lt;/promos\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;171.29\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;171.29\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1171.29\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;162%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;123.28%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;230.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;230.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1230.01\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;107%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;83.97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;9\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;340.05\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;340.05\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1340.04\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;108%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;85.03%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;490.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;490.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1490.02\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;119%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;93.68%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;18\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;641.38\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;641.38\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1641.39\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;77.91%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;822.72\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;822.72\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1822.72\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;90%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;72.47%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;/pricingFees\u0026gt; \u0026lt;/paymentMethodFeeDetail\u0026gt; \u0026lt;/paymentMethodFee\u0026gt; \u0026lt;paymentTaxesDetails/\u0026gt; \u0026lt;taxesServiceFailed\u0026gt;true\u0026lt;/taxesServiceFailed\u0026gt; \u0026lt;/consultPriceListResponse\u0026gt;    Realizar una transacción con Promociones Una vez hayas seleccionado la promoción, necesitas incluir su ID y el número de cuotas como un extra parámetro:\n JSON XML   \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: (Número de cuotas), \u0026#34;PROMOTION_ID\u0026#34;: (ID de la promoción seleccionada) }   \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Número de cuotas\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PROMOTION_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;ID de la promoción seleccionada\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt;    Para saber cómo incluir estos extra parámetros, consulta el API de pagos para Argentina y México.\nMSI - Meses Sin Intereses Si tu cuenta está en México, puedes ofrecerle a tus clientes la opción de pagar en un determinado número de cuotas sin intereses. Si quiere habilitar esta funcionalidad, contacta a tu representante de ventas.\nConsideraciones  Los números de cuotas soportadas son 3, 6, 9, 12 o 18. Los valores mínimo de MSI dependen del número de cuotas seleccionadas:  3 \u0026gt; $300 MXN 6 \u0026gt; $600 MXN 9 \u0026gt; $900 MXN 12 \u0026gt; $1200 MXN 18 \u0026gt; $1800 MXN   Los bancos disponibles para MSI son: BANAMEX, BANCO REGIONAL DE MONTERREY S.A, BANCOPPEL, BANCO AZTECA, SCOTIABANK, HSBC, INBURSA, BANCA MIFEL SA, BANCO MULTIVA, BAJIO, CI BANCO, Afirme, Banregio, Banjercito, Banorte, Famsa, Invex, Premium Card Liverpool, Santander y Bancomer. Cuando utilices MSI, muestra siempre la frase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; durante el proceso de pago.  Variables para MSI Para utilizar MSI, necesitas incluir el número de meses como un extra parámetro:\n JSON XML   \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: (Número de meses) }   \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Número de meses\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt;    Para saber cómo incluir estos extra parámetros, consulta el API de pagos de México.\n","excerpt":"Estas secciones explican cómo integrarte utilizando Promociones o MSI (Solo disponible para México). …","ref":"/es/docs/integrations/api-integration/promotions-api.html","title":"API de Promociones para Argentina y México"},{"body":"These sections explains how to integrate using Promotions or using MSI (Only Available for Mexico).\nPromotions This feature lets you consult via API, the promotions in force, their characteristics and further information you want to present to the customers.\nA Promotion has the payment method, the days of the week when it applies, the list of banks, and the start and end date when the promotion applies.\nAuthentication for Promotions For Promotions, you need to authenticate and authorize the petitions received by your server using a HMAC based mechanism. To authenticate, you need to know your MerchantPublicKey, you can get this information in your PayU Module (Settings \u0026gt; Technical configuration \u0026gt; Public Key).\nConfiguring the authentication You must include the headers Authorization and Date. The Authorization header follows this structure:\n\u0026#34;Hmac\u0026#34; + \u0026#34; \u0026#34; + MerchantPublicKey + \u0026#34;:\u0026#34; + Signature \nWhere Signature is created as follows:\nSignature = Base64(HMAC-SHA256(MerchantApiKey,ContentToSign)) \nAnd ContentToSign corresponds to:\nHTTP-Verb + \u0026#34;\\n\u0026#34; + \u0026#34;\\n\u0026#34; + \u0026#34;\\n\u0026#34; + Date + \u0026#34;\\n\u0026#34; + URI  Note It is mandatory to include the three line breaks (\\n) after the HTTP-Verb  The following examples shows how to create the Authentication header using the following test values:\nContentToSign:\nGET Fri, 28 Apr 2017 18:32:01 GMT /payments-api/rest/v4.9/pricing \nMerchantApiKey:\n4Vj8eK4rloUd272L48hsrarnUA \nMerchantPublicKey:\nPKaC6H4cEDJD919n705L544kSU \nCrypt the ContentToSign using MerchantApiKey as passphrase. Then, concatenate the result with the MerchantPublicKeyas explained before, the result is as follows:\nAuthorization\nHmac PKaC6H4cEDJD919n705L544kSU:sIxh54sANfKaxO0ugX6QwhPmZRS+TGy8gmdCwr3kjP0= \nTo avoid replay attacks, send the header Date following this format:\nDate\nMon, 11 May 2015 21:14:41 GMT \nDue to some restrictions in REST clients, you can also send the x-hmac-date header to meet security requirements, this header follows the same format used in Date:\nx-hmac-date\nMon, 11 May 2015 21:14:41 GMT Consult available promotions To consult the promotions available with Promotions API, target your request to the following URLs according to your environment.\nURL  Test: GET https://sandbox.api.payulatam.com/payments-api/rest/v4.9/pricing Production: GET https://api.payulatam.com/payments-api/rest/v4.9/pricing   As this is a RESTful service, we strongly recommend you do not validate the scheme. If the schema is not validated, the integration is not affected, and you only need to perform small changes to implement new features when an update is added to the Web Service.\nVariables for request and response  Request parameters     Parameter Description Mandatory     accountId Identifier of your account. Yes   currency Currency of your account No   amount Amount of the purchase Yes   paymentMethod Send this method if you want to filter the Promotions by Payment method. No      Response     Field name Format Size Description     promotion \u0026gt; id Integer  Identifier of promotion in PayU platform.   promotion \u0026gt; title String 50 Promotion title.   promotion \u0026gt; termsAndConditions String 250 Terms and conditions applicable to the promotion.   promotion \u0026gt; paymentMethod String  Name of the payment method available for the promotion.   promotion \u0026gt; subFranchise String  Name of sub-brand/sub-franchise of a given payment method.   promotion \u0026gt; banks List  List of banks where the promotion applies.   promotion \u0026gt; iins List  List of the bank IIN/BINES where the promotion applies.   promotion \u0026gt; days List  List of days where the promotion applies.   promotion \u0026gt; startDate Datetime  Date when promotion starts.   promotion \u0026gt; endDate Datetime  Date when promotion ends.   paymentMethodFee List  Description of the cost assumed by the merchant according to a payment method.   paymentMethodFee \u0026gt; paymentMethodFeeDetail.paymentMethod String  Name of the payment method.   paymentMethodFeeDetail \u0026gt; pricingFees   Object that has all the pricing for a payment method and installment, or all the installment (for countries that have a installment-based system).   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; installments String  Installment (1) or set of installments (1-36 for countries with installment-based ranges).   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing   It has the Pricing values by default for the transaction.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail   It has the values of interests and fees that will be applied to the payer.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; commission Decimal  Total fees to be applied to the payer, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; interests Decimal  Total interests to be applied to the payer, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; payerDetail \u0026gt; total Decimal  The total value to be paid by the payer for fees and interests.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; commission Merchant Detail  Total fees to be applied to the business, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; interests Decimal  Total interests to be applied to the business, includes fees and taxes, if applicable.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; merchantDetail \u0026gt; total Decimal  The total value to be paid by the business because of fees and interests.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; totalValue Decimal  Payment total, is the value submitted by the business plus the fees and interests that may correspond to the payer.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; totalIncomeTransaction Decimal  Total income of the transaction.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo   Information of the annual effective interest rate (TEA) applied and the total financial cost (CFT).\nThis information is available for Argentina.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo \u0026gt; cft Decimal  Total Financial Cost applied.   paymentMethodFeeDetail \u0026gt; pricingFees \u0026gt; fee \u0026gt; pricing \u0026gt; additionalInfo \u0026gt; tea Decimal  Annual Effective Interest rate applied.     API Call To consult the available promotions, send the request as follows:\nGET https://{env-api}.payulatam.com/payments-api/rest/v4.9/pricing?accountId={accountId}\u0026amp;currency={currency}\u0026amp;amount={amount}\u0026amp;paymentMethod={paymentMethod} \nThe value for the variable {env-api} displayed above is sandbox.api for testing and api for production mode. Furthermore, the paymentMethod parameter is optional if you want to filter by a given payment method. Example:\nGET https://sandbox.api.payulatam.com/payments-api/rest/v4.9/pricing?accountId=512322\u0026amp;currency=ARS\u0026amp;amount=1000 \nResponse example:\n JSON XML   { \u0026#34;amount\u0026#34;: { \u0026#34;value\u0026#34;: 1000.00, \u0026#34;tax\u0026#34;: 0, \u0026#34;purchaseValue\u0026#34;: 1000.00, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; }, \u0026#34;convertedAmount\u0026#34;: { \u0026#34;value\u0026#34;: 1000.00, \u0026#34;tax\u0026#34;: 0.00, \u0026#34;purchaseValue\u0026#34;: 1000.00, \u0026#34;currency\u0026#34;: \u0026#34;ARS\u0026#34; }, \u0026#34;promotions\u0026#34;: [ { \u0026#34;id\u0026#34;: 49, \u0026#34;title\u0026#34;: \u0026#34;Promotion_ID AMEX\u0026#34;, \u0026#34;termsAndConditions\u0026#34;: \u0026#34;SI\u0026#34;, \u0026#34;paymentMethodMain\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2018-08-16 18:48:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2090-08-16 18:48:00\u0026#34;, \u0026#34;days\u0026#34;: [ \u0026#34;MONDAY\u0026#34;, \u0026#34;TUESDAY\u0026#34;, \u0026#34;WEDNESDAY\u0026#34;, \u0026#34;THURSDAY\u0026#34;, \u0026#34;FRIDAY\u0026#34;, \u0026#34;SATURDAY\u0026#34;, \u0026#34;SUNDAY\u0026#34; ], \u0026#34;priority\u0026#34;: 10, \u0026#34;type\u0026#34;: \u0026#34;MSI\u0026#34; }, { \u0026#34;id\u0026#34;: 45, \u0026#34;title\u0026#34;: \u0026#34;Promotion Test - Master\u0026#34;, \u0026#34;termsAndConditions\u0026#34;: \u0026#34;Terminos y condiciones\u0026#34;, \u0026#34;paymentMethodMain\u0026#34;: \u0026#34;MASTERCARD\u0026#34;, \u0026#34;startDate\u0026#34;: \u0026#34;2018-06-26 17:06:00\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2030-06-26 17:06:00\u0026#34;, \u0026#34;days\u0026#34;: [ \u0026#34;MONDAY\u0026#34;, \u0026#34;TUESDAY\u0026#34;, \u0026#34;WEDNESDAY\u0026#34;, \u0026#34;THURSDAY\u0026#34;, \u0026#34;FRIDAY\u0026#34;, \u0026#34;SATURDAY\u0026#34;, \u0026#34;SUNDAY\u0026#34; ], \u0026#34;priority\u0026#34;: 10, \u0026#34;type\u0026#34;: \u0026#34;MSI\u0026#34; } ], \u0026#34;paymentMethodFee\u0026#34;: [ { \u0026#34;paymentMethod\u0026#34;: \u0026#34;DINERS\u0026#34;, \u0026#34;pricingFees\u0026#34;: [ { \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 171.29, \u0026#34;total\u0026#34;: 171.29 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1171.29, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;162%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;123.28%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 230.01, \u0026#34;total\u0026#34;: 230.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1230.01, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;107%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;83.97%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 340.05, \u0026#34;total\u0026#34;: 340.05 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1340.04, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;108%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;85.03%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 490.01, \u0026#34;total\u0026#34;: 490.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1490.02, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;119%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;93.68%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;18\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 641.38, \u0026#34;total\u0026#34;: 641.38 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1641.39, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;97%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;77.91%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;24\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 822.72, \u0026#34;total\u0026#34;: 822.72 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1822.72, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;90%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;72.47%\u0026#34; } } } ] }, { \u0026#34;paymentMethod\u0026#34;: \u0026#34;AMEX\u0026#34;, \u0026#34;pricingFees\u0026#34;: [ { \u0026#34;installments\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } }, \u0026#34;promos\u0026#34;: [ { \u0026#34;id\u0026#34;: 49, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 0.00 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 1044.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 1044.65 }, \u0026#34;totalValue\u0026#34;: 1000.00, \u0026#34;totalIncomeTransaction\u0026#34;: -44.65, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;0%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;0%\u0026#34; } }, \u0026#34;priority\u0026#34;: 10 } ] }, { \u0026#34;installments\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 171.29, \u0026#34;total\u0026#34;: 171.29 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1171.29, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;162%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;123.28%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 230.01, \u0026#34;total\u0026#34;: 230.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1230.01, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;107%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;83.97%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;9\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 340.05, \u0026#34;total\u0026#34;: 340.05 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1340.04, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;108%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;85.03%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;12\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 490.01, \u0026#34;total\u0026#34;: 490.01 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1490.02, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;119%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;93.68%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;18\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 641.38, \u0026#34;total\u0026#34;: 641.38 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1641.39, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;97%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;77.91%\u0026#34; } } }, { \u0026#34;installments\u0026#34;: \u0026#34;24\u0026#34;, \u0026#34;pricing\u0026#34;: { \u0026#34;payerDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 0.00, \u0026#34;interests\u0026#34;: 822.72, \u0026#34;total\u0026#34;: 822.72 }, \u0026#34;merchantDetail\u0026#34;: { \u0026#34;commission\u0026#34;: 44.65, \u0026#34;interests\u0026#34;: 0.00, \u0026#34;total\u0026#34;: 44.65 }, \u0026#34;totalValue\u0026#34;: 1822.72, \u0026#34;totalIncomeTransaction\u0026#34;: 955.35, \u0026#34;additionalInfo\u0026#34;: { \u0026#34;cft\u0026#34;: \u0026#34;90%\u0026#34;, \u0026#34;tea\u0026#34;: \u0026#34;72.47%\u0026#34; } } } ] } ], \u0026#34;paymentTaxesDetails\u0026#34;: [], \u0026#34;taxesServiceFailed\u0026#34;: true }   \u0026lt;consultPriceListResponse xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34; xmlns:ns3=\u0026#34;http://wadl.dev.java.net/2009/02\u0026#34;\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;value\u0026gt;1000.00\u0026lt;/value\u0026gt; \u0026lt;tax\u0026gt;0\u0026lt;/tax\u0026gt; \u0026lt;purchaseValue\u0026gt;1000.00\u0026lt;/purchaseValue\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/amount\u0026gt; \u0026lt;convertedAmount\u0026gt; \u0026lt;value\u0026gt;1000.00\u0026lt;/value\u0026gt; \u0026lt;tax\u0026gt;0.00\u0026lt;/tax\u0026gt; \u0026lt;purchaseValue\u0026gt;1000.00\u0026lt;/purchaseValue\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/convertedAmount\u0026gt; \u0026lt;promotions\u0026gt; \u0026lt;promotion id=\u0026#34;49\u0026#34; title=\u0026#34;Promotion_ID AMEX\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;type\u0026gt;MSI\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;AMEX\u0026lt;/paymentMethod\u0026gt; \u0026lt;termsAndConditions\u0026gt;SI\u0026lt;/termsAndConditions\u0026gt; \u0026lt;startDate\u0026gt;2018-08-16 18:48:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2090-08-16 18:48:00\u0026lt;/endDate\u0026gt; \u0026lt;days\u0026gt; \u0026lt;day\u0026gt;MONDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;TUESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;WEDNESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;THURSDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;FRIDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SATURDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SUNDAY\u0026lt;/day\u0026gt; \u0026lt;/days\u0026gt; \u0026lt;/promotion\u0026gt; \u0026lt;promotion id=\u0026#34;45\u0026#34; title=\u0026#34;Promotion Test - Master\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;type\u0026gt;MSI\u0026lt;/type\u0026gt; \u0026lt;paymentMethod\u0026gt;MASTERCARD\u0026lt;/paymentMethod\u0026gt; \u0026lt;termsAndConditions\u0026gt;Terminos y condiciones\u0026lt;/termsAndConditions\u0026gt; \u0026lt;startDate\u0026gt;2018-06-26 17:06:00\u0026lt;/startDate\u0026gt; \u0026lt;endDate\u0026gt;2030-06-26 17:06:00\u0026lt;/endDate\u0026gt; \u0026lt;days\u0026gt; \u0026lt;day\u0026gt;MONDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;TUESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;WEDNESDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;THURSDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;FRIDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SATURDAY\u0026lt;/day\u0026gt; \u0026lt;day\u0026gt;SUNDAY\u0026lt;/day\u0026gt; \u0026lt;/days\u0026gt; \u0026lt;/promotion\u0026gt; \u0026lt;/promotions\u0026gt; \u0026lt;paymentMethodFee\u0026gt; \u0026lt;paymentMethodFeeDetail paymentMethod=\u0026#34;DINERS\u0026#34;\u0026gt; \u0026lt;pricingFees\u0026gt; \u0026lt;fee installments=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;171.29\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;171.29\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1171.29\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;162%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;123.28%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;230.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;230.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1230.01\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;107%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;83.97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;9\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;340.05\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;340.05\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1340.04\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;108%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;85.03%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;490.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;490.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1490.02\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;119%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;93.68%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;18\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;641.38\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;641.38\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1641.39\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;77.91%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;822.72\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;822.72\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1822.72\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;90%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;72.47%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;/pricingFees\u0026gt; \u0026lt;/paymentMethodFeeDetail\u0026gt; \u0026lt;paymentMethodFeeDetail paymentMethod=\u0026#34;AMEX\u0026#34;\u0026gt; \u0026lt;pricingFees\u0026gt; \u0026lt;fee installments=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;promos\u0026gt; \u0026lt;promo id=\u0026#34;49\u0026#34;\u0026gt; \u0026lt;priority\u0026gt;10\u0026lt;/priority\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;0.00\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;1044.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;1044.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1000.00\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;-44.65\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;0%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/promo\u0026gt; \u0026lt;/promos\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;171.29\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;171.29\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1171.29\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;162%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;123.28%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;6\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;230.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;230.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1230.01\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;107%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;83.97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;9\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;340.05\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;340.05\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1340.04\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;108%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;85.03%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;12\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;490.01\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;490.01\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1490.02\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;119%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;93.68%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;18\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;641.38\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;641.38\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1641.39\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;97%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;77.91%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;fee installments=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;pricing\u0026gt; \u0026lt;payerDetail\u0026gt; \u0026lt;commission\u0026gt;0.00\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;822.72\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;822.72\u0026lt;/total\u0026gt; \u0026lt;/payerDetail\u0026gt; \u0026lt;merchantDetail\u0026gt; \u0026lt;commission\u0026gt;44.65\u0026lt;/commission\u0026gt; \u0026lt;interests\u0026gt;0.00\u0026lt;/interests\u0026gt; \u0026lt;total\u0026gt;44.65\u0026lt;/total\u0026gt; \u0026lt;/merchantDetail\u0026gt; \u0026lt;totalValue\u0026gt;1822.72\u0026lt;/totalValue\u0026gt; \u0026lt;totalIncomeTransaction\u0026gt;955.35\u0026lt;/totalIncomeTransaction\u0026gt; \u0026lt;additionalInfo\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;cft\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;90%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;key\u0026gt;tea\u0026lt;/key\u0026gt; \u0026lt;value\u0026gt;72.47%\u0026lt;/value\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalInfo\u0026gt; \u0026lt;/pricing\u0026gt; \u0026lt;/fee\u0026gt; \u0026lt;/pricingFees\u0026gt; \u0026lt;/paymentMethodFeeDetail\u0026gt; \u0026lt;/paymentMethodFee\u0026gt; \u0026lt;paymentTaxesDetails/\u0026gt; \u0026lt;taxesServiceFailed\u0026gt;true\u0026lt;/taxesServiceFailed\u0026gt; \u0026lt;/consultPriceListResponse\u0026gt;    Execute a transaction with Promotions Once you have selected the promotion, you need to include the promotion ID an the number of installments as an extra parameter:\n JSON XML   \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: (Number of installments), \u0026#34;PROMOTION_ID\u0026#34;: (Promotion Id selected) }   \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Number of installments\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;PROMOTION_ID\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Promotion Id selected\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt;    To learn how to include these extra parameters, refer to the Payments API for Argentina and Mexico.\nMonths Without Interests (MSI - Meses Sin Intereses) If your account is in Mexico, you can offer to your customers the option to pay in a determined number of interest-free installments. If you want to enable this feature, contact your sale representative.\nConsiderations  The numbers of installments supported are 3, 6, 9, 12, or 18. The minimum values for MSI depends on the number of installments selected:  3 \u0026gt; $300 MXN 6 \u0026gt; $600 MXN 9 \u0026gt; $900 MXN 12 \u0026gt; $1200 MXN 18 \u0026gt; $1800 MXN   The available banks for MSI are: BANAMEX, BANCO REGIONAL DE MONTERREY S.A, BANCOPPEL, BANCO AZTECA, SCOTIABANK, HSBC, INBURSA, BANCA MIFEL SA, BANCO MULTIVA, BAJIO, CI BANCO, Afirme, Banregio, Banjercito, Banorte, Famsa, Invex, Premium Card Liverpool, Santander, and Bancomer. When using MSI, always display the phrase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; during the payment process.  Variables for MSI To use MSI, you need to include the number of months as an extra parameter:\n JSON XML   \u0026#34;extraParameters\u0026#34;: { \u0026#34;INSTALLMENTS_NUMBER\u0026#34;: (Number of months) }   \u0026lt;extraParameters\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;INSTALLMENTS_NUMBER\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;Number of months\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/extraParameters\u0026gt;    To learn how to include these parameters, refer to the Payments API for Mexico.\n","excerpt":"These sections explains how to integrate using Promotions or using MSI (Only Available for Mexico). …","ref":"/en/docs/integrations/api-integration/promotions-api.html","title":"Promotions API for Argentina and Mexico"},{"body":"Para integrarte con el API de Reembolsos y Anulaciones, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\nURL  Pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Producción: https://api.payulatam.com/payments-api/4.0/service.cgi   Si necesitas entender los conceptos y leer más consideraciones sobre Reembolsos y Anulaciones, consulta este artículo.\nConsideraciones por país Antes de utilizar el API de Reembolsos y Anulaciones, ten en cuenta las siguientes consideraciones.\nArgentina  El tiempo máximo para enviar una anulación es 14 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 365 días y 180 días para reembolsos parciales. No se soportan reembolsos con decimales. Cuando se aprueba el reembolso, el pagador obtiene su dinero en máximo 30 días hábiles.  Brasil  El tiempo máximo para enviar una anulación es siete (7) días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se cancela. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 90 días para transacciones procesadas en Redecard y 120 para transacciones procesadas en Cielo. Cuando se aprueba el reembolso, el pagador obtiene su dinero en máximo 15 días hábiles.  Chile  Debido a restricciones de la red, se pueden autorizar anulaciones dentro de las tres primeras horas luego de la autorización. Si no se acepta la anulación o no se envía una captura luego de siete (7) días, la transacción se anula automáticamente. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 90 días. No se soportan reembolsos para transacciones procesadas con WebPay Plus. Para transacciones con tarjetas prepago que no sean procesadas a través de WebPay Plus, los Reembolsos solicitados luego de la primero hora del cobro pueden ser aprobados o rechazados por la red financiera. Luego de esta hora, se rechazan todos los reembolsos para transacciones realizadas con tarjetas prepago. Si se rechaza el reembolso, PayU muestra el código de error generado por la red. No se soportan reembolsos con decimales. Cuando se aprueba un reembolso, el pagador obtiene su dinero en 8 a 20 días hábiles. Los reembolsos parciales para transacciones que utilizan cuotas se reciben en línea pero son procesados de forma manual debido a restricciones de la red adquirente. El valor mínimo para enviar un Reembolso es 10 CLP.  Colombia  No se soportan Anulaciones (Void). El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es two years. El valor mínimo para enviar un Reembolso es 100 COP. Si no se envía el reembolso el mismo día en el que la transacción fue capturada (antes de las 9 pm UTC-5) el reembolso va inmediatamente un proceso manual sin enviar un intento en línea. Cuando se aprueba el reembolso, el pagador obtiene su dinero en máximo 30 días hábiles. No se soportan reembolsos parciales para tarjetas de crédito internacionales.  México  El tiempo mínimo para enviar una anulación (Void) es 10 minutos luego de la autorización y el máximo es 30 días. Si la transacción se hizo con American Express, el tiempo máximo es siete (7) días.\nSi no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 180 días. Si la transacción fue procesada por Bancomer, el tiempo máximo es 45 días. Cuando se aprueba un reembolso, el pagador obtiene su dinero en 30 días hábiles. No se soportan reembolsos con decimales.  Panamá  No se soportan Anulaciones (Void). El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 180 días. Cuando se aprueba el reembolso, el pagador obtiene su dinero en máximo 8 días hábiles.  Perú  Los días máximos para enviar una autorización son:  Visa: 21 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se captura automáticamente. Mastercard: 28 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se captura automáticamente. American Express: 30 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente. Diners: 11 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente.   El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 180 días. Se soportan reembolsos parciales para transacciones sin cuotas. Ten en cuenta que las transacciones en una cuota son consideradas como sin cuotas. Los Reembolsos parciales con visanet deben enviarse un día después. Cuando se aprueba un reembolso, el pagador obtiene su dinero en 15 to 25 días hábiles. La cantidad mínima para enviar un Reembolso es 1 USD o 1 PEN.  Anulación (Void) Le método VOID cancela una transacción previamente autorizada. La anulación es un procedimiento automático, tan pronto envías la petición de VOID, no sigue ningún flujo de aprobación y la transacción no se cobra al tarjetahabiente.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; id Numérico  Identificador de la orden a ser anulada. Sí   transaction \u0026gt; type Alfanumérico 32 Asigna VOID para realizar una anulación de una transacción autorizada. Sí   transaction \u0026gt; reason Alfanumérico  Entrega la razón para anular una transacción autorizada. No   transaction \u0026gt; parentTransactionId Alfanumérico 36 Identificador de la transacción a anular. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador de la orden generado o existente en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado al estado.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación en el sistema de PayU.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400462414\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;VOID\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;Razón para solicitar la anulación de la transacción\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;c8ec8737-7645-4756-a991-6e60a99eb4d9\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400462414, \u0026#34;transactionId\u0026#34;: \u0026#34;57546e0a-8275-48e3-af11-7d3dc7420bfe\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;49263990\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624880273010, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462466\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;VOID\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;50876ad6-46f2-4c8d-bb91-2f028b56ccb8\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400462466\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;5fbb1ab0-3d2e-448f-a0be-b0bcfb5501ae\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;49263990\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-28T06:57:44\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Reembolsos (Refunds) Un reembolso se solicita cuando una tienda decide voluntariamente regresar el dinero al cliente debido a razones de insatisfacción o cuando la tienda no tiene suficiente inventario del producto comprado. El método REFUND solicita el reverso de una transacción previamente capturada.\nLos reembolsos pueden ser solicitados por la cantidad total o parcial (PARTIAL REFUND).\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     language Alfanumérico 2 Idioma utilizado en la petición, este idioma se utiliza para mostrar los mensajes de error generados. Ver idiomas soportados. Sí   command Alfanumérico Max:32 Asigna SUBMIT_TRANSACTION. Sí   test (JSON)isTest (XML) Booleano  Asigna true si la petición es en modo pruebas. Si no, asigna false. Sí   merchant   Este objeto tiene los datos de autenticación. Sí   merchant \u0026gt; apiLogin Alfanumérico Min:12 Max:32 Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí   merchant \u0026gt; apiKey Alfanumérico Min:6 Max:32 Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   transaction   Este objeto tiene los datos de la transacción. Sí   transaction \u0026gt; additionalValues \u0026gt;  64 Monto del reembolso parcial. Este parámetro y sus valores son obligatorios cuando se realiza un reembolso parcial. No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE Alfanumérico 64 Monto de la transacción. Obligatorio para reembolsos parciales No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Numérico 19 Especifica el monto de la transacción. Obligatorio para reembolsos parciales No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alfanumérico 3 Código ISO de la moneda. Ver monedas aceptadas. Obligatorio para reembolsos parciales No   transaction \u0026gt; order   Este objeto tiene los datos de la orden. Sí   transaction \u0026gt; order \u0026gt; id Numérico  Identificador de la orden que será reembolsada. Sí   transaction \u0026gt; type Alfanumérico 32 Asigna este valor de acuerdo con el tipo de transacción requerido:\nREFUNDPARTIAL_REFUND para reembolsos parciales (si se soportan). Sí   transaction \u0026gt; reason Alfanumérico  Entrega la razón para reembolsar una transacción autorizada. No   transaction \u0026gt; parentTransactionId Alfanumérico 36 Identificador de la transacción a reembolsar. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     code Alfanumérico  Código de respuesta de la transacción. Los valores posibles son ERROR y SUCCESS.   error Alfanumérico Max:2048 Mensaje de error asociado cuando el código de respuesta es ERROR.   transactionResponse   Datos de la respuesta.   transactionResponse \u0026gt; orderId Numérico  Identificador de la orden generado o existente en PayU.   transactionResponse \u0026gt; transactionId Alfanumérico 36 Identificador de la transacción en PayU.   transactionResponse \u0026gt; state Alfanumérico Max:32 Estado de la transacción.   transactionResponse \u0026gt; paymentNetworkResponseCode Alfanumérico Max:255 Código de respuesta retornado por la red bancaria.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alfanumérico Max:255 Mensaje de error retornado por la red bancaria.   transactionResponse \u0026gt; trazabilityCode Alfanumérico Max:32 Código de trazabilidad retornado por la red bancaria.   transactionResponse \u0026gt; authorizationCode Alfanumérico Max:12 Código de autorización retornado por la red bancaria.   transactionResponse \u0026gt; responseCode Alfanumérico Max:64 Código de respuesta asociado al estado.   transactionResponse \u0026gt; responseMessage Alfanumérico Max:2048 Mensaje asociado al código de respuesta.   transactionResponse \u0026gt; operationDate Fecha  Fecha de creación en el sistema de PayU.     Llamado del API Los siguientes son los cuerpos de la petición y la respuesta para este tipo de transacción.\n JSON XML   Ejemplo petición (Refund):\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400462687\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;REFUND\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;Razón para solicitar el reembolso de la transacción\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;60e2080d-08b1-4db2-a54f-8bcbe8271662\u0026#34; }, \u0026#34;test\u0026#34;: false } \nEjemplo petición (Partial Refund):\n{ \u0026#34;command\u0026#34;:\u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;language\u0026#34;:\u0026#34;es\u0026#34;, \u0026#34;merchant\u0026#34;:{ \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;:{ \u0026#34;additionalValues\u0026#34;:{ \u0026#34;TX_VALUE\u0026#34;:{ \u0026#34;value\u0026#34;:\u0026#34;950\u0026#34;, \u0026#34;currency\u0026#34;:\u0026#34;ARS\u0026#34; } }, \u0026#34;order\u0026#34;:{ \u0026#34;id\u0026#34;:\u0026#34;1400462690\u0026#34; }, \u0026#34;parentTransactionId\u0026#34;:\u0026#34;0486359b-a048-4b6b-9b72-af584e710e64\u0026#34;, \u0026#34;reason\u0026#34;:\u0026#34;Razón para solicitar el reembolso de la transacción\u0026#34;, \u0026#34;type\u0026#34;:\u0026#34;PARTIAL_REFUND\u0026#34; } } \nEjemplo respuesta:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400462690, \u0026#34;transactionId\u0026#34;: null, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;PENDING_REVIEW\u0026#34;, \u0026#34;responseCode\u0026#34;: null, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;1400462690\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Ejemplo petición (Refund):\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462689\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;REFUND\u0026lt;/type\u0026gt; \u0026lt;reason\u0026gt;Razón para solicitar el reembolso de la transacción.\u0026lt;/reason\u0026gt; \u0026lt;parentTransactionId\u0026gt;1d31ea44-0d8f-4e65-93ac-6be4347e5b40\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo petición (Partial refund):\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462691\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;REFUND\u0026lt;/type\u0026gt; \u0026lt;reason\u0026gt;Razón para solicitar el reembolso de la transacción.\u0026lt;/reason\u0026gt; \u0026lt;parentTransactionId\u0026gt;976d0411-8d0f-46e7-b5fe-515dad9a41ee\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nEjemplo respuesta:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400462691\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;6cef020a-8006-4744-b7f9-d9a343807297\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;PENDING_REVIEW\u0026lt;/pendingReason\u0026gt; \u0026lt;responseMessage\u0026gt;1400462690\u0026lt;/responseMessage\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Consultar los estados de los Reembolsos Como mencionamos anteriormente, la solicitud de reembolso tarda entre 1 y 3 días en ser procesada y aprobada o rechazada. Si deseas saber el estado de un reembolso, tienes dos opciones:\nVerificar el estado en el Módulo PayU  Ingresa a tu cuenta PayU. En el panel izquierdo, expande el menú Transacciones y selecciona la opción Reporte de ventas.  Utiliza el campo Filtrar mis ventas para encontrar la orden utilizando su ID y el ID de la transacción.  La columna estado muestra si el reembolso a sido aprobado o rechazado; si no ha sido aprobado, esta columna muestra que se ha solicitado un reembolso.  Verificar el estado utilizando consultas Puedes consultar el estado de un reembolso utilizando el API de consultas. En la petición de la consulta, necesitas enviar el id de la orden.\nCuando consultas una orden, el sistema retorna su última transacción.\nHay tres posibles estados en la respuesta de tu solicitud:\n Solicitud no resuelta: si la solicitud no ha sido resuelta, la orden que aparece en la consulta está en estado CAPTURED (parámetro result.payload.status en la respuesta), el primer tipo de transacción es AUTHORIZATION_AND_CAPTURE (parámetro result.transactions.type en la respuesta) y el primer estado de la transacción es APPROVED (primer parámetro result.transactions.transactionResponse.state en la respuesta). Aprobada: si la solicitud de reembolso ha sido aprobada por un agente de servicio de PayU, la orden que aparece en la consulta está en estado REFUNDED (parámetro result.payload.status en la respuesta), el primer tipo de transacción es REFUND (parámetro result.transactions.type en la respuesta) y el primer estado de la transacción es APPROVED (primer parámetro result.transactions.transactionResponse.state en la respuesta). Declinada: si la solicitud de reembolso ha sido declinada por un agente de servicio de PayU, la orden que aparece en la consulta está en estado CAPTURED (parámetro result.payload.status en la respuesta), el primer tipo de transacción es REFUND (parámetro result.transactions.type en la respuesta) y el primer estado de la transacción es DECLINED (primer parámetro result.transactions.transactionResponse.state en la respuesta).  ","excerpt":"Para integrarte con el API de Reembolsos y Anulaciones, apunta tus peticiones a las siguientes URLs …","ref":"/es/docs/integrations/api-integration/refunds-api.html","title":"API de Reembolsos y Anulaciones"},{"body":"To integrate with Voids and Refunds API, target your request to the following URLs according to your environment.\nURL  Test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Production: https://api.payulatam.com/payments-api/4.0/service.cgi   If you need to understand the concepts and read further considerations of Voids and Refunds, refer to this article.\nConsiderations per country Before using Voids and Refunds API, take into account the following considerations.\nArgentina  The maximum time to send a void is 14 days. If no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 365 days and 180 days for partial refunds. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in maximum 30 working days.  Brazil  The maximum time to send a void is seven (7) days. If no void or capture is sent after this time, the transaction is cancelled. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days for transactions processed in Redecard and 120 for transactions processed in Cielo. When a refund is approved, the payer gets the money back in maximum 15 working days.  Chile  Due to network restrictions, void can be authorized within the first three hours after the authorization. If the void is not accepted or no capture is sent after seven (7) days, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days. Refunds for transactions processed by WebPay Plus are not supported. For transactions prepaid cards not processed by WebPay Plus, Refunds requested during the first hour after their charge can be approved or rejected by the financial network. After the first hour, all the refund for transactions with prepaid cards are rejected. If the refund is rejected, PayU shows the error code generated by the network. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in 8 to 20 working days. Partial refunds for transactions using installments are received online but PayU processes them manually due to acquirer restrictions. The minimum amount to send a refund is 10 CLP.  Colombia  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is two years. Minimum amount to send the Refund 100 COP. If refund is not sent the same day in which the transaction was captured (before 9 pm UTC-5) the refund goes immediately to a manual process without sending the online attempt. When a refund is approved, the payer gets the money back in maximum 30 working days. Partial refunds are not available for international credit cards.  Mexico  The minimum time to send a void is 10 minutes after the authorization and the maximum is 30 days. If the transaction was made with American Express, the maximum time is seven (7) days.\nIf no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. If the transaction was processed by Bancomer, the maximum time is 45 days. When a refund is approved, the payer gets the money back in 30 working days. Refunds with decimals are not supported.  Panama  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. When a refund is approved, the payer gets the money back in maximum 8 working days.  Peru  The maximum days to void an authorization are:  Visa: 21 days. If no void or capture is sent after this time, the transaction is auto-captured. Mastercard: 28 days. If no void or capture is sent after this time, the transaction is auto-captured. American Express: 30 days. If no void or capture is sent after this time, the transaction is auto-voided. Diners: 11 days. If no void or capture is sent after this time, the transaction is auto-voided.   The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. Partial refunds are supported for transactions without installments. Recall that transactions with one installment are considered as without installments. Partial refunds with visanet must be sent after one day. When a refund is approved, the payer gets the money back in 15 to 25 working days. Minimum amount to send the Refund is 1 USD or 1 PEN.  Void The VOID method cancels a previously authorized transaction. Void is automatic procedure, as soon as you send the VOID request, it does not follow any approval flow, and the transaction is not charged to the card holder.\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; id Number  Identifier of the order to be voided. Yes   transaction \u0026gt; type Alphanumeric 32 Set VOID to perform a void of an authorized transaction. Yes   transaction \u0026gt; reason Alphanumeric  Provide the reason to void an authorized transaction. No   transaction \u0026gt; parentTransactionId Alphanumeric 36 Identifier of the transaction to be voided. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.     API Call The following are the request and response bodies for this transaction type.\n JSON XML   Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400462414\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;VOID\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;Reason for requesting the void of the transaction\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;c8ec8737-7645-4756-a991-6e60a99eb4d9\u0026#34; }, \u0026#34;test\u0026#34;: false } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400462414, \u0026#34;transactionId\u0026#34;: \u0026#34;57546e0a-8275-48e3-af11-7d3dc7420bfe\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: \u0026#34;49263990\u0026#34;, \u0026#34;authorizationCode\u0026#34;: \u0026#34;NPS-011111\u0026#34;, \u0026#34;pendingReason\u0026#34;: null, \u0026#34;responseCode\u0026#34;: \u0026#34;APPROVED\u0026#34;, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;APROBADA - Autorizada\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: 1624880273010, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462466\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;VOID\u0026lt;/type\u0026gt; \u0026lt;parentTransactionId\u0026gt;50876ad6-46f2-4c8d-bb91-2f028b56ccb8\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400462466\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;5fbb1ab0-3d2e-448f-a0be-b0bcfb5501ae\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;APPROVED\u0026lt;/state\u0026gt; \u0026lt;paymentNetworkResponseCode\u0026gt;0\u0026lt;/paymentNetworkResponseCode\u0026gt; \u0026lt;trazabilityCode\u0026gt;49263990\u0026lt;/trazabilityCode\u0026gt; \u0026lt;authorizationCode\u0026gt;NPS-011111\u0026lt;/authorizationCode\u0026gt; \u0026lt;responseCode\u0026gt;APPROVED\u0026lt;/responseCode\u0026gt; \u0026lt;responseMessage\u0026gt;APROBADA - Autorizada\u0026lt;/responseMessage\u0026gt; \u0026lt;operationDate\u0026gt;2021-06-28T06:57:44\u0026lt;/operationDate\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Refunds A refund is requested when a shop decides to voluntarily return the money spent by the shopper due to dissatisfaction reasons or when the shop does not have enough stock of the product purchased. The REFUND method request the reversal of a previously captured transaction.\nRefunds can be requested by the total or the partial amount (PARTIAL REFUND).\nVariables for request and response  Request     Field name Format Size Description Mandatory     language Alphanumeric 2 Language used in the request, this language is used to display the error messages generated. See supported languages. Yes   command Alphanumeric Max:32 Set SUBMIT_TRANSACTION. Yes   test (JSON)isTest (XML) Boolean  Set true if the request is in test mode. Otherwise, set false. Yes   merchant   This object has the authentication data. Yes   merchant \u0026gt; apiLogin Alphanumeric Min:12 Max:32 User or login provided by PayU. How do I get my API Login Yes   merchant \u0026gt; apiKey Alphanumeric Min:6 Max:32 Password provided by PayU. How do I get my API Key Yes   transaction   This object has the transaction data. Yes   transaction \u0026gt; additionalValues \u0026gt;  64 Amount of the partial refund. This parameter and its values are mandatory when you want to perform a partial refund No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE Alphanumeric 64 Amount of the transaction. Mandatory for partial refunds No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; value Number 19 Specifies the amount of the transaction. Mandatory for partial refunds No   transaction \u0026gt; additionalValues \u0026gt; TX_VALUE \u0026gt; currency Alphanumeric 3 ISO code of the currency. See accepted currencies. Mandatory for partial refunds No   transaction \u0026gt; order   This object has the order data. Yes   transaction \u0026gt; order \u0026gt; id Number  Identifier of the order to be refunded. Yes   transaction \u0026gt; type Alphanumeric 32 Set this value according to the transaction you want:\nREFUNDPARTIAL_REFUND for partial refunds (if supported). Yes   transaction \u0026gt; reason Alphanumeric  Provide the reason to refund an authorized transaction. No   transaction \u0026gt; parentTransactionId Alphanumeric 36 Identifier of the transaction to be refunded. Yes      Response     Field name Format Size Description     code Alphanumeric  The response code of the transaction. Possible values are ERROR and SUCCESS.   error Alphanumeric Max:2048 The error message associated when the response code is ERROR.   transactionResponse   The response data.   transactionResponse \u0026gt; orderId Number  The generated or existing order Id in PayU.   transactionResponse \u0026gt; transactionId Alphanumeric 36 The identifier of the transaction in PayU.   transactionResponse \u0026gt; state Alphanumeric Max:32 The status of the transaction.   transactionResponse \u0026gt; paymentNetworkResponseCode Alphanumeric Max:255 The response code returned by the financial network.   transactionResponse \u0026gt; paymentNetworkResponseErrorMessage Alphanumeric Max:255 The error message returned by the financial network.   transactionResponse \u0026gt; trazabilityCode Alphanumeric Max:32 The traceability code returned by the financial network.   transactionResponse \u0026gt; authorizationCode Alphanumeric Max:12 The authorization code returned by the financial network.   transactionResponse \u0026gt; responseCode Alphanumeric Max:64 The response code associated with the status.   transactionResponse \u0026gt; responseMessage Alphanumeric Max:2048 Message associated with the response code.   transactionResponse \u0026gt; operationDate Date  Creation date of the response in the PayU´s system.     API Call The following are the request and response bodies for this transaction type.\n JSON XML   Refund Request body:\n{ \u0026#34;language\u0026#34;: \u0026#34;es\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;merchant\u0026#34;: { \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;: { \u0026#34;order\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;1400462687\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;REFUND\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;Reason for requesting the refund of the transaction\u0026#34;, \u0026#34;parentTransactionId\u0026#34;: \u0026#34;60e2080d-08b1-4db2-a54f-8bcbe8271662\u0026#34; }, \u0026#34;test\u0026#34;: false } \nPartial refund Request body:\n{ \u0026#34;command\u0026#34;:\u0026#34;SUBMIT_TRANSACTION\u0026#34;, \u0026#34;language\u0026#34;:\u0026#34;es\u0026#34;, \u0026#34;merchant\u0026#34;:{ \u0026#34;apiKey\u0026#34;: \u0026#34;4Vj8eK4rloUd272L48hsrarnUA\u0026#34;, \u0026#34;apiLogin\u0026#34;: \u0026#34;pRRXKOl8ikMmt9u\u0026#34; }, \u0026#34;transaction\u0026#34;:{ \u0026#34;additionalValues\u0026#34;:{ \u0026#34;TX_VALUE\u0026#34;:{ \u0026#34;value\u0026#34;:\u0026#34;950\u0026#34;, \u0026#34;currency\u0026#34;:\u0026#34;ARS\u0026#34; } }, \u0026#34;order\u0026#34;:{ \u0026#34;id\u0026#34;:\u0026#34;1400462690\u0026#34; }, \u0026#34;parentTransactionId\u0026#34;:\u0026#34;0486359b-a048-4b6b-9b72-af584e710e64\u0026#34;, \u0026#34;reason\u0026#34;:\u0026#34;Reason for requesting the refund or cancellation of the transaction\u0026#34;, \u0026#34;type\u0026#34;:\u0026#34;PARTIAL_REFUND\u0026#34; } } \nResponse body:\n{ \u0026#34;code\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;error\u0026#34;: null, \u0026#34;transactionResponse\u0026#34;: { \u0026#34;orderId\u0026#34;: 1400462690, \u0026#34;transactionId\u0026#34;: null, \u0026#34;state\u0026#34;: \u0026#34;PENDING\u0026#34;, \u0026#34;paymentNetworkResponseCode\u0026#34;: null, \u0026#34;paymentNetworkResponseErrorMessage\u0026#34;: null, \u0026#34;trazabilityCode\u0026#34;: null, \u0026#34;authorizationCode\u0026#34;: null, \u0026#34;pendingReason\u0026#34;: \u0026#34;PENDING_REVIEW\u0026#34;, \u0026#34;responseCode\u0026#34;: null, \u0026#34;errorCode\u0026#34;: null, \u0026#34;responseMessage\u0026#34;: \u0026#34;1400462690\u0026#34;, \u0026#34;transactionDate\u0026#34;: null, \u0026#34;transactionTime\u0026#34;: null, \u0026#34;operationDate\u0026#34;: null, \u0026#34;referenceQuestionnaire\u0026#34;: null, \u0026#34;extraParameters\u0026#34;: null, \u0026#34;additionalInfo\u0026#34;: null } }   Refund Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462689\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;REFUND\u0026lt;/type\u0026gt; \u0026lt;reason\u0026gt;Reason for requesting the refund of the transaction.\u0026lt;/reason\u0026gt; \u0026lt;parentTransactionId\u0026gt;1d31ea44-0d8f-4e65-93ac-6be4347e5b40\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nPartial refund Request body:\n\u0026lt;request\u0026gt; \u0026lt;language\u0026gt;es\u0026lt;/language\u0026gt; \u0026lt;command\u0026gt;SUBMIT_TRANSACTION\u0026lt;/command\u0026gt; \u0026lt;merchant\u0026gt; \u0026lt;apiKey\u0026gt;4Vj8eK4rloUd272L48hsrarnUA\u0026lt;/apiKey\u0026gt; \u0026lt;apiLogin\u0026gt;pRRXKOl8ikMmt9u\u0026lt;/apiLogin\u0026gt; \u0026lt;/merchant\u0026gt; \u0026lt;transaction\u0026gt; \u0026lt;additionalValues\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;TX_VALUE\u0026lt;/string\u0026gt; \u0026lt;additionalValue\u0026gt; \u0026lt;value\u0026gt;100\u0026lt;/value\u0026gt; \u0026lt;currency\u0026gt;ARS\u0026lt;/currency\u0026gt; \u0026lt;/additionalValue\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/additionalValues\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;1400462691\u0026lt;/id\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;type\u0026gt;REFUND\u0026lt;/type\u0026gt; \u0026lt;reason\u0026gt;Reason for requesting the refund of the transaction.\u0026lt;/reason\u0026gt; \u0026lt;parentTransactionId\u0026gt;976d0411-8d0f-46e7-b5fe-515dad9a41ee\u0026lt;/parentTransactionId\u0026gt; \u0026lt;/transaction\u0026gt; \u0026lt;isTest\u0026gt;false\u0026lt;/isTest\u0026gt; \u0026lt;/request\u0026gt; \nResponse body:\n\u0026lt;paymentResponse\u0026gt; \u0026lt;code\u0026gt;SUCCESS\u0026lt;/code\u0026gt; \u0026lt;transactionResponse\u0026gt; \u0026lt;orderId\u0026gt;1400462691\u0026lt;/orderId\u0026gt; \u0026lt;transactionId\u0026gt;6cef020a-8006-4744-b7f9-d9a343807297\u0026lt;/transactionId\u0026gt; \u0026lt;state\u0026gt;PENDING\u0026lt;/state\u0026gt; \u0026lt;pendingReason\u0026gt;PENDING_REVIEW\u0026lt;/pendingReason\u0026gt; \u0026lt;responseMessage\u0026gt;1400462690\u0026lt;/responseMessage\u0026gt; \u0026lt;/transactionResponse\u0026gt; \u0026lt;/paymentResponse\u0026gt;    Query the refund status As mentioned before, refund request follows an approval in flow in which, PayU take 1 to 3 days to process the request and approves or rejects the request. If you want to know the status of the refund, you have two options:\nCheck status through the PayU Module  Log into you PayU module account. In the left panel, expand the Transactions menu and select Sales Report option.  Use the Filter my sales field to find the order using the order and the transaction id.  The Status column show whether the refund has been approved or rejected; if the refund has not been approved, this column shows that the refund has been requested.  Check status using queries You can consult the state of the refund by using the Queries API. In the request of the query, you need to send the order id.\nWhen query an order, the system returns the last transaction associated with the Order.\nThere are three possible status in the response of your request:\n Unresolved request: if the request has not been resolved, the order found in the query appears in CAPTURED status (parameter result.payload.status in the response), the first transaction type is AUTHORIZATION_AND_CAPTURE (parameter result.transactions.type in the response) and the first transaction status is APPROVED (First parameter result.transactions.transactionResponse.state in the response). Approved: if the refund request is approved by a PayU’s customer service agent, the order found in the query appears in REFUNDED status (parameter result.payload.status in the response), the first transaction type is REFUND (parameter result.transactions.type in the response) and the first transaction status is APPROVED (First parameter result.transactions.transactionResponse.state in the response). Declined: if the refund request is declined by a PayU’s customer service agent, the order found in the query appears in CAPTURED status (parameter result.payload.status in the response), the first transaction type is REFUND (parameter result.transactions.type in the response) and the first transaction status is DECLINED (First parameter result.transactions.transactionResponse.state in the response).  ","excerpt":"To integrate with Voids and Refunds API, target your request to the following URLs according to your …","ref":"/en/docs/integrations/api-integration/refunds-api.html","title":"Voids and Refunds API"},{"body":"WooCommerce is a WordPress plugin that ease the creation of an integrated online store. To let your clients pay with PayU from your website, you need to install the plugin for WooCommerce, which integrates PayU Latam as a valid payment gateway. For more information about WooCommerce, refer to their official website.\nPrerequisites  You need an active account in PayU Latam. Having installed WordPress 3.8 or higher. Having installed WooCommerce 2.0 or higher in the WordPress website. Having the PayU\u0026rsquo;s WooCommerce plugin downloaded and stored in an accessible location. Click here to download it.  Installation Follow the next procedure to install the plugin on your website.\n  Log in to your WordPress site as an administrator.\n  In the Dashboard, expand the Plugins menu in the left panel and click Add New.\n  Go to the Upload option and choose the .zip file of the WooCommerce plugin downloaded.\nThen, click Install Now.  Provide the data of the connection via FTP and click Proceed.  Note This step depends on the initial configuration of WordPress. The installation of the plugin is not affected if you don\u0026rsquo;t see this screen.  Finally, activate the plugin you have installed by clicking the Activate Plugin link.  Configuration  Back in the Dashboard, expand the WooCommerce menu in the left panel and click Settings.  Go to the Checkout tab.  Scroll down to Payment Gateways table. Then, find PayU Latam and drag and drop to the top of the table.\nClick the radio of the Default column.  Save the changes.\nClick the PayU Latam link at the top of the tab and configure the data of your PayU account.  The following table explains the values:\n   Field Value     Enable / Disable Mark this checkbox to enable the payment gateway in WooCommerce.   Title Title displayed for the Payment Method. The default value is PayU Latam.   Merchant ID ID of your commerce in PayU Latam   Account ID ID of the PayU account according to the country where you want to sell.   API key Unique key of your commerce, you can find this key in the PayU module.   Gateway URL Gateway URL.\nFor test, you can use https://sandbox.gateway.payulatam.com/ppp-web-gateway and for production https://gateway.payulatam.com/ppp-web-gateway/   Transaction in test mode Mark this checkbox to make transactions the test mode.   Response page URL of the response page.\nBy default, the URL is https://your.domain.com/wp-content/plugins/woocommerce-payu-latam/response.php, you must replace https://your.domain.com with your site\u0026rsquo;s domain.   Confirmation page URL of the confirmation page.\nBy default, the URL is https://your.domain.com/wp-content/plugins/woocommerce-payu-latam/confirmation.php, you must replace https://your.domain.com with your site\u0026rsquo;s domain.    Finally, click Save changes button. At this point, your customers can pay with PayU Latam when they do the checkout in the WooCommerce\u0026rsquo;s shopping cart.  ","excerpt":"WooCommerce is a WordPress plugin that ease the creation of an integrated online store. To let your …","ref":"/en/docs/tools/shopping-cart-plugins/woocommerce.html","title":"WooCommerce"},{"body":"WooCommerce es uin plugin de WordPress que facilita la creación de una tienda en línea integrada. Para permitirle a tus clientes pagar con PayU desde tu página web, necesitas instalar el plugin para WooCommerce, el cual integra a PayU Latam como pasarela válida de pago. Para más información sobre WooCommerce, consulta su página web oficial.\nPrerrequisitos  Necesitas una cuenta activa en PayU Latam. Tener instalado WordPress 3.8 o superior. Tener instalado WooCommerce 2.0 o superior in the WordPress website. Haber descargado el plugin de WooCommerce de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí para descargarlo.  Instalación Sigue este procedimiento para instalar el plugin en tu página web.\n  Ingresa a tu sitio WordPress como administrador.\n  En el escritorio de administrador, expande el menú Plugins en el panel izquierdo y haz clic en Añadir nuevo.\n  Ve a la opción Subir y selecciona el archivo .zip del plugin de WooCommerce descargado.\nLuego, haz clic en Instalar ahora.  Ingresa los datos de la conexión via FTP y haz clic en Ejecutar.  Nota La ejecución de este paso depende de la configuración Inicial de WordPress. La instalación del plugin no se afecta si no ves esta pantalla.  Por último, activa el plugin que instalaste haciendo clic en el enlace Activar Plugin.  Configuración  De vuelta en el escritorio de administrador, expande el menú WooCommerce en el panel de la derecha y selecciona Ajustes.  Ingresa a la pestaña Checkout.  Desplázate hacia la tabla Pasarelas de Pago. Luego, localiza PayU Latam y arrástrala a la parte superior de la tabla.\nHaz clic en el radio de la columna Predeterminado.  Guarda los cambios.\nHaz clic en el enlace PayU Latam en la parte superior de la pestaña y configura los datos de tu cuenta PayU.  La siguiente tabla explica los valores:\n   Campo Valor     Habilitar / Deshabilitar Marca esta casilla para activar la pasarela de pago en WooCommerce.   Título Titulo mostrado para el Medio de Pago. El valor por defecto es PayU Latam.   Merchant ID Identificador de tu comercio en PayU Latam.   Account ID Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender.   API key Llave única de tu comercio, puedes obtener esta información en tu Módulo PayU.   Gateway URL URL de la pasarela de pago.\nPara pruebas, utiliza https://sandbox.gateway.payulatam.com/ppp-web-gateway y para producción https://gateway.payulatam.com/ppp-web-gateway/   Transacciones en modo de prueba Marca esta casilla para hacer transacciones de prueba.   Página de respuesta URL de la página de respuesta.\nPor defecto, la URL es https://tu.dominio.com/wp-content/plugins/woocommerce-payu-latam/response.php, debes reemplazar https://tu.dominio.com con el dominio de tu sitio.   Página de confirmación URL de la página de confirmación.\nPor defecto, la URL es https://tu.dominio.com/wp-content/plugins/woocommerce-payu-latam/confirmation.php, debes reemplazar https://tu.dominio.com con el dominio de tu sitio.    Por último, haz clic en el botón Guardar cambios. En este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de WooCommerce.  ","excerpt":"WooCommerce es uin plugin de WordPress que facilita la creación de una tienda en línea integrada. …","ref":"/es/docs/tools/shopping-cart-plugins/woocommerce.html","title":"WooCommerce"},{"body":"To integrate with Payments SDK Mexico, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments SDK includes the following methods:\n Submit transaction with credit cards Submit transaction with cash Submit transaction with bank transfer Submit transaction with bank reference Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit card This method lets you process the payments performed by your customers using credit cards. For Mexico, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nNote Two-step flows are only supported for Mastercard and Visa.  Considerations  Send a valid credit card Payment Method in the request, see the available Payment Methods for Mexico. For payments with Promotions, send the parameters INSTALLMENTS_NUMBER and PROMOTION_ID with the number of installments selected and the Id of the promotion. Refer to Promotions API for more information. When using promotions or apply installments, always display the phrase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; during the payment process. When installments applied (fees assumed by the payer), display the original amount of the transaction, the total amount after the fees, the number of installments, and the amount per installment including the extra fee. Promotions feature is only available for one-step flows. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE.  Authorization Use this method to perform the Authorization step of a two-step flow using Mastercard or Visa. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow for Mastercard and Visa. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nConsiderations Take into account the following considerations for capture.\n The maximum time to capture an approved transaction is 30 days. After this time, the transaction is auto voided. Only the parameters displayed in the request body are mandatory to invoke a Capture transaction. Recall that the order and transaction ids must meet with a currently authorized transaction.  The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400469033\u0026#34;); // Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;f432b9ba-a692-4350-b8c6-2348e1e21a6c\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400469033\u0026#34;, // Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;f432b9ba-a692-4350-b8c6-2348e1e21a6c\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  Send a valid cash Payment Method in the request, see the available Payment Methods for Mexico. The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payment method is OXXO, the confirmation of the payment will be one day after the payment. For other cash payment methods, the confirmation is online. The extra parameters has the following data related to the transaction:  BANK_REFERENCED_CODE: payment type. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. REFERENCE: internal payment reference generated by PayU. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format. PAYMENT_WAY_ID: network payment of the payment type.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;OXXO\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tString bankRef = (String)extraParameters.get(\u0026#34;BANK_REFERENCED_CODE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); int reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String paymentWay = (String)extraParameters.get(\u0026#34;PAYMENT_WAY_ID\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;OXXO\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_REFERENCED_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;PAYMENT_WAY_ID; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with bank transfer This method lets you process the bank transfer payments of your customers. When using this payment method, the payer performs a bank transfer from their bank account to a PayU\u0026rsquo;s CLABE account.\nTo integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nConsiderations  The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. When the payer selects this payment method, PayU creates an order in in progress state and a transaction in PENDING state. To perform the payment, the payer must log in the virtual branch of their bank (The bank must appear in the list of SPEI available banks). First, the payer must register the PayU CLABE account in their bank branch. Once the PayU CLABE account is enable to perform transfers, the payer must provide the reference returned by PayU in the parameter trazabilityCode and the amount as returned by PayU in their virtual branch. In the response body, you can find the needed variables to generate the payment receipt (voucher) and the URL of the receipt generated by PayU in HTML and PDF format. If you want to generate the voucher, use the following variables:  trazabilityCode: unique identifier of maximum 7 digits long; corresponds to the payment reference that the payer must provide in the virtual branch. It is mandatory to enter the same value in the reference field of the bank branch so the payment can be successful. value: the payer must enter as transfer amount the same value informed in the request, so the payment can be successful. SPEI_CLABE_ACCOUNT_NUMBER: is the PayU\u0026rsquo;s interbank CLABE, namely, the account where the amount will be transferred. The payer must register this CLABE as beneficiary in their bank branch before performing the transfer. SPEI_BANK_NAME: name associated with the PayU CLABE account. The beneficiary account is associated with the STP bank and it\u0026rsquo;s always the same bank for PayU.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;SPEI\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tString bankRef = (String)extraParameters.get(\u0026#34;BANK_REFERENCED_CODE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String speiBankName = (String)extraParameters.get(\u0026#34;SPEI_BANK_NAME\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String speiCLABE = (String)extraParameters.get(\u0026#34;SPEI_CLABE_ACCOUNT_NUMBER\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String paymentWay = (String)extraParameters.get(\u0026#34;PAYMENT_WAY_ID\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;SPEI\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_REFERENCED_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;SPEI_BANK_NAME; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;PAYMENT_WAY_ID; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with bank reference This method lets you process payments of your customers using bank references. To integrate with these transactions, you must redirect the customer to the URL found in the response of the method.\nConsiderations  The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The extra parameters has the following data related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects bank reference payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    Method call The following are the bodies of the request and response of this payment method.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s birthday here parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;BANK_REFERENCED\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s birthday here  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;BANK_REFERENCED\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Enter the payment due date \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Mexico, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/en/docs/integrations/sdk-integration/payments-sdk-mexico.html","title":"Payments SDK - Mexico"},{"body":"Para integrarte con el SDK de Pagos de México, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de pagos incluye los siguientes métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo Enviar transacciones con transferencia bancaria Enviar transacciones con referencia bancaria Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar el SDK de Consultas.  Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito. Para México, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nNota El flujo de dos pasos solo está soportados para Mastercard y Visa.  Consideraciones  Envía un método de pago válido de tarjeta de crédito en la petición, mira los métodos de pago disponibles para México. Para pagos con Promociones, asigna los parámetros INSTALLMENTS_NUMBER y PROMOTION_ID con el número de cuotas seleccionadas y el ID de la promoción. Consulta el [API de promociones] (/es/docs/services/promotions.html) para más información. Cuando utilices promociones o apliques cuotas, debes mostrar siempre la frase \u0026ldquo;PAGOS DIFERIDOS\u0026rdquo; durante el proceso de pago. Cuando se apliquen cuotas (cargos asumidos por el pagador), muestra el monto original de la transacción, el monto luego de las cuotas, el número de cuotas y el monto por cuota incluyendo el valor adicional. La funcionalidad de promociones solo está disponibles para flujos de un paso. Para pagos con tókenes de tarjeta de crédito, asigna los parámetros TOKEN_ID y CREDIT_CARD_SECURITY_CODE (si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, consulta el SDK de Tokenización. Por defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas. Luego de que se te active esta funcionalidad, asigna el parámetro PROCESS_WITHOUT_CVV2 con true y elimina el parámetro CREDIT_CARD_SECURITY_CODE.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos utilizando Mastercard o Visa. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la fecha de nacimiento del pagador parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorization(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la fecha de nacimiento del pagador  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorization($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos para Mastercard y Visa. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nConsideraciones Ten en cuenta las siguientes consideraciones para la captura.\n El tiempo máximo para capturar una transacción aprobada es de 30 días. Despues de este tiempo, la transacción es anulada automáticamente. Para capturar una transacción, solo son obligatorios los parámetros mostrados en el cuerpo de la petición. Ten en cuenta que los IDs de las orden y la transacción deben corresponder a la actualmente autorizada.  Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400469033\u0026#34;); // Ingresa aquí el identificador de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;f432b9ba-a692-4350-b8c6-2348e1e21a6c\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Petición de Captura TransactionResponse response = PayUPayments.doCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el identificador de la cuenta. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Ingresa aquí el identificador de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400469033\u0026#34;, // Ingresa aquí el identificador de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;f432b9ba-a692-4350-b8c6-2348e1e21a6c\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la fecha de nacimiento del pagador parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la fecha de nacimiento del pagador  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nConsideraciones  Envía un método de pago válido en efectivo, mira los métodos de pago disponibles para México. El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto Cuando el método de pago es OXXO, la confirmación del pago será un día después del mismo. Para otros métodos de pago en efectivo, la confirmación es en línea. Los extra parámetros tienen las siguiente información relacionada con la transacción:  BANK_REFERENCED_CODE: tipo de pago. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. REFERENCE: referencia de pago interna generada por PayU. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF. PAYMENT_WAY_ID: red financiera del tipo de pago.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la fecha de nacimiento del pagador parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;OXXO\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tString bankRef = (String)extraParameters.get(\u0026#34;BANK_REFERENCED_CODE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); int reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String paymentWay = (String)extraParameters.get(\u0026#34;PAYMENT_WAY_ID\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la fecha de nacimiento del pagador  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;OXXO\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_REFERENCED_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;PAYMENT_WAY_ID; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones con transferencia bancaria Este método te permite procesar los pagos realizados por tus clientes por medio de transferencia bancaria. Cuando utilices este método de pago, el pagador realiza una transferencia bancaria desde su cuenta a una cuenta CLABE de PayU.\nPara integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta.\nConsideraciones  El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto Cuando el pagador selecciona este método de pago, PayU crea una orden en estado in progress y una transacción en estado pendiente (PENDING). Para realizar el pago, el pagador debe iniciar sesión en la sucursal virtual de su banco (el banco debe aparecer en la lista de bancos disponibles de SPEI).\nPrimero, el pagador debe registrar la cuenta CLABE de PayU en la sucursal de su banco. Una vez la cuenta CLABE esté activa para realizar transferencias, el pagador debe ingresar en su sucursal virtual, la referencia retornada por PayU en el parámetro trazabilityCode y el monto tal y como PayU lo retornó. En el cuerpo de la respuesta, puedes encontrar las variables para generar el recibo de pago (voucher) y la URL del mismo generado en formato HTML y PDF. Si quieres generar el voucher, utiliza las siguientes variables:  trazabilityCode: identificador único de máximo 7 dígitos; corresponde a la referencia de pago que debe ingresar el pagador en la sucursal virtual. Es obligatorio ingresar el mismo valor en el campo referencia de la sucursal virtual para que el pago sea exitoso. value: el pagador debe ingresar como monto de la transferencia el mismo valor informado en la solicitud, para que el pago sea exitoso. SPEI_CLABE_ACCOUNT_NUMBER: es la CLABE interbancaria de PayU, es decir, la cuenta donde se transfiere el monto. El pagador debe registrar esta CLABE como beneficiario en la sucursal de su banco antes de realizar la transferencia. SPEI_BANK_NAME: nombre del banco asociado a la cuenta CLABE de PayU. La cuenta beneficiaria está asociada al banco STP y para PayU siempre es el mismo banco.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la fecha de nacimiento del pagador parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;SPEI\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tString bankRef = (String)extraParameters.get(\u0026#34;BANK_REFERENCED_CODE\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String speiBankName = (String)extraParameters.get(\u0026#34;SPEI_BANK_NAME\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); String speiCLABE = (String)extraParameters.get(\u0026#34;SPEI_CLABE_ACCOUNT_NUMBER\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); String paymentWay = (String)extraParameters.get(\u0026#34;PAYMENT_WAY_ID\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la fecha de nacimiento del pagador  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;SPEI\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BANK_REFERENCED_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;SPEI_BANK_NAME; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;SPEI_CLABE_ACCOUNT_NUMBER; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;PAYMENT_WAY_ID; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones con referencia bancaria Este método te permite procesar los pagos realizados por tus clientes por medio de referencia bancaria. Para integrarte con las transacciones con referencia bancaria, debes redirigir a tu cliente a la URL que se encuentra en la respuesta.\nConsideraciones  El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto Los extra parámetros tienen las siguiente información relacionada con la transacción:  REFERENCE: referencia de pago interna generada por PayU. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago con referencia bancaria. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;1000\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512324\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.MXN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la fecha de nacimiento del pagador parameters.put(PayU.PARAMETERS.PAYER_BIRTH_DATE, \u0026#34;1994-06-21\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Domingo Diez 1589\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Cuernavaca\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Morelos\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;MX\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;BANK_REFERENCED\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.MX.name()); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().equals(TransactionState.PENDING)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;1000\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512324\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;MXN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la fecha de nacimiento del pagador  PayUParameters::PAYER_BIRTH_DATE =\u0026gt; \u0026#34;1994-06-21\u0026#34;), // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Domingo Diez 1589\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Cuernavaca\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Morelos\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;MX\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the name of the cash payment here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;BANK_REFERENCED\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::MX, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::PARAMETERS.EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"Para integrarte con el SDK de Pagos de México, apunta tus peticiones a las siguientes URLs:\n Java …","ref":"/es/docs/integrations/sdk-integration/payments-sdk-mexico.html","title":"SDK de Pagos - México"},{"body":"To step over to production according to the integration you use, you need to create the payment forms with the some parameters of your account and pointing to the production URL.\nStep over to production using WebCheckout integration Include the following parameters in your payment forms:\n   Parameter Description     merchantId ID of your commerce in PayU Latam.   ApiKey Password provided by PayU. How do I get my API Key   referenceCode Unique sale reference for each transaction. This value is generated by you.   accountId ID of the PayU account according to the country where you want to sell.   description Description of the sell you are performing.   amount Total amount of the sell you are performing.   tax Tax amount of the sell you are performing.   taxReturnBase Tax return base of the sell you are performing.   currency ISO code of the currency. See accepted currencies.   signature The signature is a unique way to validate payments made through the platform, ensuring its authenticity. For more information refer Authentication signature.   test Set 0 for transactions processed in the Production environment.   buyerEmail E-mail address of the buyer.    Target your request to the following URL:\nhttps://checkout.payulatam.com/ppp-web-gateway-payu Step over to production using API integration Include the following parameters in your payment forms:\n   Parameter Description     merchantId ID of your commerce in PayU Latam.   ApiKey Password provided by PayU. How do I get my API Key   ApiLogin User or login provided by PayU. How do I get my API Login   accountId ID of the PayU account according to the country where you want to sell.   signature The signature is a unique way to validate payments made through the platform, ensuring its authenticity.\nFor more information refer Authentication signature.   test Set false for transactions processed in the Production environment.    Target your request to the following URL:\nQueries: https://api.payulatam.com/reports-api/4.0/service.cgi Payments: https://api.payulatam.com/payments-api/4.0/service.cgi Step over to production using SDK integration Include the following parameters in your payment forms:\n   Parameter Description     merchantId ID of your commerce in PayU Latam.   ApiKey Password provided by PayU. How do I get my API Key   ApiLogin User or login provided by PayU. How do I get my API Login   accountId ID of the PayU account according to the country where you want to sell.   test Set false for transactions processed in the Production environment.    Target your request to the following URL:\n Java PHP   PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    ","excerpt":"To step over to production according to the integration you use, you need to create the payment …","ref":"/en/docs/getting-started/deploy-to-production.html","title":"Deploy to Production"},{"body":"Para pasar a producción de acuerdo con la integración que utilices, necesitas crear el formulario de pago con ciertos parámetros de tu cuenta apuntado a la URL de producción.\nPasar a producción utilizando la integración WebCheckout Incluye los siguientes parámetros en tus formularios de pago:\n   Parámetro Descripción     merchantId ID de tu comercio en PayU Latam.   ApiKey Contraseña entregada por PayU. ¿Cómo obtengo mi API Key?.   referenceCode Referencia única de la venta por cada transacción. Tú generas este valor.   accountId ID de la cuenta PayU del país donde quieres vender.   description Descripción de lo que estás vendiendo.   amount Valor total de lo que estás vendiendo.   tax Valor de los impuestos de lo que estás vendiendo.   taxReturnBase Base de retorno de impuestos de lo que estás vendiendo.   currency Código ISO de la moneda. Ver monedas aceptadas.   signature La firma es la forma única de validar los pagos hechos a través de la plataforma para asegurar su autenticidad.\nPara más información, consulte Firma de autenticación.   test Configura 0 para transacciones procesadas en el ambiente de Producción.   buyerEmail Dirección de correo electrónico del comprador.    Dirige tus requests a la siguiente URL:\nhttps://checkout.payulatam.com/ppp-web-gateway-payu Pasar a producción utilizando la integración API Incluye los siguientes parámetros en tus formularios de pago:\n   Parámetro Descripción     merchantId ID de tu comercio en PayU Latam.   ApiKey Contraseña entregada por PayU. ¿Cómo obtengo mi API Key?.   ApiLogin Usuario o login entregado por PayU. ¿Cómo obtengo mi API Login   accountId ID de la cuenta PayU del país donde quieres vender.   signature La firma es la forma única de validar los pagos hechos a través de la plataforma para asegurar su autenticidad.\nPara más información, consulte Firma de autenticación.   test Configura false para transacciones procesadas en el ambiente de Producción.    Dirige tus requests a las siguiente URLs:\nConsultas (Queries): https://api.payulatam.com/reports-api/4.0/service.cgi Pagos (Payments): https://api.payulatam.com/payments-api/4.0/service.cgi Pasar a producción utilizando la integración SDK Incluye los siguientes parámetros en tus formularios de pago:\n   Parámetro Descripción     merchantId ID of your commerce in PayU Latam.   ApiKey Contraseña entregada por PayU. ¿Cómo obtengo mi API Key?.   ApiLogin Usuario o login entregado por PayU. ¿Cómo obtengo mi API Login   accountId ID de la cuenta PayU del país donde quieres vender.   test Configura false para transacciones procesadas en el ambiente de Producción.    Dirige tus requests a las siguientes URLs:\n Java PHP   PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    ","excerpt":"Para pasar a producción de acuerdo con la integración que utilices, necesitas crear el formulario de …","ref":"/es/docs/getting-started/deploy-to-production.html","title":"Desplegar a Producción"},{"body":"Códigos de respuesta de las transacciones    Código de respuesta Descripción     ERROR Error general.   APPROVED La transacción fue aprobada.   ANTIFRAUD_REJECTED La transacción fue rechazada por el sistema antifraude.   BANK_FRAUD_REJECTED La transacción fue rechazada debido a sospecha de fraude en la institución financiera.   PAYMENT_NETWORK_REJECTED La red financiera rechazó la transacción.   ENTITY_DECLINED La transacción fue declinada por el banco o por la red financiera debido a un error.   INTERNAL_PAYMENT_PROVIDER_ERROR Ocurrió un error en el sistema intentando procesar el pago.   INACTIVE_PAYMENT_PROVIDER El proveedor de pagos no se encontraba activo.   DIGITAL_CERTIFICATE_NOT_FOUND La red financiera reportó un error en la autenticación.   INVALID_EXPIRATION_DATE_OR_SECURITY_CODE El código de seguridad o la fecha de expiración fue inválido.   INVALID_RESPONSE_PARTIAL_APPROVAL Tipo de respuesta no válida. La entidad aprobó parcialmente la transacción y debe ser cancelada automáticamente por el sistema.   INSUFFICIENT_FUNDS La cuenta no tenía fondos suficientes.   CREDIT_CARD_NOT_AUTHORIZED _FOR_INTERNET_TRANSACTIONS La tarjeta de crédito no estaba autorizada para transacciones por Internet.   INVALID_TRANSACTION La red financiera reportó que la transacción fue inválida.   INVALID_CARD La tarjeta es inválida.   EXPIRED_CARD La tarjeta ya expiró.   RESTRICTED_CARD La tarjeta presenta una restricción.   CONTACT_THE_ENTITY Se debe contactar al banco.   REPEAT_TRANSACTION Se debe repetir la transacción.   ENTITY_MESSAGING_ERROR La red financiera reportó un error de comunicaciones con el banco.   BANK_UNREACHABLE El banco no se encontraba disponible.   EXCEEDED_AMOUNT La transacción excede un monto establecido por el banco.   NOT_ACCEPTED_TRANSACTION La transacción no fue aceptada por el banco por algún motivo.   ERROR_CONVERTING_TRANSACTION_AMOUNTS Ocurrió un error convirtiendo los montos a la moneda de pago.   EXPIRED_TRANSACTION La transacción expiró.   PENDING_TRANSACTION_REVIEW La transacción fue detenida y debe ser revisada, esto puede ocurrir por filtros de seguridad.   PENDING_TRANSACTION_CONFIRMATION La transacción está pendiente de ser confirmada.   PENDING_TRANSACTION_TRANSMISSION La transacción está pendiente para ser trasmitida a la red financiera. Normalmente esto aplica para transacciones con métodos de pago en efectivo.   PAYMENT_NETWORK_BAD_RESPONSE El mensaje retornado por la red financiera es inconsistente.   PAYMENT_NETWORK_NO_CONNECTION No se pudo realizar la conexión con la red financiera.   PAYMENT_NETWORK_NO_RESPONSE La red financiera no respondió.   FIX_NOT_REQUIRED Clínica de transacciones: Código de manejo interno.   AUTOMATICALLY_FIXED_AND_SUCCESS_REVERSAL Clínica de transacciones: Código de manejo interno. Sólo aplica para la API de reportes.   AUTOMATICALLY_FIXED_AND_UNSUCCESS_REVERSAL Clínica de transacciones: Código de manejo interno. Sólo aplica para la API de reportes.   AUTOMATIC_FIXED_NOT_SUPPORTED Clínica de transacciones: Código de manejo interno. Sólo aplica para la API de reportes.   NOT_FIXED_FOR_ERROR_STATE Clínica de transacciones: Código de manejo interno. Sólo aplica para la API de reportes.   ERROR_FIXING_AND_REVERSING Clínica de transacciones: Código de manejo interno. Sólo aplica para la API de reportes.   ERROR_FIXING_INCOMPLETE_DATA Clínica de transacciones: Código de manejo interno. Sólo aplica para la API de reportes.    Códigos de respuesta de la página de respuesta     lap Transaction State transaction State pol Transaction State lapResponseCode pol Response Code Descripción     APPROVED 4 (Aprobada) 4 (Aprobada) APPROVED 1 Transacción aprobada   DECLINED 6 (Declinada) 6 (Rechazada) PAYMENT_NETWORK_REJECTED 4 Transacción rechazada por entidad financiera      ENTITY_DECLINED 5 Transacción rechazada por el banco      INSUFFICIENT_FUNDS 6 Fondos insuficientes      INVALID_CARD 7 Tarjeta inválida      CONTACT_THE_ENTITY 8 Por favor, contactar a la entidad financiera      BANK_ACCOUNT_ACTIVATION _ERROR 8 Débito automático no permitido      BANK_ACCOUNT_NOT_AUTHORIZED _FOR_AUTOMATIC_DEBIT 8 Débito automático no permitido      INVALID_AGENCY_BANK_ACCOUNT 8 Débito automático no permitido      INVALID_BANK_ACCOUNT 8 Débito automático no permitido      INVALID_BANK 8 Débito automático no permitido      EXPIRED_CARD 9 Tarjeta vencida      RESTRICTED_CARD 10 Tarjeta restringida      INVALID_EXPIRATION_DATE_OR _SECURITY_CODE 12 La fecha de expiración o el código de seguridad son inválidos      REPEAT_TRANSACTION 13 Reintentar pago      INVALID_TRANSACTION 14 Transacción inválida      EXCEEDED_AMOUNT 17 El valor excede el máximo permitido por la entidad      ABANDONED_TRANSACTION 19 Transacción abandonada por el pagador      CREDIT_CARD_NOT_AUTHORIZED_FOR _INTERNET_TRANSACTIONS 22 La tarjeta no está autorizada para comprar por internet      ANTIFRAUD_REJECTED 23 Transacción rechazada por el módulo antifraude      BANK_FRAUD_REJECTED 23 Transacción rechazada debido a sospecha de fraude en la entidad financiera      DIGITAL_CERTIFICATE_ NOT_FOUND 9995 Certificado digital no encontrado      BANK_UNREACHABLE 9996 Error tratando de comunicarse con el banco      ENTITY_MESSAGING _ERROR 9997 Error comunicándose con la entidad financiera      NOT_ACCEPTED_ TRANSACTION 9998 Transacción no permitida al tarjetahabiente      INTERNAL_PAYMENT _PROVIDER_ERROR 9999 Error interno      INACTIVE_PAYMENT_ PROVIDER 9999 Error interno   ERROR 104 (Error) 6 (Rechazada) ERROR 9999 Error interno      ERROR_CONVERTING_TRANSACTION _AMOUNTS 9999 Error interno      BANK_ACCOUNT_ACTIVATION_ERROR 9999 Error interno      FIX_NOT_REQUIRED 9999 Error interno      AUTOMATICALLY_FIXED_AND_SUCCESS _REVERSAL 9999 Error interno      AUTOMATICALLY_FIXED _AND_UNSUCCESS _REVERSAL 9999 Error interno      AUTOMATIC_FIXED_ NOT_SUPPORTED 9999 Error interno      NOT_FIXED_FOR_ ERROR_STATE 9999 Error interno      ERROR_FIXING_AND _REVERSING 9999 Error interno      ERROR_FIXING_ INCOMPLETE_DATA 9999 Error interno      PAYMENT_NETWORK_ BAD_RESPONSE 9999 Error interno      PAYMENT_NETWORK_ NO_CONNECTION 9996 No fue posible establecer comunicación con la entidad financiera      PAYMENT_NETWORK_ NO_RESPONSE 9996 No se recibió respuesta de la entidad financiera   EXPIRED 5 (Expirada) 5 (Expirada) EXPIRED_TRANSACTION 20 Transacción expirada   PENDING 7 (Pendiente) 7 (Pendiente) PENDING_TRANSACTION_ REVIEW 15 Transacción pendiente de aprobación (en validación manual)     14 (Pendiente) PENDING_TRANSACTION_ CONFIRMATION 25 Recibo de pago generado. En espera de pago     7 (Pendiente) PENDING_TRANSACTION_ TRANSMISSION 9998 Transacción no permitida     14 (Pendiente) PENDING_PAYMENT_IN_ENTITY 25 Recibo de pago generado. En espera de pago     15 (Pendiente) PENDING_PAYMENT_IN_BANK 26 Recibo de pago generado. En espera de pago     10 (Pendiente) PENDING_SENT_TO_FINANCIAL _ENTITY 29      12 (Pendiente) PENDING_AWAITING_PSE _CONFIRMATION 9994 En espera de confirmación de PSE     18 (Pendiente) PENDING_NOTIFYING_ENTITY 25 Recibo de pago generado. En espera de pago    Códigos de respuesta de la página de confirmación     state_pol response_message_pol response_code_pol Descripción     4 (Aprobada) APPROVED 1 Transacción aprobada   6 (Declinada) PAYMENT_NETWORK_REJECTED 4 Transacción rechazada por entidad financiera    ENTITY_DECLINED 5 Transacción rechazada por el banco    INSUFFICIENT_FUNDS 6 Fondos insuficientes    INVALID_CARD 7 Tarjeta inválida    CONTACT_THE_ENTITY 8 Contactar a la entidad financiera    BANK_ACCOUNT_ACTIVATION_ERROR 8 Débito automático no permitido    BANK_ACCOUNT_NOT_AUTHORIZED _FOR_AUTOMATIC_DEBIT 8 Débito automático no permitido    INVALID_AGENCY_BANK_ACCOUNT 8 Débito automático no permitido    INVALID_BANK_ACCOUNT 8 Débito automático no permitido    INVALID_BANK 8 Débito automático no permitido    EXPIRED_CARD 9 Tarjeta vencida    RESTRICTED_CARD 10 Tarjeta restringida    INVALID_EXPIRATION_DATE_OR _SECURITY_CODE 12 La fecha de expiración o el código de seguridad son inválidos    REPEAT_TRANSACTION 13 Reintentar pago    INVALID_TRANSACTION 14 Transacción inválida    EXCEEDED_AMOUNT 17 El valor excede el máximo permitido por la entidad    ABANDONED_TRANSACTION 19 Transacción abandonada por el pagador    CREDIT_CARD_NOT_AUTHORIZED_FOR _INTERNET_TRANSACTIONS 22 Tarjeta no autorizada para comprar por internet    ANTIFRAUD_REJECTED 23 Transacción rechazada por sospecha de fraude    BANK_FRAUD_REJECTED 23 Transacción rechazada debido a sospecha de fraude en la entidad financiera    DIGITAL_CERTIFICATE_NOT_FOUND 9995 Certificado digital no encontrado    BANK_UNREACHABLE 9996 Error tratando de comunicarse con el banco    PAYMENT_NETWORK_NO_CONNECTION 9996 No fue posible establecer comunicación con la entidad financiera    PAYMENT_NETWORK_NO_RESPONSE 9996 No se recibió respuesta de la entidad financiera    ENTITY_MESSAGING_ERROR 9997 Error comunicándose con la entidad financiera    NOT_ACCEPTED_TRANSACTION 9998 Transacción no permitida    INTERNAL_PAYMENT_PROVIDER_ERROR 9999 Error interno    INACTIVE_PAYMENT_PROVIDER 9999 Error interno    ERROR 9999 Error interno    ERROR_CONVERTING_TRANSACTION _AMOUNTS 9999 Error interno    BANK_ACCOUNT_ACTIVATION_ERROR 9999 Error interno    FIX_NOT_REQUIRED 9999 Error interno    AUTOMATICALLY_FIXED_AND_SUCCESS _REVERSAL 9999 Error interno    AUTOMATICALLY_FIXED_AND_UNSUCCESS _REVERSAL 9999 Error interno    AUTOMATIC_FIXED_NOT_SUPPORTED 9999 Error interno    NOT_FIXED_FOR_ERROR_STATE 9999 Error interno    ERROR_FIXING_AND_REVERSING 9999 Error interno    ERROR_FIXING_INCOMPLETE_DATA 9999 Error interno    PAYMENT_NETWORK_BAD_RESPONSE 9999 Error interno   5 (Expirada) EXPIRED_TRANSACTION 20 Transacción expirada    Códigos de los métodos de pago Los siguientes códigos aplican para payment_method_type (Página de confirmación), payment_method_id (Página de confirmación) y polPaymentMethodType (Página de respuesta).\n   Código lapPaymentMethodType\n(Página de respuesta) Descripción     2 CREDIT_CARD Tarjetas de Crédito   4 PSE Transferencias bancarias PSE   5 ACH Débitos ACH   6 DEBIT_CARD Tarjetas débito   7 CASH Efectivo   8 REFERENCED Referencia de pago   10 BANK_REFERENCED Pago en bancos   14 SPEI Transferencias bancarias SPEI    Comandos aceptados por el API de pagos    Comando Descripción     PING Utilizado para realizar ping al servicio.   SUBMIT_TRANSACTION Utilizado para enviar transacciones de cualquier tipo.   GET_PAYMENT_METHODS Utilizado para consultar los métodos de pago disponibles para el comercio.   GET_BANKS_LIST Utilizado para obtener el listado de bancos para las transacciones con PSE.    Comandos aceptados por el API de consultas    Comando Descripción     PING Utilizado para realizar ping al servicio.   ORDER_DETAIL Utilizado para consultar una orden utilizado su identificador.   ORDER_DETAIL_BY_REFERENCE_CODE Utilizado para consultar una orden utilizado su código de referencia.   TRANSACTION_RESPONSE_DETAIL Utilizado para consultar la respuesta de una transacción.    Divisas aceptadas    Moneda Descripción     ARS Peso argentino   BRL Real brasileño   CLP Peso chileno   COP Peso colombiano   MXN Peso mexicano   PEN Nuevo Sol peruano   USD Dólar americano    Estados de la orden    Estado Descripción     NEW La orden fue creada en el sistema.   IN_PROGRESS La orden está siendo procesada.   AUTHORIZED El último estado de la orden es una autorización aprobada.   CAPTURED El último estado de la orden es una captura aprobada.   CANCELLED El último estado de la orden es una cancelación aprobada.   DECLINED El último estado de la orden fue declinada.   REFUNDED El último estado de la orden es un reembolso aprobado.   CHARGEBACK El último estado de la orden es un Contracargo. Es decir, corresponde a una Dispute perdida.    Estados de la transacción    Estado Descripción     APPROVED Transacción aprobada.   DECLINED Transacción rechazada.   ERROR Error procesando la transacción.   EXPIRED Transacción expirada.   PENDING Transacción pendiente o en validación   SUBMITTED Transacción enviada a la entidad financiera y por algún motivo no terminó su procesamiento.\nSólo aplica para la API de reportes.    Tipos de transacción    Tipo Descripción     AUTHORIZATION Transacción de autorización.   AUTHORIZATION_AND_CAPTURE Transacción de cobro, Autorización y captura en un paso.   CAPTURE Transacción de captura.   VOID Transacción de cancelación de una autorización.   REFUND Transacción de reembolso o cancelación de una captura.    Paises de pago    País Descripción     AR Argentina   BR Brasil   CL Chile   CO Colombia   MX México   PA Panamá   PE Perú    Idiomas soportados    Código ISO 639 Idioma     en Inglés   es Español   pt Portugués    Tipos de documento    ISO Descripción País     CC Cédula de ciudadanía. Colombia   CE Cédula de extranjería. Colombia, Perú   CEL En caso de identificarse a través de la línea del móvil. Colombia   CEP Comprobante Electrónico de Pago. México   CI Cédula de Identidad. Argentina, Chile   CNPJ Registro Nacional de Personas Jurídicas. Brasil   CPF Registro de Personas físicas. Brasil   CUIL Código Único de Identificación Laboral. Argentina   CUIT Código Único de Identificación Tributaria. Argentina   CURP Clave Única de Registro de Población. México   DE Documento de identificación extranjero. Perú   DL Licencia de Conducción.    DNI Documento Nacional de Identidad. Argentina, Perú, Chile   DNIE Documento Nacional de Identidad - Electrónico. Argentina, Perú, Chile   EIN Número de identificación del empleador. Perú   ID Identificación.    IDC Identificador único de cliente, para el caso de ID’s únicos de clientes / usuarios de servicios públicos.    IFE Instituto Federal Electoral. México   LC Libreta Cívica. Argentina   LE Libreta de Enrolamiento. Argentina   NIF Número de Identificación Financiera.    NIT Número de Identificación Tributaria. Colombia   PP Pasaporte.    RC Registro civil de nacimiento. Colombia   RDE Tipo de documento RDE.    RE Tipo de documento RE.    RFC Registro Federal de Contribuyentes. México   RIF Registro de Información Fiscal.    RM Registro Mercantil.    RMC Registro Mercantil Consular.    RNC Registro Nacional de Contribuyentes.    RUC Registro Único de Contribuyentes. Perú   RUN Rol Único Nacional. Chile   RUT Rol Único Tributario. Chile   SC Salvoconducto.    SIEM Sistema de Información Empresarial Mexicano. México   SSN Número de Seguridad Social.    TI Tarjeta de Identidad. Colombia    Bancos para Payouts Envía el valor exacto mostrado en la columna Código en la variable transfers[n].bankAccount.bankCode. Consulta Payouts para más información.\nColombia    Código Nombre del banco     001 BOGOTA   002 POPULAR   006 ITAU CORPBANCA   007 BANCOLOMBIA   009 CITIBANK COLOMBIA   012 GNB SUDAMERIS   014 ITAU   013 BBVA   019 SCOTIABANK   023 BANCO DE OCCIDENTE   031 BANCOLDEX   032 BCSC   040 BANCO AGRARIO   041 JPMORGAN   042 BNP PARIBAS   047 MUNDOMUJER   051 DAVIVIENDA   052 AV VILLAS   059 BANCAMIA   060 PICHINCHA   061 BANCOOMEVA   062 FALABELLA   063 FINANDINA   065 BCO SANTANDER DE NEGOCIOS   066 COOPCENTRAL   067 COOMPARTIR   069 BANCO SERFINANZA   070 LULO BANK   071 BANCO JP MORGAN COLOMBIA   083 COMPENSAR   084 APORTES EN LINEA   086 ASOPAGOS   087 FEDECAJAS   088 SIMPLE   089 ENLACE OPERATIVO   090 CORFICOLOMBIANA   121 JURISCOOP   151 RAPPIPAY   283 COOP FIN DE ANTIOQUIA   289 COTRAFA   292 CONFIAR   342 SERFINANSA   370 COLTEFINANCIERA S.A. - COMPANIA DE FINANCIAMIENTO   637 IRIS   550 DECEVAL   507 NEQUI   683 DGCPTN   685 DGCPTN-REGALIAS   801 MOVII   0551 DAVIPLATA   0558 CREDIFINANCIERA S.A.   1053 BANCO WWB   1062 BANCO FALABELLA S.A.   1063 BANCO FINANDINA S.A.   1069 BANCO SERFINANZA S.A.   1283 COOPERATIVA FINANCIERA DE ANTIOQUIA   1291 COOFINEP   1292 CONFIAR COOPERATIVA FINANCIERA   1303 GIROS Y FINANZAS    ","excerpt":"Códigos de respuesta de las transacciones    Código de respuesta Descripción     ERROR Error …","ref":"/es/docs/getting-started/response-codes-and-variables.html","title":"Códigos de respuesta y Variables"},{"body":"Response codes for transactions    Response code Description     ERROR General error.   APPROVED The transaction was approved.   ANTIFRAUD_REJECTED The transaction was rejected by the anti-fraud system.   BANK_FRAUD_REJECTED The transaction was rejected due to suspected fraud at the financial institution.   PAYMENT_NETWORK_REJECTED The financial network rejected the transaction.   ENTITY_DECLINED The transaction was declined by the bank or financial network because of an error.   INTERNAL_PAYMENT_PROVIDER_ERROR An error has occurred in the system trying to process the payment.   INACTIVE_PAYMENT_PROVIDER The payment provider was not active.   DIGITAL_CERTIFICATE_NOT_FOUND The financial network reported an authentication error.   INVALID_EXPIRATION_DATE_OR_SECURITY_CODE The security code or expiration date was invalid.   INVALID_RESPONSE_PARTIAL_APPROVAL Invalid response type. The entity response is a partial approval and should be automatically canceled by the system.   INSUFFICIENT_FUNDS The account had insufficient funds.   CREDIT_CARD_NOT_AUTHORIZED _FOR_INTERNET_TRANSACTIONS The credit card was not authorized for internet transactions.   INVALID_TRANSACTION The financial network reported that the transaction was invalid.   INVALID_CARD The card is invalid.   EXPIRED_CARD The card has expired.   RESTRICTED_CARD The card has a restriction.   CONTACT_THE_ENTITY You should contact the bank.   REPEAT_TRANSACTION You must repeat the transaction.   ENTITY_MESSAGING_ERROR The financial network reported a communication error with the bank.   BANK_UNREACHABLE The bank was not available.   EXCEEDED_AMOUNT The transaction exceeds the amount set by the bank.   NOT_ACCEPTED_TRANSACTION The transaction was not accepted by the bank for some reason.   ERROR_CONVERTING_TRANSACTION_AMOUNTS An error occurred converting the amounts to the payment currency.   EXPIRED_TRANSACTION The transaction expired.   PENDING_TRANSACTION_REVIEW The transaction was stopped and must be revised, this can occur because of security filters.   PENDING_TRANSACTION_CONFIRMATION The transaction is subject to confirmation.   PENDING_TRANSACTION_TRANSMISSION The transaction is subject to be transmitted to the financial network. This usually applies to transactions with cash payment means.   PAYMENT_NETWORK_BAD_RESPONSE The message returned by the financial network is inconsistent.   PAYMENT_NETWORK_NO_CONNECTION Could not connect to the financial network.   PAYMENT_NETWORK_NO_RESPONSE Financial Network did not respond.   FIX_NOT_REQUIRED Transactions clinic: internal handling code.   AUTOMATICALLY_FIXED_AND_SUCCESS_REVERSAL Transactions clinic: internal handling code. Query API.   AUTOMATICALLY_FIXED_AND_UNSUCCESS_REVERSAL Transactions clinic: internal handling code. Query API.   AUTOMATIC_FIXED_NOT_SUPPORTED Transactions clinic: internal handling code. Query API.   NOT_FIXED_FOR_ERROR_STATE Transactions clinic: internal handling code. Query API.   ERROR_FIXING_AND_REVERSING Transactions clinic: internal handling code. Query API.   ERROR_FIXING_INCOMPLETE_DATA Transactions clinic: internal handling code. Query API.    Response codes sent to the response page     lap Transaction State transaction State pol Transaction State lapResponseCode pol Response Code Description     APPROVED 4 (Approved) 4 (Approved) APPROVED 1 Transaction approved   DECLINED 6 (Declined) 6 (Rejected) PAYMENT_NETWORK_REJECTED 4 Transaction rejected by payment network      ENTITY_DECLINED 5 Transaction has been declined by the bank      INSUFFICIENT_FUNDS 6 Insufficient funds      INVALID_CARD 7 Invalid Card      CONTACT_THE_ENTITY 8 Please contact your financial entity      BANK_ACCOUNT_ACTIVATION _ERROR 8 Automatic debit not allowed      BANK_ACCOUNT_NOT_AUTHORIZED _FOR_AUTOMATIC_DEBIT 8 Automatic debit not allowed      INVALID_AGENCY_BANK_ACCOUNT 8 Automatic debit not allowed      INVALID_BANK_ACCOUNT 8 Automatic debit not allowed      INVALID_BANK 8 Automatic debit not allowed      EXPIRED_CARD 9 Expired card      RESTRICTED_CARD 10 Restricted card      INVALID_EXPIRATION_DATE_OR _SECURITY_CODE 12 Date of expiration or security code is invalid      REPEAT_TRANSACTION 13 Retry the transaction      INVALID_TRANSACTION 14 Transaction invalid      EXCEEDED_AMOUNT 17 Value exceeds maximum allowed by this entity      ABANDONED_TRANSACTION 19 Transaction abandoned by the payer      CREDIT_CARD_NOT_AUTHORIZED_FOR _INTERNET_TRANSACTIONS 22 Card is not authorized for internet purchases      ANTIFRAUD_REJECTED 23 Transaction has been rejected by the anti-fraud module      BANK_FRAUD_REJECTED 23 The transaction was rejected due to suspected fraud at the financial institution      DIGITAL_CERTIFICATE_ NOT_FOUND 9995 Digital certificate not found      BANK_UNREACHABLE 9996 Error trying to communicate with the bank      ENTITY_MESSAGING _ERROR 9997 Error communicating with the financial institution      NOT_ACCEPTED_ TRANSACTION 9998 Transaction not permitted to cardholder      INTERNAL_PAYMENT _PROVIDER_ERROR 9999 Internal error      INACTIVE_PAYMENT_ PROVIDER 9999 Internal error   ERROR 104 (Error) 6 (Rejected) ERROR 9999 Internal error      ERROR_CONVERTING_TRANSACTION _AMOUNTS 9999 Internal error      BANK_ACCOUNT_ACTIVATION_ERROR 9999 Internal error      FIX_NOT_REQUIRED 9999 Internal error      AUTOMATICALLY_FIXED_AND_SUCCESS _REVERSAL 9999 Internal error      AUTOMATICALLY_FIXED _AND_UNSUCCESS _REVERSAL 9999 Internal error      AUTOMATIC_FIXED_ NOT_SUPPORTED 9999 Internal error      NOT_FIXED_FOR_ ERROR_STATE 9999 Internal error      ERROR_FIXING_AND _REVERSING 9999 Internal error      ERROR_FIXING_ INCOMPLETE_DATA 9999 Internal error      PAYMENT_NETWORK_ BAD_RESPONSE 9999 Internal error      PAYMENT_NETWORK_ NO_CONNECTION 9996 Unable to communicate with the financial institution      PAYMENT_NETWORK_ NO_RESPONSE 9996 No response from the financial institution   EXPIRED 5 (Expired) 5 (Expired) EXPIRED_TRANSACTION 20 Transaction expired   PENDING 7 (Pending) 7 (Pending) PENDING_TRANSACTION_ REVIEW 15 Transaction is pending approval     14 (Pending) PENDING_TRANSACTION_ CONFIRMATION 25 Receipt of payment generated. Pending payment     7 (Pending) PENDING_TRANSACTION_ TRANSMISSION 9998 Not permitted transaction     14 (Pending) PENDING_PAYMENT_IN_ENTITY 25 Receipt of payment generated. Pending payment     15 (Pending) PENDING_PAYMENT_IN_BANK 26 Receipt of payment generated. Pending payment     10 (Pending) PENDING_SENT_TO_FINANCIAL _ENTITY 29      12 (Pending) PENDING_AWAITING_PSE _CONFIRMATION 9994 Pending confirmation from PSE     18 (Pending) PENDING_NOTIFYING_ENTITY 25 Receipt of payment generated. Pending payment    Response codes sent to the confirmation page     state_pol response_message_pol response_code_pol Description     4 (Approved) APPROVED 1 Transaction approved   6 (Declined) PAYMENT_NETWORK_REJECTED 4 Transaction rejected by financial institution    ENTITY_DECLINED 5 Transaction rejected by the bank    INSUFFICIENT_FUNDS 6 Insufficient funds    INVALID_CARD 7 Invalid card    CONTACT_THE_ENTITY 8 Contact the financial institution    BANK_ACCOUNT_ACTIVATION_ERROR 8 Automatic debit is not allowed    BANK_ACCOUNT_NOT_AUTHORIZED _FOR_AUTOMATIC_DEBIT 8 Automatic debit is not allowed    INVALID_AGENCY_BANK_ACCOUNT 8 Automatic debit is not allowed    INVALID_BANK_ACCOUNT 8 Automatic debit is not allowed    INVALID_BANK 8 Automatic debit is not allowed    EXPIRED_CARD 9 Expired card    RESTRICTED_CARD 10 Restricted card    INVALID_EXPIRATION_DATE_OR _SECURITY_CODE 12 Invalid expiration date or security code    REPEAT_TRANSACTION 13 Retry payment    INVALID_TRANSACTION 14 Invalid transaction    EXCEEDED_AMOUNT 17 The value exceeds the maximum allowed by the entity    ABANDONED_TRANSACTION 19 Transaction abandoned by the payer    CREDIT_CARD_NOT_AUTHORIZED_FOR _INTERNET_TRANSACTIONS 22 Card not authorized to buy online    ANTIFRAUD_REJECTED 23 Transaction refused because of suspected fraud    BANK_FRAUD_REJECTED 23 The transaction was rejected due to suspected fraud at the financial institution    DIGITAL_CERTIFICATE_NOT_FOUND 9995 Digital certificate not found    BANK_UNREACHABLE 9996 Error trying to communicate with the bank    PAYMENT_NETWORK_NO_CONNECTION 9996 Unable to communicate with the financial institution    PAYMENT_NETWORK_NO_RESPONSE 9996 No response was received from the financial institution    ENTITY_MESSAGING_ERROR 9997 Error communicating with the financial institution    NOT_ACCEPTED_TRANSACTION 9998 Transaction not permitted    INTERNAL_PAYMENT_PROVIDER_ERROR 9999 Error    INACTIVE_PAYMENT_PROVIDER 9999 Error    ERROR 9999 Error    ERROR_CONVERTING_TRANSACTION _AMOUNTS 9999 Error    BANK_ACCOUNT_ACTIVATION_ERROR 9999 Error    FIX_NOT_REQUIRED 9999 Error    AUTOMATICALLY_FIXED_AND_SUCCESS _REVERSAL 9999 Error    AUTOMATICALLY_FIXED_AND_UNSUCCESS _REVERSAL 9999 Error    AUTOMATIC_FIXED_NOT_SUPPORTED 9999 Error    NOT_FIXED_FOR_ERROR_STATE 9999 Error    ERROR_FIXING_AND_REVERSING 9999 Error    ERROR_FIXING_INCOMPLETE_DATA 9999 Error    PAYMENT_NETWORK_BAD_RESPONSE 9999 Error   5 (Expired) EXPIRED_TRANSACTION 20 Expired transaction    Codes of the payment methods The following codes applies for payment_method_type (Confirmation Page), payment_method_id (Confirmation Page), and polPaymentMethodType (Response Page).\n   Code lapPaymentMethodType\n(Response Page) Description     2 CREDIT_CARD Credit Cards   4 PSE PSE Bank transfers   5 ACH ACH debits   6 DEBIT_CARD Debit cards   7 CASH Cash   8 REFERENCED Referenced payment   10 BANK_REFERENCED Payment in banks   14 SPEI SPEI Bank transfers    Commands accepted by the Payments API    Command Description     PING Used to ping the service.   SUBMIT_TRANSACTION Used to send transactions of any kind.   GET_PAYMENT_METHODS Used to query the shop’s available payment methods.   GET_BANKS_LIST It is used to obtain the bank list for PSE transactions.    Commands accepted by the Query API    Command Description     PING Used to ping the service.   ORDER_DETAIL Used to query an order using its identifier.   ORDER_DETAIL_BY_REFERENCE_CODE Used to query an order using its reference code.   TRANSACTION_RESPONSE_DETAIL Used to check the response of a transaction.    Accepted currencies    Currency Description     ARS Argentine Peso   BRL Brazilian Real   CLP Chilean Peso   COP Colombian Peso   MXN Mexican Peso   PEN Peruvian Nuevo Sol   USD US Dollar    Order status    Status Description     NEW The order was created in the system   IN_PROGRESS The order is being processed.   AUTHORIZED The last transaction of the order is an approved authorization.   CAPTURED The last transaction of the order is an approved capture.   CANCELLED The last transaction of the order is an approved cancellation.   DECLINED The last transaction of the order is declined.   REFUNDED The last transaction of the order is an approved refund.   CHARGEBACK The last transaction of the order is a Chargeback. Namely, corresponds to a lost Dispute.    Transaction states    State Description     APPROVED Approved transaction   DECLINED Rejected transaction   ERROR Error processing the transaction   EXPIRED Expired transaction   PENDING Pending transaction or in validation   SUBMITTED Transaction sent to the financial institution but the processing did not finish.\nquery API.    Transaction types    Type Description     AUTHORIZATION Authorization transaction.   AUTHORIZATION_AND_CAPTURE Charge transaction, Authorization and capture in one step.   CAPTURE Capture Transaction.   VOID Cancellation transaction of an authorization.   REFUND Refund transaction or cancellation of a capture.    Processing countries    Country Description     AR Argentina   BR Brazil   CL Chile   CO Colombia   MX Mexico   PA Panama   PE Peru    Supported Languages    ISO code 639 Language     en English   es Spanish   pt Portuguese    Document types    ISO Description Country     CC Citizenship card. Colombia   CE Foreign citizenship card. Colombia, Peru   CEL When identified by the mobile line. Colombia   CEP Electronic Payment Receipt Mexico   CI Identity Card. Argentina, Chile   CNPJ National Register of Legal Entities Brazil   CPF Registration of Individuals Brazil   CUIL Unique Labor Identification Code Argentina   CUIT Single Tax identification Argentina   CURP Unique Population Registry Code Mexico   DE Foreing Identifiaction Number Peru   DL Driver License    DNI National Identity Document Argentina, Peru, Chile   DNIE National Identity Document - Electronical Argentina, Peru, Chile   EIN Employer Identification Number Peru   ID Identification    IDC Client´s unique identifier, in the case of unique customer / utility consumer ID\u0026rsquo;s.    IFE Federal Electoral Institute Mexico   LC Civic Notebook Argentina   LE Book enlistment Argentina   NIF Tax identification number    NIT Tax identification number Colombia   PP Passport.    RC Birth certificate. Colombia   RDE RDE document type    RE RE document type    RFC Federal taxpayer registry Mexico   RIF Tax Information Registry    RM Commercial Register    RMC Consular Registration    RNC National Taxpayers Registry    RUC Unique Taxpayer Registration Peru   RUN Unique National Role Chile   RUT Unique Tributary Role Chile   SC Safe Passage    SIEM Mexican Business Information System Mexico   SSN Social Security Number    TI Identity Card. Colombia    Banks for Payouts Send the exact value displayed in the Code column in the variable transfers[n].bankAccount.bankCode. Refer to Payouts for more information.\nColombia    Code Bank name     001 BOGOTA   002 POPULAR   006 ITAU CORPBANCA   007 BANCOLOMBIA   009 CITIBANK COLOMBIA   012 GNB SUDAMERIS   014 ITAU   013 BBVA   019 SCOTIABANK   023 BANCO DE OCCIDENTE   031 BANCOLDEX   032 BCSC   040 BANCO AGRARIO   041 JPMORGAN   042 BNP PARIBAS   047 MUNDOMUJER   051 DAVIVIENDA   052 AV VILLAS   059 BANCAMIA   060 PICHINCHA   061 BANCOOMEVA   062 FALABELLA   063 FINANDINA   065 BCO SANTANDER DE NEGOCIOS   066 COOPCENTRAL   067 COOMPARTIR   069 BANCO SERFINANZA   070 LULO BANK   071 BANCO JP MORGAN COLOMBIA   083 COMPENSAR   084 APORTES EN LINEA   086 ASOPAGOS   087 FEDECAJAS   088 SIMPLE   089 ENLACE OPERATIVO   090 CORFICOLOMBIANA   121 JURISCOOP   151 RAPPIPAY   283 COOP FIN DE ANTIOQUIA   289 COTRAFA   292 CONFIAR   342 SERFINANSA   370 COLTEFINANCIERA S.A. - COMPANIA DE FINANCIAMIENTO   637 IRIS   550 DECEVAL   507 NEQUI   683 DGCPTN   685 DGCPTN-REGALIAS   801 MOVII   0551 DAVIPLATA   0558 CREDIFINANCIERA S.A.   1053 BANCO WWB   1062 BANCO FALABELLA S.A.   1063 BANCO FINANDINA S.A.   1069 BANCO SERFINANZA S.A.   1283 COOPERATIVA FINANCIERA DE ANTIOQUIA   1291 COOFINEP   1292 CONFIAR COOPERATIVA FINANCIERA   1303 GIROS Y FINANZAS    ","excerpt":"Response codes for transactions    Response code Description     ERROR General error.   APPROVED The …","ref":"/en/docs/getting-started/response-codes-and-variables.html","title":"Response Codes and Variables"},{"body":"","excerpt":"","ref":"/es/docs/server-status.html","title":"Estado de nuestros servicios"},{"body":"window.onload = function () { document.getElementsByClassName(\"section-index\")[0].style.display = \"none\"; }; -- ","excerpt":"window.onload = function () { document.getElementsByClassName(\"section-index\")[0].style.display = …","ref":"/en/docs/server-status.html","title":"Server Status"},{"body":"¿Qué son Cuotas y Promociones? Con Cuotas y Promociones, puedes ofrecer a tus clientes la posibilidad de comprar tus productos pagando con un determinado número de cuotas con una tasa de interés reducida. Independiente del número de cuantas que seleccione tu cliente, recibirás el monto total de la compra menos la comisión que hayas acordado con PayU.\nPara realizar la configuración de Cuotas y Promociones basado en los acuerdos que tengas con las entidades bancarias, contacta a tu representante de ventas.\nNota Para México, puedes utilizar Meses sin intereses (MSI).  ¿Cómo funcionan Cuotas y Promociones en PayU? Para utilizar promociones, primero necesitas consultar las promociones disponibles para tu tienda; luego, seleccionar la que se ajuste mejor a tus necesidades y finalmente, enviar la solicitud de pago junto con el ID de la promoción y el número de cuotas.\nLa siguiente secuencia de eventos explica mejor el flujo de promociones.\nMeses sin intereses - MSI Meses sin intereses te permite ofrecer a tus clientes la posibilidad de pagar en un número de cuotas libres de intereses (3, 6, 9, 12 o 18). A diferencia del modelo de Promociones, cuando utilizas MSI no necesitas consultar el ID de la promoción.\nPara solicitar el uso de MSI, contacta a tu representante de ventas.\nNota Los valores mínimos para MSI dependen del número de cuotas seleccionado:\n 3 \u0026gt; $300 MXN 6 \u0026gt; $600 MXN 9 \u0026gt; $900 MXN 12 \u0026gt; $1200 MXN 18 \u0026gt; $1800 MXN   ¿Qué sigue? La integración con esta funcionalidad puede realizarse utilizando el API de Promociones. Para saber cómo integrarse con MSI, consulta esta sección.\n","excerpt":"¿Qué son Cuotas y Promociones? Con Cuotas y Promociones, puedes ofrecer a tus clientes la …","ref":"/es/docs/services/promotions.html","title":"Cuotas y Promociones - Argentina y México"},{"body":"What are Installments and Promotions With Installments and Promotions, you can offer to your customer the possibility to buy your products paying in a determined number of installments with a reduced interest rate. Regardless of the number of installments selected by your customer, you will receive the full amount of the purchase minus the commission free agreed with PayU.\nTo perform the configuration of Installments and Promotions based on the agreements you have with bank entities, contact your sales representative.\nNote For Mexico, you can use Months Without Interests (MSI - Meses sin intereses)  How does Installments and Promotions works in PayU To use promotions, you need to first consult the available promotions for your shop; then, select the promotion that fits to your needs and finally, send the payment request along with the promotion Id selected and the number of installments.\nThe following sequence of events explains better the promotions flow.\nMonths Without Interests (MSI - Meses sin intereses) Months Without Interests (known in Mexico as Meses sin intereses) lets you offer to your customers the possibility to pay in a defined number of interest-free installments (3, 6, 9, 12, or 18). Unlike the promotions model, when using MSI you don\u0026rsquo;t need to query the promotion id.\nTo request the usage of MSI, contact your sales representative.\nNote The minimum values for MSI depends on the number of installments selected:\n 3 \u0026gt; $300 MXN 6 \u0026gt; $600 MXN 9 \u0026gt; $900 MXN 12 \u0026gt; $1200 MXN 18 \u0026gt; $1800 MXN   What\u0026rsquo;s next? The integration with this feature can be performed using the Promotions API. To learn how to integrate with MSI, refer to this section.\n","excerpt":"What are Installments and Promotions With Installments and Promotions, you can offer to your …","ref":"/en/docs/services/promotions.html","title":"Installments and Promotions - Argentina and Mexico"},{"body":"Para términos introductorios, cómo solicitar este servicio y más información, consulta Payouts.\nConfigurar la autenticación Para utilizar los métodos para gestionar Payouts o WebHooks expuestos por este servicio, debes incluir los encabezados Authorization y PublicKey:\n Para configurar el encabezado Authorization, invoca el método de autenticación del servicio de Payouts. Ejemplo:  Bearer eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTYyODU0ODE2NywiaWF0IjoxNjI4NTQ4MTY3fQ.jrO3u5ramYKOvoNNb0TNfBuZkbYg1EvPmCDDYXFEO4c \n Para configurar el encabezado PublicKey, utiliza tu Llave pública que puedes encontrar en el Módulo PayU (Configuración \u0026gt; Configuración técnica \u0026gt; Llave pública).  Métodos disponibles El API de Payouts incluye los siguientes métodos:\n Autenticación Solicitar payout Cancelar solicitud de payout Crear o actualizar un WebHook Eliminar un WebHook Consultar WebHooks  Autenticación Sin importar el método que quieras invocar, el primer paso es autenticar tu cuenta utilizando las credenciales entregadas por PayU.\nEl método autenticación inicia sesión al comercio retornando el token JWT generado para utilizar los servicios expuestos por Payouts. Este token está disponible durante 10 minutos después de su creación.\nLlamado del API Para autenticar, envía la petición así:\nPOST https://{env-api}.payulatam.com/v1.0/authenticate?accountId={accountId}\u0026amp;apiKey={apiKey}\u0026amp;apiLogin={apiLogin} \nEl valor de la variable {env-api} mostrada anteriormente es sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     accountId Identificador de tu cuenta por cada país en el sistema de PayU. Sí   apiKey Contraseña entregada por PayU. Cómo obtengo mi API Key Sí   apiLogin Usuario o login entregado por PayU. Cómo obtengo mi API Login Sí    Ejemplo respuesta  JSON   { \u0026#34;token\u0026#34;: \u0026#34;Bearer eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTYyODU0ODE2NywiaWF0IjoxNjI4NTQ4MTY3fQ.jrO3u5ramYKOvoNNb0TNfBuZkbYg1EvPmCDDYXFEO4c\u0026#34; }     --  Solicitar payout Este método te permite crear uno o multiples solicitudes de Payouts para beneficiarios nuevos o existentes. Tan pronto creas la solicitud, esta se mueve en los estados disponibles de Payouts.\nNota Necesitas incluir dos encabezados para utilizar este método, consulta Configurar a autenticación para más información. Además, necesitas saber tu Merchant ID y tu Account ID, puedes obtener esta información en tu Módulo PayU.  Llamado del API Para crear un Payout, utiliza la siguiente URL:\nPOST https://{env-api}.payulatam.com/v1.0/supplier-transfers/{merchantId}/{accountId} \nEl valor de la variable {env-api} mostrada anteriormente es sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     merchantId Identificador del comercio en el sistema de PayU. Sí   accountId Identificador de la cuenta para cada país asociada al comercio. Sí    Ambos parámetros se pueden encontrar el tu Módulo PayU.\nVariables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     transfers Lista  Lista de las transferencias que quieres crear. Sí   transfers[n] \u0026gt; value Numérico  Valor a transferir de tus fondos. La moneda de la que está configurada en tu cuenta PayU. Sí   transfers[n] \u0026gt; bankAccount   Este objeto tiene a información de a cuenta bancaria del beneficiario que recibirá el pago.\nEl beneficiario puede ser nuevo o existente. Sí   transfers[n] \u0026gt; bankAccount \u0026gt; id Alfanumérico 36 Identificador de la cuenta bancaria del beneficiario.\nEnvía este parámetro cuando quieras solicitar un Payout para un beneficiario existente. No   transfers[n] \u0026gt; bankAccount \u0026gt; supplierType Alfanumérico Min:11 Max:16 Tipo de relación entre ti y tu beneficiario. Puedes escoger uno de los siguientes valores: SUBMERCHANT: selecciona esta relación si el beneficiario es un comercio relacionado.RELATED_PROVIDER: selecciona esta relación si el beneficiario es un proveedorRELATED_THIRD_PARTY: selecciona este tipo si el beneficiario es un cliente, un empleado o cualquier usuario de tus servicios.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; accountNumber Alfanumérico Max:17 Número de cuenta bancaria del beneficiario.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; bankCode Numérico Min:3 Max:4 Código del banco emisor de la cuenta del beneficiario. Ver códigos de bancos. No   transfers[n] \u0026gt; bankAccount \u0026gt; accountType Alfanumérico 2 Asigna CC para cuenta corriente y CA para cuenta de ahorros o Nequi*.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario.\n*Nequi está disponible en Colombia. No   transfers[n] \u0026gt; bankAccount \u0026gt; country Alfanumérico 2 País de la cuenta bancaria en formato ISO 3166 Alpha-2.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; documentNumber Numérico 50 Número de identificación del beneficiario. Si el valor de documentType es NIT, el número de documento debe contener un guion (-) y el dígito de verificación. Ejemplo: 830140299-6.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; documentType Alfanumérico 2 Tipo de identificación del beneficiario. Ver tipos de documento.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; expeditionDate Alfanumérico 10 Fecha de expedición del documento del beneficiario. Formato YYYY/MM/DD. No   transfers[n] \u0026gt; bankAccount \u0026gt; fullName Alfanumérico  Nombre del beneficiario.\nEste parámetro es obligatorio cuando estás creando una solicitud de Payout para un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; birthDate Alfanumérico 10 Fecha de nacimiento del beneficiario. Formato YYYY/MM/DD. No   transfers[n] \u0026gt; bankAccount \u0026gt; state Alfanumérico  Estado de la cuenta bancaria. Asigna ACTIVE cuando estés creando un nuevo beneficiario. No   transfers[n] \u0026gt; bankAccount \u0026gt; merchantId Numérico  Identificador de tu comercio en PayU. No   transfers[n] \u0026gt; description Alfanumérico  Información adiciona del payout. No       Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     totalSuccessful Numérico  Número de payouts creados exitosamente.   totalFailed Numérico  Número de payments que no pudieron ser creados.   successfulItems Lista  Lista de items que fueron procesados con éxito.   successfulItems[n] \u0026gt; processingStatus Alfanumérico 7 Estado de la solicitud del Payout. Para transacciones exitosas, el valor es SUCCESS   successfulItems[n] \u0026gt; paymentOrderId Alfanumérico 36 Identificador generado por la solicitud de pago. Utiliza este ID ya sea para editar o cancelar la solicitud.   successfulItems[n] \u0026gt; value Numérico  Monto de la solicitud.   successfulItems[n] \u0026gt; bankAccount   Este objeto tiene la información de la cuenta bancaria que recibirá el pago.   successfulItems[n] \u0026gt; bankAccount \u0026gt; processingStatus Alfanumérico 7 Estado del registro de la cuenta bancaria. Para registros exitosos, el valor es SUCCESS.   successfulItems[n] \u0026gt; bankAccount \u0026gt; id Alfanumérico 36 Identificador de la cuenta bancaria registrada.   successfulItems[n] \u0026gt; bankAccount \u0026gt; supplierType Alfanumérico Min:11 Max:16 Tipo de relación seleccionado para el beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; accountNumber Alfanumérico Max:17 Número de cuenta bancaria del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; bankCode Numérico Min:3 Max:4 Código del banco emisor de la cuenta del beneficiario. Ver códigos de bancos.   successfulItems[n] \u0026gt; bankAccount \u0026gt; bankName Alfanumérico  Nombre del banco del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; accountType Alfanumérico 2 Tipo de cuenta del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; country Alfanumérico 2 País de la cuenta bancaria.   successfulItems[n] \u0026gt; bankAccount \u0026gt; documentNumber Numérico 50 Número de identificación del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; documentType Alfanumérico 2 Tipo de identificación del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; expeditionDate Alfanumérico 10 Fecha de expedición del documento de identidad del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; fullName Alfanumérico  Nombre del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; birthDate Alfanumérico 10 Fecha de nacimiento del beneficiario.   successfulItems[n] \u0026gt; bankAccount \u0026gt; state Alfanumérico  Estado de la cuenta bancaria.   successfulItems[n] \u0026gt; description Alfanumérico  Información adiciona del payout.   failedItems Lista  Lista of items that failed during processing.   failedItems[n] \u0026gt; processingStatus Alfanumérico 7 Estado de la solicitud del Payout. Para transacciones fallidas, el valor es FAILED.   failedItems[n] \u0026gt; failureMessages Lista  Lista de mensajes de error que generaron la falla.   failedItems[n] \u0026gt; value Numérico  Monto de la solicitud.   failedItems[n] \u0026gt; bankAccount   Este objeto tiene la información de la cuenta bancaria que falló. Este elemento tiene los mismo parámetros que el objeto successfulItems[n].bankAccount.     El siguiente ejemplo de petición envía tres payouts:\n El primer y segundo payout son solicitados para beneficiarios no registrados. El segundo falla debido a que el parámetro bankCode tiene un valor inválido. El tercer payout es para un beneficiario registrado.   JSON   Ejemplo petición:\n{ \u0026#34;transfers\u0026#34;: [ { \u0026#34;value\u0026#34;: 1500000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_THIRD_PARTY\u0026#34;, \u0026#34;accountNumber\u0026#34;: 2198922910000, \u0026#34;bankCode\u0026#34;: \u0026#34;007\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: 1026304116, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;1996-05-17\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Santiago Romero Pineda\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1975-03-07\u0026#34;, \u0026#34;merchantId\u0026#34;: 510608 }, \u0026#34;description\u0026#34;: \u0026#34;Primer pago\u0026#34; }, { \u0026#34;value\u0026#34;: 2000000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_PROVIDER\u0026#34;, \u0026#34;accountNumber\u0026#34;: 2198922910330, \u0026#34;bankCode\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: 102688116, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;2001-05-17\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1985-04-17\u0026#34;, \u0026#34;merchantId\u0026#34;: 510608 }, \u0026#34;description\u0026#34;: \u0026#34;Pago de suministros\u0026#34; }, { \u0026#34;value\u0026#34;: 4500000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;e202507e-5551-4b67-be2a-a2a834bf1438\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Pago a proveedor registrado\u0026#34; } ] } \nEjemplo respuesta:\n{ \u0026#34;totalSuccessful\u0026#34;: 2, \u0026#34;totalFailed\u0026#34;: 1, \u0026#34;successfulItems\u0026#34;: [ { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;paymentOrderId\u0026#34;: \u0026#34;7202a9a7-ef51-4202-bd23-e604f9cbb25b\u0026#34;, \u0026#34;value\u0026#34;: 1500000.00, \u0026#34;bankAccount\u0026#34;: { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;e202507e-5551-4b67-be2a-a2a834bf1438\u0026#34;, \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_THIRD_PARTY\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;2198922910000\u0026#34;, \u0026#34;bankCode\u0026#34;: \u0026#34;007\u0026#34;, \u0026#34;bankName\u0026#34;: \u0026#34;BANCOLOMBIA\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: \u0026#34;1026304116\u0026#34;, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;1996-05-16T05:00:00.000+00:00\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Santiago Romero Pineda\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1975-03-06T05:00:00.000+00:00\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;ACTIVE\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Primer pago\u0026#34; }, { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;paymentOrderId\u0026#34;: \u0026#34;32740b81-5ecc-466c-bc09-699e6e5ceefb\u0026#34;, \u0026#34;value\u0026#34;: 4500000.00, \u0026#34;bankAccount\u0026#34;: { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;8f425a79-3f15-4e64-a1bf-2f7c087587ec\u0026#34;, \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_THIRD_PARTY\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;0200005555\u0026#34;, \u0026#34;bankCode\u0026#34;: \u0026#34;013\u0026#34;, \u0026#34;bankName\u0026#34;: \u0026#34;BBVA COLOMBIA\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: \u0026#34;81856522\u0026#34;, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;2002-02-17T05:00:00.000+00:00\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Jorge Gutierrez\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1986-02-11T05:00:00.000+00:00\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;ACTIVE\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Pago a proveedor registrado\u0026#34; } ], \u0026#34;failedItems\u0026#34;: [ { \u0026#34;processingStatus\u0026#34;: \u0026#34;FAILED\u0026#34;, \u0026#34;failureMessages\u0026#34;: [ \u0026#34;There is no registered bank with code: 8\u0026#34; ], \u0026#34;value\u0026#34;: 2000000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;processingStatus\u0026#34;: \u0026#34;FAILED\u0026#34;, \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_PROVIDER\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;2198922910330\u0026#34;, \u0026#34;bankCode\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: \u0026#34;102688116\u0026#34;, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;2001-05-17T00:00:00.000+00:00\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1985-04-17T00:00:00.000+00:00\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Pago de suministros\u0026#34; } ] }   Ejemplo petición:\n\nEjemplo respuesta:\n  --  Nota Necesitas incluir dos encabezados para utilizar este método, consulta Configurar a autenticación para más información. Además, necesitas saber tu Merchant ID y tu Account ID, puedes obtener esta información en tu Módulo PayU.  ### Llamado del API {#api-call-2} Para actualizar una solicitud de Payout, utiliza la siguiente URL: ```JAVA PUT https://{env-api}.payulatam.com/v1.0/supplier-transfers/bank-account/{merchantId}/{accountId}/{bankAccountId} ``` El valor de la variable `{env-api}` is `sandbox-transfers` para pruebas y `transfers` para producción. | Parámetro | Descripción | Obligatorio | |---------------|-----------------------------------------------------------------------------------------------|:-----------:| | merchantId | Identificador del comercio en el sistema de PayU. | Sí | | accountId | Identificador de la cuenta para cada país asociada al comercio. | Sí | | bankAccountId | Identificador retronado por el [Servicio de solicitar payout](#request-payout). | Sí | ### Variables para la solicitud {#variables-for-request}  | Nombre del campo | Formato | Tamaño | Descripción | Obligatorio | |---|---|---|---|:-:| | id | Alfanumérico | 36 | Identificador de la cuenta bancaria del beneficiario. | Sí | | accountNumber | Alfanumérico | Max:17 | Número de cuenta bancaria del beneficiario. | Sí |--  JSON   Ejemplo petición:\n{ \u0026#34;id\u0026#34;: \u0026#34;1f92a225-9559-4b7f-9739-e6bb27b8b838\u0026#34;, \u0026#34;accountNumber\u0026#34;: 2198922910031 } \nEjemplo respuesta:\n{ \u0026#34;message\u0026#34;: \u0026#34;Update received\u0026#34; }   -- Ejemplo petición:\n\nEjemplo respuesta:\n  -- -- Cancelar solicitud de payout Este método te permite cancelar la solicitud de payout. Solo puedes solicitar la cancelación de un Payout cuando está en estado IN_PAYU_PROCESS o antes. Consulta estados del Payout para más información.\nNota Necesitas incluir dos encabezados para utilizar este método, consulta Configurar a autenticación para más información. Además, necesitas saber tu Merchant ID y tu Account ID, puedes obtener esta información en tu Módulo PayU.  Llamado del API Para cancelar una solicitud de Payout, utiliza la siguiente URL:\nDELETE https://{env-api}.payulatam.com/v1.0/supplier-transfers/{merchantId}/{accountId}/{paymentOrderId} \nEl valor de la variable {env-api} is sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     merchantId Identificador del comercio en el sistema de PayU. Sí   accountId Identificador de la cuenta para cada país asociada al comercio. Sí   paymentOrderId Identificador del Payout generado cuando el servicio de solicitar payout creó la orden. Sí    Variables para la solicitud     Nombre del campo Formato Tamaño Descripción Obligatorio     comments Alfanumérico  Razón para cancelar la solicitud de Payout. No   pushPaymentId Alfanumérico  Identificador del Payout que se va a cancelar. No    Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON   Ejemplo petición:\n{ \u0026#34;comments\u0026#34;: \u0026#34;Solicitud de cancelación del Payout\u0026#34;, \u0026#34;pushPaymentId\u0026#34;: \u0026#34;1f92a225-9559-4b7f-9739-e6bb27b8b838\u0026#34; } \nEjemplo respuesta:\n{ \u0026#34;message\u0026#34;: \u0026#34;Cancellation request received\u0026#34; }   Ejemplo petición:\n\nEjemplo respuesta:\n  --  Crear o actualizar un WebHook Este método te permite crea o actualizar un WebHook el cual te permitee configurar una URL donde PayU notifica los cambios de estado de los Payout vía POST.\nPuedes configurar un WebHook para los siguiente eventos:\n Creación de la transferencia: envía una notificación cuando se crea un payout. Para activar estas notificaciones, incluye el valor TRANSFER_CREATION en el parámetro enabledEvents. Actualización de la transferencia: envía una notificación cuando la validación de Sanction Screening rechaza el beneficiario. Para activar estas notificaciones, incluye el valor TRANSFER_UPDATE en el parámetro enabledEvents. Resultado de la validación: envía una notificación cuando el beneficiario aprobó la validación de pSanction Screening y cuando la transferencia ha sido rechazada por el banco. Para activar estas notificaciones, incluye el valor VALIDATION_RESULT en el parámetro enabledEvents.  Haz clic acá para conocer las variables en la notificaciones.\nNota Necesitas incluir dos encabezados para utilizar este método, consulta Configurar a autenticación para más información. Además, necesitas saber tu Merchant ID y tu Account ID, puedes obtener esta información en tu Módulo PayU.  Llamado del API  Para crear un WebHook, utiliza:  POST https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId} \n Para actualizar un WebHook, utiliza:  PUT https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId} \nEl valor de la variable {env-api} is sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     merchantId Identificador del comercio en el sistema de PayU. Sí   accountId Identificador de la cuenta para cada país asociada al comercio. Sí    Variables para la petición y la respuesta  Petición (Request)     Nombre del campo Formato Tamaño Descripción Obligatorio     id Alfanumérico  Identificador del WebHook que desear actualizar. Este parámetro es obligatorio cuando actualices un WebHook No   accountId Numérico  Identificador de la cuenta para cada país asociada al comercio. Sí   callbackUrl Alfanumérico  URL utilizada para recibir las notificaciones POST enviadas por PayU de acuerdo con los eventos seleccionados. Esta URL debe ser única por WebHook. Sí   description Alfanumérico  Descripción del WebHook que deseas crear. Sí   enabledEvents Lista Max:3 Lista de eventos que lanzarán una notificación a la URL configurada cuando ocurran. Se debe selecciona al menos un evento.\nLos posibles valores son: TRANSFER_UPDATE, TRANSFER_CREATION, VALIDATION_RESULT. Sí      Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     id Alfanumérico  Identificador del WebHook creado.   created Fecha  Fecha de creación del WebHook. Formato YYYY-DD-MM hh:mm:ss.   accountId Numérico  Identificador de la cuenta para cada país asociada al comercio.   callbackUrl Alfanumérico  URL utilizada para recibir las notificaciones POST de acuerdo con los eventos seleccionados.   description Alfanumérico  Descripción del WebHook creado.   enabledEvents Lista Max:3 Lista de los eventos seleccionados.   status Alfanumérico 7 Estado del WebHook. Por defecto, el estado de un WebHook nuevo es ENABLED.   processingStatus Alfanumérico 7 Estado de la creación o actualización del WebHook. Por defecto, este estado es SUCCESS.     Los siguientes son los cuerpos de la petición y la respuesta para este método.\n JSON   Ejemplo petición:\n{ \u0026#34;accountId\u0026#34;: 1, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ] } \nEjemplo respuesta:\n{ \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;256dd74e-9187-4efb-8238-fa29bf8f587a\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-08-27T21:57:28.874+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 1, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; }   Ejemplo petición:\n\nEjemplo respuesta:\n  --  Eliminar un WebHook Este método te permite borrar un WebHook previamente creado. Tan pronto borras un WebHook, dejas de recibir notificaciones.\nNota Necesitas incluir dos encabezados para utilizar este método, consulta Configurar a autenticación para más información. Además, necesitas saber tu Merchant ID y tu Account ID, puedes obtener esta información en tu Módulo PayU.  Llamado del API Para borrar un WebHook, utiliza la siguiente URL:\nDELETE https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId}/{id} \nEl valor de la variable {env-api} is sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     merchantId Identificador del comercio en el sistema de PayU. Sí   accountId Identificador de la cuenta para cada país asociada al comercio. Sí   id Identificador del WebHook que deseas eliminar. Sí    Ejemplo respuesta     Nombre del campo Formato Tamaño Descripción     processingStatus Alfanumérico 7 Estado del borrado del WebHook. Por defecto, este estado es SUCCESS.   id Alfanumérico  Identificador del WebHook borrado.   status Alfanumérico 7 Estado del WebHook. Por defecto, el estado de un WebHook borrado es DELETED.     JSON   { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;054e0fc5-a025-4a00-b666-95673c11dee1\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;DELETED\u0026#34; }     --  Consultar WebHooks Puedes consular los WebHooks relacionados a tu cuenta ya sea por su identificador o por el identificador de tu cuenta. Explicamos ambos métodos a continuación.\nNota Necesitas incluir dos encabezados para utilizar este método, consulta Configurar a autenticación para más información. Además, necesitas saber tu Merchant ID y tu Account ID, puedes obtener esta información en tu Módulo PayU.  Consultar WebHooks por ID Este método te permite consultar la información de un WebHook específico a través de su ID. Para consultar un WebHook, utiliza la siguiente URL:\nGET https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId}/{id} \nEl valor de la variable {env-api} is sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     merchantId Identificador del comercio en el sistema de PayU. Sí   accountId Identificador de la cuenta para cada país asociada al comercio. Sí   id Identificador del WebHook que quieres consultar. Sí    Ejemplo respuesta  Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     processingStatus Alfanumérico 7 Estado de la consulta. Por defecto, este estado es SUCCESS.   id Alfanumérico  Identificador del WebHook.   created Fecha  Fecha de creación del WebHook. Formato YYYY-DD-MM hh:mm:ss.   accountId Numérico  Identificador de la cuenta para cada país asociada al comercio.   callbackUrl Alfanumérico  URL utilizada para recibir las notificaciones POST de acuerdo con los eventos seleccionados.   description Alfanumérico  Descripción del WebHook.   enabledEvents Lista Max:3 Lista de los eventos seleccionados.   status Alfanumérico 7 Estado del WebHook. Por defecto, el estado de un WebHook nuevo es ENABLED.      JSON   { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;9628b74d-e2fb-40cc-b137-b156d1401641\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-08-28T00:52:26.206+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 515058, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; }     --  Consultar webhooks por cuenta Este método te permite consultar la información de todos los WebHooks creados en tu cuenta. Para consultar la lista de WebHooks, utiliza la siguiente URL:\nGET https://{env-api}.payulatam.com/v1.0/webhooks/account/{merchantId}/{accountId} \nEl valor de la variable {env-api} is sandbox-transfers para pruebas y transfers para producción.\n   Parámetro Descripción Obligatorio     merchantId Identificador del comercio en el sistema de PayU. Sí   accountId Identificador de la cuenta para cada país asociada al comercio. Sí    Ejemplo respuesta  Respuesta (Response)     Nombre del campo Formato Tamaño Descripción     processingStatus Alfanumérico 7 Estado de la consulta. Por defecto, este estado es SUCCESS.   id Alfanumérico  Identificador del WebHook.   created Fecha  Fecha de creación del WebHook. Formato YYYY-DD-MM hh:mm:ss.   accountId Numérico  Identificador de la cuenta para cada país asociada al comercio.   callbackUrl Alfanumérico  URL utilizada para recibir las notificaciones POST de acuerdo con los eventos seleccionados.   description Alfanumérico  Descripción del WebHook created.   enabledEvents Lista Max:3 Lista de los eventos seleccionados.   status Alfanumérico 7 Estado del WebHook. Por defecto, el estado de un WebHook nuevo es ENABLED.      JSON   [ { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;9628b74d-e2fb-40cc-b137-b156d1401641\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-08-28T00:52:26.206+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 515058, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com.co/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; }, { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;672497c2-00f8-4787-a396-4024042eaa20\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-09-15T16:04:49.131+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 515058, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com.co/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; } ]     --  ","excerpt":"Para términos introductorios, cómo solicitar este servicio y más información, consulta Payouts. …","ref":"/es/docs/integrations/api-integration/payouts-api.html","title":"API de Payouts"},{"body":"For introductory terms, how to request this service and more information, refer to Payouts.\nConfiguring the authentication To use the methods to manage Payouts or WebHooks exposed by the Payouts service, you must include the Authorization and PublicKey headers:\n To configure the Authorization header, call the authentication method provided by the Payouts service. Example:  Bearer eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTYyODU0ODE2NywiaWF0IjoxNjI4NTQ4MTY3fQ.jrO3u5ramYKOvoNNb0TNfBuZkbYg1EvPmCDDYXFEO4c \n To configure the PublicKey header, use your Public Key which can be found in the PayU Module (Settings \u0026gt; Technical configuration \u0026gt; Public Key).  Available methods Payouts API includes the following methods:\n Authentication Request payout Cancel payout request Create or update a WebHook Delete a WebHook Query WebHooks  Authentication The first step regardless of the method you want to request is to authenticate your account using the credentials provided by PayU.\nThe authentication method logs in the merchant returning the JWT Token generated to use the services exposed by Payouts. This token is available during 10 minutes after its creation.\nAPI Call To authenticate, send the request as follows:\nPOST https://{env-api}.payulatam.com/v1.0/authenticate?accountId={accountId}\u0026amp;apiKey={apiKey}\u0026amp;apiLogin={apiLogin} \nThe value for the variable {env-api} displayed above is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     accountId ID of the user account for each country associated with the merchant. Yes   apiKey Password provided by PayU. How do I get my API Key Yes   apiLogin User or login provided by PayU. How do I get my API Login Yes    Response example  JSON   { \u0026#34;token\u0026#34;: \u0026#34;Bearer eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTYyODU0ODE2NywiaWF0IjoxNjI4NTQ4MTY3fQ.jrO3u5ramYKOvoNNb0TNfBuZkbYg1EvPmCDDYXFEO4c\u0026#34; }     --  Request payout This method lets you create one or multiple Payouts request for payees which can be new or existing. As soon as you create the request, this moves along the available states for Payouts.\nNote You need to include two headers to use this method, refer to Configuring authentication for more information. Furthermore, you need to know your Merchant and account ID, you can get this information in your PayU Module.  API Call To create a Payout request, use the following URL:\nPOST https://{env-api}.payulatam.com/v1.0/supplier-transfers/{merchantId}/{accountId} \nThe value for the variable {env-api} displayed above is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     merchantId Merchant’s ID number in PayU’s system. Yes   accountId ID of the user account for each country associated with the merchant. Yes    Both parameters can be found in your PayU module.\nVariables for request and response  Request parameters     Field name Format Size Description Mandatory     transfers List  List of the transfers you want to create. Yes   transfers[n] \u0026gt; value Numeric  Amount to be transfer from your funds. The currency of this amount is the one configured in your PayU account Yes   transfers[n] \u0026gt; bankAccount   This object has the information of the bank account of the payee that will receive the payment.\nThe payee can be existing or new. Yes   transfers[n] \u0026gt; bankAccount \u0026gt; id Alphanumeric 36 Identifier of the Bank account of the payee.\nSend this parameter when you want to request a Payout for an existing payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; supplierType Alphanumeric Min:11 Max:16 Relationship type between you and your payee. You can choose one of the following values: SUBMERCHANT: select this relation if the payee is a related merchant.RELATED_PROVIDER: select this relation if the payee is a providerRELATED_THIRD_PARTY: select this type if the payee is a customer, an employee, or any user of your services.\nThis parameter is mandatory when you are creating a payout request for a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; accountNumber Alphanumeric Max:17 Bank account number of the payee.\nThis parameter is mandatory when you are creating a payout request for a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; bankCode Numeric Min:3 Max:4 Code of the bank who issued the account of the payee. See Bank codes. No   transfers[n] \u0026gt; bankAccount \u0026gt; accountType Alphanumeric 2 Set CC for Current account and CA for Saving account or Nequi*.\nThis parameter is mandatory when you are creating a payout request for a new payee.\n*Nequi is available in Colombia. No   transfers[n] \u0026gt; bankAccount \u0026gt; country Alphanumeric 2 Country of the bank account in format ISO 3166 Alpha-2.\nThis parameter is mandatory when you are creating a payout request for a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; documentNumber Numeric 50 Identification number of the payee. If the documentType is NIT, the document number must have a hyphen (-) and the check digit. Example: 830140299-6.\nThis parameter is mandatory when you are creating a payout request for a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; documentType Alphanumeric 2 Identification type of the payee. See Document types.\nThis parameter is mandatory when you are creating a payout request for a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; expeditionDate Alphanumeric 10 Expedition date of the identity document of the payee. Format YYYY/MM/DD. No   transfers[n] \u0026gt; bankAccount \u0026gt; fullName Alphanumeric  Full name of the payee.\nThis parameter is mandatory when you are creating a payout request for a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; birthDate Alphanumeric 10 Birth date of the payee. Format YYYY/MM/DD. No   transfers[n] \u0026gt; bankAccount \u0026gt; state Alphanumeric  State of the Bank account. Set ACTIVE when you are creating a new payee. No   transfers[n] \u0026gt; bankAccount \u0026gt; merchantId Numeric  Identifier of your commerce in PayU. No   transfers[n] \u0026gt; description Alphanumeric  Additional information of the payout. No       Response parameters     Field name Format Size Description     totalSuccessful Numeric  Number of payouts successfully created.   totalFailed Numeric  Number of payments that could not be created.   successfulItems List  List of items that were successfully processed.   successfulItems[n] \u0026gt; processingStatus Alphanumeric 7 Status of the Payout request. For successful transactions, the value is SUCCESS   successfulItems[n] \u0026gt; paymentOrderId Alphanumeric 36 Id generated for the payout request. Use this id to cancel the request.   successfulItems[n] \u0026gt; value Numeric  Amount of the request.   successfulItems[n] \u0026gt; bankAccount   This object has the information of the bank account that will receive the payment.   successfulItems[n] \u0026gt; bankAccount \u0026gt; processingStatus Alphanumeric 7 Bank account registration status. For successful registrations, the value is SUCCESS.   successfulItems[n] \u0026gt; bankAccount \u0026gt; id Alphanumeric 36 Identifier of the registered Bank account.   successfulItems[n] \u0026gt; bankAccount \u0026gt; supplierType Alphanumeric Min:11 Max:16 Relationship type selected for the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; accountNumber Alphanumeric Max:17 Bank account number of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; bankCode Numeric Min:3 Max:4 Code of the bank who issued the account of the payee. See Bank codes.   successfulItems[n] \u0026gt; bankAccount \u0026gt; bankName Alphanumeric  Bank name of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; accountType Alphanumeric 2 Account type of the of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; country Alphanumeric 2 Country of the bank account.   successfulItems[n] \u0026gt; bankAccount \u0026gt; documentNumber Numeric 50 Identification number of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; documentType Alphanumeric 2 Identification type of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; expeditionDate Alphanumeric 10 Expedition date of the identity document of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; fullName Alphanumeric  Full name of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; birthDate Alphanumeric 10 Birth date of the payee.   successfulItems[n] \u0026gt; bankAccount \u0026gt; state Alphanumeric  State of the Bank account.   successfulItems[n] \u0026gt; description Alphanumeric  Additional information of the payout.   failedItems List  List of items that failed during processing.   failedItems[n] \u0026gt; processingStatus Alphanumeric 7 Status of the Payout request. For failed transactions, the value is FAILED.   failedItems[n] \u0026gt; failureMessages List  List of error messages that generated the failure.   failedItems[n] \u0026gt; value Numeric  Amount of the request.   failedItems[n] \u0026gt; bankAccount   This object has the information of the bank account that failed. This element has the same parameters than the object successfulItems[n].bankAccount.     The following request example sends three payouts:\n The first and the second payout are requested for unregistered payees. The second one fails because the parameter bankCode has an invalid value. The third payout is for a registered payee.   JSON   Request body:\n{ \u0026#34;transfers\u0026#34;: [ { \u0026#34;value\u0026#34;: 1500000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_THIRD_PARTY\u0026#34;, \u0026#34;accountNumber\u0026#34;: 2198922910000, \u0026#34;bankCode\u0026#34;: \u0026#34;007\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: 1026304116, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;1996-05-17\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Santiago Romero Pineda\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1975-03-07\u0026#34;, \u0026#34;merchantId\u0026#34;: 510608 }, \u0026#34;description\u0026#34;: \u0026#34;First Payment\u0026#34; }, { \u0026#34;value\u0026#34;: 2000000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_PROVIDER\u0026#34;, \u0026#34;accountNumber\u0026#34;: 2198922910330, \u0026#34;bankCode\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: 102688116, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;2001-05-17\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1985-04-17\u0026#34;, \u0026#34;merchantId\u0026#34;: 510608 }, \u0026#34;description\u0026#34;: \u0026#34;Payment of supplies\u0026#34; }, { \u0026#34;value\u0026#34;: 4500000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;e202507e-5551-4b67-be2a-a2a834bf1438\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Registered supplier payment\u0026#34; } ] } \nResponse body:\n{ \u0026#34;totalSuccessful\u0026#34;: 2, \u0026#34;totalFailed\u0026#34;: 1, \u0026#34;successfulItems\u0026#34;: [ { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;paymentOrderId\u0026#34;: \u0026#34;7202a9a7-ef51-4202-bd23-e604f9cbb25b\u0026#34;, \u0026#34;value\u0026#34;: 1500000.00, \u0026#34;bankAccount\u0026#34;: { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;e202507e-5551-4b67-be2a-a2a834bf1438\u0026#34;, \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_THIRD_PARTY\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;2198922910000\u0026#34;, \u0026#34;bankCode\u0026#34;: \u0026#34;007\u0026#34;, \u0026#34;bankName\u0026#34;: \u0026#34;BANCOLOMBIA\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: \u0026#34;1026304116\u0026#34;, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;1996-05-16T05:00:00.000+00:00\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Santiago Romero Pineda\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1975-03-06T05:00:00.000+00:00\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;ACTIVE\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;First Payment\u0026#34; }, { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;paymentOrderId\u0026#34;: \u0026#34;32740b81-5ecc-466c-bc09-699e6e5ceefb\u0026#34;, \u0026#34;value\u0026#34;: 4500000.00, \u0026#34;bankAccount\u0026#34;: { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;8f425a79-3f15-4e64-a1bf-2f7c087587ec\u0026#34;, \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_THIRD_PARTY\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;0200005555\u0026#34;, \u0026#34;bankCode\u0026#34;: \u0026#34;013\u0026#34;, \u0026#34;bankName\u0026#34;: \u0026#34;BBVA COLOMBIA\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: \u0026#34;81856522\u0026#34;, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;2002-02-17T05:00:00.000+00:00\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Jorge Gutierrez\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1986-02-11T05:00:00.000+00:00\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;ACTIVE\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Registered supplier payment\u0026#34; } ], \u0026#34;failedItems\u0026#34;: [ { \u0026#34;processingStatus\u0026#34;: \u0026#34;FAILED\u0026#34;, \u0026#34;failureMessages\u0026#34;: [ \u0026#34;There is no registered bank with code: 8\u0026#34; ], \u0026#34;value\u0026#34;: 2000000, \u0026#34;bankAccount\u0026#34;: { \u0026#34;processingStatus\u0026#34;: \u0026#34;FAILED\u0026#34;, \u0026#34;supplierType\u0026#34;: \u0026#34;RELATED_PROVIDER\u0026#34;, \u0026#34;accountNumber\u0026#34;: \u0026#34;2198922910330\u0026#34;, \u0026#34;bankCode\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;accountType\u0026#34;: \u0026#34;CA\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;CO\u0026#34;, \u0026#34;documentNumber\u0026#34;: \u0026#34;102688116\u0026#34;, \u0026#34;documentType\u0026#34;: \u0026#34;CC\u0026#34;, \u0026#34;expeditionDate\u0026#34;: \u0026#34;2001-05-17T00:00:00.000+00:00\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;Juan Perez\u0026#34;, \u0026#34;birthDate\u0026#34;: \u0026#34;1985-04-17T00:00:00.000+00:00\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Payment of supplies\u0026#34; } ] }   Request body:\n\nResponse body:\n  --  Note You need to include two headers to use this method, refer to Configuring authentication for more information. Furthermore, you need to know your Merchant and account ID, you can get this information in your PayU Module.  ### API Call To update a Payout request, use the following URL: ```JAVA PUT https://{env-api}.payulatam.com/v1.0/supplier-transfers/bank-account/{merchantId}/{accountId}/{bankAccountId} ``` The value for the variable `{env-api}` is `sandbox-transfers` for testing and `transfers` for production mode. | Parameter | Description | Mandatory | |---------------|-----------------------------------------------------------------------------|:---------:| | merchantId | Merchant’s ID number in PayU’s system. | Yes | | accountId | ID of the user account for each country associated with the merchant. | Yes | | bankAccountId | ID returned by the [Request payout service](#request-payout). | Yes | ### Variables for request  | Field name | Format | Size | Description | Mandatory | |---|---|---|---|:-:| | id | Alphanumeric | 36 | Identifier of the Bank account of the payee. | Yes | | accountNumber | Alphanumeric | Max:17 | Bank account number of the payee. | Yes |--  JSON   Request body:\n{ \u0026#34;id\u0026#34;: \u0026#34;1f92a225-9559-4b7f-9739-e6bb27b8b838\u0026#34;, \u0026#34;accountNumber\u0026#34;: 2198922910031 } \nResponse body:\n{ \u0026#34;message\u0026#34;: \u0026#34;Update received\u0026#34; }   -- Request body:\n\nResponse body:\n  -- -- Cancel payout request This method lets you request the cancellation of a payout request. You can only request the cancellation of a Payout when its status is IN_PAYU_PROCESS or earlier. Refer to Payout states for more information.\nNote You need to include two headers to use this method, refer to Configuring authentication for more information. Furthermore, you need to know your Merchant and account ID, you can get this information in your PayU Module.  API Call To cancel a Payout request, use the following URL:\nDELETE https://{env-api}.payulatam.com/v1.0/supplier-transfers/{merchantId}/{accountId}/{paymentOrderId} \nThe value for the variable {env-api} is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     merchantId Merchant’s ID number in PayU’s system. Yes   accountId ID of the user account for each country associated with the merchant. Yes   paymentOrderId Payout ID generated when the order was created by the Request payout service. Yes    Variables for request     Field name Format Size Description Mandatory     comments Alphanumeric  Reason to cancel the Payout request. No   pushPaymentId Alphanumeric  Payout ID of the request to be cancelled. No    The following are the request and response bodies for this method.\n JSON   Request body:\n{ \u0026#34;comments\u0026#34;: \u0026#34;Request cancellation for payout\u0026#34;, \u0026#34;pushPaymentId\u0026#34;: \u0026#34;1f92a225-9559-4b7f-9739-e6bb27b8b838\u0026#34; } \nResponse body:\n{ \u0026#34;message\u0026#34;: \u0026#34;Cancellation request received\u0026#34; }   Request body:\n\nResponse body:\n  --  Create or Update a WebHook This method lets you create or update a WebHook that allows you to configure a URL where PayU notifies states of a Payout via POST.\nYou can configure a WebHook for the following events:\n Transfer creation: sends a notification when a payout request is created. To enable these notifications, include the TRANSFER_CREATION value in the list parameter enabledEvents. Transfer update: sends a notification when the sanction screening validation rejects the payee. To enable these notifications, include the TRANSFER_UPDATE value in the list parameter enabledEvents. Validation result: sends a notification when payee has approved the sanction screening validation and when the transfer has been rejected by the bank. To enable these notifications, include the VALIDATION_RESULT value in the list parameter enabledEvents.  Click here to know the variables in the notifications.\nNote You need to include two headers to use this method, refer to Configuring authentication for more information. Furthermore, you need to know your Merchant and account ID, you can get this information in your PayU Module.  API Call  To create a WebHook, use:  POST https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId} \n To update a WebHook, use:  PUT https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId} \nThe value for the variable {env-api} is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     merchantId Merchant’s ID number in PayU’s system. Yes   accountId ID of the user account for each country associated with the merchant. Yes    Variables for request and response  Request parameters     Field name Format Size Description Mandatory     id Alphanumeric  Id of the WebHook you want to update. This parameter is mandatory when updating a WebHook No   accountId Numeric  ID of the user account for each country associated with the merchant. Yes   callbackUrl Alphanumeric  URL used to receive the POST notifications sent by PayU according to the events selected. This URL must be unique per WebHook. Yes   description Alphanumeric  Description of the WebHook you want to create. Yes   enabledEvents List Max:3 List of the events that will launch a notification to the configured URL when they occur. At least one event must be selected.\nPossibles values are: TRANSFER_UPDATE, TRANSFER_CREATION, VALIDATION_RESULT. Yes      Response parameters     Field name Format Size Description     id Alphanumeric  Id of the WebHook created.   created Date  Creation date of the WebHook. Format YYYY-DD-MM hh:mm:ss.   accountId Numeric  ID of the user account for each country associated with the merchant.   callbackUrl Alphanumeric  URL used that will receive the POST notifications according to the events selected.   description Alphanumeric  Description of the WebHook created.   enabledEvents List Max:3 List of the events selected.   status Alphanumeric 7 State of the WebHook. By default, the state of the new WebHook is ENABLED.   processingStatus Alphanumeric 7 State of creation or update of the WebHook. By default, this state is SUCCESS.     The following are the request and response bodies for this method.\n JSON   Request body:\n{ \u0026#34;accountId\u0026#34;: 1, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ] } \nResponse body:\n{ \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;256dd74e-9187-4efb-8238-fa29bf8f587a\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-08-27T21:57:28.874+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 1, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; }   Request body:\n\nResponse body:\n  --  Delete a WebHook This method lets you delete a WebHook previously created. As soon as you delete a WebHook, you stop receiving notifications.\nNote You need to include two headers to use this method, refer to Configuring authentication for more information. Furthermore, you need to know your Merchant and account ID, you can get this information in your PayU Module.  API Call To delete a WebHook, use the following URL:\nDELETE https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId}/{id} \nThe value for the variable {env-api} is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     merchantId Merchant’s ID number in PayU’s system. Yes   accountId ID of the user account for each country associated with the merchant. Yes   id ID the WebHook you want to delete. Yes    Response example     Field name Format Size Description     processingStatus Alphanumeric 7 State of deletion of the WebHook. By default, this state is SUCCESS.   id Alphanumeric  Id of the WebHook deleted.   status Alphanumeric 7 State of the WebHook. By default, the state of the deleted WebHook is DELETED.     JSON   { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;054e0fc5-a025-4a00-b666-95673c11dee1\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;DELETED\u0026#34; }     --  Query WebHooks You can consult WebHooks related to your account either by their id or by the account id. Both methods are explained below.\nNote You need to include two headers to use this method, refer to Configuring authentication for more information. Furthermore, you need to know your Merchant and account ID, you can get this information in your PayU Module.  Query WebHooks by Id This method lets you consult the information of a specific WebHook using its id. To query a WebHook, use the following URL:\nGET https://{env-api}.payulatam.com/v1.0/webhooks/{merchantId}/{accountId}/{id} \nThe value for the variable {env-api} is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     merchantId Merchant’s ID number in PayU’s system. Yes   accountId ID of the user account for each country associated with the merchant. Yes   id ID the WebHook you want to query. Yes    Response example  Response parameters     Field name Format Size Description     processingStatus Alphanumeric 7 State of query. By default, this state is SUCCESS.   id Alphanumeric  Id of the WebHook.   created Date  Creation date of the WebHook. Format YYYY-DD-MM hh:mm:ss.   accountId Numeric  ID of the user account for each country associated with the merchant.   callbackUrl Alphanumeric  URL used that will receive the POST notifications according to the events selected.   description Alphanumeric  Description of the WebHook.   enabledEvents List Max:3 List of the events selected.   status Alphanumeric 7 State of the WebHook. By default, the state of the new WebHook is ENABLED.      JSON   { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;9628b74d-e2fb-40cc-b137-b156d1401641\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-08-28T00:52:26.206+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 515058, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; }     --  Query webhooks by account This method lets you consult the information of all the WebHooks created in your account. To query the WebHook list, use the following URL:\nGET https://{env-api}.payulatam.com/v1.0/webhooks/account/{merchantId}/{accountId} \nThe value for the variable {env-api} is sandbox-transfers for testing and transfers for production mode.\n   Parameter Description Mandatory     merchantId Merchant’s ID number in PayU’s system. Yes   accountId ID of the user account for each country associated with the merchant. Yes    Response example  Response parameters     Field name Format Size Description     processingStatus Alphanumeric 7 State of query. By default, this state is SUCCESS.   id Alphanumeric  Id of the WebHook.   created Date  Creation date of the WebHook. Format YYYY-DD-MM hh:mm:ss.   accountId Numeric  ID of the user account for each country associated with the merchant.   callbackUrl Alphanumeric  URL used that will receive the POST notifications according to the events selected.   description Alphanumeric  Description of the WebHook.   enabledEvents List Max:3 List of the events selected.   status Alphanumeric 7 State of the WebHook. By default, the state of the new WebHook is ENABLED.      JSON   [ { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;9628b74d-e2fb-40cc-b137-b156d1401641\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-08-28T00:52:26.206+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 515058, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com.co/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;TRANSFER_CREATION\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; }, { \u0026#34;processingStatus\u0026#34;: \u0026#34;SUCCESS\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;672497c2-00f8-4787-a396-4024042eaa20\u0026#34;, \u0026#34;created\u0026#34;: \u0026#34;2021-09-15T16:04:49.131+00:00\u0026#34;, \u0026#34;accountId\u0026#34;: 515058, \u0026#34;callbackUrl\u0026#34;: \u0026#34;https://wwww.callbackurltest.com.co/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Web Hook For Test Swagger\u0026#34;, \u0026#34;enabledEvents\u0026#34;: [ \u0026#34;TRANSFER_UPDATE\u0026#34;, \u0026#34;VALIDATION_RESULT\u0026#34; ], \u0026#34;status\u0026#34;: \u0026#34;ENABLED\u0026#34; } ]     --  ","excerpt":"For introductory terms, how to request this service and more information, refer to Payouts. …","ref":"/en/docs/integrations/api-integration/payouts-api.html","title":"Payouts API"},{"body":"osCommerce is a platform developed in PHP that ease the creation of an online store. To let your clients pay with PayU from your website, you need to install the plugin for osCommerce, which integrates PayU Latam as a valid payment gateway. For more information about osCommerce, refer to their official website.\nPrerequisites  You need an active account in PayU Latam. Having installed osCommerce version 2.3. Having the PayU\u0026rsquo;s osCommerce plugin downloaded and stored in an accessible location. Click here to download it.  Installation Follow the next procedure to install the plugin on your website.\n Unzip the plugin file in a location of your choice. From now on, we will refer this location to [PLUGIN_PATH]. In this path, you find the folder oscommerce-plugin-1.0.  Either using FTP or logging in as an Administrator to the server where osCommerce is installed, include the plugin files in the server as follows:   In the server path /[server]/apache/[publication_path]/oscommerce/catalog, copy the plugin files confirmation_payu.php and response_payu.php. These files are located in the path [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog.    In the server path /[server]/apache/[publication_path]/oscommerce/catalog/includes/languages/english/modules/, copy the plugin file ‘payu_latam.php located in the path [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\english\\modules\\payment.\nRepeat this step for Spanish and Portuguese if you have them installed in your osCommerce website. These files are located in the paths:\n ES: [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\espanol\\modules\\payment PT: [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\portugues\\modules\\payment Note PayU Latam plugin for osCommerce is only available for English, Spanish and Portuguese.      In the server path /[server]/apache/[publication_path]/oscommerce/catalog/includes/modules/payment/, copy the plugin file ‘payu_latam.php located in the path [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\modules\\payment. This file is not the same file than the one mentioned before.\n  In the osCommerce admin panel, expand the Modules menu in the left panel and select Payment option.  In the Payment section, click Install Module button located at the top right corner.  Find the Payu Latam plugin and click it. Then, click Install Module button in the right panel.  After installing the plugin, the list of installed modules of the Payu Latam plugin appears in the right panel.  Configuration  In the Payment section, select the Payu Latam payment method and click the Edit button in the right panel.  The following configuration form appears:  Configure it using the information of your PayU account as follows:\n   Field Value     Enable / Disable Select True to enable the payment gateway in osCommerce.   Merchant ID ID of your commerce in PayU Latam   Account ID ID of the PayU account according to the country where you want to sell.   API key Unique key of your commerce, you can find this key in the PayU module.   Gateway URL Gateway URL.\nFor test, you can use https://sandbox.gateway.payulatam.com/ppp-web-gateway and for production https://gateway.payulatam.com/ppp-web-gateway/   Transaction Mode Select Test if you want to process in the Test environment. Otherwise, select Live.   Response page URL of the response page.\nBy default, the URL is http://your.domain.com/yourOscommerceFolder/catalog/response_payu.php, you must replace http://your.domain.com with your site\u0026rsquo;s domain.   Confirmation page URL of the confirmation page.\nBy default, the URL is http://your.domain.com/yourOscommerceFolder/catalog/confirmation_payu.php, you must replace http://your.domain.com with your site\u0026rsquo;s domain.     Save the changes using the button at the bottom of the panel.\n  Finally, expand the Localization menu and click Order Status. Verify that the order status were created according to the installed languages (English, Spanish, and Portuguese) in your osCommerce website.\n  The valid states are:\n For English: Approved, Rejected, Failed, and Pending. For Spanish: Aprobada, Rechazada, Fallida, and Pendiente. For Portuguese: Aprovado, Recusada, Falha, and Pendente.  Note If you don\u0026rsquo;t have any of the languages mentioned before, the states does not appear in the list. If you want to install a language later, you can create these states manually using the same names displayed above.  At this point, your customers can pay with PayU Latam when they do the checkout in the osCommerce\u0026rsquo;s shopping cart.\n","excerpt":"osCommerce is a platform developed in PHP that ease the creation of an online store. To let your …","ref":"/en/docs/tools/shopping-cart-plugins/oscommerce.html","title":"osCommerce"},{"body":"osCommerce es una plataforma desarrollada en PHP que facilita la creación de una tienda en línea. Para permitirle a tus clientes pagar con PayU desde tu página web, necesitas instalar el plugin para osCommerce, el cual integra a PayU Latam como pasarela válida de pago. Para más información sobre osCommerce, consulta su página web oficial.\nPrerrequisitos  Necesitas una cuenta activa en PayU Latam. Tener instalado osCommerce versión 2.3. Haber descargado el plugin de osCommerce de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí to download it.  Instalación Sigue este procedimiento para instalar el plugin en tu página web.\n Descomprime el archivo del plugin en una ruta de tu preferencia. Desde ahora, nos referiremos a dicha ruta como [PLUGIN_PATH]. En esta ruta, encontrarás la carpeta oscommerce-plugin-1.0.  Por FTP o iniciando sesión como Administrador en el servidor donde está instalado osCommerce, incluye los archivos del plugin de la siguiente forma:   En la ruta del servidor /[servidor]/apache/[publication_path]/oscommerce/catalog, copia los archivos confirmation_payu.php y response_payu.php del plugin. Estos archivos se encuentran en la ruta [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog.   En la ruta del servidor /[servidor]/apache/[publication_path]/oscommerce/catalog/includes/languages/english/modules/, copia el archivo ‘payu_latam.php del plugin que se encuentra en la ruta [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\english\\modules\\payment.\nRepite este paso para español y portugués si los tienes instalados en tu página web de osCommerce. Estos archivos están en:\n ES: [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\espanol\\modules\\payment PT: [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\languages\\portugues\\modules\\payment    Nota El plugin de PayU Latam para osCommerce solo está disponible para inglés, español y portugués.   En la ruta del servidor /[servidor]/apache/[publication_path]/oscommerce/catalog/includes/modules/payment/, copia el archivo ‘payu_latam.php del plugin que se encuentra en la ruta [PLUGIN_PATH]\\oscommerce-plugin-1.0\\oscommerce-payu-latam-1.0\\catalog\\includes\\modules\\payment. Este archivo no es el mismo que se mencionó anteriormente.  En el panel de administrador de osCommerce, expande menú Modules en el panel izquierdo y selecciona la opción Payment.  En la sección Payment, haz clic en el botón Install Module ubicado en lla esquina superior derecha.  Localiza el plugin Payu Latam y haz clic en él. Luego, haz clic en el botón Install Module en el panel de la derecha.  Luego de instalar el plugin, aparece la lista de módulos instalados del plugin de Payu Latam.  Configuración  En la sección Payment, selecciona el método de pago Payu Latam y haz clic en el botón Edit en el panel de la derecha.  Aparece el siguiente formulario de configuración:  Configúralo utilizando la información de tu cuenta PayU así:\n   Campo Valor     Habilitar / Deshabilitar Selecciona True para habilitar la pasarela en osCommerce.   Merchant ID Identificador de tu comercio en PayU Latam.   Account ID Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender.   API key Llave única de tu comercio, puedes obtener esta información en tu Módulo PayU.   Gateway URL URL de la pasarela de pago.\nPara pruebas, utiliza https://sandbox.gateway.payulatam.com/ppp-web-gateway y para producción https://gateway.payulatam.com/ppp-web-gateway/   Modo Transacciones Selecciona Test si quieres procesar en el ambiente de pruebas. En caso contrario, selecciona Live.   Página de respuesta URL de la página de respuesta.\nPor defecto, la URL es https://tu.dominio.com/yourOscommerceFolder/catalog/response_payu.php, debes reemplazar https://tu.dominio.com con el dominio de tu sitio.   Página de confirmación URL de la página de confirmación.\nPor defecto, la URL es https://tu.dominio.com/yourOscommerceFolder/catalog/confirmation_payu.php, debes reemplazar https://tu.dominio.com con el dominio de tu sitio.     Guarda los cambios utilizando el botón al final del panel.\n  Por último, expande el menú Localization y haz clic en Order Status. Verifica que los estados de la orden fueron creados de acuerdo con los idiomas instalados (inglés, español y portugués) en tu página web de osCommerce.\n  Los estados válidos son:\n Para inglés: Approved, Rejected, Failed y Pending. Para español: Aprobada, Rechazada, Fallida y Pendiente. Para portugués: Aprovado, Recusada, Falha y Pendente.  Nota Si no tienes instalado ninguno de los idiomas mencionados, los estados no aparecen en la lista. Si quieres instalar un idioma más adelante, puedes crear estos estados manualmente utilizando los nombres mostrados.  En este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de osCommerce.\n","excerpt":"osCommerce es una plataforma desarrollada en PHP que facilita la creación de una tienda en línea. …","ref":"/es/docs/tools/shopping-cart-plugins/oscommerce.html","title":"osCommerce"},{"body":"¿Qué es una Disputa? Tus compradores pueden presentar una reclamación al banco de emisor de su tarjeta. El banco nos envía una notificación de disputa para determinar la validez de la compra y nosotros la creamos en nuestro sistema. Luego de la creación, te notificamos a través del Módulo PayU.\nLa disputa congela el valor total de la venta en tu cuenta PayU.\n¿Por qué ocurre una disputa? Un comprador puede reclamar al banco de emisor de su tarjeta reportando que no ha recibido el producto, el producto es deficiente o no cumple con las características esperadas. El comprador también puede desconocer la compra en el extracto de su tarjeta de crédito.\nLas razones para iniciar un proceso de disputa varian, algunas de ellas son:\n Fraude: las disputas clasificadas como fraude ocurren cuando una persona no autorizada hace una compra con una tarjeta de crédito. Este tipo de disputas puede suceder cuando se pierde la tarjeta o fue robada. Desconocimiento del pago: el tarjetahabiente no reconoce el nombre de la marca o de la tienda que aparece en el extracto de la tarjeta de crédito. Producto no entregado: el tarjetahabiente declara que no recibió el producto o servicio cubierto por el cobro realizado a su tarjeta de crédito. Producto no aceptable: el tarjetahabiente reclama que no ha recibido el producto o servicio en las condiciones esperadas. Duplicado: el tarjetahabiente indica que el cobro realizado por la compra de un producto o servicio fue aplicado más de una vez en su tarjeta de crédito. Monto no corresponde: el cobro de la tarjeta de crédito no corresponde con el valor de la compra. No informado por la entidad: el banco o la red de procesamiento inicia una disputa sin una razón específica.  No todas las entidades financieras utilizan los mismos mecanismos para notificar una disputa; por lo tanto, PayU no puede garantizar que siempre puedas conocer las razones de la disputa.\nAtención  Recuerda que PayU únicamente actúa como intermediario para que tu comercio pueda presentar evidencias en el proceso de disputas frente a la entidad bancaria. PayU no tiene injerencia sobre el resultado de la disputa, esta decisión depende del banco emisor. Una vez que una transacción es parte de una disputa, el monto asociado pasa a formar parte del saldo congelado, por lo tanto no podrás realizar transferencias de dicho saldo a tu cuenta bancaria hasta tanto no se resuelva la disputa. Tus clientes pueden reclamar una transacción hasta 120 días después de la fecha de la transacción para tarjetas locales y hasta 180 días para tarjetas internacionales. Estos tiempos son definidos por las franquicias.   ¿Cómo funciona el proceso de disputas en PayU? El proceso de disputas sigue un flujo simple:\n1. Notificación de la Disputa Cuando un banco o una red de procesamiento notifica a PayU sobre una disputa, puedes consultar toda su información en el Módulo de disputas del Módulo PayU.\nSi tienes configurados los correos de notificaciones en tu módulo PayU, recibes también la información a través de correo electrónico. Además, cuando tienes habilitada la URL de notificación automática, enviamos una notificación POST. De esta forma, puedes automatizar el manejo del proceso de disputas para minimizar el riesgo de un posible contracargo.\nPuedes configurar la URL donde te notificamos en el módulo PayU. Ingresa a PayU.com y haz clic en la opción para iniciar sesión que se encuentra en la parte superior de la página. O si lo prefieres, puedes ir directamente a https://merchants.payulatam.com/.\nHaz clic en Configuración y luego selecciona Configuración técnica.\nEn esta ventana, ve a la pestaña Disputas. Define la URL de notificación de disputas y habilita el campo de notificación en el campo URL de notificación automática.\nUna vez configures esto, automáticamente recibes un POST con toda la información del proceso de disputa iniciado. Además, puedes una notificación POST cada vez que haya una actualización en el proceso, así puedes estar al tanto del progreso y la terminación del proceso.\n2. Consulta desde el Módulo PayU Puedes ver y administrar el proceso de disputas desde el módulo PayU en la opción Disputas dentro del menú Transacciones.\n3. Presenta evidencias Es importante responder siempre a una disputa presentando evidencias antes de la fecha máxima estipulada por el banco o la red de procesamiento. Luego de la fecha máxima, no puedes cargar evidencias de una disputa.\nPara aprender a cargar evidencia para resolver la disputa, consulta el Módulo PayU.\n¿Qué información puede ser útil?  Información completa de tu cliente (nombre completo, número de identificación, correo electrónico, dirección de envío, número visible de su tarjeta de crédito, etc.) Prueba de entrega del producto o servicio firmada por el tarjetahabiente. Factura de venta del producto o servicio. Carta de aceptación del pago firmada por el tarjetahabiente adjuntando su documento de identidad. Política de cancelación y reembolso. Prueba de aceptación de los términos y condiciones. Histórico de transacciones de tu cliente (si existen). Otros soportes que validen la compra.  Días máximos para presentar evidencias Ten en cuenta que el número máximo de días para presentar evidencias por cada país es:\n   País Días para proporcionar evidencias     Argentina 5 días hábiles   Brasil 12 días hábiles   Chile 5 días hábiles   Colombia 2 días hábiles   México 12 días calendario   Panamá 8 días hábiles   Perú 6 días hábiles    4. Decisión final del estado de la disputa Una vez presentes la evidencia, enviamos los documentos al banco emisor o a la red que procesó la transacción, quienes supervisan la resolución del caso. El resultado de a disputa puede ser ganada (sin contracargos), perdida (contracargo) o reembolso. En el caso de reembolso, la tienda lo realiza y el banco no crea el contracargo.\nCuando el banco notifica el resultado de la disputa, se actualiza el caso automáticamente en el modulo PayU y enviamos un POST a la URL configurada con la información del resultado final.\nEstados de las disputas Cuando se notifica una disputa, se crea una entidad disputa para la transacción asociada. El estado de la disputa cambia según el punto en que se encuentre dentro del flujo del proceso.\n   Estado Descripción     Notificada Cuando inicia el proceso de disputas, debes cargar la evidencia para la misma.   En revisión de la red Cuando el comercio presenta la evidencia a través del Módulo PayU y la disputa entra en revisión por el banco o la red.   Documentos no presentados Cuando vence el tiempo para la presentación de documentos y el comercio no proporciona ninguna evidencia.   Perdida La transacción es reversada desde la cuenta virtual del comercio y puede incurrir en costos de gestión de contracargos.   Ganada El proceso de disputas ha sido resulto en favor de la tienda, no hay deducciones de ningún tipo.   Expirada Luego de pasados 120 días sin respuesta del banco, el monto de la disputa queda disponible para el comercio.   Reembolsada Este procesos ocurre cuando el comercio autoriza reversar la operación bajo su propia voluntad, esto previene que la tienda tenga que pagar un contracargo y se reemplace por un reembolso.    Nota Si tienes activada la Garantía antifraude, cuando el contracargo es sujeto a cobertura, PayU asume los valores debitados de tu cuenta. En este caso, el estado de la disputa es Contracargada (Perdida) Aplica garantía antifraude.  Consejos antifraude para tu negocio ¡Luchar contra el fraude digital es nuestro deber!. Ten en cuenta los siguientes consejos:\n Ten cuidado con un aumento en las compras o solicitudes de servicio mayor de lo esperado dada a la naturaleza de tu negocio. Desconfía de las compras realizadas con montos superiores al promedio que recibes en tu comercio. Verifica si recibes un volumen de compra mayor de un solo cliente o solicitado a la misma dirección.  ","excerpt":"¿Qué es una Disputa? Tus compradores pueden presentar una reclamación al banco de emisor de su …","ref":"/es/docs/tools/disputes.html","title":"Disputas"},{"body":"What is a Dispute? Your buyers can present a claim to their card issuing bank. The bank sends us a dispute notification to determine the validity of the purchase, and we create the dispute in our system. After we create the dispute, we notify you through the PayU Module.\nThe dispute freezes the total amount of the sale in your PayU account.\nWhy a dispute happens? A buyer can claim to their card issuer bank reporting that they have not received a product, the product is deficient, or it does not meet the expected characteristics. The buyer also can disclaim the purchase of their credit card invoice.\nThe reasons for starting a dispute process may vary, some of them are:\n Fraud: disputes are classified as fraud when an unauthorized person makes purchases with a credit card. These type of dispute can happen if the card was lost or stolen. Not acknowledging payment: the brand or shop name which appears in the credit card statement is not recognized by the cardholder. Product not delivered: the cardholder states that they don\u0026rsquo;t received the product or service covered by the charges made to the credit card. Product not acceptable: the cardholder claims not to have received the product or service under the expected conditions. Duplicate: the cardholder indicates that the charge made for the purchase of a product or service was applied more than once to their credit card. Amount does not match: the charge to the credit card does not match with the value of the purchase. Not reported by the entity: the bank or processing network initiates a dispute process without a specific reason.  Not all the financial entities use the same mechanisms to notify a dispute; therefore, PayU cannot guarantee that you can always know the reasons of the dispute.\nAttention  Recall that PayU acts as an intermediary to let your commerce provide evidence in the dispute process between you and the bank entity. PayU has no interference on the result of the dispute, this decision depends on the issuing bank. Once a transaction is part of a dispute, the associated amount becomes part of the frozen balance; therefore, you cannot transfer funds from this balance to your bank account until the dispute is resolved. Your customers may claim a transaction up to 120 days after the transaction date for local cards and 180 days for international cards. These date are defined by the card franchises.   How does the disputes process works in PayU? The disputes process follows a simple flow:\n1. Dispute notification When a bank or a processing network notifies PayU about the start of a dispute process due to a claim of your customer, you can consult all the information related to it in the Disputes module of the PayU Module.\nIf you have configured the notification e-mails in your PayU module, you also receive the dispute information vía e-mail. Furthermore, when you have enabled the Automatic notification URL, we also send a POST notification. This way, you can automate your dispute management processes to minimize the risk of a possible chargeback.\nYou can configure the URL where we make the notification in the PayU module. Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\nClick Settings and then select Technical configuration.\nIn this window, go to Disputes tab and define the dispute notification url and enable the notification box in the Automatic notification URL field.\nOnce you configured this, you automatically receive a POST with all the information of the started dispute process. Furthermore, You also receive a notification POST each time the dispute process has an update, so you can be aware of the progress and completion of this process.\n2. Query through the PayU module You can view and manage your dispute processes from your PayU module, in the Dispute option inside the Transactions menu.\n3. Provide evidence It\u0026rsquo;s important to always respond a dispute by providing evidence before the deadline stipulated by the bank or the processing network. After the deadline date, you cannot upload the corresponding evidence for a dispute.\nTo learn how to upload evidence to resolve the dispute, refer to the PayU module.\nWhat information can be useful?  Full information of your customer (full name, identification number, e-mail, shipping address, visible credit card number, etc.) Proof of delivery of the product or service signed by the cardholder. Bill of sale of the product or service. Acceptance letter of the payment signed by the cardholder attaching their identification document. Cancellation and refund policy. Acceptance of terms and conditions. Transactional history of your customer (if any). Other supports that validate the purchase.  Maximum days to provide evidence Recall that the maximum days to provide evidence for each country are:\n   Country Days to provide evidence     Argentina 5 working days   Brazil 12 working days   Chile 5 working days   Colombia 2 working days   Mexico 12 calendar days   Panama 8 working days   Peru 6 working days    4. Final decision on dispute status Once the evidence is provided, we send the documents to the issuing bank or the network that processed the transaction, which oversees the resolution of the case. The result of dispute can be: won (without chargeback), lost (chargeback) or refunded. In the case of refunds, the shop makes the return to the buyer and the bank does not create the chargeback.\nWhen the bank announces the dispute’s outcome, the case is automatically updated in the administrative module and PayU sends a POST to the configured URL with information of the final result.\nDispute states When a dispute is reported, a dispute entity for the associated transaction is created. The dispute status changes according to the step where the dispute is within the course of the process.\n   State Description     Notified When the dispute process begins, you must upload the evidence for the dispute.   On Payment Network Review When the shop provides evidence for a dispute through the PayU module and the dispute is reviewed by the bank or network.   Documents not provided The deadline date to provide evidence has been reached and the commerce did not provide any documentation.   Lost The transaction is reversed from the virtual shopping account and may incur in a chargeback management cost.   Won The dispute process is resolved in favor of the shop, there are no deductions of any kind.   Expired After past 120 days without a response from the bank, the amount is set to available for the merchant.   Refunded This process occurs when the shop authorizes to reverse the operation in self-determination, this prevents the shop from having to pay a chargeback transaction and it is replaced by a refund.    Note If you have activated Anti-fraud Guarantee, when the chargeback is subject to be covered by the guarantee, PayU assumes the values debited from your account. In this case, the status of this dispute is Chargeback (Lost) With antifraud guarantee.  Anti-fraud tips for your business Fight against the digital fraud it\u0026rsquo;s our duty!. Take into account the following tips:\n Be wary of an increase in purchases or service requests higher than expected due to the nature of your business. Be suspicious of purchases made with higher amounts than the average you receive in your commerce. Verify if you have a higher purchase volume form a single client or requested to the same address.  ","excerpt":"What is a Dispute? Your buyers can present a claim to their card issuing bank. The bank sends us a …","ref":"/en/docs/tools/disputes.html","title":"Disputes"},{"body":"Entendiendo los conceptos Antes de continuar, vamos a explicar los siguientes conceptos:\n  Anulación o Void: esta operación reversa una transacción previamente autorizada.\n  Reembolso o Refund: esta operación solicita el reembolso de transacciones previamente capturadas (cobradas). Los reembolsos se pueden solicitar por el monto total o parcial. Un comprador puede solicitar un reembolso cuando no se está satisfecho con la compra, la compra tuvo múltiples cobros o no recibió el producto o el servicio.\n  Anulación o Void El método VOID cancela una transacción previamente autorizada. La anulación es un procedimiento automático, tan pronto como envíe el request de VOID, no sigue ningún flujo de aprobación y la transacción no se cobra al tarjetahabiente.\nNota El método VOID no está disponible en Colombia ni en Panamá.  Reembolso o Refund Un reembolso se solicita cuando una tienda decide voluntariamente regresar el dinero al cliente debido a razones de insatisfacción o cuando la tienda no tiene suficiente inventario del producto comprado. El método REFUND solicita el reverso de una transacción previamente capturada.\nA diferencia del método VOID, este método requiere una aprobación. El proceso de reembolso se explica a continuación:\n  Cuando tu cliente solicita un reembolso, debes pedirlo utilizando el módulo de PayU o nuestras integraciones. La solicitud requiere el Id de la Orden y una razón del reembolso.\n  Una vez envías la solicitud, PayU la recibe y decide aprobarla o rechazarla en uno o tres días hábiles.\n  El REFUND tiene tres estados:\n UNRESOLVED: la solicitud ha sido enviada a PayU para aprobación. En este punto, no se ha agregado ninguna transacción a la orden y cuando la consulte utilizando el servicio de Consultas, la respuesta solo muestra la transacción correspondiente a la aprobación del pago. APPROVED: la solicitud ha sido aprobada por un agente de servicio de PayU. En este punto la orden cambia su estado a REFUNDED y PayU agrega a la orden, una transacción de reembolso (REFUND) con estado aprobado. DECLINED: la solicitud no cumplió con las políticas definidas por PayU y fue rechazada. Cuando se rechaza el reembolso, PPayU agrega a la orden, una transacción de reembolso (REFUND) con estado rechazado.  Para más información sobre transacciones autorizadas y capturadas, consulta Pagos.\nConsideraciones Antes de utilizar las funcionalidades de ANULACIÓN o REEMBOLSO, ten en cuenta las siguientes consideraciones:\n Los métodos de ANULACIÓN or REEMBOLSO solo están disponibles para transacciones realizadas con tarjeta de crédito. Si la solicitud se realiza sobre una compra con un método de pago diferente como pago en efectivo, transferencia bancaria, etc; la solicitud es rechazada por PayU. PayU solo crea una aplicación por cada solicitud de reembolso, si una solicitud se repite para la misma transacción, PayU indica que ya se registró la solicitud. PayU solo acepta solicitudes de reembolso de transacciones capturadas. Puedes reintentar la solicitud de reembolso si fue rechazada previamente. Una vez hagas la solicitud, el monto de la transacción se convierte en parte del Saldo Congelado de tu cuenta de PayU hasta que sea procesado.  Si tu solicitud de reembolso es APROBADA, el monto es retornado al tarjetahabiente. Si tu solicitud de reembolso es DECLINADA, el monto se libera del Saldo Congelado y retorna a tu cuenta de PayU.   Una vez se apruebe el reembolso, este será reflejado en la tarjeta de crédito del pagador cuando el banco lo haga efectivo. Para consultar el estado de tu solicitud de reembolso, utiliza el Servicio de consultas disponible.  ¿Qué sigue? De acuerdo con el país de procesamiento, pueden aplicar ciertas condiciones especiales para ejecutar anulaciones o reembolsos. Estas condiciones se explican en el tipo de integración que escojas.\nLa integración con esta funcionalidad puede realizarse con cualquiera de nuestros tipos de integración:\n Para integración API, consulta este artículo Para integración SDK, consulta este artículo  ","excerpt":"Entendiendo los conceptos Antes de continuar, vamos a explicar los siguientes conceptos:\n  Anulación …","ref":"/es/docs/services/refunds.html","title":"Anulaciones y Reembolsos"},{"body":"Understanding concepts Before moving on, let\u0026rsquo;s explain the following concepts:\n  Void: this operation reverses a previously authorized transaction.\n  Refund: this operation requests the reversal of a previously captured transaction. Refunds can be requested by the total or the partial amount. A buyer may request a refund when they are not satisfied with the purchase, the purchase has multiple charges, or the buyer did not receive the product or service.\n  Void The VOID method cancels a previously authorized transaction. Void is automatic procedure, as soon as you send the VOID request, it does not follow any approval flow, and the transaction is not charged to the card holder.\nNote VOID method is not available in Colombia and Panama.  Refund A refund is requested when a shop decides to voluntarily return the money spent by the shopper due to dissatisfaction reasons or when the shop does not have enough stock of the product purchased. The REFUND method request the reversal of a previously captured transaction.\nUnlike the VOID method, this method requires an approval. The refund procedure is explained below:\n  When a refund is requested by your customer, you need to request it using the PayU module or our integrations. The request requires the Order Id, and a refund reason.\n  Once you send the request, PayU reviews the request and approves or rejects it in one to three business days.\n  The REFUND has three states:\n UNRESOLVED: the request has been sent to PayU for approval. At this point, no transaction has been added to the order and when you consult it using the Queries service, the response only shows the transaction of the payment approval. APPROVED: the request has been approved by a PayU\u0026rsquo;s customer service agent. At this point the order has changed its state to REFUNDED state and PayU adds an approved REFUND transaction to the order. DECLINED: the request does not meet the policies defined by PayU and was rejected. When the refund is declined, PayU adds a declined REFUND transaction to the order.  For more information about authorized and captured transactions, refer to Payments.\nConsiderations Before using either VOID or REFUND feature, take into account the following considerations:\n Refund or Void method are only available for transactions made with a credit card. If the request refers to a different payment means such as cash payment means, bank transfer; the request is declined by PayU. PayU only creates one application for each refund request, if a request is repeatedly posted for the same transaction, PayU indicates that the request is already registered. PayU only accepts refund requests of captured transactions. You can retry the refund request if this was previously declined. Once you make the request, the transaction amount becomes part of the Frozen Balance of your PayU account until it is processed.  If your refund request is APPROVED, the amount is refunded to the card holder. If your refund request is DECLINED, the amount is released from the Frozen Balance and returns to the available Balance of your PayU account.   Once the refund is approved, this will be reflected in the payer\u0026rsquo;s credit card when the bank make it effective. To check the status of your refund request using the Queries service available for that purpose.  What\u0026rsquo;s next? According to the processing country, some special conditions may apply to be able to execute voids or refunds. These conditions are explained in the selected integration type.\nThe integration with this feature can be performed using one of our integration types:\n For API integrations, refer to this topic For SDK integrations, refer to this topic  ","excerpt":"Understanding concepts Before moving on, let\u0026rsquo;s explain the following concepts:\n  Void: this …","ref":"/en/docs/services/refunds.html","title":"Voids and Refunds"},{"body":"Payouts is an integration service available under demand, and its activation depends on a security and risk analysis. For more information or requesting this service, contact your Sales Representative.\nLet’s explain Payouts using an example. A merchant offers products and services available for delivery; this merchant uses PayU as their online payment platform and has an account where they collect the money paid from their customers. This merchant has many couriers to whom, they pay a fixed amount per delivery they made.\nEach week, the merchant pays the amount earned to each courier. To do this, they can use Payouts to pay directly from their PayU account instead of managing the payments on their own, in which case, the merchant must transfer the money to their accounts or use funds from other sources.\nTo request the pay, the merchant sends the list of payees they want to pay along with the amount of each one, PayU validates these payees and schedules the payout.\nThe amount of each payout plus the processing fee is deducted from your account. Contact your sales representative to know the processing fee to use this service.\nBenefits  Leverage regional capabilities.\nA complete and easy-to-use API to make payments to any bank in the processing country*.\n*Available for now in Colombia, with other markets coming soon. One or multiple payouts.\nThe API is flexible. You can create one or multiple requests which can be new or existing. There is no restriction for the number of records. Save time and costs.\nYou can save operational costs and time managing all payment operations in just one place. Better manage account funds and balance.\nYou can cancel payment orders before the payout is sent to the bank. Payouts feature helps you to better manage your account funds and balance. Customizable notifications.\nAny changes in the payment order status are updated through our solution. You can customize the update notifications you receive.  How does the Payouts feature work? Through Payouts, you can send multiple and secure payouts such as fund disbursement to employees, sub-merchants, suppliers or customers, using the funds you have in your PayU Account.\nYou only need to provide the amount to pay along with the information of each payee (such as name, identification, bank information, etc.), and PayU transfers the requested amount after validations.\n Payout request: you send an API request with the list of payees you want to send funds to, along with the amount for each transaction and their payment information. Payee validation: payees are validated through our solution (Sanction Screening process) and payouts are scheduled. Funds deduction: each payout along with the processing fee are deducted from your PayU virtual account. Confirmation process: the bank processes the payment according to ACH process. You can customize notifications to receive changes in the payment status.  Payout states Payouts are performed in two main steps: the first step is when you request the payment to a payee. The second one is when the request has been approved and moves to the transfer of the funds.\nThe transactional procedure of Payouts has the following states.\n AWAITING SANCTION SCREENING: this state indicates that the payee to whom the payment will be made is subject to validation of restricted lists and further PayU policies related to risk analysis. If a payee does not pass this validation, the payment is automatically rejected. AWAITING FOR SENT: if the payee passes the validation or is not subject to it, this state indicates that the request is ready to be processed. In this state, the communication with the service has not been performed. SENT TO CREATE: this state indicates that the communication with the service has been completed and the Payout request is in creation process. CREATED: this state indicates that the request has been created and has become into a payment order. When the request becomes a payment order, it moves between the states explained in Payment order states. The next state depends on the result of the payment order process. REJECTED: this state indicates that the request has been rejected. A request can be rejected when:  The validation of the payee fails. The creation of the payout was failed. You request the cancellation of the Payout request and it has been approved.   PROCESSING COMPLETED: this state indicates that the Payout process has been completed. AWAITING TO CANCEL: this state indicates that you have requested the cancellation of a Payout request. Take into account that you can request the cancellation of a Payout request when this is not in Banking process.\nIn this state, the communication with the service has not been performed. SENT FOR CANCELLATION: this state indicates that the communication with the service has been completed and the Payout request is in cancellation process. CANCELLATION FAILED: this state indicates that the request of cancellation cannot be executed due to PayU policies or because the request is not being processed by PayU.  The following diagram illustrates the state changes:\nPayment order states Once the Payout has been approved, it is transformed into a payment order. The following are the states of a payment order.\n REQUEST_BY_THE_MERCHANT: this is the initial state of the transaction, once you send the list of payees to be paid and they are approved, the transaction takes this state. IN_VALIDATION: due to PayU policies, each payment may be subject to validation. This state indicates that your request must be reviewed under our internal policies. If the validation fails, the payment which didn\u0026rsquo;t meet the policies is rejected. IN_PAYU_PROCESS: this state indicates that PayU has started the process payment. AWAITING_BANK_SENT: this state indicates that PayU has started the transfer of the amount to the payee. IN_BANKING_PROCESS: this state indicates that the payment is being processed in the payee\u0026rsquo;s bank account. At this point you cannot cancel the request. CONFIRMED_BY_THE_BANK: this state indicates that the payee has received the transferred amount. REJECTED: this state indicates that the transaction has been rejected either by PayU (due to policy breach) or the Bank (due to errors in the bank information).  The following diagram illustrates the state changes:\nTransaction validation Every Payout request is validated to verify that the person who will receive the money is not included in restricted lists. This validation may take up to 24 hours which may delay the payment procedure.\nWhen a person must be verified, PayU checks first in the validation cache, so a person is only validated once during the cache frame.\nIf a person does not approve the validation, the Payout is not performed and you are notified if you have configured the notifications of validation results.\nConsiderations Take into account the following considerations:\n Payouts is not a service included by default. You must request it and sign an annex to the contract to agree the fee and further conditions. Contact your Key Account Manager to contract this service. Merchants are responsible for the integrity and the correctness of the payee\u0026rsquo;s data. PayU does not validate that the data provided by the merchant is complete and correct.\nPayU is not responsible for unsuccessful transactions due to wrong data. Payouts allows local payments only. The merchant may be international (under security and risk analysis) but they can only request payouts using the funds collected in the processing country.\nFor example, if the merchant ABC processes in Colombia and Peru, they can request payouts to payees in Colombia using the funds collected in Colombia; they cannot request payouts to payees in Peru using the funds collected in Colombia. Once the payout is created, it takes the regular flow in PayU. This means that you can see the payout created in your PayU module. The merchant must prove the relationship between them and their payees to guarantee that the transaction is legit.  Transaction processing Payouts uses ACH (Automated Clearing House) transfers to send the payouts to the beneficiaries, this means that the transactions are processed in batch during the day. The time when the transaction will be processed is explained in the following table:\n   IN_BANKING_PROCESS state time ACH process time Estimated time of response     05:31 p.m. - 07:20 a.m. 9:00 a.m. 7:55 p.m.   07:21 a.m. - 09:45 a.m. 11:30 a.m. 10:40 a.m.\nNext working day.   09:46 a.m. - 12:30 p.m. 2:00 p.m. 1:45 p.m.\nNext working day.   12:31 p.m. - 02:50 p.m. 4:00 p.m. 4:40 p.m.\nNext working day.   02:59 p.m. - 04:20 p.m. 6:00 p.m. 6:20 p.m.\nNext working day.    Transactions that reaches IN_BANKING_PROCESS state after 4:20 p.m. will be processed in the next working day.\nNote Payout requests may not be in IN_BANKING_PROCESS state after you sent them, and depending on the validation of the beneficiary, it may take up to 24 hours.  Notifications When using Payouts, you can create a WebHook to configure notifications on status changes. It is recommended to configure the WebHook before sending the Payout request when configuring notifications.\nYou can configure a WebHook for one or more of the following events:\n Transfer creation: sends a notification when a payout request is created. Transfer update: sends a notification when the sanction screening validation rejects the payee. Validation result: sends a notification when the payee has approved the sanction screening validation and when the transfer has been rejected by the bank.  To learn how to create WebHooks, refer to this article.\nVariables in the notifications The following variables are sent to the WebHook when any of the events explained before occurs.\n   Variable Format Description     pushPaymentId Alphanumeric Id of the payout created.   creationDate Numeric Date when the payout was created.\nThis date is in milliseconds.   value Numeric Amount requested to be transferred to the payee.   currency Alphanumeric Currency of the amount requested.   state Alphanumeric Current Payout state.   status Alphanumeric Current Payment order state.   errorCode Alphanumeric Error generated after the sanction screening validation.   errorMessage Alphanumeric Error message generated after the sanction screening validation.   supplierBankAccountId Alphanumeric Id of the payee\u0026rsquo;s bank account generated by the payout request.   fullName Alphanumeric Name of the payee of the payout.   documentNumber Numeric Document number of the payee of the payout.   country Alphanumeric Country of the payee of the payout.   validationState Alphanumeric Result of the validation performed by PayU.   dateOfTheNextValidation Numeric Date when the payee will be validated by sanction screening.\nThis date is in milliseconds.    What\u0026rsquo;s next? The integration with this feature fo is performed using API integrations.\n","excerpt":"Payouts is an integration service available under demand, and its activation depends on a security …","ref":"/en/docs/services/payouts.html","title":"Payouts"},{"body":"Payouts es un servicio de integración disponible bajo demanda y su activación depende de un análisis de riesgo y seguridad. Para más información o para solicitar este servicio, comunícate con tu Representante de Ventas.\nExpliquemos Payouts a través de un ejemplo. Un comercio ofrece productos y servicios a domicilio; este comercio utiliza PayU como su plataforma de pagos y tiene una cuenta donde recauda el dinero pagado por sus clients. Este comercio tiene varios repartidores a quienes paga un monto fijo por cada domicilio que realicen.\nCada semana, el comercio paga el monto obtenido por cada repartidor. Para esto, ellos pueden utilizar Payouts para pagar directamente desde su cuenta de PayU en lugar de administrar los pagos por su cuenta, en cuyo caso, el comercio debe transferir el dinero a sus cuentas bancarias o utilizar los fondos recolectados de otras fuentes.\nPara solicitar el pago, el comercio envía la lista de beneficiarios a los que desea pagar junto con el monto de cada uno. PayU valida estos beneficiarios y programa el pago.\nEl valor de cada pago más la tarifa de procesamiento es debitado de la cuenta. Contacta a tu Represente de Ventas para saber el valor de la tarifa de procesamiento para utilizar este servicio.\nBeneficios  Aprovecha las capacidades regionales.\nPayouts es una API completa y fácil de utilizar para realizar pagos a cualquier banco en el país de procesamiento*.\n*Disponible por ahora en Colombia, próximamente en otros mercados. Uno or múltiples pagos.\nLa API es flexible. Puedes crear uno o múltiples solicitudes de pago para beneficiarios nuevos o existentes. No hay restricción en el número de registros. Ahorra tiempo y costos.\nPuedes ahorrar costos operacionales y tiempo gestionando todas las operaciones de pago en un solo lugar. Administra mejor los fondos y el saldo de la cuenta.\nPuedes cancelar órdenes de pago antes de que sean enviadas al banco. Payouts te ayuda a manejar mejor los fondos y el saldo de tu cuenta. Notificaciones personalizadas.\nCualquier cambio en la orden de pago es actualizado por nuestra solución. Puedes personalizar las notificaciones que recibes.  ¿Cómo funciona Payouts? A través de Payouts, puedes enviar múltiples pagos seguros como en una distribución de fondos a empleados, comercios asociados, proveedores o clientes utilizando los fondos que tienes en tu cuenta de PayU.\nSolo necesitas proporcionar la cantidad a pagar junto con la información de cada beneficiario (como nombre, identificación, información bancaria, etc.) y PayU transfiere la cantidad solicitada luego de realizar algunas validaciones.\n Solicitud del Payout: envías una solicitud API con la lista de los beneficiarios a los que quieres enviarles los fondos, junto con la cantidad de cada transacción y su información de pago. Validación de beneficiarios: los beneficiarios son validados a través de nuestra solución (proceso de Sanction Screening) y se programan los pagos. Débito de fondos: el valor de cada Payout junto con la tarifa de procesamiento son debitados de tu cuenta virtual de PayU. Confirmación del proceso: el banco procesa el pago de acuerdo con el proceso de ACH. Puedes personalizar las notificaciones para recibir cambios en los estados del pago.  Estados de los Payouts Los Payouts se ejecutan en dos pasos principales: el primer paso es cuando se solicita el pago al beneficiario y el segundo, es cuando la solicitud ha sido aprobada y pasa a la transferencia de los fondos.\nEl procedimiento transaccional de Payouts tiene los siguientes estados.\n AWAITING SANCTION SCREENING: este estado indica que el beneficiario a quien se le hará el pago es objeto de validación en listas restrictivas y demás políticas de PayU relacionadas con análisis de riesgo. Si un beneficiario no aprueba esta validación, el pago es rechazado automáticamente. AWAITING FOR SENT: si el beneficiario pasa la validación o no es sujeto a ella, este estado indica que la solicitud está lista para ser procesada. En este estado, no se ha realizado la comunicación con servicio. SENT TO CREATE: este estado indica que se ha completado la comunicación con el servicio y la solicitud de Payout está en proceso de creación. CREATED: este estado indica que se ha creado la solicitud y se ha convertido en una orden de pago. Cuando la solicitud se convierte e una orden de pago, se mueve en los estados explicados en estados de la orden de pago. El siguiente estado depende del resultado del proceso de la orden. REJECTED: este estado indica que la solicitud ha sido rechazada. Una solicitud puede ser rechazada cuando:  Falla la validación del beneficiario. Falla la creación del Payout. Solicitaste la cancelación del Payout y dicha cancelación fue aprobada.   PROCESSING COMPLETED: este estado indica que se ha completado el proceso del Payout. AWAITING TO CANCEL: este estado indica que has solicitado la cancelación de una solicitud de Payout. Ten en cuenta que puedes solicitar la cancelación de una solicitud de Payout cuando no está en proceso bancario.\nEn este estado, no se ha realizado la comunicación con servicio. SENT FOR CANCELLATION: este estado indica que se ha completado la comunicación con el servicio y la solicitud de Payout está en proceso de cancelación. CANCELLATION FAILED: este estado indica que la solicitud de cancelación no pudo ser ejecutada debido a políticas de PayU o porque no está siendo procesada por PayU.  El siguiente diagrama ilustra el cambio de estados:\nEstados de la orden de pago Una vez el Payout ha sido aprobado, es transformado en una orden de pago. Los siguientes son los estados de una orden de pago.\n REQUEST_BY_THE_MERCHANT: este es el estado inicial de la transacción, una vez envías la lista de beneficiarios a pagar y son aprobados, la orden toma este estado. IN_VALIDATION: debido a políticas de PayU, cada pago puede estar sujeto a una validación. Este estado indica que tu solicitud debe ser revisada bajo nuestras políticas internas. Si la validación falla, el pago que no cumplió con las políticas es rechazado. IN_PAYU_PROCESS: este estado indica que PayU ha iniciado el proceso del pago. AWAITING_BANK_SENT: este estado indica que PayU ha iniciado la transferencia del monto al beneficiario. IN_BANKING_PROCESS: este estado indica que el pago está siendo procesado por la cuenta bancaria del beneficiario. En este punto, no puedes solicitar su cancelación. CONFIRMED_BY_THE_BANK: este estado indica que el beneficiario ha recibido el monto de la transferencia. REJECTED: este estado indica que la transacción ha sido rechazada por PayU (debido a incumplimiento de políticas) o por el Banco (debido a errores en la información bancaria).  El siguiente diagrama ilustra el cambio de estados:\nValidación de la transacción Cada solicitud de Payout es validada para verificar que la persona que recibirá el dinero no está incluida en listas restrictivas. Esta validación puede tomar hasta 24 horas, lo que podría demorar el pago\nCuando una persona debe ser verificada, PayU verifica primero en el caché de la validación de tal forma que solo sea consultada una vez durante la franja del caché.\nSi una persona no aprueba la validación, el Pago no se realiza y se te envía una notificación si tienes configuradas las notificaciones del resultado de la validación.\nConsideraciones Ten en cuentas las siguientes consideraciones:\n Payouts no es un servicio incluido de forma predeterminada. Debes solicitarlo y firmar un anexo al contrato para acordar el valor de la tarifa de procesamiento y demás condiciones. Contacta a tu Key Account Manager para contratar este servicio. Los comercios son los responsables de la integridad y la veracidad de la información de los beneficiarios. PayU no valida que la información entregada sea completa y correcta.\nPayU no es responsable por transacciones no exitosas debido a información incorrecta. Payouts solo permite pagos locales. El comercio puede ser internacional (bajo análisis de seguridad y riesgo) pero solo pueden solicitar Payouts utilizando los fondos obtenidos en el país de procesamiento.\nPor ejemplo, si el comercio ABC procesa en Colombia y Perú, puede solicitar payouts a beneficiarios en Colombia utilizando los fondos recaudados en Colombia; no pueden solicitar pagos a beneficiarios en Perú utilizando los fondos recaudados en Colombia. Una vez se ha creado el Payout, toma el flujo regular en PayU. Esto significa que puedes ver el payout creado en el módulo PayU. El comercio debe probar la relación entre él y sus beneficiarios para garantizar que la transacción es legítima.  Procesamiento de transacciones Payouts utiliza transferencias ACH (Automated Clearing House) para enviar los pagos a los beneficiarios, esto significa que las transacciones son procesadas por lotes durante el día. El tiempo en el que se procesará la transacción se explica en la siguiente tabla:\n   Hora del estado IN_BANKING_PROCESS Hora del proceso de ACH Hora estimada de respuesta     05:31 p.m. - 07:20 a.m. 9:00 a.m. 7:55 p.m.   07:21 a.m. - 09:45 a.m. 11:30 a.m. 10:40 a.m.\nSiguiente día hábil.   09:46 a.m. - 12:30 p.m. 2:00 p.m. 1:45 p.m.\nSiguiente día hábil.   12:31 p.m. - 02:50 p.m. 4:00 p.m. 4:40 p.m.\nSiguiente día hábil.   02:59 p.m. - 04:20 p.m. 6:00 p.m. 6:20 p.m.\nSiguiente día hábil.    Las transacciones que llegue al estado IN_BANKING_PROCESS después de las 4:20 p.m. serán procesadas el siguiente día hábil.\nNota Puede que las solicitudes de Payouts no queden en el estado IN_BANKING_PROCESS luego de enviarlas y, dependiendo de la validación de beneficiario, esto puede tomar hasta 24 horas.  Notificaciones Cuando utilizas Payouts, puedes crear un WebHook para configurar notificaciones en los cambios de estado. Se recomienda configurar el WebHook antes de enviar la solicitud de Payout cuando quieras configurar notificaciones.\nPuedes configurar un WebHook por uno o varios de los siguientes eventos:\n Creación de la transferencia: envía una notificación cuando se crea la solicitud de payout. Actualización de la transferencia: envía una notificación cuando la validación de Sanction Screening rechaza al beneficiario. Resultado de la validación: envía una notificación cuando el beneficiario ha aprobado la validación y cuando la transferencia ha sido rechazada por el banco.  Consulta este artículo para aprender a crear WebHooks.\nVariables en las notificaciones Cuando ocurre un evento de los mencionados anteriormente, se envían al WebHook las siguientes variables.\n   Variable Formato Descripción     pushPaymentId Alfanumérico Identificador del Payout creado.   creationDate Numérico Fecha de creación de Payout.\nEsta fecha está en milisegundos.   value Numérico Cantidad solicitada para ser transferida al beneficiario.   currency Alfanumérico Moneda de la cantidad solicitada.   state Alfanumérico Estado del Payout actual.   status Alfanumérico Estado de la orden de pago actual.   errorCode Alfanumérico Error generado luego de la validación de sanction screening.   errorMessage Alfanumérico Mensaje del error generado luego de la validación de sanction screening.   supplierBankAccountId Alfanumérico Id de la cuenta bancaria del beneficiario generado por la solicitud de payout.   fullName Alfanumérico Nombre del beneficiario beneficiario del Payout.   documentNumber Numérico Número de documento del beneficiario beneficiario del Payout.   country Alfanumérico País del beneficiario beneficiario del Payout.   validationState Alfanumérico Resultado de la validación realizada por PayU.   dateOfTheNextValidation Numérico Fecha en la que el beneficiario será validado por sanction screening.\nEsta fecha está en milisegundos.    ¿Qué sigue? La integración con esta funcionalidad se realiza utilizando el API de integraciones.\n","excerpt":"Payouts es un servicio de integración disponible bajo demanda y su activación depende de un análisis …","ref":"/es/docs/services/payouts.html","title":"Payouts"},{"body":"To integrate with Payments SDK Peru, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Payments SDK includes the following methods:\n Submit transaction with credit card Submit transaction with cash Available payment methods query Ping  Note To confirm the status of a transaction, you can use the Queries SDK.  Submit transaction with credit card This method lets you process the payments performed by your customers using credit cards. For Peru, you can perform the two-step flows (Authorization, Capture), and one-step flows (Charge). For more information, refer to Payment flows.\nConsiderations  Send a valid Credit card Payment Method in the request, see the available Payment Methods for Peru. For payments with credit card tokens, set the parameters TOKEN_ID and CREDIT_CARD_SECURITY_CODE (if you process with security code) replacing the information of the credit card. For more information, refer to Tokenization SDK. By default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative. After this feature is enabled for you, set the parameter PROCESS_WITHOUT_CVV2 as true and remove the parameter CREDIT_CARD_SECURITY_CODE. In Peru, you can select 0 or 2 to 36 installments when paying with credit card. If you select one (1) installment, PayU sends zero (0) as default value.  Authorization Use this method to perform the Authorization step of a two-step flow. In this step, you authorize the payment but the amount is not debited until you capture the funds.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorization(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorization($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Capture Use this method to perform the Capture step of a two-step flow. In this step, you capture the funds previously Authorized to transfer them to your PayU account.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order identifier here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400469408\u0026#34;); // Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;143b2fcf-4dff-4fa0-a0c9-9409be949dd4\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Capture Request TransactionResponse response = PayUPayments.doCapture(parameters); // Response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Enter the account’s identifier here. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Enter the order identifier here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400469408\u0026#34;, // Enter the transaction identifier here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;143b2fcf-4dff-4fa0-a0c9-9409be949dd4\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Charge Use this method to perform a one-step flow, namely a charge. In this step, both steps of the two-step flow are combined in a single transaction and the funds are transferred from the customers account to your PayU account once they have been approved:\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Credit card data -- // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Enter expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Submit transaction with cash This method lets you process the payments in cash of your customers. To integrate with cash transactions, you must redirect the customer to the URL found in the response of the method; your customer sees a payment receipt like this.\nConsiderations  The parameter EXPIRATION_DATE is not mandatory. If you don\u0026rsquo;t send this parameter, its default value is seven (7) days after the current date.\nIf you send a date later than the default number of days, PayU will ignore this value and the expiration will be set as default. The extra parameters have the following data related to the transaction:  REFERENCE: internal payment reference generated by PayU. EXPIRATION_DATE: maximum term for the payer to perform the payment. BAR_CODE: barcode which lets the payer perform the payment. URL_PAYMENT_RECEIPT_HTML: payment receipt in HTML format. This is where you need to redirect the payment when the payer selects cash payment. URL_PAYMENT_RECEIPT_PDF: payment receipt in PDF format.    Method call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Buyer -- // Enter the buyer Id here. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Enter the buyer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Enter the buyer\u0026#39;s e-mail here parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Enter the buyer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the buyer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Enter the buyer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Payer -- // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Enter the payer\u0026#39;s e-mail here. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Enter the payer\u0026#39;s contact phone here. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Enter the payer\u0026#39;s address here. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PAGOEFECTIVO\u0026#34;); // Enter the payment due date parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Authorization request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // You can obtain the properties in the response if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obtain the payment receipt URL \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Buyer -- \t// Enter the buyer Id here. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Enter the buyer\u0026#39;s name here. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Enter the buyer\u0026#39;s e-mail here. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Enter the buyer\u0026#39;s contact phone here. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the buyer\u0026#39;s contact document here. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the buyer\u0026#39;s address here. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Payer -- \t// Enter the payer\u0026#39;s ID here. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Enter the payer\u0026#39;s name here \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Enter the payer\u0026#39;s e-mail here \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Enter the payer\u0026#39;s contact phone here. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Enter the payer\u0026#39;s DNI type here \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Enter the payer\u0026#39;s address here. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Credit card data --  // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Enter expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PAGOEFECTIVO\u0026#34;, // Enter the payment due date \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Authorization request $response = PayUPayments::doAuthorizationAndCapture($parameters); // You can obtain the properties in the response if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Available payment methods query This method returns a list of the payment methods available in all countries.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping The PING method lets you verify the connection to our platform.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"To integrate with Payments SDK Peru, target the requests to the following URLs:\n Java PHP   // URL …","ref":"/en/docs/integrations/sdk-integration/payments-sdk-peru.html","title":"Payments SDK - Peru"},{"body":"Para integrarte con el SDK de Pagos de Perú, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de pagos incluye los siguientes métodos:\n Enviar transacciones con tarjeta de crédito Enviar transacciones en efectivo Consultar métodos de pago disponibles Ping  Nota Para confirmar el estado de una transacción, puedes utilizar el SDK de Consultas.  Enviar transacciones con tarjeta de crédito Este método te permite procesar pagos realizados por tus clientes utilizando tarjetas de crédito. Para Perú, puedes realizar los flujos de dos pasos (Autorización, Captura) y el de un paso (Cobro). Para más información, consulta los flujos de pago.\nConsideraciones  Envía un método de pago válido de tarjeta de crédito, mira los métodos de pago disponibles para Perú. Para pagos con tókenes de tarjeta de crédito, asigna los parámetros TOKEN_ID y CREDIT_CARD_SECURITY_CODE (si procesas con código de seguridad) reemplazando la información de la tarjeta de crédito. Para más información, refer to Tokenization API. Por defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas. Luego de que se te active esta funcionalidad, asigna el parámetro PROCESS_WITHOUT_CVV2 con true y elimina el parámetro CREDIT_CARD_SECURITY_CODE. En Perú, puedes seleccionar 0 o de 2 a 26 cuotas cuando pagas con tarjeta de crédito. Si seleccionas una (1) cuota, PayU envía cero (0) como valor por defecto.  Autorización Utiliza este método para realizar el paso de Autorización del flujo de dos pasos. En este paso, autorizas el pago pero el monto no se debita hasta que captures los fondos.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorization(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí el tipo de identificación del pagador \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorization($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Captura Utiliza este método para realizar el paso de Captura del flujo de dos pasos. En este paso, capturas los fondos previamente Autorizados para transferirlos a tu cuenta PayU.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;1400469408\u0026#34;); // Ingresa aquí el identificador de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;143b2fcf-4dff-4fa0-a0c9-9409be949dd4\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // Petición de Captura TransactionResponse response = PayUPayments.doCapture(parameters); // Respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el identificador de la cuenta. \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512322\u0026#34;, // Ingresa aquí el identificador de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;1400469408\u0026#34;, // Ingresa aquí el identificador de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;143b2fcf-4dff-4fa0-a0c9-9409be949dd4\u0026#34;, ); $response = PayUPayments::doCapture($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Cobro Utiliza este método para realizar el flujo de un paso, es decir, un cobro. En este paso, los pasos del flujo de dos pasos son combinados en una única transacción y los fondos son transferidos de la cuenta del cliente a tu cuenta PayU tan pronto sean aprobados:\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Datos de la tarjeta de crédito -- // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4097440000000004\u0026#34;); // Ingresa aquí la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2022/12\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí el tipo de identificación del pagador \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Enviar transacciones en efectivo Este método te permite procesar los pagos en efectivo de tus clientes. Para integrarte con las transacciones en efectivo, debes redirigir a tu cliente a la URL que se encuentra en la respuesta; tu cliente ve un de pago como el siguiente.\nConsideraciones  El parámetro EXPIRATION_DATE no es obligatorio. Si no envías este parámetro, su valor por defecto es siete (7) días luego de la fecha actual.\nSi envías una fecha posterior a dicho número de días, PayU ignorará este valor y asignará el valor por defecto Los extra parámetros tienen los siguientes parámetros relacionados con la transacción:  REFERENCE: referencia de pago interna generada por PayU. EXPIRATION_DATE: fecha máxima en la que el pagador puede realizar el pago. BAR_CODE: código de barras que le permite al pagador realizar el pago. URL_PAYMENT_RECEIPT_HTML: recibo de pago en formato HTML. Aquí es donde debe redirigir el pago cuando el pagador selecciona un método de pago en efectivo. URL_PAYMENT_RECEIPT_PDF: recibo de pago en formato PDF.    Llamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   String reference = \u0026#34;payment_test_00000001\u0026#34;; String value= \u0026#34;100\u0026#34;; Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, \u0026#34;512323\u0026#34;); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;\u0026#34;+reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;\u0026#34;+value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.PEN.name()); // -- Comprador -- // Ingresa aquí el identificador del comprador. parameters.put(PayU.PARAMETERS.BUYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del comprador. parameters.put(PayU.PARAMETERS.BUYER_NAME, \u0026#34;First name and second buyer name\u0026#34;); // Ingresa aquí el correo electrónico del comprador parameters.put(PayU.PARAMETERS.BUYER_EMAIL, \u0026#34;buyer_test@test.com\u0026#34;); // Ingresa aquí el teléfono de contacto del comprador. parameters.put(PayU.PARAMETERS.BUYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del comprador. parameters.put(PayU.PARAMETERS.BUYER_DNI, \u0026#34;123456789\u0026#34;); // Ingresa aquí la dirección del comprador. parameters.put(PayU.PARAMETERS.BUYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.BUYER_PHONE, \u0026#34;7563126\u0026#34;); // -- Pagador -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;First name and second payer name\u0026#34;); // Ingresa aquí el correo electrónico del pagador. parameters.put(PayU.PARAMETERS.PAYER_EMAIL, \u0026#34;payer_test@test.com\u0026#34;); // Ingresa aquí el número de teléfono del pagador. parameters.put(PayU.PARAMETERS.PAYER_CONTACT_PHONE, \u0026#34;7563126\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;5415668464654\u0026#34;); // Ingresa aquí la dirección del pagador. parameters.put(PayU.PARAMETERS.PAYER_STREET, \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STREET_2, \u0026#34;5555487\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_CITY, \u0026#34;Lima\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_STATE, \u0026#34;Lima y Callao\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_COUNTRY, \u0026#34;PE\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_POSTAL_CODE, \u0026#34;000000\u0026#34;); parameters.put(PayU.PARAMETERS.PAYER_PHONE, \u0026#34;7563126\u0026#34;); // Enter the name of the cash payment here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;PAGOEFECTIVO\u0026#34;); // Ingresa aquí la fecha de vencimiento del pago parameters.put(PayU.PARAMETERS.EXPIRATION_DATE, \u0026#34;2021-07-01T20:00:00\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, PaymentCountry.PE.name()); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Petición de Autorización TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters); // Puedes obtener las propiedades en la respuesta if(response != null){ response.getOrderId(); response.getTransactionId(); response.getState(); if(response.getState().toString().equalsIgnoreCase(\u0026#34;PENDING\u0026#34;)){ response.getPendingReason(); Map extraParameters = response.getExtraParameters(); // Obten la URL del recibo de pago \tint reference = (Integer)extraParameters.get(\u0026#34;REFERENCE\u0026#34;); String pdf = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_PDF\u0026#34;); Date date = (Date)extraParameters.get(\u0026#34;EXPIRATION_DATE\u0026#34;); String barCode = (String)extraParameters.get(\u0026#34;BAR_CODE\u0026#34;); String url = (String)extraParameters.get(\u0026#34;URL_PAYMENT_RECEIPT_HTML\u0026#34;); } response.getPaymentNetworkResponseCode(); response.getPaymentNetworkResponseErrorMessage(); response.getTrazabilityCode(); response.getResponseCode(); response.getResponseMessage(); }   $reference = \u0026#34;payment_test_00000001\u0026#34;; $value = \u0026#34;100\u0026#34;; $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; \u0026#34;512323\u0026#34;, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; \u0026#34;PEN\u0026#34;, // -- Comprador -- \t// Ingresa aquí el identificador del comprador. \tPayUParameters::BUYER_ID =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del comprador. \tPayUParameters::BUYER_NAME =\u0026gt; \u0026#34;First name and second buyer name\u0026#34;, // Ingresa aquí el correo electrónico del comprador. \tPayUParameters::BUYER_EMAIL =\u0026gt; \u0026#34;buyer_test@test.com\u0026#34;, // Ingresa aquí el teléfono de contacto del comprador. \tPayUParameters::BUYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del comprador. \tPayUParameters::BUYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí la dirección del comprador. \tPayUParameters::BUYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::BUYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::BUYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::BUYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::BUYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::BUYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::BUYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Pagador -- \t// Ingresa aquí el identificador del pagador. \tPayUParameters::PARAMETERS.PAYER_ID =\u0026gt; \u0026#34;1\u0026#34;, /// Ingresa aquí el nombre del pagador \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;First name and second payer name\u0026#34;, // Ingresa aquí el correo electrónico del pagador \tPayUParameters::PAYER_EMAIL =\u0026gt; \u0026#34;payer_test@test.com\u0026#34;, // Ingresa aquí el número de teléfono del pagador. \tPayUParameters::PAYER_CONTACT_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;5415668464654\u0026#34;, // Ingresa aquí el tipo de identificación del pagador \tPayUParameters::PARAMETERS.PAYER_DNI_TYPE =\u0026gt; \u0026#34;DNI\u0026#34;, // Ingresa aquí la dirección del pagador. \tPayUParameters::PAYER_STREET =\u0026gt; \u0026#34;Av. Isabel La Católica 103-La Victoria\u0026#34;, PayUParameters::PAYER_STREET_2 =\u0026gt; \u0026#34;5555487\u0026#34;, PayUParameters::PAYER_CITY =\u0026gt; \u0026#34;Lima\u0026#34;, PayUParameters::PAYER_STATE =\u0026gt; \u0026#34;Lima y Callao\u0026#34;, PayUParameters::PAYER_COUNTRY =\u0026gt; \u0026#34;PE\u0026#34;, PayUParameters::PAYER_POSTAL_CODE =\u0026gt; \u0026#34;000000\u0026#34;, PayUParameters::PAYER_PHONE =\u0026gt; \u0026#34;7563126\u0026#34;, // -- Datos de la tarjeta de crédito --  // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4097440000000004\u0026#34;, // Ingresa aquí la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;PAGOEFECTIVO\u0026#34;, // Ingresa aquí la fecha de vencimiento del pago \tPayUParameters::EXPIRATION_DATE =\u0026gt; \u0026#34;2021-07-01T20:00:00\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; PayUCountries::PE, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34; ); // Petición de Autorización $response = PayUPayments::doAuthorizationAndCapture($parameters); // Puedes obtener las propiedades en la respuesta if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;transactionId; $response-\u0026gt;transactionResponse-\u0026gt;state; if ($response-\u0026gt;transactionResponse-\u0026gt;state==\u0026#34;PENDING\u0026#34;){ $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;authorizationCode; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;REFERENCE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_PDF; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;EXPIRATION_DATE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;BAR_CODE; $response-\u0026gt;transactionResponse-\u0026gt;extraParameters-\u0026gt;URL_PAYMENT_RECEIPT_HTML; } $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $response-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseErrorMessage; $response-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $response-\u0026gt;transactionResponse-\u0026gt;responseCode; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Consultar métodos de pago disponibles Este método retorna la lista de los métodos de pago disponibles en todos los paises.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   List\u0026lt;PaymentMethodComplete\u0026gt; response = PayUPayments.getPaymentMethods(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $array=PayUPayments::getPaymentMethods(); $payment_methods=$array-\u0026gt;paymentMethods; foreach ($payment_methods as $payment_method){ $payment_method-\u0026gt;country; $payment_method-\u0026gt;description; $payment_method-\u0026gt;id; }    Ping El método PING te permite verificar la conexión con nuestra plataforma.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUPayments.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUPayments::doPing(); $response-\u0026gt;code;    ","excerpt":"Para integrarte con el SDK de Pagos de Perú, apunta tus peticiones a las siguientes URLs:\n Java PHP …","ref":"/es/docs/integrations/sdk-integration/payments-sdk-peru.html","title":"SDK de Pagos - Perú"},{"body":"OpenCart is a free platform developed in PHP to create online stores. OpenCart provides a professional and reliable base to build an online store. This base uses a wide variety of users such as web developers looking for a user-friendly interface or store owners who want to launch their online business for the first time. OpenCart has many features that give you great control over your store\u0026rsquo;s customization. For more information about OpenCart, refer to their official website.\nPrerequisites The OpenCart plugin is available for version 1.5 and 2.0 and you need to meet the following prerequisites:\n You need an active account in PayU Latam. For OpenCart version 1.5:  Having the PayU\u0026rsquo;s OpenCart v1.5 plugin downloaded and stored in an accessible location. Click here to download it. Having OpenCart version 1.5.5.1 - 1.5.6.X installed.   For OpenCart version 2.0:  Having the PayU\u0026rsquo;s OpenCart v2.0 plugin downloaded and stored in an accessible location. Click here to download it.    Installation and configuration The procedure to install OpenCart plugin is the same for version 1.5 or 2.0. The only difference is the look and feel of the versions and this is highlighted during this article.\nFollow the next procedure to install the plugin on your website.\n Unzip the plugin file in a location of your choice. Then, using an FTP client, go to the location where you unzipped the plugin.\nThen, upload the folders admin and catalog to the root folder of the OpenCart installation in your server.  This action add the plugin files to your OpenCart server in the right locations. To validate whether the procedure was correct, search the following files in their corresponding locations.\nIn the administration console of your OpenCart shop, open the Extensions menu and click Payments.  OpenCart v1.5\nOpenCart v2.0\nIn the Payment table, find the PayuLatam payment method. Then, click Install.  OpenCart v1.5\nOpenCart v2.0\nWhen the plugin has been installed, click Edit.  OpenCart v1.5\nOpenCart v2.0\nConfigure the payment method using the data of your PayU account as follows.     Field Value     Production Url PayU Latam\u0026rsquo;s URL in production https://gateway.payulatam.com/ppp-web-gateway/   Test Url PayU Latam\u0026rsquo;s URL in test https://sandbox.gateway.payulatam.com/ppp-web-gateway   Test Mode? Set Yes to make transactions in the test environment and No for the production environment.   Merchant ID ID of your commerce in PayU Latam   Account ID ID of the PayU account according to the country where you want to sell.   API key Unique key of your commerce, you can find this key in the PayU module.   Approved Transaction Order status in the OpenCart shop when PayU Latam approves the transaction.   Pending Transaction Order status in the OpenCart shop when the transaction is pending in PayU Latam.   Declined Transaction Order status in the OpenCart shop when PayU Latam declines the transaction.   Status Select Enable to activate this payment method in OpenCart.    Finally, save the changes. At this point, your customers can pay with PayU Latam when they do the checkout in the OpenCart\u0026rsquo;s shopping cart.  ","excerpt":"OpenCart is a free platform developed in PHP to create online stores. OpenCart provides a …","ref":"/en/docs/tools/shopping-cart-plugins/opencart.html","title":"OpenCart"},{"body":"Opencart es una plataforma gratuita desarrollada en PHP para crear tiendas en línea. OpenCart proporciona una base profesional y confiable para construir una tienda en línea. Esta base utiliza a una amplia variedad de usuarios como desarrolladores web en busca de una interfaz de uso fácil o propietarios de tiendas que quieren lanzar su negocio en línea por primera vez. OpenCart tiene una gran cantidad de características te dan un amplio control sobre la personalización de tu tienda. Para más información sobre OpenCart, consulta su página web oficial.\nPrerrequisitos El plugin de OpenCart está disponible para las versiones 1.5 y 2.0. Necesitas cumplir con os siguientes prerrequisistos:\n Necesitas una cuenta activa en PayU Latam. Para OpenCart versión 1.5:  Haber descargado el plugin de OpenCart v1.5 de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí to download it. Tener instalado OpenCart versión 1.5.5.1 - 1.5.6.X.   Para OpenCart versión 2.0:  Haber descargado el plugin de OpenCart v2.0 de PayU y tenerlo guardado en una ruta accesible. Haz clic aquí to download it.    Instalación y configuración El procedimiento para instalar el plugin de OpenCart es el mismo para la versión 1.5 como para la 2.0. La única diferencia es la interfaz de las versiones, la cual es resaltada a lo largo de este artículo.\nSigue este procedimiento para instalar el plugin en tu página web.\n Descomprime el archivo del plugin en una ubicación de tu elección. Luego, utilizando un cliente FTP, ve a la ruta donde descomprimiste el plugin.\nLuego, carga las carpetas admin y catalog a la carpeta raíz de la instalación de OpenCart en tu servidor.  Esta accion agregará los archivos del plugin a tu servidor de OpenCart en las rutas correctas. Para validar si el procedimiento fue exitoso, busca los siguientes archivos en sus rutas correspondientes.\nEn la consola de administración de tu tienda OpenCart, abre el menú Extensions y haz clic en Payments.  OpenCart v1.5\nOpenCart v2.0\nEn la tabla Payment, localiza el método de pago PayuLatam. Luego, haz clic en Install.  OpenCart v1.5\nOpenCart v2.0\nCuando se haya instalado e plugin, haz clic en Edit.  OpenCart v1.5\nOpenCart v2.0\nConfigura el método de pago utilizando los datos de tu cuenta PayU así.     Campo Valor     Production Url URL de PayU Latam en producción https://gateway.payulatam.com/ppp-web-gateway/   Test Url URL de PayU Latam en pruebas https://sandbox.gateway.payulatam.com/ppp-web-gateway   Test Mode? Selecciona Yes para hacer transacciones en el ambiente de prueba y No para producción.   Merchant ID Identificador de tu comercio en PayU Latam.   Account ID Identificador de la cuenta PayU de acuerdo con el país en el que quieres vender.   API key Llave única de tu comercio, puedes obtener esta información en tu Módulo PayU.   Approved Transaction Estado de la orden en la tienda OpenCart cuando PayU Latam aprueba la transacción.   Pending Transaction Estado de la orden en la tienda OpenCart cuando la transacción queda pendiente en PayU Latam.   Declined Transaction Estado de la orden en la tienda OpenCart cuando PayU Latam declina la transacción.   Status Selecciona Enable para activar este método de pago en OpenCart.    Por último, guarda los cambios. En este punto, tus clientes pueden pagar con PayU Latam en el carrito de compras de OpenCart.  ","excerpt":"Opencart es una plataforma gratuita desarrollada en PHP para crear tiendas en línea. OpenCart …","ref":"/es/docs/tools/shopping-cart-plugins/opencart.html","title":"OpenCart"},{"body":"Esta solución es útil para negocios que reciben pagos de forma regular como membresías, cursos, ventas por catálogo o por suscripción y más.\nPuedes recibir pagos sin tener conocimientos técnicos. Solo necesitas enviar un correo electrónico donde tu cliente puede descargar el cupon y realizar el pago respectivo.\nNota Los cupones de pago están disponibles para Argentina utilizando RAPIPAGO y PAGOFACIL, y para Colombia utilizando BALOTO y EFECTY.  ¿Cómo funcionan los cupones de pago? Los cupones de pago siguen un flujo simple que le permite a tus clientes realizar pagos regulares en efectivo las veces que lo requieran:\n  Configura el cupón de Pago a través del Módulo PayU.\nSolo necesitas ingresar cuántos pagos por cliente quieres recibir, decidir si el monto a pagar es fijo o si lo deciden tus clientes, decidir la fecha límite de pago y la referencia de pago.\n  Decide el envío del cupón\nDecide si quieres entregar los cupones a través de correo electrónico, generando un PDF por referencias de pago o tarjetas de cobranza (Solo disponible para Argentina).\n  Utiliza el cupón de pago\nCuando tus clientes reciban el cupón, pueden realizar pagos en cualquiera de las oficinas disponibles en su país.\nCada vez que un cliente paga utilizando el cupón, recibes un mensaje de confirmación y el monto del pago* es transferido a tu cuenta PayU, donde puedes transferirlo a tu cuenta bancaria.\n  *El valor transferido corresponde a la cantidad pagada por tu cliente menos la tarifa de PayU.\nCrear cupones de pago De acuerdo con tus necesidades, puedes configurar las opciones para recibir pagos utilizando cupones. Sigue este procedimiento para crear cupones de pago y entregarselos a tus clientes.\n  Ingresa a PayU.com y haz clic en la opción para iniciar sesión que se encuentra en la parte superior de la página. O si lo prefieres, puedes ir directamente a https://merchants.payulatam.com/.\n  Expande la opción Cobra con PayU y luego, selecciona Cobros en efectivo.\n  Configura la siguiente información:    ¿Cuántos pagos esperas recibir por cada cliente?: selecciona cuántas veces un cliente puede utilizar el cupón. Selecciona Únicos si quieres permitir que tus clientes paguen una sola vez. Si no, selecciona Múltiples para varios pagos mientras el cupón esté disponible. El valor predeterminado es Múltiples.\n  ¿Cobrarás un monto específico?: selecciona el monto del cupón de pago. Si seleccionas No, tu cliente decide el valor a pagar en la oficina de pago. El valor predeterminado es No.\n  ¿Tiene límite de pago?: decide si el cupón de pago expira en una fecha determinada. La fecha seleccionada es fija, no se soporta ingresar un día específico del mes u otra configuración personalizada. Si seleccionas No, el cupón no tendrá recha de expiración. El valor predeterminado es No.\n  ¿Deseas definir la referencia de pago?: si seleccionas Sí necesitas ingresar la referencia de pago del cupón. Si no, PayU define y asigna una referencia automática. El valor predeterminado es No.\n  Compartir el cupón de pago Luego de configurar los cupones de pago, decide cómo deseas enviarlos a tus clientes.\nTienes disponibles las siguientes opciones:\nEnviar a través de correo electrónico Esta opción te permite enviar el cupón de pago a través de correo electrónico. Los clientes reciben el cupón a través de correo electrónico para descargarlo e imprimirlo.\nPara ingresar los clientes uno a uno, ingresa la siguiente información:\n Correo electrónico: dirección de correo electrónico del cliente que recibe el cupón. Nombre cliente: nombre del pagador. Descripción del pago: descripción del pago que se va a realizar. Valor: este campo está disponible cuando defines que la cantidad pagada por tu cliente es fija y toma dicho valor. Fecha expiración: este campo está disponible cuando defines una fecha de expiración del cupón. Referencia de pago: este campo está disponible cuando defines que quieres configurar tu propia referencia de pago en el cupón.  Haz clic en el botón Agregar para guardar la información de tus clientes y agrear un cliente adicional si lo requieres.\nPara agregar múltiples clientes, haz clic en Agregar varios pagadores desde un archivo y descarga el archivo de ejemplo haciendo clic en Descargar formato.\nCada línea del archivo corresponde a un cliente. Ingresa la información del ejemplo y cárgalo en el Módulo PayU.\nIndependiente de la opción seleccionada, haz clic en Continuar.\nAparece una nueva ventana mostrando el resumen de los correos a enviar.\nSi quieres editar la información del emisor y del correo electrónico, haz clic en el enlace Editar mostrado en la esquina superior derecha de cada sección.\nPor último, haz clic en Enviar correo electrónico. Cada cliente recibe un correo electrónico con el cupón.\nImprimir los cupones Esta opción te permite generar los cupones en formato PDF.\nPara ingresar los clientes uno a uno, ingresa la siguiente información:\n Nombre cliente: nombre del pagador. Descripción del pago: descripción del pago que se va a realizar. Valor: este campo está disponible cuando defines que la cantidad pagada por tu cliente es fija y toma dicho valor. Fecha expiración: este campo está disponible cuando defines una fecha de expiración del cupón. Referencia de pago: este campo está disponible cuando defines que quieres configurar tu propia referencia de pago en el cupón.  Haz clic en el botón Agregar para guardar la información de tus clientes y agrear un cliente adicional si lo requieres.\nPara agregar múltiples clientes, haz clic en Agregar varios pagadores desde un archivo y descarga el archivo de ejemplo haciendo clic en Descargar formato.\nCada línea del archivo corresponde a un cliente. Ingresa la información del ejemplo y cárgalo en el Módulo PayU.\nIndependiente de la opción seleccionada, haz clic en Continuar.\nAparece una nueva ventana mostrando el resumen de los PDF a generar.\nSi quieres editar la información del emisor, haz clic en el enlace Editar mostrado en la esquina superior derecha de la sección.\nPor último, haz clic en Generar copones en PDF. Se descarga un archivo PDF, cada página tiene el cupón generado por cada cliente.\nGenerar Referencias de pago Esta opción le permite generar un archivo Excel con los cupones configurados.\nPara ingresar los clientes uno a uno, ingresa la siguiente información:\n Nombre cliente: nombre del pagador. Descripción del pago: descripción del pago que se va a realizar. Valor: este campo está disponible cuando defines que la cantidad pagada por tu cliente es fija y toma dicho valor. Fecha expiración: este campo está disponible cuando defines una fecha de expiración del cupón. Referencia de pago: este campo está disponible cuando defines que quieres configurar tu propia referencia de pago en el cupón.  Haz clic en el botón Agregar para guardar la información de tus clientes y agrear un cliente adicional si lo requieres.\nPara agregar múltiples clientes, haz clic en Agregar varios pagadores desde un archivo y descarga el archivo de ejemplo haciendo clic en Descargar formato.\nCada línea del archivo corresponde a un cliente. Ingresa la información del ejemplo y cárgalo en el Módulo PayU.\nIndependiente de la opción seleccionada, haz clic en Generar referencias en Excel.\nLa descarga inicia inmediatamente. Además, se muestra una ventana con e número de referencias generadas. En esta ventana, también puedes enviar el archivo Excel por correo electrónico a quien lo necesite .\nCrear tarjetas de cobranza Esta opción te permite generar tarjetas con la información información necesaria para que tus clientes realicen pagos en efectivo cuantas veces lo necesiten en los puntos de pago disponibles.\nEsta opción está disponible cuando no se configura un monto fijo de pago ni una fecha de expiración.\nNota Disponible solo en Argentina.  Las tarjetas de cobranza son tarjetas plásticas asociadas a tu cuenta PayU; tienen impreso un código de barras y puedes incluir una referencia de pago.\nUna vez se hayan generado tus tarjetas, entregalas a tus clientes para que puedan pagar la cantidad que deseen en efectivo sin fecha de expiración.\nPara solicitar las tarjetas, necesitas la siguiente información:\n Diseño de tus tarjetas de cobranza: selecciona un diseño predefinido o personalizado para tus tarjetas. Las tarjetas personalizadas están disponibles a partir de 1000 tarjetas. ¿Cuántas tarjetas deseas solicitar?: selecciona el número de tarjetas que deseas generar de acuerdo con el diseño que escogiste. Dirección de entrega: haz clic en el enlace Editar en la esquina superior derecha de este panel para ingresar la dirección donde quieres recibir las tarjetas. Resumen del pago: calculamos el costo de tu orden a partir de la cantidad solicitada y el diseño escogido.  Nota El valor de la orden será descontado de tu cuenta PayU y debes tener saldo disponible.  Haz clic en Solicitar tarjetas para continuar. Aparece una ventana de confirmación para que valides la información de tu solicitud.\nConsultar los cupones creados Cuando creas cupones o tarjetas de cobranza, puedes consultar su información para ver los pagos recibidos, activar, desactivar o descargar el cupón o la tarjeta.\n En el Módulo PayU, expande la opción Cobra con PayU y luego, selecciona Mis herramientas.   Selecciona la pestaña Cobros en efectivo o Tarjetas de recaudo (cobranza) según tus necesidades.\n  Puedes utilizar la opción de Búsqueda avanzada para encontrar un conjunto específico de cupones.\n  Cada cupon presenta las opciones para desactivar/activar o descargar el cupon. Una vez se desactiva el cupón, no puede recibir más pagos.\nEncuentra estas opciones en el menú de los tres puntos de la columna estado.  ","excerpt":"Esta solución es útil para negocios que reciben pagos de forma regular como membresías, cursos, …","ref":"/es/docs/tools/payment-coupons.html","title":"Cupones de pago"},{"body":"This solution is useful for businesses who need to receive payments on a regular basis such as paying memberships, courses, memberships or catalog and telesales, and more.\nYou can receive payments without any technical knowledge. You just need to send an e-mail where your client can download the coupon and makes the respective payment.\nNote Payment coupons are available for Argentina using RAPIPAGO and PAGOFACIL, and for Colombia using BALOTO and EFECTY.  How Payment coupons work? The Payment coupon follows a simple flow to let your clients regular cash payments as many times as they need:\n  Configure the Payment coupon through the PayU module.\nYou only need to provide how many payments per client you want to receive, decide if the payment amount is fixed or your client decides the amount, decide the payment deadline, and the payment reference.\n  Decide the delivery of the coupon\nDecide if you want to deliver the coupons by e-mail, by generating PDF, by payment references or collection cards (Available only for Argentina).\n  Use the Payment coupons\nWhen your clients receive the coupon, they can make the payment using any of the available cash payment offices in their countries.\nEvery time a client pays using the coupon, you receive a confirmation message and the amount of the purchase* is transferred to your PayU account, where you can transfer it to your bank account.\n  *The value transferred corresponds to the amount paid by your client minus the PayU fee.\nCreating payment coupons According to your business needs, you can configure the options to receive payments using coupons. Follow the next procedure to create Payment coupons and delivery them to your clients.\n  Log in to PayU.com and click the login option located at the top of the page. Alternatively, you can log in to https://merchants.payulatam.com/.\n  Expand the Sell with PayU option and then, select Cash Payment.\n  Configure the following information:    How many payments do you expect to receive for each client?: select how many times a client can use the coupon. Select Unique if you want to let your client pay once. Otherwise, select Multiple for several payments while the coupon is available. The default value is Multiple.\n  Will you charge a specific amount?: select the payment amount of the coupon. If you select No, your client decides the value to pay at the payment office. The default value is No.\n  Payment deadline: decide whether the payment coupon expires in a given date. The date specified is fixed, it is not supported to provide a specific day of the month or other custom configuration. If you select No, the coupon will not have a due date. The default value is No.\n  Do you want to define the payment reference?: if you select Yes you need to provide the payment references for the coupon. Otherwise, PayU defines and sets an automatic reference. The default value is No.\n  Sharing the Payment coupon After you have configured the Payment coupons, decide how you want to deliver them to your client.\nYou have available the following options:\nSend via e-mail This option lets you send the Payment coupon via e-mail. The clients receive the e-mail and print the coupon to let them pay in cash in the available offices.\nTo add the clients one by one, provide the following information:\n Email: e-mail of the client who receives the coupon. Payer name: name of the client. Payment description: description of the payment. Amount: this field is available when you define the amount paid by your client and takes the defined value. Expiration date: this field is available when you define an expiration date of the coupon. Payment reference: this field is available when you define that you want to set your own payment reference for the coupon.  Click Add button to save the clients data and add an extra client if required.\nTo add multiple clients, click Add multiple payers from one file and download the sample file by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a client. Provide the information of the example and upload it to the PayU module.\nRegardless of the option selected, click Continue.\nA new window appears showing the resume of the emails to be sent.\nIf you want to edit the information of the issuer and the e-mail, click Edit link displayed in the top right corner of each section.\nFinally, click Send email. Each client receive an e-mail with the coupon.\nPrint the coupons This option lets you generate coupons in PDF format.\nTo add the clients one by one, provide the following information:\n Payer name: name of the client. Payment description: description of the payment. Amount: this field is available when you define the amount paid by your client and takes the defined value. Expiration date: this field is available when you define an expiration date of the coupon. Payment reference: this field is available when you define that you want to set your own payment reference for the coupon.  Click Add button to save the clients data and add an extra client if required.\nTo add multiple clients, click Add multiple payers from one file and download the sample file by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a client. Provide the information of the example and upload it to the PayU module.\nRegardless of the option selected, click Continue.\nA new window appears showing the resume of the PDF to be generated.\nIf you want to edit the information of the issuer, click Edit link displayed in the top right corner of the issuer section.\nFinally, click Generate coupons in PDF. A PDF file is downloaded, each page has the coupon generated per each client.\nGenerate Payment references This option lets you generate an Excel file with the coupons requested.\nTo add the clients one by one, provide the following information:\n Payer name: name of the client. Payment description: description of the payment. Amount: this field is available when you define the amount paid by your client and takes the defined value. Expiration date: this field is available when you define an expiration date of the coupon. Payment reference: this field is available when you define that you want to set your own payment reference for the coupon.  Click Add button to save the clients data and add an extra client if required.\nTo add multiple clients, click Add multiple payers from one file and download the sample file by clicking Download format.\nThe Excel file downloaded is by default in Spanish and each row corresponds to a client. Provide the information of the example and upload it to the PayU module.\nRegardless of the option selected, click Generate references in Excel.\nThe download starts immediately. Furthermore, a new window appears showing the number of references generated. In this window, you can also send the Excel file to whoever you need.\nCreate collection cards This option lets you generate cards with the information required to let your clients to be able to make cash payments at the available payment points every time they need to.\nThis option is available when you don\u0026rsquo;t set a fixed payment amount nor a payment deadline.\nNote Available only for Argentina.  Collection cards are plastic cards associated to your PayU account; they have a bar code and you can include a reference code printed on them.\nOnce your cards have been generated, deliver them to your customers and they can pay the amount in cash they wish and without any expiration date.\nTo request the cards, you need to provide the following information:\n Design of your collection cards: choose a predefined or custom design for your cards. Custom cards are available from 1000 cards. How many cards do you want to request?: select the number of cards you want to generate according to the design you choose. Delivery address: Click Edit at the top right corner of this panel to provide the address where you want to receive the cards. Payment summary: we calculate the cost of your order depending on the quantity of cards requested and the design you choose.  Note This order will be debited from your PayU account and you must have an available balance.  Click Request cards to continue. A confirmation window appears to let you validate the information of your request.\nConsult the created coupons When you have created coupons or collection cards, you can consult their information to see the received payments, enable, disable, or download the coupon or card.\n In the PayU Module, expand the Sell with PayU option and then, select My tools.   Select either Collection by cash or Collection cards tab according to your needs.\n  You can use the Advanced filter option to find a specific set of coupons.\n  Each coupon presents the options to disable/enable or download the coupon. Once the coupon is disabled, it cannot receive more payments.\nFind these options in the three-dot menu in the status column.  ","excerpt":"This solution is useful for businesses who need to receive payments on a regular basis such as …","ref":"/en/docs/tools/payment-coupons.html","title":"Payment Coupons"},{"body":"PayU assumes the fraud or supplantation of the cardholders when a Dispute process has been started by a customer. To request the activation of the Anti-fraud Guarantee, contact your sales representative.\nConsiderations Before using the Anti-fraud Guarantee, take into account the following:\n Anti-fraud Guarantee is not offered by default. Merchants must request it and sign a document where the condition of the guarantees are reflected. The activation of Anti-fraud Guarantee depends on your economic activity. Anti-fraud Guarantee does not cover the sale of services, as well as music, videos, MP3, electronic books, products offered in stores or adult websites, vouchers, gift cards; nor other goods or mechanisms through which the aforementioned products can be acquired. Anti-fraud Guarantee applies only for transactions performed with credit card. PayU validates the evidence of the dispute process and determines whether the chargeback is applies to Anti-fraud Guarantee. If you don\u0026rsquo;t provide evidence of the dispute in the specified times, the result of this will be Lost and the Anti-fraud Guarantee will not apply. Anti-fraud Guarantee does not apply for disputes requested due to customer dissatisfaction with the purchased product.  How does the Anti-fraud Guarantee work? Anti-fraud Guarantee is applied following the next flow.\n  Once PayU notifies you about a Dispute, you must provide the evidence to response to it in the terms specified for your country. If you don\u0026rsquo;t provide evidence, the dispute will be lost and the funds of this sale will be debited from your account and Anti-fraud Guarantee will not apply.\nLearn here what evidence you can provide to resolve the dispute.\n  After you have provided the evidence to resolve the dispute, PayU validates whether the chargebacks apply to be covered by Anti-fraud Guarantee.\n  If the chargebacks apply, PayU returns the funds to your virtual account through discretionary movements.\n  The result of the Anti-fraud Guarantee process can be consulted in the Disputes module.\nFurthermore, you can consult the discretionary movements in your Financial Statement.\n","excerpt":"PayU assumes the fraud or supplantation of the cardholders when a Dispute process has been started …","ref":"/en/docs/tools/antifraud-guarantee.html","title":"Anti-fraud Guarantee"},{"body":"PayU asume el fraude o la suplantación del los titulares de las tarjetas de crédito cuando se inicia un proceso de Disputa por parte de un cliente. Para solicitar la activación de la Garantía Antifraude, contacta a tu representante de ventas.\nConsideraciones Antes de utilizar Garantía Antifraude, ten en cuenta lo siguiente:\n Garantía Antifraude no se ofrece de forma predeterminada. Los comercios deben solicitarla y firmar un documento donde se expresen las condiciones de la garantía. La activación de la Garantía Antifraude depende de tu actividad económica. Garantía Antifraude no cubre la venta de servicios, así como música, videos, MP3, libros electrónicos, productos ofrecidos en tiendas o páginas para adultos, vouchers, tarjetas regalo; no otros bienes o mecanismos a través de los cuales se puedan adquirir los productos mencionados. Garantía Antifraude aplica solo para transacciones realizadas con tarjeta de crédito. PayU valida la evidencia del proceso de disputa y determina si el contracargo aplica para Garantía Antifraude. Si no presentas evidencia de la disputa en los tiempos especificados, el resultado de la misma será Perdida y no aplicará la Garantía Antifraude. Garantía Antifraude no aplica para disputas solicitadas debido a insatisfacción del cliente con el producto adquirido.  ¿Cómo funciona la Garantía Antifraude? Garantía Antifraude se aplica siguiente este flujo.\n  Una vez PayU te notifica sobre una Disputa, debes presentar la evidencia para responderla en los tiempos establecidos para tu país. Si no presentas evidencia, perderás la disputa y los fundos de esta venta serán debitados de tu cuenta y no aplicará la Garantía Antifraude .\nAprende aquí qué evidencia puedes presentar para resolver una disputa.\n  Luego de que presentes la evidencia para resolver la disputa, PayU valida si el contra cargo puede ser cubierto por la Garantía Antifraude.\n  Si aplica, PayU regresa los fundos a tu cuenta virtual a través de movimientos discrecionales.\n  El resultado del proceso de Garantía Antifraude puede ser consultado en el Módulo de Disputas.\nAdemás, puedes consultar los movimientos discrecionales en tu Balance financiero.\n","excerpt":"PayU asume el fraude o la suplantación del los titulares de las tarjetas de crédito cuando se inicia …","ref":"/es/docs/tools/antifraud-guarantee.html","title":"Garantía Antifraude"},{"body":"To integrate with Queries SDK, target the requests to the following URLs:\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Queries SDK includes the following methods:\n Query by Order Id Query by Transaction Id Query by Reference Id Ping  Query by Order Id Order Id is a value generated by PayU to identify all the transactions generated for a payment request performed by your customer. You can use the getOrderDetail command to consult the status of an Order by its identifier.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order’s reference code here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;857817550\u0026#34;); Order response = PayUReports.getOrderDetail(parameters); // -- obtain the order’s properties -- if(response != null){ response.getAccountId(); response.getStatus(); response.getReferenceCode(); response.getAdditionalValue(\u0026#34;TX_VALUE\u0026#34;).getValue(); response.getAdditionalValue(\u0026#34;TX_TAX\u0026#34;).getValue(); if(response.getBuyer() != null){ response.getBuyer().getEmailAddress(); response.getBuyer().getFullName(); } // -- go through the transactions that are associated to the order-- \tList\u0026lt;Transaction\u0026gt; transactions = response.getTransactions(); Iterator\u0026lt;Transaction\u0026gt; transactions_iterator = transactions.iterator(); while(transactions_iterator.hasNext()){ Transaction transaction= (Transaction) transactions_iterator.next(); transaction.getType(); transaction.getTransactionResponse().getState(); transaction.getTransactionResponse().getPaymentNetworkResponseCode(); transaction.getTransactionResponse().getTrazabilityCode(); transaction.getTransactionResponse().getResponseCode(); if(transaction.getPayer() != null){ transaction.getPayer().getFullName(); transaction.getPayer().getEmailAddress(); } } }   // Enter the order’s reference code here. $parameters = array(PayUParameters::ORDER_ID =\u0026gt; \u0026#34;44469220\u0026#34;); $order = PayUReports::getOrderDetail($parameters); if ($order) { $order-\u0026gt;accountId; $order-\u0026gt;status; $order-\u0026gt;referenceCode; $order-\u0026gt;additionalValues-\u0026gt;TX_VALUE-\u0026gt;value; $order-\u0026gt;additionalValues-\u0026gt;TX_TAX-\u0026gt;value; if ($order-\u0026gt;buyer) { $order-\u0026gt;buyer-\u0026gt;emailAddress; $order-\u0026gt;buyer-\u0026gt;fullName; } $transactions=$order-\u0026gt;transactions; foreach ($transactions as $transaction) { $transaction-\u0026gt;type; $transaction-\u0026gt;transactionResponse-\u0026gt;state; $transaction-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $transaction-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $transaction-\u0026gt;transactionResponse-\u0026gt;responseCode; if ($transaction-\u0026gt;payer) { $transaction-\u0026gt;payer-\u0026gt;fullName; $transaction-\u0026gt;payer-\u0026gt;emailAddress; } } }    Query by Transaction Id Transaction Id is a value generated by PayU to identify one transaction generated for an order. You can use the getTransactionResponse command to consult the information of a given transaction.\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the transaction identifier here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;3310ba3b-cf64-49b2-80e6-3f9196917131\u0026#34;); TransactionResponse response = PayUReports.getTransactionResponse(parameters); // --you will be able to obtain the properties of the response -- if(response != null){ response.getState(); response.getTrazabilityCode(); response.getAuthorizationCode(); response.getResponseCode(); response.getOperationDate(); }   $parameters = array(PayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;3310ba3b-cf64-49b2-80e6-3f9196917131\u0026#34;); $response = PayUReports::getTransactionResponse($parameters); if ($response) { $response-\u0026gt;state; $response-\u0026gt;trazabilityCode; $response-\u0026gt;authorizationCode; $response-\u0026gt;responseCode; $response-\u0026gt;operationDate; }    Query by Reference Id Reference Id is a value generated by your commerce to identify an order. You can use the getOrderDetailByReferenceCode to consult the status of an Order by your own order identifier (reference).\nThe following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the order’s reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;payment_test_1625093692957\u0026#34;); List\u0026lt;Order\u0026gt; orders_response = PayUReports.getOrderDetailByReferenceCode(parameters); Iterator\u0026lt;Order\u0026gt; orders_iterator= orders_response.iterator(); // -- go through the orders with the queried reference-- while(orders_iterator.hasNext()){ Order order= (Order) orders_iterator.next(); if(order != null){ order.getAccountId(); order.getStatus(); order.getReferenceCode(); order.getAdditionalValue(\u0026#34;TX_VALUE\u0026#34;).getValue(); order.getAdditionalValue(\u0026#34;TX_TAX\u0026#34;).getValue(); if(order.getBuyer() != null){ order.getBuyer().getEmailAddress(); order.getBuyer().getFullName(); } // -- go through the transactions associated to the order-- \tList\u0026lt;Transaction\u0026gt; transactions=order.getTransactions(); Iterator\u0026lt;Transaction\u0026gt; transactions_iterator=transactions.iterator(); while(transactions_iterator.hasNext()){ Transaction transaction= (Transaction) transactions_iterator.next(); transaction.getType(); transaction.getTransactionResponse().getState(); transaction.getTransactionResponse().getPaymentNetworkResponseCode(); transaction.getTransactionResponse().getTrazabilityCode(); transaction.getTransactionResponse().getResponseCode(); if(transaction.getPayer() != null){ transaction.getPayer().getFullName(); transaction.getPayer().getEmailAddress(); } } } }   // Enter the order’s reference code here. $parameters = array(PayUParameters::REFERENCE_CODE =\u0026gt; \u0026#34;payment_test_1625093692957\u0026#34;); $response = PayUReports::getOrderDetailByReferenceCode($parameters); foreach ($response as $order) { $order-\u0026gt;accountId; $order-\u0026gt;status; $order-\u0026gt;referenceCode; $order-\u0026gt;additionalValues-\u0026gt;TX_VALUE-\u0026gt;value; $order-\u0026gt;additionalValues-\u0026gt;TX_TAX-\u0026gt;value; if ($order-\u0026gt;buyer) { $order-\u0026gt;buyer-\u0026gt;emailAddress; $order-\u0026gt;buyer-\u0026gt;fullName; } $transactions=$order-\u0026gt;transactions; foreach ($transactions as $transaction) { $transaction-\u0026gt;type; $transaction-\u0026gt;transactionResponse-\u0026gt;state; $transaction-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $transaction-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $transaction-\u0026gt;transactionResponse-\u0026gt;responseCode; if ($transaction-\u0026gt;payer) { $transaction-\u0026gt;payer-\u0026gt;fullName; $transaction-\u0026gt;payer-\u0026gt;emailAddress; } } }    Ping The PING method lets you verify the connection to our platform. The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   boolean response = PayUReports.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUReports::doPing(); $response -\u0026gt; code;    ","excerpt":"To integrate with Queries SDK, target the requests to the following URLs:\n Java PHP   // URL for …","ref":"/en/docs/integrations/sdk-integration/queriessdk.html","title":"Queries SDK"},{"body":"Para integrate con el SDK de Consultas, apunta tus peticiones a las siguientes URLs:\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de Consultas incluye los siguientes métodos:\n Consultar por Identificador de la orden Consultar por Identificador de la transacción Consultar por Identificador de la referencia Ping  Consultar por Identificador de la orden Order Id es un valor generado por PayU para identificar todas las transacciones generadas en una solicitud de pago realizada por tu cliente. Puedes utilizar el comando getOrderDetail para consultar el estado de una orden por su identificador.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Incluye aquí la referencia de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;857817550\u0026#34;); Order response = PayUReports.getOrderDetail(parameters); // -- obten las propiedades de la orden -- if(response != null){ response.getAccountId(); response.getStatus(); response.getReferenceCode(); response.getAdditionalValue(\u0026#34;TX_VALUE\u0026#34;).getValue(); response.getAdditionalValue(\u0026#34;TX_TAX\u0026#34;).getValue(); if(response.getBuyer() != null){ response.getBuyer().getEmailAddress(); response.getBuyer().getFullName(); } // -- navega a través de las transacciones que están asociadas a la orden-- \tList\u0026lt;Transaction\u0026gt; transactions = response.getTransactions(); Iterator\u0026lt;Transaction\u0026gt; transactions_iterator = transactions.iterator(); while(transactions_iterator.hasNext()){ Transaction transaction= (Transaction) transactions_iterator.next(); transaction.getType(); transaction.getTransactionResponse().getState(); transaction.getTransactionResponse().getPaymentNetworkResponseCode(); transaction.getTransactionResponse().getTrazabilityCode(); transaction.getTransactionResponse().getResponseCode(); if(transaction.getPayer() != null){ transaction.getPayer().getFullName(); transaction.getPayer().getEmailAddress(); } } }   // Incluye aquí la referencia de la orden. $parameters = array(PayUParameters::ORDER_ID =\u0026gt; \u0026#34;44469220\u0026#34;); $order = PayUReports::getOrderDetail($parameters); if ($order) { $order-\u0026gt;accountId; $order-\u0026gt;status; $order-\u0026gt;referenceCode; $order-\u0026gt;additionalValues-\u0026gt;TX_VALUE-\u0026gt;value; $order-\u0026gt;additionalValues-\u0026gt;TX_TAX-\u0026gt;value; if ($order-\u0026gt;buyer) { $order-\u0026gt;buyer-\u0026gt;emailAddress; $order-\u0026gt;buyer-\u0026gt;fullName; } $transactions=$order-\u0026gt;transactions; foreach ($transactions as $transaction) { $transaction-\u0026gt;type; $transaction-\u0026gt;transactionResponse-\u0026gt;state; $transaction-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $transaction-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $transaction-\u0026gt;transactionResponse-\u0026gt;responseCode; if ($transaction-\u0026gt;payer) { $transaction-\u0026gt;payer-\u0026gt;fullName; $transaction-\u0026gt;payer-\u0026gt;emailAddress; } } }    Consultar por Identificador de la transacción Transaction Id es un valor generado por PayU para identificar una transaccion generada para una orden. Puedes utilizar el comando getTransactionResponse para consultar la información de una transacción.\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;3310ba3b-cf64-49b2-80e6-3f9196917131\u0026#34;); TransactionResponse response = PayUReports.getTransactionResponse(parameters); // --puedes obtener las propiedades de la respuesta -- if(response != null){ response.getState(); response.getTrazabilityCode(); response.getAuthorizationCode(); response.getResponseCode(); response.getOperationDate(); }   $parameters = array(PayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;3310ba3b-cf64-49b2-80e6-3f9196917131\u0026#34;); $response = PayUReports::getTransactionResponse($parameters); if ($response) { $response-\u0026gt;state; $response-\u0026gt;trazabilityCode; $response-\u0026gt;authorizationCode; $response-\u0026gt;responseCode; $response-\u0026gt;operationDate; }    Consultar por Identificador de la referencia Reference Id es un valor generado por tu comercio para identificar una orden. Puedes utilizar el comando getOrderDetailByReferenceCode para consultar el estado de una order por tu propio identificador (Referencia).\nLos siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Incluye aquí la referencia de la orden. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, \u0026#34;payment_test_1625093692957\u0026#34;); List\u0026lt;Order\u0026gt; orders_response = PayUReports.getOrderDetailByReferenceCode(parameters); Iterator\u0026lt;Order\u0026gt; orders_iterator= orders_response.iterator(); // -- navega a través de la órdenes con la referencia seleccionada-- while(orders_iterator.hasNext()){ Order order= (Order) orders_iterator.next(); if(order != null){ order.getAccountId(); order.getStatus(); order.getReferenceCode(); order.getAdditionalValue(\u0026#34;TX_VALUE\u0026#34;).getValue(); order.getAdditionalValue(\u0026#34;TX_TAX\u0026#34;).getValue(); if(order.getBuyer() != null){ order.getBuyer().getEmailAddress(); order.getBuyer().getFullName(); } // -- go through the transactions associated to the order-- \tList\u0026lt;Transaction\u0026gt; transactions=order.getTransactions(); Iterator\u0026lt;Transaction\u0026gt; transactions_iterator=transactions.iterator(); while(transactions_iterator.hasNext()){ Transaction transaction= (Transaction) transactions_iterator.next(); transaction.getType(); transaction.getTransactionResponse().getState(); transaction.getTransactionResponse().getPaymentNetworkResponseCode(); transaction.getTransactionResponse().getTrazabilityCode(); transaction.getTransactionResponse().getResponseCode(); if(transaction.getPayer() != null){ transaction.getPayer().getFullName(); transaction.getPayer().getEmailAddress(); } } } }   // Incluye aquí la referencia de la orden. $parameters = array(PayUParameters::REFERENCE_CODE =\u0026gt; \u0026#34;payment_test_1625093692957\u0026#34;); $response = PayUReports::getOrderDetailByReferenceCode($parameters); foreach ($response as $order) { $order-\u0026gt;accountId; $order-\u0026gt;status; $order-\u0026gt;referenceCode; $order-\u0026gt;additionalValues-\u0026gt;TX_VALUE-\u0026gt;value; $order-\u0026gt;additionalValues-\u0026gt;TX_TAX-\u0026gt;value; if ($order-\u0026gt;buyer) { $order-\u0026gt;buyer-\u0026gt;emailAddress; $order-\u0026gt;buyer-\u0026gt;fullName; } $transactions=$order-\u0026gt;transactions; foreach ($transactions as $transaction) { $transaction-\u0026gt;type; $transaction-\u0026gt;transactionResponse-\u0026gt;state; $transaction-\u0026gt;transactionResponse-\u0026gt;paymentNetworkResponseCode; $transaction-\u0026gt;transactionResponse-\u0026gt;trazabilityCode; $transaction-\u0026gt;transactionResponse-\u0026gt;responseCode; if ($transaction-\u0026gt;payer) { $transaction-\u0026gt;payer-\u0026gt;fullName; $transaction-\u0026gt;payer-\u0026gt;emailAddress; } } }    Ping El método PING te permite verificar la conexión con nuestra plataforma. Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   boolean response = PayUReports.doPing(); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $response = PayUReports::doPing(); $response -\u0026gt; code;    ","excerpt":"Para integrate con el SDK de Consultas, apunta tus peticiones a las siguientes URLs:\n Java PHP   // …","ref":"/es/docs/integrations/sdk-integration/queriessdk.html","title":"SDK de Consultas"},{"body":"La funcionalidad de Tokenización está disponible bajo acuerdos comerciales personalizados. Para más información, contacta a tu representante de ventas.\nPara integrate con el SDK de Tokenización, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Métodos disponibles El SDK de Tokenización incluye métodos para registrar, eliminar y consultar tokens.\n Registro individual de tarjeta de crédito Eliminación individual de tarjeta de crédito Consulta de tókenes  Registro individual de tarjeta de crédito Utilizando esta funcionalidad, puedes registrar la información de la tarjeta de crédito de un cliente y obtener un token.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   //-- Operación “Crear Token” -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el nombre del pagador. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Mary Keller\u0026#34;); // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Ingresa aquí el número de identificación del pagador. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;32144457\u0026#34;); // Ingresa aquí el número de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4668063527597820\u0026#34;); // Ingresa la fecha de expiración de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2024/06\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); CreditCardToken response = PayUTokens.create(parameters); if(response != null){ response.getTokenId(); response.getMaskedNumber(); response.getPayerId(); response.getIdentificationNumber(); response.getPaymentMethod(); }   $parameters = array( // Ingresa aquí el nombre del pagador. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Mary Keller\u0026#34;, // Ingresa aquí el identificador del pagador. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Ingresa aquí el número de identificación del pagador. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;32144457\u0026#34;, // Ingresa aquí el número de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4668063527597820\u0026#34;, // Ingresa la fecha de expiración de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2024/10\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34; ); $response = PayUTokens::create($parameters); if($response){ //Puedes obtener el token de la tarjeta de crédito \t$response-\u0026gt;creditCardToken-\u0026gt;creditCardTokenId; }    Eliminación individual de tarjeta de crédito Utilizando esta funcionalidad, puedes eliminar un token previamente registrado.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   // -- Operación \u0026#34;Eliminar token\u0026#34; -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Ingresa aquí identificador el token. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); CreditCardToken response = PayUTokens.remove(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $parameters = array( // Ingresa aquí el identificador del pagador. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Ingresa aquí identificador el token. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34; ); $response=PayUTokens::remove($parameters); if($response){ }    Consulta de tókenes Utilizando esta funcionalidad, puedes obtener la información de las tarjetas de crédito tokenizadas, puedes consultar por número de token o por rango de fechas.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   // -- Operación \u0026#34;consultar token\u0026#34; -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // -- Parámetros opcionales -- // Ingresa aquí el identificador del pagador. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Ingresa aquí identificador el token. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); // Ingresa la fecha de inicio y fin para filtrar por rango de fechas. parameters.put(PayU.PARAMETERS.START_DATE, \u0026#34;2021-06-29T12:00:00\u0026#34;); parameters.put(PayU.PARAMETERS.END_DATE, \u0026#34;2021-07-01T12:00:00\u0026#34;); List\u0026lt;CreditCardToken\u0026gt; response = PayUTokens.find(parameters); Iterator\u0026lt;CreditCardToken\u0026gt; tokens_iterator=response.iterator(); while(tokens_iterator.hasNext()){ CreditCardToken token= (CreditCardToken) tokens_iterator.next(); token.getTokenId(); token.getMaskedNumber(); token.getPayerId(); token.getIdentificationNumber(); token.getPaymentMethod(); }   // -- Parámetros opcionales -- $parameters = array( // Ingresa aquí el identificador del pagador. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Ingresa aquí identificador el token. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;, // Ingresa la fecha de inicio y fin para filtrar por rango de fechas. Optional. \tPayUParameters::START_DATE=\u0026gt; \u0026#34;2021-06-29T12:00:00\u0026#34;, PayUParameters::END_DATE=\u0026gt; \u0026#34;2021-07-01T12:00:00\u0026#34; ); $response=PayUTokens::find($parameters); if($response) { $credit_cards = $response-\u0026gt;creditCardTokenList; foreach ($credit_cards as $credit_card) { $credit_card-\u0026gt;creditCardTokenId; $credit_card-\u0026gt;maskedNumber; $credit_card-\u0026gt;payerId; $credit_card-\u0026gt;identificationNumber; $credit_card-\u0026gt;paymentMethod; } }    Pagos utilizando tokenización Para pagos con tókenes de tarjeta de crédito, incluye el parámetro CREDIT_CARD_SECURITY_CODE reemplazando la información de la tarjeta de crédito. El siguiente ejemplo muestra el cuerpo de la petición a alto nivel de un flujo de un paso, no se muestran los detalles de la petición.\nNota Para procesar sin CVV es necesario enviar el parámetro PROCESS_WITHOUT_CVV2 omo true en la petición del pago y quitar el parámetro CREDIT_CARD_SECURITY_CODE.\nPor defecto, no está activo el procesamiento de tarjetas de crédito sin código de seguridad. Si quieres activar esta funcionalidad, contacta a tu representante de ventas.   Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el identificador de la cuenta. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, accountId); // Ingresa aquí la referencia de pago. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, reference); // Ingresa aquí la descripción del pago. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Ingresa aquí el idioma de la transacción. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Valores -- //Ingresa aquí el valor. parameters.put(PayU.PARAMETERS.VALUE, value); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, currency); // -- Comprador -- // Ingresa aquí la información del comprador. //parameters.put([...], [...]);  // -- Pagador -- // Ingresa aquí la información del pagador. //parameters.put([...], [...]);  // -- Datos de la tarjeta de crédito -- // Ingresa aquí el token de la tarjeta de crédito parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); // Ingresa aquí el código de seguridad de la tarjeta de crédito parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Ingresa aquí el nombre de la tarjeta de crédito parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Ingresa aquí el número de cuotas. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Ingresa aquí el nombre del país. parameters.put(PayU.PARAMETERS.COUNTRY, CountryName); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // IP del pagador parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie de la sesión actual. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent de la sesión actual. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // Petición de \u0026#34;Autorización y captura\u0026#34; TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters);   $parameters = array( //Ingresa aquí el identificador de la cuenta \tPayUParameters::ACCOUNT_ID =\u0026gt; $accountId, // Ingresa aquí la referencia de pago. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Ingresa aquí la descripción del pago. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Valores --  //Ingresa aquí el valor. \tPayUParameters::VALUE =\u0026gt; $value, // Ingresa aquí la moneda. \tPayUParameters::CURRENCY =\u0026gt; $currency, // -- Comprador --  // Ingresa aquí la información del comprador.  //PayUParameters::[...] =\u0026gt; [...],  // -- Pagador --  // Ingresa aquí la información del pagador.  //PayUParameters::[...] =\u0026gt; [...],  // -- Datos de la tarjeta de crédito --  // Ingresa aquí el token de la tarjeta de crédito  PayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;, PayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Ingresa aquí el código de seguridad de la tarjeta de crédito \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Ingresa aquí el nombre de la tarjeta de crédito \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Ingresa aquí el número de cuotas. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Ingresa aquí el nombre del país. \tPayUParameters::COUNTRY =\u0026gt; $country, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // IP del pagador \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie de la sesión actual \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent de la sesión actual \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // Petición de \u0026#34;Autorización y captura\u0026#34; $response = PayUPayments::doAuthorizationAndCapture($parameters);    Para detalles específicos sobre cómo realizar pagos, consulta el artículo correspondiente al país de procesamiento.\n Argentina\nBrasil\nChile\n   Colombia\nMéxico\nPerú\n   ","excerpt":"La funcionalidad de Tokenización está disponible bajo acuerdos comerciales personalizados. Para más …","ref":"/es/docs/integrations/sdk-integration/tokenizationsdk.html","title":"SDK de Tokenización"},{"body":"Tokenization feature is available under customized commercial agreements. For more information, contact your sales representative.\nTo integrate with Tokenization SDK, target your request to the following URLs according to your environment.\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Available methods Tokenization SDK includes methods to register and remove tokens, and methods to query tokens.\n Individual credit card registration Individual token removal Query tokens  Individual credit card registration Using this feature, you can register the information of a customer\u0026rsquo;s credit card and get a token.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   //-- “Create Token” operation-- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the payer\u0026#39;s name here. parameters.put(PayU.PARAMETERS.PAYER_NAME, \u0026#34;Mary Keller\u0026#34;); // Enter the payer\u0026#39;s ID here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Enter the payer\u0026#39;s contact document here. parameters.put(PayU.PARAMETERS.PAYER_DNI, \u0026#34;32144457\u0026#34;); // Enter the number of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_NUMBER, \u0026#34;4668063527597820\u0026#34;); // Enter the expiration date of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_EXPIRATION_DATE, \u0026#34;2024/06\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); CreditCardToken response = PayUTokens.create(parameters); if(response != null){ response.getTokenId(); response.getMaskedNumber(); response.getPayerId(); response.getIdentificationNumber(); response.getPaymentMethod(); }   $parameters = array( // Enter the payer\u0026#39;s name here. \tPayUParameters::PAYER_NAME =\u0026gt; \u0026#34;Mary Keller\u0026#34;, // Enter the payer\u0026#39;s ID here. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Enter the payer\u0026#39;s contact document here. \tPayUParameters::PAYER_DNI =\u0026gt; \u0026#34;32144457\u0026#34;, // Enter the number of the credit card here \tPayUParameters::CREDIT_CARD_NUMBER =\u0026gt; \u0026#34;4668063527597820\u0026#34;, // Enter the expiration date of the credit card here \tPayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2024/10\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34; ); $response = PayUTokens::create($parameters); if($response){ //You can obtain the credit card token \t$response-\u0026gt;creditCardToken-\u0026gt;creditCardTokenId; }    Individual token removal Using this feature, you can remove the token previously registered.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   // -- \u0026#34;Delete token\u0026#34; operation -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the ID of the payer here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Enter the ID of the token here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); CreditCardToken response = PayUTokens.remove(parameters); LoggerUtil.info(\u0026#34;{0}\u0026#34;, response);   $parameters = array( // Enter the ID of the payer here. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Enter the ID of the token here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34; ); $response=PayUTokens::remove($parameters); if($response){ }    Query tokens Using this feature, you can get the information of tokenized credit cards, you can perform the query by the token number or by a date range.\nMethod call The following examples show how to call the method for this transaction type according to the programming language.\n Java PHP   // -- \u0026#34;Query token\u0026#34; operation -- Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // -- Optional parameters -- // Enter the ID of the payer here. parameters.put(PayU.PARAMETERS.PAYER_ID, \u0026#34;10\u0026#34;); // Enter the ID of the token here. parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); // Enter the start and end date to filter in a date range. parameters.put(PayU.PARAMETERS.START_DATE, \u0026#34;2021-06-29T12:00:00\u0026#34;); parameters.put(PayU.PARAMETERS.END_DATE, \u0026#34;2021-07-01T12:00:00\u0026#34;); List\u0026lt;CreditCardToken\u0026gt; response = PayUTokens.find(parameters); Iterator\u0026lt;CreditCardToken\u0026gt; tokens_iterator=response.iterator(); while(tokens_iterator.hasNext()){ CreditCardToken token= (CreditCardToken) tokens_iterator.next(); token.getTokenId(); token.getMaskedNumber(); token.getPayerId(); token.getIdentificationNumber(); token.getPaymentMethod(); }   // -- Optional parameters -- $parameters = array( // Enter the ID of the payer here. \tPayUParameters::PAYER_ID =\u0026gt; \u0026#34;10\u0026#34;, // Enter the ID of the token here. \tPayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;, // Enter the start and end date to filter in a date range. Optional. \tPayUParameters::START_DATE=\u0026gt; \u0026#34;2021-06-29T12:00:00\u0026#34;, PayUParameters::END_DATE=\u0026gt; \u0026#34;2021-07-01T12:00:00\u0026#34; ); $response=PayUTokens::find($parameters); if($response) { $credit_cards = $response-\u0026gt;creditCardTokenList; foreach ($credit_cards as $credit_card) { $credit_card-\u0026gt;creditCardTokenId; $credit_card-\u0026gt;maskedNumber; $credit_card-\u0026gt;payerId; $credit_card-\u0026gt;identificationNumber; $credit_card-\u0026gt;paymentMethod; } }    Payments using Tokenization For payments with credit card tokens, include the parameter CREDIT_CARD_SECURITY_CODE replacing the information of the credit card. The following example shows the body of the request in a high level for a one-step flow, the details of the request are not provided.\nNote To process without CVV is necessary to send the parameter PROCESS_WITHOUT_CVV2 as true in the payment request and remove the parameter CREDIT_CARD_SECURITY_CODE.\nBy default, processing credit cards without security code is not enabled. If you want to enable this feature, contact your Sales representative.   Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Enter the account’s identifier here. parameters.put(PayU.PARAMETERS.ACCOUNT_ID, accountId); // Enter the reference code here. parameters.put(PayU.PARAMETERS.REFERENCE_CODE, reference); // Enter the description here. parameters.put(PayU.PARAMETERS.DESCRIPTION, \u0026#34;payment test\u0026#34;); // Enter the transaction language here. parameters.put(PayU.PARAMETERS.LANGUAGE, \u0026#34;Language.es\u0026#34;); // -- Values -- // Enter the value here. parameters.put(PayU.PARAMETERS.VALUE, value); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, currency); // -- Buyer -- // Enter the buyer information here. //parameters.put([...], [...]);  // -- Payer -- // Enter the payer information here. //parameters.put([...], [...]);  // -- Credit card data -- // Enter the credit card token here parameters.put(PayU.PARAMETERS.TOKEN_ID, \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;); // Enter the security code of the credit card here parameters.put(PayU.PARAMETERS.CREDIT_CARD_SECURITY_CODE, \u0026#34;321\u0026#34;); // Enter the name of the credit card here parameters.put(PayU.PARAMETERS.PAYMENT_METHOD, \u0026#34;VISA\u0026#34;); // Enter the number of installments here. parameters.put(PayU.PARAMETERS.INSTALLMENTS_NUMBER, \u0026#34;1\u0026#34;); // Enter the name of the country here. parameters.put(PayU.PARAMETERS.COUNTRY, CountryName); // Device Session ID parameters.put(PayU.PARAMETERS.DEVICE_SESSION_ID, \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;); // Payer IP parameters.put(PayU.PARAMETERS.IP_ADDRESS, \u0026#34;127.0.0.1\u0026#34;); // Cookie of the current session. parameters.put(PayU.PARAMETERS.COOKIE, \u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;); // User agent of the current session. parameters.put(PayU.PARAMETERS.USER_AGENT, \u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34;); // \u0026#34;Authorization and capture\u0026#34; request TransactionResponse response = PayUPayments.doAuthorizationAndCapture(parameters);   $parameters = array( // Enter the account’s identifier here \tPayUParameters::ACCOUNT_ID =\u0026gt; $accountId, // Enter the reference code here. \tPayUParameters::REFERENCE_CODE =\u0026gt; $reference, // Enter the description here. \tPayUParameters::DESCRIPTION =\u0026gt; \u0026#34;payment test\u0026#34;, // -- Values --  // Enter the value here. \tPayUParameters::VALUE =\u0026gt; $value, // Enter the currency here. \tPayUParameters::CURRENCY =\u0026gt; $currency, // -- Buyer --  // Enter the buyer information here.  //PayUParameters::[...] =\u0026gt; [...],  // -- Payer --  // Enter the payer information here.  //PayUParameters::[...] =\u0026gt; [...],  // -- Credit card data --  // Enter the credit card token here  PayUParameters::TOKEN_ID =\u0026gt; \u0026#34;ab01ecd5-7d8f-4bee-91c1-4535d9ba282e\u0026#34;, PayUParameters::CREDIT_CARD_EXPIRATION_DATE =\u0026gt; \u0026#34;2022/12\u0026#34;, // Enter the security code of the credit card here \tPayUParameters::CREDIT_CARD_SECURITY_CODE=\u0026gt; \u0026#34;321\u0026#34;, // Enter the name of the credit card here \tPayUParameters::PAYMENT_METHOD =\u0026gt; \u0026#34;VISA\u0026#34;, // Enter the number of installments here. \tPayUParameters::INSTALLMENTS_NUMBER =\u0026gt; \u0026#34;1\u0026#34;, // Enter the name of the country here. \tPayUParameters::COUNTRY =\u0026gt; $country, // Device Session ID \tPayUParameters::DEVICE_SESSION_ID =\u0026gt; \u0026#34;vghs6tvkcle931686k1900o6e1\u0026#34;, // Payer IP \tPayUParameters::IP_ADDRESS =\u0026gt; \u0026#34;127.0.0.1\u0026#34;, // Cookie of the current session \tPayUParameters::PAYER_COOKIE=\u0026gt;\u0026#34;pt1t38347bs6jc9ruv2ecpv7o2\u0026#34;, // User agent of the current session \tPayUParameters::USER_AGENT=\u0026gt;\u0026#34;Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0\u0026#34; ); // \u0026#34;Authorization and Capture\u0026#34; request $response = PayUPayments::doAuthorizationAndCapture($parameters);    For specific details about how to perform payments, refer to the respective article according to the processing country.\n Argentina\nBrazil\nChile\n   Colombia\nMexico\nPeru\n   ","excerpt":"Tokenization feature is available under customized commercial agreements. For more information, …","ref":"/en/docs/integrations/sdk-integration/tokenizationsdk.html","title":"Tokenization SDK"},{"body":"Para integrarte con el SDK de Reembolsos y Anulaciones, apunta tus peticiones a las siguientes URLs de acuerdo con tu ambiente.\n Java PHP   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL para pruebas: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL para pruebas: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    Si necesitas entender los conceptos y leer más consideraciones sobre Reembolsos y Anulaciones, consulta este artículo.\nConsideraciones por país Antes de utilizar el API de Reembolsos y Anulaciones, ten en cuenta las siguientes consideraciones.\nArgentina  El tiempo máximo para enviar una anulación es 14 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 365 días y 180 días para reembolsos parciales. No se soportan reembolsos con decimales. Cuando se aprueba el reembolso, el pagador obtiene su dinero en máximo 30 días hábiles.  Brasil  El tiempo máximo para enviar una anulación es siete (7) días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se cancela. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 90 días para transacciones procesadas en Redecard y 120 para transacciones procesadas en Cielo. Cuando se aprueba el reembolso, el pagador obtiene su dinero en máximo 15 días hábiles.  Chile  Debido a restricciones de la red, se pueden autorizar anulaciones dentro de las tres primeras horas luego de la autorización. Si no se acepta la anulación o no se envía una captura luego de siete (7) días, la transacción se anula automáticamente. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 90 días. No se soportan reembolsos con decimales. Cuando se aprueba un reembolso, el pagador obtiene su dinero en 8 a 20 días hábiles. Los reembolsos parciales para transacciones que utilizan cuotas se reciben en línea pero son procesados de forma manual debido a restricciones de la red adquirente. El valor mínimo para enviar un Reembolso es 10 CLP.  Colombia  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is two years. Minimum amount to send the Refund 300 COP. If refund is not sent the same day in which the transaction was captured (before 9 pm UTC-5) the refund goes immediately to a manual process without sending the online attempt. When a refund is approved, the payer gets the money back in maximum 30 working días. Partial refunds are not available for international credit cards.  México  El tiempo mínimo para enviar una anulación (Void) es 10 minutos luego de la autorización y el máximo es 30 días. Si la transacción se hizo con American Express, el tiempo máximo es siete (7) días.\nSi no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente. El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 180 días. Si la transacción fue procesada por Bancomer, el tiempo máximo es 45 días. Cuando se aprueba un reembolso, el pagador obtiene su dinero en 30 días hábiles. No se soportan reembolsos con decimales.  Perú  Los días máximos para enviar una autorización son:  Visa: 21 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se captura automáticamente. Mastercard: 28 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se captura automáticamente. American Express: 30 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente. Diners: 11 días. Si no se envía una anulación o una captura luego de este tiempo, la transacción se anula automáticamente.   El tiempo mínimo para enviar un reembolso es 10 minutos luego de la aprobación y el máximo es 180 días. Se soportan reembolsos parciales para transacciones sin cuotas. Ten en cuenta que las transacciones en una cuota son consideradas como sin cuotas. Los Reembolsos parciales con visanet deben enviarse un día después. Cuando se aprueba un reembolso, el pagador obtiene su dinero en 15 to 25 días hábiles. La cantidad mínima para enviar un Reembolso es 1 USD o 1 PEN.  Anulación (Void) Le método VOID cancela una transacción previamente autorizada. La anulación es un procedimiento automático, tan pronto envías la petición de VOID, no sigue ningún flujo de aprobación y la transacción no se cobra al tarjetahabiente.\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el ID de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Ingresa aquí el ID de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Ingresa la razón de la anulación. Opcional parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Razón para solicitar la anulación de la transacción\u0026#34;); TransactionResponse response = PayUPayments.doVoid(parameters); // Respuesta if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el ID de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Ingresa aquí el ID de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // Ingresa la razón de la anulación. Opcional \tPayUParameters::REASON =\u0026gt; \u0026#34;Razón para solicitar la anulación de la transacción\u0026#34;, ); $response = PayUPayments::doVoid($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Reembolsos (Refunds) Un reembolso se solicita cuando una tienda decide voluntariamente regresar el dinero al cliente debido a razones de insatisfacción o cuando la tienda no tiene suficiente inventario del producto comprado. El método REFUND solicita el reverso de una transacción previamente capturada.\nLos reembolsos pueden ser solicitados por la cantidad total o parcial (PARTIAL REFUND).\nLlamado del método Los siguientes ejemplos muestra cómo llamar los métodos para esta transacción de acuerdo con el lenguaje de programación.\nReembolso  Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el ID de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Ingresa aquí el ID de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Ingresa aquí la razón del reembolso parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Razón para solicitar el reembolso de la transacción\u0026#34;); TransactionResponse response = PayUPayments.doRefund(parameters); // Respuesta if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el ID de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Ingresa aquí el ID de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // Ingresa aquí la razón del reembolso \tPayUParameters::REASON =\u0026gt; \u0026#34;Razón para solicitar el reembolso de la transacción\u0026#34;, ); $response = PayUPayments::doRefund($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Reembolso parcial  Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Ingresa aquí el ID de la orden. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Ingresa aquí el ID de la transacción. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // -- Valor de reembolso parcial -- // Ingresa aquí el valor del reembolso parcial. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;950\u0026#34;); // Ingresa aquí la moneda. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // Ingresa aquí la razón del reembolso parcial parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Razón para solicitar el reemplazo parcial de la transacción\u0026#34;); TransactionResponse response = PayUPayments.doPartialRefund(parameters); // Respuesta if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Ingresa aquí el ID de la orden. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Ingresa aquí el ID de la transacción. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // -- Valor de reembolso parcial --  // Ingresa el valor del reembolso parcial.  PayUParameters::VALUE =\u0026gt; \u0026#34;950\u0026#34;, // Ingresa aquí la moneda.  PayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // Ingresa aquí la razón del reembolso parcial \tPayUParameters::REASON =\u0026gt; \u0026#34;Razón para solicitar el reemplazo parcial de la transacción\u0026#34;, ); $response = PayUPayments::doPartialRefund($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Consultar los estados de los Reembolsos Como mencionamos anteriormente, la solicitud de reembolso tarda entre 1 y 3 días en ser procesada y aprobada o rechazada. Si deseas saber el estado de un reembolso, tienes dos opciones:\nVerificar el estado en el Módulo PayU  Ingresa a tu cuenta PayU. En el panel izquierdo, expande el menú Transacciones y selecciona la opción Reporte de ventas.  Utiliza el campo Filtrar mis ventas para encontrar la orden utilizando su ID y el ID de la transacción.  La columna estado muestra si el reembolso a sido aprobado o rechazado; si no ha sido aprobado, esta columna muestra que se ha solicitado un reembolso.  Verificar el estado utilizando consultas Puedes consultar el estado de un reembolso utilizando el API de consultas. En la petición de la consulta, necesitas enviar el id de la orden.\nCuando consultas una orden, el sistema retorna su última transacción.\nHay tres posibles estados en la respuesta de tu solicitud:\n Solicitud no resuelta: si la solicitud no ha sido resuelta, la orden que aparece en la consulta está en estado CAPTURED, el primer tipo de transacción es AUTHORIZATION_AND_CAPTURE y el primer estado de la transacción es APPROVED. Aprobada: si la solicitud de reembolso ha sido aprobada por un agente de servicio de PayU, la orden que aparece en la consulta está en estado REFUND y el primer estado de la transacción es APPROVED. Declinada: si la solicitud de reembolso ha sido declinada por un agente de servicio de PayU, la orden que aparece en la consulta está en estado CAPTURED , el primer tipo de transacción es REFUND y el primer estado de la transacción es DECLINED.  ","excerpt":"Para integrarte con el SDK de Reembolsos y Anulaciones, apunta tus peticiones a las siguientes URLs …","ref":"/es/docs/integrations/sdk-integration/refundssdk.html","title":"SDK de Reembolsos y Anulaciones"},{"body":"To integrate with Voids and Refunds SDK, target your request to the following URLs according to your environment.\n Java PHP   // URL for test: https://sandbox.api.payulatam.com/payments-api/ PayU.paymentsUrl = “https://api.payulatam.com/payments-api/”; // URL for test: https://sandbox.api.payulatam.com/reports-api/ PayU.reportsUrl = “https://api.payulatam.com/reports-api/”;   // URL for test: https://sandbox.api.payulatam.com/payments-api/4.0/service.cgi Environment::setPaymentsCustomUrl(“https://api.payulatam.com/payments-api/4.0/service.cgi”); // URL for test: https://sandbox.api.payulatam.com/reports-api/4.0/service.cgi Environment::setReportsCustomUrl(“https://api.payulatam.com/reports-api/4.0/service.cgi”);    If you need to understand the concepts and read further considerations of Voids and Refunds, refer to this article.\nConsiderations per country Before using Voids and Refunds API, take into account the following considerations.\nArgentina  The maximum time to send a void is 14 days. If no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 365 days and 180 days for partial refunds. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in maximum 30 working days.  Brazil  The maximum time to send a void is seven (7) days. If no void or capture is sent after this time, the transaction is cancelled. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days for transactions processed in Redecard and 120 for transactions processed in Cielo. When a refund is approved, the payer gets the money back in maximum 15 working days.  Chile  Due to network restrictions, void can be authorized within the first three hours after the authorization. If the void is not accepted or no capture is sent after seven (7) days, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 90 days. Refunds with decimals are not supported. When a refund is approved, the payer gets the money back in 8 to 20 working days. Partial refunds for transactions using installments are received online but PayU processes them manually due to acquirer restrictions. The minimum amount to send a refund is 10 CLP.  Colombia  Voids are not supported. The minimum time to send a refund is 10 minutes after the approval and the maximum is two years. Minimum amount to send the Refund 300 COP. If refund is not sent the same day in which the transaction was captured (before 9 pm UTC-5) the refund goes immediately to a manual process without sending the online attempt. When a refund is approved, the payer gets the money back in maximum 30 working days. Partial refunds are not available for international credit cards.  Mexico  The minimum time to send a void is 10 minutes after the authorization and the maximum is 30 days. If the transaction was made with American Express, the maximum time is seven (7) days.\nIf no void or capture is sent after this time, the transaction is auto-voided. The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. If the transaction was made processed by Bancomer, the maximum time is 45 days. When a refund is approved, the payer gets the money back in 30 working days. Refunds with decimals are not supported.  Peru  The maximum days to void an authorization are:  Visa: 21 days. If no void or capture is sent after this time, the transaction is auto-captured. Mastercard: 28 days. If no void or capture is sent after this time, the transaction is auto-captured. American Express: 30 days. If no void or capture is sent after this time, the transaction is auto-voided. Diners: 11 days. If no void or capture is sent after this time, the transaction is auto-voided.   The minimum time to send a refund is 10 minutes after the approval and the maximum is 180 days. Partial refunds are supported for transactions without installments. Recall that transactions with one installment are considered as without installments. Partial refunds with visanet must be sent after one day. When a refund is approved, the payer gets the money back in 15 to 25 working days. Minimum amount to send the Refund is 1 USD or 1 PEN.  Void The VOID method cancels a previously authorized transaction. Void is automatic procedure, as soon as you send the VOID request, it does not follow any approval flow, and the transaction is not charged to the card holder.\nMethod Call The following are the request and response bodies for this transaction type.\n Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Insert the ID of the order here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Insert the ID of the transaction here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Enter the void reason here. Optional parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Reason for requesting the void of the transaction\u0026#34;); TransactionResponse response = PayUPayments.doVoid(parameters); // Response if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Insert the ID of the order here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Insert the ID of the transaction here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // Enter the void reason here. Optional \tPayUParameters::REASON =\u0026gt; \u0026#34;Reason for requesting the void of the transaction\u0026#34;, ); $response = PayUPayments::doVoid($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Refunds A refund is requested when a shop decides to voluntarily return the money spent by the shopper due to dissatisfaction reasons or when the shop does not have enough stock of the product purchased. The REFUND method request the reversal of a previously captured transaction.\nRefunds can be requested by the total or the partial amount (PARTIAL REFUND).\nMethod Call The following are the request and response bodies for this transaction type.\nRefund  Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Insert the ID of the order here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Insert the ID of the transaction here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // Enter the refund reason here parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Reason for requesting the refund of the transaction\u0026#34;); TransactionResponse response = PayUPayments.doRefund(parameters); // Response if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Insert the ID of the order here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Insert the ID of the transaction here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // Enter the refund reason here \tPayUParameters::REASON =\u0026gt; \u0026#34;Reason for requesting the refund of the transaction\u0026#34;, ); $response = PayUPayments::doRefund($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Partial Refund  Java PHP   Map\u0026lt;String, String\u0026gt; parameters = new HashMap\u0026lt;String, String\u0026gt;(); // Insert the ID of the order here. parameters.put(PayU.PARAMETERS.ORDER_ID, \u0026#34;40049920\u0026#34;); // Insert the ID of the transaction here. parameters.put(PayU.PARAMETERS.TRANSACTION_ID, \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;); // -- Partial Refund Value -- // Enter the partial refund value here. parameters.put(PayU.PARAMETERS.VALUE, \u0026#34;950\u0026#34;); // Enter the currency here. parameters.put(PayU.PARAMETERS.CURRENCY, \u0026#34;\u0026#34;+Currency.CLP.name()); // Enter the partial refund reason here parameters.put(PayU.PARAMETERS.REASON, \u0026#34;Reason for requesting the partial refund of the transaction\u0026#34;); TransactionResponse response = PayUPayments.doPartialRefund(parameters); // Response if (response != null){ response.getOrderId(); response.getState(); response.getPendingReason(); response.getResponseMessage(); }   $parameters = array( // Insert the ID of the order here. \tPayUParameters::ORDER_ID =\u0026gt; \u0026#34;40049920\u0026#34;, // Insert the ID of the transaction here. \tPayUParameters::TRANSACTION_ID =\u0026gt; \u0026#34;96535b36-99db-4c66-bd87-6ad5c59b25a8\u0026#34;, // -- Partial Refund Value --  // Enter the partial refund value here.  PayUParameters::VALUE =\u0026gt; \u0026#34;950\u0026#34;, // Enter the currency here.  PayUParameters::CURRENCY =\u0026gt; \u0026#34;CLP\u0026#34;, // Enter the partial refund reason here \tPayUParameters::REASON =\u0026gt; \u0026#34;Reason for requesting the partial refund of the transaction\u0026#34;, ); $response = PayUPayments::doPartialRefund($parameters); if ($response) { $response-\u0026gt;transactionResponse-\u0026gt;orderId; $response-\u0026gt;transactionResponse-\u0026gt;state; $response-\u0026gt;transactionResponse-\u0026gt;pendingReason; $response-\u0026gt;transactionResponse-\u0026gt;responseMessage; }    Query the refund status As mentioned before, refund request follows an approval in flow in which, PayU take 1 to 3 days to process the request and approves or rejects the request. If you want to know the status of the refund, you have two options:\nCheck status through the PayU Module  Log into you PayU module account. In the left panel, expand the Transactions menu and select Sales Report option.  Use the Filter my sales field to find the order using the order and the transaction id.  The Status column show whether the refund has been approved or rejected; if the refund has not been approved, this column shows that the refund has been requested.  Check status using queries You can consult the state of the refund by using the Queries SDK. In the response of the query, you need to send the order id.\nWhen query an order, the system returns the last transaction associated with the Order.\nThere are three possible status in the response of your request:\n Unresolved request: if the request has not been resolved, the order found in the query appears in CAPTURED status, the first transaction type is AUTHORIZATION_AND_CAPTURE and the first transaction status is APPROVED. Approved: if the refund request is approved by a PayU’s customer service agent, the order found in the query appears in REFUNDED status, the first transaction type is REFUND and the first transaction status is APPROVED. Declined: if the refund request is declined by a PayU’s customer service agent, the order found in the query appears in CAPTURED status, the first transaction type is REFUND and the first transaction status is DECLINED.  ","excerpt":"To integrate with Voids and Refunds SDK, target your request to the following URLs according to your …","ref":"/en/docs/integrations/sdk-integration/refundssdk.html","title":"Voids and Refunds SDK"},{"body":"Refer to the current version of our developers page.\n","excerpt":"Refer to the current version of our developers page.","ref":"/en/deprecated.html","title":"Deprecated"},{"body":"Consulta nuestra versión actual de la página de developers.\n","excerpt":"Consulta nuestra versión actual de la página de developers.","ref":"/es/deprecated.html","title":"Descontinuados"},{"body":"We provide a set of services and tools to let you receive payments, download reports, manage disputes and more.\nIdeally suited for\n All types and size of payments Products and services across all categories Businesses of any size or stage  Benefits of online payments   Increase your sales Expand the scope of your business by offering various payment methods.\n  Accept payments faster See an overview of all your transactions in our system. Consolidate and monitor your sales in the PayU module.\n  Multi-acquisition We are integrated with all processing networks, which can increase your approval rate by up to 5%.\n  How does PayU work? To understand how PayU processes payments, it is important to understand two main concepts:\n Order: an order in PayU is defined as the set of movements related to an online payment. Transaction: any movement related to an order such as charges, retries, refunds, disputes, etc.  For example, a customer purchases a product using your web page, the customer pays using their credit card and the payment is approved and accepted by the customer\u0026rsquo;s bank; Then, the shop finds that they don\u0026rsquo;t have enough stock of this product and request a refund to PayU. PayU, approves the refund and the money is returned to the customer. In this case, the order was the purchase of the product, and this order has many transactions such as, the accept of the payment, the charge, the refund approval.\nHow to start using PayU? When you want to integrate your commerce with PayU services and tools, you need to consider the following steps.\n1. Create a PayU account Create your PayU account free of charge. Contact us to support you through the process.\n2. Select how you want to integrate with PayU services and tools. According to your business needs, select how to integrate your shop with the PayU services and tools.\n3. Perform tests Verify that your integration works as expected.\n4. Deploy to production After you perform all the system testing and you have verified that everything is working properly, you can change to the production server, where the actual transactions are processed.\nServices PayU provides the following services.\nPayments Lets your shop process different transaction types with multiple payment methods.\n Queries Lets you check the status of the transactions generated from placed orders.\n Tokenization Lets you safely store the data of your customers' credit cards through the creation of a token.\n Promotions and MSI Lets you consult the valid promotions, along with their associate costs, characteristics, and further relevant information available for your customers.\nApplies only to Argentina and Mexico.\n Voids and Refunds Lets you request the cancellation and refund of the transactions paid with credit cards.\n Payouts Lets you create multiple payments to third-party people using the funds in your PayU account.\n   PayU Tools PayU provides the following tools to give you more options to sell and receive payments online.\nPayment request Receive payments even if you don't have a web page.\n Shopping cart plugins Integrate your shopping cart solution with any of our available plugins.\n PayU module Manage your PayU account, generate sales reports, query your account balance or transfer money to your bank account.\n Disputes Manage the dispute processes generated in your PayU account.\n Payment coupons Send payment coupons to your customers, they can pay in the cash branches available.\n Anti-fraud Guarantee PayU offers the Anti-fraud Guarantee that protects merchants against the lost due to fraud transactions.\n   Checkout integration PayU Checkout is an integration that allows you to collect through a PayU web form from any device in a simple, fast and secure way.  PayU manages the payment system Easier integration, equally secure Since PayU manages the payment platform, it is easier to get PCI DSS certification  Learn more about WebCheckout integration  API or SDK integration Through API or SDK integrations, you can receive payments securely from anywhere you like, on your website or mobile app.  Design your checkout and manage the payment system of your website. Access to additional services such as Tokenization.  Learn more about API integration Learn more about SDK integration     -- What\u0026rsquo;s next? ","excerpt":"We provide a set of services and tools to let you receive payments, download reports, manage …","ref":"/en/docs.html","title":"Online Payments"},{"body":"The PayU module is the system where you can securely manage your account. In this module, you can change your password, get sales reports, find the data needed to integrate your website with our platform, use tools to receive payments, and transfer money to your bank account. PayU module is ideal for businesses that need to:\n Keep control of their stocks and sales performed through PayU. Be updated with the information of the financial movements of their account. Make requests to the support team about issues in their account.  Note Click here to consult the documentation of the Administrative Module, also known as secure.  To access the PayU module, go to www.payu.com, at the top right corner, you find the option to log in. For merchants in Colombia, this option is called PayU Login.\nAlternatively, you can go directly to https://merchants.payulatam.com/.\nNote You don\u0026rsquo;t have a user yet? Learn how to create one here.  What you can do using the PayU Module PayU module allows you to perform the following operations:\n See the available funds in your PayU account and transfer them to your bank account. Consult the movements of your accounts, statements, and reports. View the status of your sales Find the authentication credentials to integrate with your sales platform: API Key, API Login, and merchant ID. Update your bank details. Configure your company’s logo to appear on the Web Checkout (payment gateway). Set the URLs of your confirmation page and answer page (if you have an API integration or Web checkout).  PayU module concepts The PayU Module allows a user to manage the merchant and its related accounts. The complexity of your PayU module depends on your size. Let\u0026rsquo;s explain this using the following concepts.\n Merchant: the merchant is the store that offers products or services. PayU defines the merchant as the legal person who hires the PayU service. If your store is legally constituted in two countries (two legal entities), each legal entity must be created as a merchant.\nFor example, Shop ABC has branches in Mexico and Colombia, but the shop has constituted one company in each country, when Shop ABC hires the PayU services, PayU creates two different merchants.  Note Each merchant in PayU has a unique Merchant ID.   Account: an account in PayU represents a processing country, a business line, or a hired PayU feature of a given merchant. If your shop is legally constituted in a country and sells products in many countries, you have a single merchant (your shop) in which you find an account per each country.\nFor example, XYZ systems is a company legally constituted in the United States who offers the services of web hosting in Colombia, Mexico, and Peru. When XYZ systems hires the PayU services, PayU creates a merchant with three accounts.\nMoreover, an account is also one of the following:  A business line: when a merchant has many different business lines in a given country. For example, a software company can offer their product as one business line and the training as another. In this case, this commerce has two accounts. A feature: if you hire two PayU features with a different pricing schema, each feature is represented in your PayU module as an account. For example, a shop has one price to process with credit cards and one different when they process with cash payments.   User: a user is a person who has a profile to manage or consult the information of an account.\nA profile is a set of permissions to access an account. A user can have one or multiple profiles, this means that a user can access multiple accounts and multiple merchants.  The following graphics show the relation between the concepts above.\nMulti merchant shop The shop Shop ABC has branches in Mexico and Colombia, both are legally constituted as Shop ABC Mexico and Shop ABC Colombia, this is the relation between the previous concepts for this example:\n  The PayU module for Shop ABC has two merchants: Shop ABC Mexico and Shop ABC Colombia, each merchant has an account as they process only in the country where they are constituted.\n  Shop ABC has four users; User 2 and User 3 can access both accounts, meanwhile User 1 can only access the Colombian account and User 4 to the Mexican account.\n  Note In this case, each merchant may have multiple accounts, if required.  Single merchant shop with multiple accounts XYZ systems is a company legally constituted in the United States who offers the services of web hosting in Colombia, Mexico, and Peru; in addition, XYZ systems has two business lines in Colombia: web hosting and training. This is the relation between the previous concepts for this example:\n  The PayU module for XYZ systems has a single merchant as they are legally constituted in the United States. As XYZ systems processes in three countries, this merchant has four accounts; two for Colombia (one per each business line), one for Mexico and one for Peru.\n  XYZ systems has four users; User 3 can access all the accounts, meanwhile, the other users can access their assigned country.\n  Note Merchants can be outside of our processing countries. Nevertheless, they must have an intermediary bank account in each country they want to process.  Single merchants with single accounts This is the most common case when using the PayU module. A shop is legally constituted in a country where it offers its products or services, this is the relation between the previous concepts for this example:\n The PayU module for this shop has a single account and a single merchant, where all its users can access according to the profile they have.  ","excerpt":"The PayU module is the system where you can securely manage your account. In this module, you can …","ref":"/en/payu-module-documentation.html","title":"PayU Module guide"},{"body":"Proveemos un conjunto de servicios y herramientas que te permiten recibir pagos en línea, descargar reportes, administrar disputas y más.\nIdeal para negocios y personas:\n De todos los tamaños y distintas actividades económicas. Que ofrecen productos y servicios en todas las categorías. Que están en etapa de emprendimiento o llevan años en el mercado.  Beneficios de los pagos en línea   Aumenta tus ventas Expande el alcance de tu negocio ofreciendo varios métodos de pago.\n  Acepta pagos más rápido Mira un resumen de todas las transacciones en nuestro sistema. Consolida y monitorea tus ventas en el Módulo PayU.\n  Multiadquirencia Estamos integrados con todas las redes procesadoras, lo cual puede aumentar hasta 5% tu tasa de aprobación.\n  ¿Cómo funciona PayU? Para entender cómo PayU procesa pagos, es importante entender dos conceptos principales:\n Orden: una orden en PayU es definida como un conjunto de movimientos relacionados a un pago en línea. Transacción: cualquier movimiento relacionado con una orden como cobros, reintentos, reembolsos, disputas, etc.  Por ejemplo, un cliente compra un producto utilizando tu página web, el cliente paga utilizando su tarjeta de crédito y el pago es aprobado y aceptado por su banco; luego, la tienda se da cuenta que no tiene suficiente inventario del producto y solicita un reembolso en PayU. PayU aprueba el reembolso y el dinero es regresado al cliente. En este caso, la orden fue la compra del producto y esta orden tiene muchas transacciones como la aceptación del pago, el cobro y el reembolso.\n¿Cómo empezar a utiliza PayU? Cuando quieres integrar tu negocio con los servicios y herramientas de PayU, necesitas realizar los siguientes pasos.\n1. Crea una cuenta de PayU. Crea tu cuenta de PayU gratis. Contáctanos para guiarte en el proceso.\n2. Selecciona cómo quieres integrarte con los servicios y herramientas de PayU. De acuerdo con las necesidades de tu negocio, selecciona cómo integrar tu tienda con los servicios y herramientas de PayU.\n3. Realiza las pruebas Verifica que tu integración funcione como lo esperas.\n4. Despliega a producción Luego de que realices todas las pruebas del sistema y hayas verificado que todo está funcionado correctamente, puedes moverte al servidor de producción, donde se procesan las transacciones reales.\nServicios PayU ofrece los siguientes servicios.\nPagos Permite a tu tienda procesar diferentes tipos de transacción con multiples medios de pago.\n Consultar Te permite verificar el estado de las transacciones generadas por las órdenes realizadas.\n Tokenización Te permite guardar de forma segura la información de las tarjetas de crédito de tus clientes a través de la creación de un token.\n Promociones y MSI Te permite las promociones vigentes junto con su costo asociado, características e información adicional disponible para tu cliente.\nAplica solo para Argentina y México.\n Anulaciones y Reembolsos Te permite solicitar la cancelación y reembolso de las transacciones pagadas con tarjeta de crédito.\n Payouts Te permite crear múltiples pagos a terceros utilizando los fondos de tu cuenta de PayU.\n   Herramientas de PayU PayU ofrece las siguientes herramientas para darte más opciones para vender y recibir pagos en línea.\nSolicitud de pago Recibe pagos incluso si no tienes una página web.\n Plugins para carritos de compra Integra tu solución de carrito de compra con cualquiera de nuestros plugins que tenemos disponibles.\n Módulo PayU Administra tu cuenta PayU, genera reportes de ventas, consulta el balance de tu cuenta o transfiere dinero a tu cuenta bancaria.\n Disputas Administra el proceso de disputas generadas en tu cuenta PayU.\n Cupones de pago Envía cupones de pago a tus clientes, ellos pueden pagar en cualquiera de los puntos de pago en efectivo disponibles.\n Garantía Antifraude PayU ofrece la Garantía Antifraude que protege a los comercios contra las pérdidas generadas por transacciones fraudulentas.\n   ¿Qué sigue? ","excerpt":"Proveemos un conjunto de servicios y herramientas que te permiten recibir pagos en línea, descargar …","ref":"/es/docs.html","title":"Pagos en línea"},{"body":"El módulo PayU es el sistema donde puedes manejar tu cuenta de forma segura. En este módulo, puedes cambiar tu contraseña, obtener reportes de ventas, encontrar la información necesaria para integrar tu página web con nuestra plataforma, utilizar herramientas pra recibir pagos y transferir dinero a tu cuenta bancaria. El módulo PayU es ideal para negocios que necesitan:\n Tener control de su inventario y conocer las ventas aprobadas a través de PayU. Tener la información más actualizada sobre los movimientos financieros en su cuenta. Realizar cualquier solicitud de soporte o ayuda sobre su cuenta.  Nota Haz clic aquí para consultar la documentación del Módulo Administrativo, también conocido como secure.  Para acceder al módulo PayU, ingresa a www.payu.com, at la esquina superior derecha, encontrarás la opción para iniciar sesión. Para comercios en Colombia, esta opción se llama PayU Login.\nO si lo prefieres, puedes ir directamente a https://merchants.payulatam.com/.\nNota ¿Aún no tienes usuario? Aprende a crear uno aquí.  ¿Qué puedes hacer utilizando el Módulo PayU? El Módulo PayU te permite realizar las siguientes operaciones:\n Ver el dinero disponible en tu cuenta PayU y realizar la transferencia a tu cuenta bancaria. Consultar los movimientos de tus cuentas, generar extractos y reportes. Consultar el estado de las ventas realizadas. Encontrar las credenciales de autenticación para realizar las integraciones: API Key, API Login y merchant ID (Id del Comercio). Actualizar tus datos bancarios. Configurar el logo de tu empresa para que aparezca en el Web Checkout (pasarela de pagos). Configurar las URLs de tu página de confirmación y página de respuesta (si tienes una integración por API o Web Checkout).  Conceptos del Módulo PayU El Módulo PayU le permite a un usuario administrar el comercio y sus cuentas relacionadas. La complejidad de tu Módulo PayU depende de tu tamaño. Vamos a explicar esto utilizando los siguientes conceptos.\n Comercio (Merchant): el comercio es la tienda que ofrece productos o servicios. PayU define el comercio como la persona legal que contrata los servicios de PayU. Si tu tienda está legalmente constituida en dos paises (dos entidades legales), cada entidad debe ser creada como un comercio.\nPor ejemplo, Tienda ABC tiene sucursales en México y Colombia, pero la tienda ha constituido una compañía en cada país, cuando Tienda ABC contrata los servicios de PayU, PayU crea dos comercios diferentes.  Nota Cada comercio en PayU tiene un único Merchant ID.   Cuenta (Cuenta): una cuenta en PayU representa un país de procesamiento, una línea de negocio o una funcionalidad contratada de un comercio dado. Si tu tienda está legalmente constituida en un país y vende productos en varios, tienes un único comercio een el cual encuentras una cuenta por cada país.\nPor ejemplo, XYZ sistemas es una compañía legalmente constituida en los Estado Unidos que ofrece servicios de hosting en Colombia, México y Perú. Cuando XYZ sistemas contrata los servicios de PayU, PayU crea un comercio con tres cuentas.\nAdicionalmente, una cuenta puede ser una de las siguientes:  Una línea de negocio: cuando un comercio ofrece varias líneas de negocio en un país específico. Por ejemplo, una compañía puede ofrecer su producto como una línea de negocio y la capacitación como otra. En este caso, este comercio tiene dos cuentas. Una funcionalidad: si contratas dos funcionalidades de PayU con diferente esquema de precios, cada funcionalidad es representada en tu Módulo PayU como una cuenta. Por ejemplo, una tienda tiene un precio por procesar con tarjetas de crédito y otro diferente para pagos en efectivo.   Usuario (User): un usuario es la persona que tiene un perfil para administrar o consultar la información de una cuenta.\nUn perfil es un conjunto de permisos para acceder a una cuenta. Un usuario puede tener uno o más perfiles, esto significa que un usuario puede acceder a múltiples cuentas y múltiples comercios.  Las siguientes gráficas muestran la relación entre estos conceptos.\nTienda multicomercio La tienda Tienda ABC tiene sucursales en México y Colombia, ambas legalmente constituidas como Tienda ABC México y Tienda ABC Colombia, esta es la relación entre los conceptos anteriores para este ejemplo:\n  El módulo PayU de Tienda ABC tiene dos comercios: Tienda ABC México y Tienda ABC Colombia, cada comercio tiene una cuenta ya que procesan únicamente en l país donde están constituidos.\n  Tienda ABC tiene cuatro usuarios; Usuario 2 y Usuario 3 pueden acceder a ambas cuentas, mientras que Usuario 1 puede acceder a la cuenta colombiana y Usuario 4 a la cuenta mexicana.\n  Nota En este caso, cada comercio puede tener múltiples cuentas si lo requiere.  Tienda de comercio único con múltiples cuentas XYZ sistemas es una compañía legalmente constituida en Estados Unidos que ofrece servicios de hosting web en Colombia, México y Perú; adicionalmente, XYZ sistemas tiene dos líneas de negocio en Colombia: hosting web y entrenamiento. Esta es la relación entre los conceptos anteriores para este ejemplo:\n  El módulo PayU para XYZ sistemas tiene un único comercio ya que están constituidos legalmente en Estados Unidos. Como XYZ sistemas procesa en tres paises, este comercio cuenta con cuatro cuentas; dos para Colombia (una por cada línea de negocio), una para México y una para Perú.\n  XYZ sistemas tiene cuatro usuarios; Usuario 3 puede acceder a todas las cuentas, mientras que los demás usuarios pueden acceder a su país asignado.\n  Nota Los comercios pueden estar fuera de nuestros paises de procesamiento. Sin embargo, requieren tener una cuenta bancaria intermediaria en cada país donde quiera procesar.  Comercios únicos con cuenta única Este es el caso más común cuando utilizas el módulo PayU. Una tienda está legalmente constituida en un país donde ofrece sus productos o servicios, esta es la relación entre los conceptos anteriores para este ejemplo:\n El módulo PayU para esta tienda tiene una única cuenta y un único comercio, donde todos sus usuarios pueden acceder de acuerdo con el perfil que tengan.  ","excerpt":"El módulo PayU es el sistema donde puedes manejar tu cuenta de forma segura. En este módulo, puedes …","ref":"/es/payu-module-documentation.html","title":"Módulo PayU"},{"body":"","excerpt":"","ref":"/en/index.json","title":""},{"body":"","excerpt":"","ref":"/es/index.json","title":""},{"body":"","excerpt":"","ref":"/es/search.html","title":"Resultados de la búsqueda"},{"body":"","excerpt":"","ref":"/en/search.html","title":"Search Results"},{"body":"","excerpt":"","ref":"/en/","title":"TechOS"},{"body":"","excerpt":"","ref":"/es/","title":"TechOS"}]